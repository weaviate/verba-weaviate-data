{"text": "\nLanguage models have revolutionized the way we interact with and utilize artificial intelligence. These powerful tools can be prompted to perform a wide array of tasks, from creative writing to answering complex questions, and even assisting with decision making. However, the quality and effectiveness of the generated output is heavily dependent on the particular language in the prompt to the language model.\n\nCrafting the perfect prompt, also known as Prompt Engineering, is generally more of an art than a science. AI developers typically have unique styles of prompting large language models (LLMs) through trial-and-error experiences. With the inception of DSPy, prompting is returning to its roots in Machine Learning, allowing us to better control generative AI systems.\n\nTo achieve this, DSPy introduces two new concepts: a programming model and a collection of optimizers or compilers. The DSPy programming model lets you define each component that makes a language model request, such as an initial task description and input and output fields. You can then connect these components to build complex pipelines. For example, if you\u2019d like to convert questions into blog posts, the simplest pipeline consists of two components: 1. Question to Blog Outline, and 2. Outline to Paragraphs. The `Question2BlogOutline` takes in two inputs, question and contexts, and outputs a comma-separated list of topics. The `Topic2Paragraph` takes the topic and contexts as input, and outputs the paragraph. We then piece these components (or signatures) together in the program (see this [notebook](https://github.com/weaviate/recipes/blob/main/integrations/dspy/2.Writing-Blog-Posts-with-DSPy.ipynb) for the full example). This lets you interface this program with the DSPy compilers.\n\nCompilers enter the picture to give your LLMs \u201cthe prompts they deserve.\u201d This blog post will help you gain a deep understanding of the current state of Prompt Engineering and how DSPy\u2019s BootstrapFewShot, COPRO, and MIPRO optimizers can help you.\n\nYou can follow along with the demo notebook [here](https://github.com/weaviate/recipes/blob/main/integrations/dspy/5.Advanced-Optimizers.ipynb)! The notebook uses tools from Weaviate, Cohere, OpenAI, Arize, and Weights & Biases.\n\n## Examples and Instructions\nThe role of optimization in machine learning systems has been dramatically transformed with the introduction of LLMs. LLMs no longer **require** gradient descent training to increase their performance for a specific task. Instead, we can tweak the language of the prompt which is presented to the LLM. There are 2 main aspects of the prompt to tweak, instructions and examples.\n\nInstructions refer to the task description typically placed at the beginning of the prompt. Different ways of phrasing the task will result in better or worse performance for a given task and/or language model. For example, the prompt \"Write a paragraph to answer this question\" will perform differently than the prompt: \"Analyze the given question, identify its key components, and compose a well-structured, coherent paragraph that thoroughly addresses the main points.\u201d\n\nFurther, LLM performance may be improved by providing examples of inputs and outputs. Adding these examples to the prompt is known as few-shot learning. Few-shot learning has even had successes described in the original release of GPT-3, before the explosion of instruction tuning with Reinforcement Learning from Human Feedback (RLHF).\n\nBoth of these strategies are fairly intuitive. A detailed instruction for the task you would like completed will certainly help communicate it, and what better way to demonstrate the task then with a few examples?\n\nThis article will explain how DSPy tunes instructions and creates high-quality examples to help you get higher quality responses from LLMs.\n\n\n  RAG Prompt Example\n\n```text\nAssess the context and answer the question.\n\n---\n\nFollow the following format.\n\nContexts: May contain helpful information\nQuestion:\nAnswer:\n\n---\n\nContexts: Weaviate 1.24 is here!\nHere are the release highlights!\n\n- Named vectors: A single object can have multiple vectors. Create vectors for properties, use different vectorization models, and apply different metrics to fine tune interactions with your data.\n- HNSW and binary quantization (BQ): HNSW indexes and BQ combine for serious compression and blazing speed.\n- Simplified Docker configuration: A new Docker image that needs no configuration.\n- Backend improvements: Numerous improvements to make updates, imports, and deletions faster.\n- Python client update: General availability, support for all the latest features.\n\nQuestion: Does Weaviate support Binary Quantization?\nAnswer:\n```\n\n\n## Setting up our Pipeline for Optimization\nThis blog post will illustrate how the BootstrapFewShot, COPRO, and MIPRO optimizers work through the lens of a RAG example. BootstrapFewShot optimizes **Examples**, COPRO optimizes **Instructions**, and MIPRO optimizes both **Instructions and Examples**.\n\nThere are 4 steps before we can optimize our program:\n\n1. Connect DSPy to the LLMs we want to use, as well as external tools such as vector databases like Weaviate, and Arize Phoenix for logging and tracing.\n\n2. Define our LLM Pipeline using DSPy\u2019s Signatures and Modules.\n\n3. Wrap examples of your dataset in dspy.Example objects.\n\n4. Define your metric to judge responses.\n\n### Connect DSPy to our LLMs and Tools\nWe\u2019ll begin with configuring the language model, connecting to our Weaviate cluster, and launching Phoenix:\n\n```python\nimport dspy\nfrom dspy.retrieve.weaviate_rm import WeaviateRM\nimport weaviate\nimport phoenix as px\n\ncommand_r = dspy.Cohere(model=\"command-r\", max_tokens=4000, api_key=cohere_api_key)\ncommand_r_plus = dspy.Cohere(model=\"command-r-plus\", max_tokens=4000, api_key=cohere_api_key)\ngpt4 = dspy.OpenAI(model=\"gpt-4\", max_tokens=4000)\n\nweaviate_client = weaviate.connect_to_local()\nretriever_model = WeaviateRM(\"WeaviateBlogChunk\", weaviate_client=weaviate_client)\ndspy.settings.configure(lm=command_r, rm=retriever_model)\n\n\nphoenix_sessin = px.launch_app()\n# ... more setup omitted in blog post, please see the full notebook.\n```\n\n### Define our LLM Pipeline (RAG)\nAs a primer to the DSPy programming model if you are unfamiliar, we have a 1-layer DSPy pipeline consisting of a retrieval and a Signature to implement `GenerateAnswer`. This LLM pipeline is commonly referred to as Retrieval-Augmented Generation (RAG). The RAG pipeline is shown below:\n\n```python\nclass GenerateAnswer(dspy.Signature):\n    \"\"\"Assess the context and answer the question.\"\"\"\n    \n    context = dspy.InputField()\n    question = dspy.InputField()\n    answer = dspy.OutputField()\n\nclass RAG(dspy.Module):\n    def __init__(self, passages_per_hop=3, max_hops=2):\n        super().__init__()\n        \n        self.retrieve = dspy.Retrieve(k=passages_per_hop)\n        self.generate_answer = dspy.ChainOfThought(GenerateAnswer)\n    \n    def forward(self, question):\n        context = self.retrieve(question).passages\n        with dspy.context(lm=command_r):\n            pred = self.generate_answer(context=context, question=question).answer\n        return dspy.Prediction(context=context, answer=pred, question=question)\n```\n\n### Wrap examples of your dataset in `dspy.Example` objects\nNow that we have our DSPy program, we can work on optimizing the language model that answers the question. To optimize your program, you will need a training dataset, and a performance metric as the input. For this demo, we\u2019re using a dataset consisting of Weaviate questions and answers. In total, we have 50 `query`, and `gold_answer` pairs.\n\n```python\nimport json\n\nfile_path = './WeaviateBlogRAG-0-0-0.json'\nwith open(file_path, 'r') as file:\n    dataset = json.load(file)\n\ngold_answers = []\nqueries = []\n\nfor row in dataset:\n    gold_answers.append(row[\"gold_answer\"])\n    queries.append(row[\"query\"])\n    \ndata = []\n\nfor i in range(len(gold_answers)):\n    data.append(dspy.Example(gold_answer=gold_answers[i], question=queries[i]).with_inputs(\"question\"))\n\ntrainset, devset, testset = data[:25], data[25:35], data[35:]\n```\n\n### Define your metric to judge responses\nAdditionally, we will need the LLM metric that assesses the generated answer, as well as its alignment to the gold answer in the uncompiled RAG program. The LLM metric is:\n\n```python\nclass TypedEvaluator(dspy.Signature):\n    \"\"\"Evaluate the quality of a system's answer to a question according to a given criterion.\"\"\"\n    \n    criterion: str = dspy.InputField(desc=\"The evaluation criterion.\")\n    question: str = dspy.InputField(desc=\"The question asked to the system.\")\n    ground_truth_answer: str = dspy.InputField(desc=\"An expert written Ground Truth Answer to the question.\")\n    predicted_answer: str = dspy.InputField(desc=\"The system's answer to the question.\")\n    rating: float = dspy.OutputField(desc=\"A float rating between 1 and 5\")\n\n\ndef MetricWrapper(gold, pred, trace=None):\n\t\talignment_criterion = \"How aligned is the predicted_answer with the ground_truth?\"\n\t\treturn dspy.TypedPredictor(TypedEvaluator)(criterion=alignment_criterion,\n            question=gold.question,\n\t\t\tground_truth_answer=gold.answer,\n\t\t\tpredicted_answer=pred.answer\n        )\n```\n\n## BootstrapFewShot\nCollecting a dataset with examples of the task you want your LLM pipeline to perform can be very time consuming to annotate. If you want to add Chain-of-Thought reasoning to each LLM call, well now you have to manually write the rationales that lead to the desired outputs **for each example in your dataset.** This tutorial is only concerned with 1-layer DSPy pipelines, but imagine you have 5 or more intermediate calls in the LLM pipeline. This means you would have to write 5 or more examples for each of these components (and their respective rationales if using Chain-of-Thought).\n\nDSPy to the rescue with the `BootstrapFewShot` compiler. `BootstrapFewShot` generates traces through the program and passes the outputs into a metric to see if the example is worth keeping as an input-output example. This metric can be either boolean valued (true or false) or numeric valued paired with a `metric_threshold` to check if the example is worth keeping. In fact, the training dataset used in this demo was created using this compiler.\n\nThe following code snippet illustrates how to pass in our RAG program and our LLM_Metric into the `BootstrapFewShot` compiler. We are further looping through values of `max_bootstrapped_demos`. If set to 1, `BootstrapFewShot` will produce 1 input-output example to use in the prompt. Similarly, if set to 3, `BootstrapFewShot` will use 3 input-output examples to use in the prompt. This loop can help you get a quick sense if adding more examples will improve performance.\n\n```python\nfrom dspy.teleprompt import BootstrapFewShot\n\nfor i in range(1, 4, 1):\n    teleprompter = BootstrapFewShot(metric=MetricWrapper, max_bootstrapped_demos=i, max_rounds=1)\n    compiled_RAG = teleprompter.compile(RAG(), trainset=trainset)\n    compiled_RAG_score = evaluate(compiled_RAG, metric=MetricWrapper)\n    print(f\"\\n\\033[91mCompiled RAG Score at Demos = {i}: {compiled_RAG_score}\\n\")\n```\n\nIn [PR #849](https://github.com/stanfordnlp/dspy/pull/849), we introduced Weights & Biases logging to `BootstrapFewShot`! This can be used for monitoring runs to BootstrapFewShot in order to see the `metric_val` returned for each bootstrapped example. To motivate the use case, you may have a rating on a scale of 1 to 5 for answers and you only want to use examples that achieve a 5 in your prompt. Further, you can visualize how each teacher model is doing with bootstrapping, as shown below. Please see this [notebook](https://github.com/weaviate/recipes/blob/main/integrations/weights_and_biases/wandb_logging_RAG_dspy_cohere.ipynb) for more details!\n\n![W&B Dashboard](img/RAG-optimization-dashboard.png)\n\n### Adding Random Search or Optuna to BootstrapFewShot\n`BootstrapFewShot` will stop searching for examples once it finds the `K` desired number of examples for the prompt; however, these may not be the optimal `K`.\n\nOne solution to this is to use DSPy\u2019s `BootstrapFewShotWithRandomSearch` or `BootstrapFewShotWithOptuna`. Instead of generating the desired K and stopping, these optimizers will generate `num_candidate` examples and use either random search or bayesian optimization, respectively, to find the optimal set of `K` examples to use in the prompt. \n\nRandom search and Bayesian optimization are two common techniques for hyperparameter tuning. Random search is used to explore the space of possible example combinations by randomly selecting `K` examples from the generated `num_candidate` examples and evaluating their performance, ultimately finding the optimal set of examples for the prompt. `BootstrapFewShotWithOptuna` employs Bayesian optimization, which builds a probabilistic model of the relationship between the selected examples and the prompt's performance, guiding the search for the optimal set of `K` examples by balancing exploration and exploitation based on the model's predictions.\n\nWe began by testing `max_bootstrapped_demos=2`, `num_candidate_programs=2` and then `max_bootstrapped_demos=1`, `num_candidate_programs=5`. The `max_bootstrapped_demos` parameter controls for the maximum number of examples used in the prompt (these two extensions of `BootstrapFewShot` will also check the metric of less demos, for example if `max_bootstrapped_demos=2`, it will check the performance of just using 1 example as well). The `num_candidate_programs` parameter will control how many configurations are added to the search space.\n\n```python\nfrom dspy.teleprompt import BootstrapFewShotWithRandomSearch\n\nteleprompter = BootstrapFewShotWithRandomSearch(metric=MetricWrapper,\n\t\t\t    max_bootstrapped_demos=2,\n\t\t\t\tnum_candidate_programs=2)\n\ncompiled_RAG = teleprompmter.compile(RAG(), trainset=trainset)\n```\n\nMIPRO will also use this mechanism in tandem with instruction optimization, but first we will begin by covering COPRO instruction optimization and then bring these concepts together (and introduce 1 more new concept) to understand MIPRO.\n\n### Instruction Optimization\nIn `BootstrapFewShot`, we use an LLM to generate examples of our program, for instruction optimization we similarly use an LLM to write better instructions. DSPy has two optimizers to achieve this: COPRO and MIPRO. Both of which use the `BasicGenerateInstruction` Signature as a core building block:\n\n```python\nclass BasicGenerateInstruction(Signature):\n    \"\"\"You are an instruction optimizer for large language models. I will give you a ``signature`` of fields (inputs and outputs) in English. Your task is to propose an instruction that will lead a good language model to perform the task well. Don't be afraid to be creative.\"\"\"\n\n    basic_instruction = dspy.InputField(desc=\"The initial instructions before optimization\")\n    proposed_instruction = dspy.OutputField(desc=\"The improved instructions for the language model\")\n    proposed_prefix_for_output_field = dspy.OutputField(\n        desc=\"The string at the end of the prompt, which will help the model start solving the task\",\n    )\n```\n\nCOPRO begins by generating `breadth` instruction candidates with `BasicGenerateInstruction`. These candidates are then evaluated by running each candidate instruction through the trainset with the provided metric. These results are then formatted into `GenerateInstructionGivenAttempts` to generate new instructions. This continues for `depth` rounds to produce the optimized instruction.\n\n```python\nclass GenerateInstructionGivenAttempts(dspy.Signature):\n    \"\"\"You are an instruction optimizer for large language models. I will give some task instructions I've tried, along with their corresponding validation scores. The instructions are arranged in increasing order based on their scores, where higher scores indicate better quality.\n\n    Your task is to propose a new instruction that will lead a good language model to perform the task even better. Don't be afraid to be creative.\"\"\"\n\n    attempted_instructions = dspy.InputField(format=dsp.passages2text)\n    proposed_instruction = dspy.OutputField(desc=\"The improved instructions for the language model\")\n    proposed_prefix_for_output_field = dspy.OutputField(\n        desc=\"The string at the end of the prompt, which will help the model start solving the task\",\n    )\n```\n\nHere are the results we found in the first round of running COPRO (Note: COPRO runs for `depth` rounds). The first instruction is, \u201cAssess the context and answer the question\u201d, COPRO then generates 4 additional phrasings of the task. COPRO then takes each instruction and its corresponding metric value as input to propose a new instruction.\n\n| Instruction | Metric Value |\n|-------------|--------------|\n| Assess the context and answer the question. | 4.5 |\n| Carefully read the provided context, ensuring you understand the nuances and main points. Then, answer the question posed, drawing on the relevant information from the context, and provide a clear, concise, and accurate response that directly addresses the question. If the question is open-ended or subjective, offer a well-reasoned answer supported by the information given. | 4.17 |\n| Read the provided context carefully to understand the nuances and details. Then, thoughtfully answer the question posed, ensuring your response is directly relevant to the context given. Make sure your answer is clear, concise, and logically derived from the information provided. | 4.5 |\n| Read the provided context carefully to fully understand the details and nuances. Then, answer the question based on your understanding of the context in a clear, concise, and accurate manner. Ensure your response is well-reasoned and directly addresses the question, using relevant information from the context. | 4.5 |\n| Read the provided context carefully, ensuring you fully understand the details and nuances. Then, answer the question accurately and concisely, providing any necessary explanation to support your answer. Make sure your response is directly relevant to the question asked and is based on the information from the context. If the context does not contain enough information to answer the question definitively, state this explicitly and give the best possible answer based on the available information, noting any assumptions you make. | 4.0 |\n\nThese are the 5 outputs from our LLM paraphrasing the initial instructions to write a new and better instruction. The next step of COPRO takes the 5 outputs, their resulting performance according to the metric, and writes a new instruction.\n\nOutput of `GenerateInstructionGivenAttempts`: \u201cDelve into the provided context with attention to detail to grasp the subtleties and core elements. Subsequently, craft a response to the question that is both pertinent and substantiated by the context. Your answer should be articulate, succinct, and precise, effectively capturing the essence of the question. In instances where the information at hand is insufficient to provide a definitive response, acknowledge this limitation, and present the most plausible answer, highlighting any presuppositions. Strive to ensure that your reasoning is transparent and that your answer adds value to the discussion by being insightful.\u201d This instruction achieves an improved score of 4.83!\n\nAnother interesting work on prompting is [\u201cThe Unreasonable Effectiveness of Eccentric Automatic Prompts\u201d](https://arxiv.org/abs/2402.10949) from Battle and Gollapudi. Their paper demonstrates that the highest scoring, automatically generated prompts can be remarkably different from what a human would devise. For example, the optimized prompt for Llama2-70B that expresses an affinity for Star Trek led to improved mathematical reasoning performance. This suggests that DSPy compilers should be open to exploring a wide range of prompt variations, even those that may seem counterintuitive to humans.\n\n## Example and Instruction Optimization\n[MIPRO](https://twitter.com/kristahopsalong/status/1766166198079889737) combines both example **optimization** and **instruction tuning**. By generating one or multiple examples for a candidate instruction, we get a better sense of how well it performs. Further, MIPRO introduces a dataset summarizer to bring in more information about the particular task and dataset you are optimizing for.\n\nMIPRO begins by calling `_observe_data` to generate observations about the dataset. MIPRO uses the `DatasetDescriptor` Signature to generate initial observations based on the first `view_data_batch_size examples`. Then, MIPRO iteratively updates the observations using the `DatasetDescriptorWithPriorObservations` Signature for the remaining examples in the dataset, processed in batches of size `view-data_batch_size`. The final observations are then summarized with the `ObservationSummarizer`. This is very similar to the research around [summarization chains](https://python.langchain.com/docs/modules/chains/).\n\nMIPRO then generates `num_candidates` sets of input-output examples for each predictor in the program using `BootstrapFewShot`, these are stored in the `demo_candidates` dictionary. MIPRO then uses `BasicGenerateInstructionsWithExamplesAndDataObservations` to generate new task descriptions. Dataset observations and bootstrapped examples can also be toggled on or off with the `view_data` and `view_examples` flags. If `view_data` is turned off, MIPRO will use `BasicGenerateInstructionsWithExamples`. If `view_examples` is turned off, MIPRO will use `BasicGenerateInstructionsWithDataObservations`. If both are turned off, MIPRO will just use the `BasicGenerateInstruction` Signature to generate new instructions. MIPRO will then find the optimal combination of instruction and the few-shot example candidate set with the Optuna Bayesian Optimization library. This is guided by the metric provided to MIPRO.\n\nHere is the result of the dataset summarizer on the Weaviate RAG dataset:\n```text\nThe dataset is tailored for an audience with technical expertise in Weaviate and related technologies, focusing on providing practical, step-by-step troubleshooting and optimization guidance. It is designed to train AI for technical support, offering concise, actionable instructions and contextual explanations, which could also serve educational purposes for users seeking to enhance their understanding of these technologies.\n```\n\nAfter running MIPRO, here is the final RAG prompt:\n```text\nCarefully read the provided context, which may contain technical information, links, and code snippets related to advanced technology and machine learning topics. Your task is to interpret this information and provide a clear, concise, and accurate answer to the question posed. Use domain-specific language appropriate for an audience knowledgeable in computational linguistics or AI technologies. Ensure that your answer is context-rich and directly addresses the question, citing any specific resources or guides mentioned in the context when relevant.\n```\n\nMIPRO is able to jointly leverage information about how well different prompts have performed, as well as additional information about the dataset it is being optimized for, such as questions derived from Weaviate\u2019s blog collection.\n\n## Compiling Weaviate\u2019s `generative-search` modules with DSPy\nThis article has demonstrated a few tools DSPy gives you to produce an optimized prompt for RAG! Now that you have this prompt, you can plug it into Weaviate\u2019s `generative-search` modules. Weaviate\u2019s `generative-search` module, [released in March 2023](https://www.youtube.com/watch?v=ro3ln4A9N8w), is our solution to help developers build Stateful AI.\n\nAfter we compile a DSPy program, we save the instructions with:\n```python\nCOPRO_compiled_RAG.save(\"My-RAG-Prompt.json\")\n```\n\nWe then load it into Weaviate by reading the JSON file,\n```python\ndef GenerateAnswer_instruction_from_dspy_json(file_path):\n    with open(file_path, \"r\") as file:\n        data = json.load(file)\n    return data[\"generate_answer\"][\"signature_instructions\"]\n\ntask_description = GenerateAnswer_instruction_from_dspy_json(\"RAG-with-Command-R-Example.json\")\n```\n\nWe can then query in Weaviate using the v4 Python client with:\n```\nweaviate_blogs = weaviate_client.collections.get(\"WeaviateBlogChunk\")\n\nquery = \"What is Product Quantization? Why is it helpful for Vector Databases?\"\nextended_task_description = task_description + \"\\nQuery: {query}\\nAnswer:\"\n\nresponse = weaviate_blogs.generate.near_text(\n    query = query,\n    limit = 3,\n    grouped_task=task_description\n)\n\nprint(response.generated)\n```\n\n## Beyond Prompting: Gradient Descent and DSPy\nIn this blog post, we covered how we can optimize the prompt that we feed to the language model. However, there is one additional way that we can boost our RAG performance \u2013 fine tuning with gradient descent. DSPy offers a level of abstraction around both methods of optimization. [Here](https://twitter.com/lateinteraction/status/1777082868357070972) are more thoughts on this from Omar Khattab.\n\n## Conclusion \nIn conclusion, this article presents the DSPy optimizers and advice on when to use which depending on whether you need instruction tuning, few-shot examples, gradient descent or combinations of the three. Which optimization strategy you need generally depends on the size of the LLM, for example, GPT-4 and Claude Opus are much larger models than Cohere\u2019s Command R, which is similarly much larger than Mistral or Llama2 7B. This article provides a deep dive into how each of the optimizers work, BootstrapFewShot, COPRO, and MIPRO. Hopefully this has helped your understanding of DSPy\u2019s optimizers!\n\n\nimport WhatNext from '/_includes/what-next.mdx'\n\n", "type": "Blog", "name": "Blog Dspy-optimizers", "path": "blog/2024-04-17-dspy-optimizers/index.mdx", "link": "https://weaviate.io/blog/dspy-optimizers", "timestamp": "2024-05-08 10:52:04", "reader": "JSON", "meta": {}, "chunks": []}