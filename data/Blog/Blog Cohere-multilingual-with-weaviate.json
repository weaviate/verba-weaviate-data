{"text": "\n## Intro\nNatural Language Processing (NLP) has enabled computers to understand the human language. It has shifted the way humans build and interact with computers. Large Language Models (LLMs) underpin the latest developments in NLP and have gained traction in various applications. [Cohere](https://cohere.com/) is an AI platform that provides its users with access to its LLMs. Cohere gives developers and businesses the ability to implement NLP as part of their toolkit.\n\nCohere trains their own LLMs for text generation and understanding and serves them via API. You can think of it as a managed LLM service in the cloud, with the ability to customize/finetune them on your dataset.\n\n## Cohere + Weaviate\nNow, you can combine Cohere\u2019s LLMs with a vector database like Weaviate to get the best of both worlds. More specifically, you can run complex NLP queries at a large scale of millions (and even billions) of text objects and get results back in a blink of an eye.\n\n> If you don\u2019t consider a \"blink of an eye\" as a scientific metric (note: it isn\u2019t!), you can check Weaviate\u2019s [benchmarks](/developers/weaviate/benchmarks/ann#results) on some standard datasets.\n\nBut until now, getting outputs from Cohere into Weaviate required a few extra steps. This included sending requests to Cohere to vectorize text objects, retrieving the output vectors, and then importing it  into Weaviate along with the matching objects.\n\n### Text2vec-cohere\nOver the last few weeks, we\u2019ve partnered with Cohere to create a new Weaviate module \u2013 [text2vec-cohere](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere) \u2013 it allows you to use Cohere\u2019s LLMs to run complex NLP queries straight from Weaviate.\n\nYou can learn all about [text2vec-cohere from the docs](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere).\n\nAnd there is a **lot** that you can do with Cohere, including some very new, exciting developments. **drumroll** \ud83e\udd41\n\n## Text-understanding multilingual model\nToday, Cohere announced the release of the [text-understanding multilingual model](https://txt.cohere.com/multilingual) that supports 100+ languages.\n\nThe multilingual model is perfect for search, content aggregation and recommendation, and zero-shot cross-lingual text classification.\n\nThere are so many great use cases:\nSearch through a multilingual forum for answers in one language, then use browser translation to output the content in the same language.\nSearch through your resources, documentation, etc., in the readers\u2019 native language.\nEnable product search in the language(s) that your users are comfortable with.\n\n## Multilingual model quick test\nAfter learning from our friends at Cohere that the model can handle over a hundred human languages, I was eager to test it out and see what I could achieve by running a few queries in different languages.\n\nSo, I\u2019ve created a small dataset with a few objects with descriptions of animals (squirrels, horses, meerkats, etc.), musical instruments, and vehicles. The descriptions for half of the objects are in English, but the remaining objects are written in other languages like German, Italian, Swedish, Spanish etc.\n\nThen, I took 15 minutes to create a small [Python project](https://github.com/weaviate-tutorials/cohere-wiki-multilingual/). It includes two Jupyter Notebooks to [import data](https://github.com/weaviate-tutorials/cohere-wiki-multilingual/blob/main/wiki-large-setup.ipynb) and [query articles](https://github.com/weaviate-tutorials/cohere-wiki-multilingual/blob/main/wiki-large-query.ipynb).\n\nTo follow along, you should:\n1. set up a new Weaviate instance in [WCS](https://console.weaviate.cloud)\n1. request a [Cohere API key](https://dashboard.cohere.com/api-keys)\n\nThen, the notebooks show you how to:\n1. configure data schema to use the Cohere `embed-multilingual-v2.0` model\n1. and import a small (handcrafted) dataset.\n\n### Query for musical instruments\nOnce my setup was ready, I was able to run queries like \"What musical instruments do we have?\" in Polish\n\n```bash\npython query.py \"jakie mamy instrumenty muzyczne?\"\n```\n\nOr a shorter query in Hungarian \u2013 \"musical instruments?\"\n\n```bash\npython query.py \"zenei hangszerek?\"\n```\n\nBoth queries returned the following objects. Note the guitar content is in Italian, while the Drum content is in English.\n\n```json\n[{\n    \"enName\":\"Guitar\",\n    \"name\":\"Chitarra\",\n    \"content\": \"La chitarra \u00e8 uno strumento musicale cordofono a pizzico, che pu\u00f2 essere suonato con i polpastrelli, con le unghie o con un plettro.\",\n    \"_additional\":{\n        \"certainty\":0.7987224459648132,\n        \"distance\":0.4025551\n    }\n},\n{\n    \"enName\":\"Drum\",\n    \"name\":\"Drum\",\n    \"content\": \"The drum is a member of the percussion group of musical instruments. In the Hornbostel-Sachs classification system, it is a membranophone...\",\n    \"_additional\":{\n        \"certainty\":0.7355101704597473,\n        \"distance\":0.52897966\n    }\n}]\n```\n\n### Query for small animals\nNext, I tried to query for \"small animals\" in Japanese.\n\n```bash\npython query.py \"\u5c0f\u52d5\u7269\"\n```\n\nWhich returned three objects about meerkats (each in a different language) and one about squirrels.\n\n```json\n[{\n    \"enName\": \"Meerkat\",\n    \"name\": \"Erdm\u00e4nnchen\",\n    \"content\": \"Das Erdm\u00e4nnchen (Suricata suricatta), auch Surikate oder veraltet Scharrtier genannt, ist eine S\u00e4ugetierart aus der Familie der Mangusten (Herpestidae).\",\n    \"_additional\": { \"certainty\": 0.7455021142959595, \"distance\": 0.5089958 }\n},{\n    \"enName\": \"Meerkat\",\n    \"name\": \"Surikat\",\n    \"content\": \"Surikat (Suricata suricatta) \u00e4r ett litet d\u00e4ggdjur som lever i sydv\u00e4stra Afrika, i Kalahari\u00f6knen i Botswana, i Namib\u00f6knen i Namibia och Angola samt i Sydafrika.\",\n    \"_additional\": {\"certainty\": 0.7168638408184052, \"distance\": 0.5662723}\n},{\n    \"enName\": \"Meerkat\",\n    \"name\": \"Suricata\",\n    \"content\": \"La suricata (Suricata suricatta) es una especie de mam\u00edfero carn\u00edvoro de la familia Herpestidae que habita la regi\u00f3n del desierto de Kalahari y el Namib en \u00c1frica. La suricata es una de las mangostas m\u00e1s peque\u00f1as.\",\n    \"_additional\": { \"certainty\": 0.7151028215885162, \"distance\": 0.56979436 }\n},{\n    \"enName\": \"Squirrel\",\n    \"name\": \"H\u00f6rnchen\",\n    \"content\": \"Die H\u00f6rnchen (Sciuridae) sind eine Familie aus der Ordnung der Nagetiere (Rodentia). Unter anderem geh\u00f6ren das Eurasische Eichh\u00f6rnchen, das Streifenh\u00f6rnchen und das europ\u00e4ische Ziesel zu dieser Familie.\",\n    \"_additional\": { \"certainty\": 0.7129454612731934, \"distance\": 0.5741091 }\n}]\n```\n\n### Test conclusion\nEven though this was just a small test, the results I received back are great. I never thought it would be this easy to search across documents that are written in different languages.\n\nOver the Christmas break, I will take some time to build a larger app to more thoroughly test the Weaviate + Cohere combo. Something that will come with more data and test for more complex queries and scenarios. \ud83d\ude09\n\nIf you have interesting data project ideas, give me a shout on [Weaviate community Slack](https://weaviate.io/slack) or via [Twitter @sebawita](https://twitter.com/sebawita).\n\n\n### Project in GitHub\n\nYou can find the test project on [GitHub](https://github.com/weaviate-tutorials/cohere-wiki-multilingual/tree/main). Follow the readme instructions on how to set it up for yourself.\n\nProbably the most interesting part is the [query code](https://github.com/weaviate-tutorials/cohere-wiki-multilingual/blob/main/wiki-large-query.ipynb), which is made of 3 parts:\n\n* `nearText` \u2013 parameters where we pass in the query from the user\n* `properties` \u2013 a list of properties we want back from the database\n* `client.query` \u2013 it takes the above two, and runs a semantic search. Note, how it doesn\u2019t even mention the Cohere model, as all of that is done through configuration.\n\n```python\ndef semantic_serch(query):\n   client = _setup.connect_to_weaviate()\n\n   nearText = {\n       \"concepts\": [query],\n       \"distance\": 0.7,\n   }\n\n   properties = [\n       \"name\", \"content\", \"enName\", \"link\", \"lang\",\n       \"_additional {certainty distance}\"\n   ]\n\n   result = (\n       client.query\n       .get(\"Document\", properties)\n       .with_near_text(nearText)\n       .with_limit(5)\n       .do()\n   )\n\n   return result['data']['Get']['Document']\n```\n## How does this work\nIt is also important to understand how Weaviate and Cohere communicate with each other.\n\nWeaviate fully automates communication with Cohere\u2019s AI Platform. There are two key scenarios when Weaviate will communicate with Cohere:\n\n* Data import and modifications \u2013 to vectorize data objects\n* Query time \u2013 to vectorize the query\n\n### Data import + modifications\nWhen you import (or update) data into Weaviate, Weaviate will:\n1. Receive the data object\n1. Send the relevant properties for vectorization to Cohere\n1. Store the data object and index the vector in Weaviate\n\n![Weaviate Import with Cohere](./img/cohere-import.png)\n\nThis allows Weaviate to efficiently store and query your data.\n\n### Query\nWhen you query Weaviate, Weaviate will:\n1. Receive the query\n1. Send the query to Cohere to vectorize it\n1. Use the returned query vector and search in the vector index\n1. Return matched objects\n\n![Weaviate Query with Cohere](./img/cohere-query.png)\n\nThis shows a clear separation of roles:\n* `Cohere` \u2013 takes care of vectorizing the data, with the power of Large Language Models\n* `Weaviate` \u2013 orchestrates the process, stores the data and vectors, and provides production-ready performance.\n\n### Full CRUD support\nIt is worth knowing that Weaviate allows you to continuously modify the data whilst the database remains operational at all times. Exactly what you would expect from any database.\n\nEvery time you add new or modify existing objects, Weaviate will obtain new vectors from Cohere and store them with their objects. And if you delete any objects, then Weaviate removes their corresponding vectors from the index.\n\nThe best thing is, from the query or data modifications point of view, you don\u2019t need to do anything about the Weaviate \u21d4 Cohere coordination.\n\n## What next\nCheck out the [text2vec-cohere](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere) to learn more about the new module.\n\n\n", "type": "Blog", "name": "Blog Cohere-multilingual-with-weaviate", "path": "blog/2022-12-12-cohere-multilingual-with-weaviate/index.mdx", "link": "https://weaviate.io/blog/cohere-multilingual-with-weaviate", "timestamp": "2024-05-08 10:51:24", "reader": "JSON", "meta": {}, "chunks": []}