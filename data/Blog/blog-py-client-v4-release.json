{"text": "\n\nWeaviate Python Client v4 Release\n\nThe `v4` Weaviate Python client library has landed in GA (general availability) form. The `v4` client has a brand new API that is more powerful and easier to use \ud83c\udf89\ud83e\udd73. This is a big update, as reflected by the bump in the major version number.\n\nIt still includes the existing (`v3`) API for now, so you can continue to use it without any changes. But we do note and the `v3` API is considered deprecated, and will be removed in the future (estimated ~6 months).\n\nIf you're keen to get on with it, just `pip` install it with:\n\n```bash\npip install -U weaviate-client\n```\n\nBut if you're curious about what's new, read on - there's a lot that we are excited about!\n\n## Key ideas\n\nThe `v4` client does things a little differently than the `v3` client. Two of the key ideas where it differs are:\n\n- Collection-based interactions, and\n- Default property returns to queries.\n\nTake this query, for example:\n\n\n\nHere, you'll notice that the query:\n- is performed on a collection (`questions`), not the `client` itself, and\n- does not specify any properties to return.\n\nThis is because the `v4` client is collection-based, and will return all properties (except `blob`s and references) by default. We think this makes the code more concise, and easier to use.\n\n### IDE assistance / autocomplete\n\nAnd writing the queries is now also much easier, with more IDE assistance and autocomplete. For example, here's a query that uses the `Filter` class:\n\nWeaviate Python Client v4 Release\n\nNotice all the nice autocomplete suggestions as we type! This extends to a great majority of operations, from collection creation to object insertion to query building.\n\n### Speed improvements\n\nThe new client is much faster than the `v3` client, too. This is because it uses gRPC extensively under-the-hood.\n\nThe speed improvements during imports will increase along with the request size. As some rough examples, we've seen:\n\n| Data imported | `v3` client | `v4` client |\n| --- | --- | --- |\n| `ann` dataset | ~50s | ~30s |\n| 50k `sphere` objects | ~200s | ~120s |\n\nQueries will also be faster with the `v4` client, with ~40% - ~80% speed improvements being seen in our internal testing.\n\nThese are just some rough examples, but we think many of you will see noticeable speed improvements across the board. Also keep an eye out for a follow-up blogpost on this topic, where we'll dive into the details \ud83d\ude09.\n\n### Typing & type safety\n\nProvision of these classes also means that the client is able to provide far more type hints, proving higher type safety.\n\nFor example, the `like` method in our `Filter` class example above helpfully tells you to insert the argument as a `str`. But if we were to use a `within_geo_range` method, it would tell us to use a coordinate as a `GeoCoordinate` instance, and a distance as a `float`.\n\nThis helps you to write the correct code, and also helps you to catch errors early.\n\n## Practical examples\n\nHere are some practical examples. You'll find plenty of them throughout the Weaviate documentation - here, we present a few commonly used operations, with notes as required.\n\n### `v4` vs `v3` API\n\n\nHere is an example that really captures the difference between the `v4` and `v3` APIs. Look at the difference in the code required to create a collection with properties.\n\n\n  \n    \n  \n  \n    \n  \n\n\nThe `v3` client API uses an untyped dictionary to specify the collection definition. It's efficient, but not very robust, and not particularly easy to use.\n\nOn the other hand, the `v4` client API provides plenty of help through type hints and autocomplete suggestions as you navigate to the `.create` method, and use classes such as `Property` and `DataType`. It's also more robust, and easier to use.\n\n### Submodules\n\nFor discoverability, the classes that are used as arguments in function calls are arranged into submodules based on the type of operation they are used in.\n\n\n  Submodule details\n\nThe structure is similar to the collections structure. For example, if you are performing a query (e.g. `collection.query.XXX`) you'll find the needed classes in general under `wvc.query.XXX`. The following table shows the submodules and their descriptions.\n\n| Module                      | Description                         |\n|-----------------------------|-------------------------------------|\n| `weaviate.classes.config`   | Collection creation / modification  |\n| `weaviate.classes.data`     | CUD operations                      |\n| `weaviate.classes.query`    | query/search operations             |\n| `weaviate.classes.aggregate`| aggregate operations                |\n| `weaviate.classes.generic`  | generics                            |\n| `weaviate.classes.init`     | initialization                      |\n| `weaviate.classes.tenants`  | tenants                             |\n| `weaviate.classes.batch`    | batch operations                    |\n\nYou can import the whole `classes` module, or just the classes you need. Many examples throughout the documentation use `import weaviate.classes as wvc` as a convention.\n\n\n\n### Client instantiation\n\nThe `v4` client provide a set of helper functions, for connecting to Weaviate through its various deployment methods.\n\nDirect instantiation with full control over the parameters is also possible, too. And, if you need an instance of the `v3` style client, you can still use it.\n\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nJust remember that with the new `WeaviateClient` instances (i.e. `v4` API), you should close the connection when you're done with it, as shown in the examples below. (This is still not necessary with the `v3` API.)\n\n\n    \n        \n    \n    \n        \n    \n\n\n### Batch operations\n\nThe new client provides a set of methods to configure batching. These methods help you to control the batching behavior - including a handy `rate_limit()` method to avoid going past any third-party API rate limits.\n\n| Method | Description | When to use |\n| :-- | :-- | :-- |\n| `dynamic` | The batch size is dynamically calculated by Weaviate. | Recommended starting point. |\n| `fixed_size` | The batch size is fixed to a size specified by a user. | When you want to control the batch size. |\n| `rate_limit` | The number of objects sent to Weaviate is rate limited (specified as n_objects per minute). | When you want to avoid hitting third-party vectorization API rate limits. |\n\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\n#### Error handling in batch operations\n\nThe `v4` client introduces additional error handling operations. You can now monitor the number of errors in an ongoing batching operation, or simply review the errors after the operation has completed.\n\n\n    \n        \n    \n    \n        \n    \n\n\n### Insertion methods\n\nThere's also single insertion methods, of course. And to that, we've added a `insert_many` method which is a convenience method for inserting a list of objects.\n\n\n    \n        \n        Generally recommended for any multi-object operations.\n    \n    \n        \n        If you just have a list of objects to insert.\n    \n    \n        \n        For single-insertions; not for bulk operations.\n    \n\n\n### Queries\n\nVarious types of queries are available for each collection. The `query` submodule is for single-object based queries, while the `generate` submodule is for RAG queries and `aggregate` for aggregation.\n\nYou can use different methods such as `hybrid`, `near_text` and so on within each submodule.\n\nWe've tried to keep methods as consistent as possible. So after you've tried object queries, you can enhance it to RAG queries by switching to the `generate` submodule, and provide any additional parameters as required for the prompts!\n\nThis makes it easy to switch between the different query types, and to discover the different query types available.\n\n\n    \n        \n        The search query returns a parsed response, with the .objects property containing the retrieved Weaviate objects.\n    \n    \n        \n        The search query returns a parsed response, with the .objects property containing the retrieved Weaviate objects.\n    \n    \n        \n        The RAG query is very similar to the equivalent search query, but using methods in the generate submodule.\n    \n    \n        \n        This example retrieves a count of objects that match the filter criteria.\n    \n\n\n#### Returned data\n\nAs mentioned before, the default behavior now is to return all properties (except `blob`s and references) by default, as well as object uuids.\n\nFor less-often used attributes such as cross-references, metadata (previously under `_additional`) and vectors must be requested specifically. This is done through the `return_references`, `return_metadata` and `include_vector` parameters.\n\nNote in the example below how the `MetadataQuery` and `QueryReference` classes reduce the amount of syntax memorization required to request metadata or cross-referenced data.\n\n\n    \n        \n    \n    \n        \n    \n\n\n#### Responses\n\nResponses from Weaviate are now parsed into instances of custom classes. For example, each query response will have a list of objects in the `objects` attribute, and each object will have a set of attributes itself. Responses for RAG queries will include a `generated` attribute at the top level for `grouped_task` query, and each object will also have a `generated` attribute for `single_prompt` queries.\n\n### Iterator\n\nThe client includes an iterator to make convenient use of the `cursor` API. This is useful for retrieving large numbers of objects, such as when manually exporting or migrating a collection.\n\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\n### `len`\n\nYou can even get the size of the collection by using the built-in `len` function - like this!\n\n\n\n## How to get started\n\nAs you can see - we are very excited about the release, and we hope you are, too. To get started with the client, just `pip` install it with:\n\n```bash\npip install -U weaviate-client\n```\n\nThen, we have a few resources to help you get started:\n\n\n| Title | Description | Link |\n| --- | --- | --- |\n| Weaviate Quickstart | New to Weaviate? Start here. | `/developers/weaviate/quickstart` |\n| Python client library page | An overview of the client library | `/developers/weaviate/client-libraries/python` |\n| How-to: Manage data | CUD (create/update/delete) operation examples, including collection creation | `/developers/weaviate/manage-data` |\n| How-to: Search | Search/query operation examples | `/developers/weaviate/search` |\n| References: Search | Reference documentation for searches; more detailed than the How-to guides | `/developers/weaviate/api/graphql` |\n| References: REST | Reference documentation for using the REST API | `/developers/weaviate/api/rest` |\n\n\nimport WhatNext from '/_includes/what-next.mdx'\n\n\n", "type": "Blog", "name": "blog-py-client-v4-release", "path": "blog/2024-02-01-py-client-v4-release/index.mdx", "link": "https://weaviate.io/blog/py-client-v4-release", "timestamp": "2024-02-08 20:24:45", "reader": "JSON", "meta": {}, "chunks": []}