{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport PyCode from '!!raw-loader!/_includes/code/rest.batch.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n    <FilteredTextBlock\n      text={PyCode}\n      startMarker=\"# START BatchCreateObject\"\n      endMarker=\"# END BatchCreateObject\"\n      language=\"py\"\n    />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nfirst_object_props = {\n    \"name\": \"Jane Doe\",\n    \"writesFor\": [{\n        \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\"\n    }]\n}\n\nsecond_object_props = {\n    \"name\": \"John Doe\",\n    \"writesFor\": [{\n        \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\"\n    }]\n}\n\n# Python client specific configurations can be set with `client.batch.configure`\n# the settings can be applied to both `objects` AND `references`.\n# You have to only set them once.\nclient.batch.configure(\n    # `batch_size` takes an `int` value to enable auto-batching\n    # (`None` is used for manual batching)\n    batch_size=100,\n    # dynamically update the `batch_size` based on import speed\n    dynamic=False,\n    # `timeout_retries` takes an `int` value to retry on time outs\n    timeout_retries=3,\n    # checks for batch-item creation errors\n    # this is the default in weaviate-client >= 3.6.0\n    callback=weaviate.util.check_batch_result,\n    consistency_level=weaviate.data.replication.ConsistencyLevel.ALL,  # default QUORUM\n)\n\nwith client.batch as batch:\n    # Add object without a custom vector.\n    # When using vectorization modules this can be used\n    # or when you don't want to set a vector\n    batch.add_data_object(\n        data_object=first_object_props,\n        class_name=\"Author\",\n        uuid=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",\n        # tenant=\"tenantA\",  # Optional; specify the tenant in multi-tenancy collections\n    )\n    # Add object with a custom vector\n    batch.add_data_object(\n        data_object=second_object_props,\n        class_name=\"Author\",\n        uuid=\"36ddd591-2dee-4e7e-a3cc-eb86d30a4304\",\n        vector=[0.1, 0.2, 0.3],\n        # tenant=\"tenantA\",  # Optional; specify the tenant in multi-tenancy collections\n    )\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst toImport = [{\n  class: 'Author',\n  id: '36ddd591-2dee-4e7e-a3cc-eb86d30a4303',\n  properties: {\n    name: 'Jane Doe',\n    writesFor: [{\n      beacon: 'weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80',\n    }],\n  },\n},\n{\n  class: 'Author',\n  id: '36ddd591-2dee-4e7e-a3cc-eb86d30a4304',\n  properties: {\n    name: 'John Doe',\n    writesFor: [{\n      beacon: 'weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80',\n    }],\n  },\n}];\n\nconst response = await client.batch\n  .objectsBatcher()\n  .withObject(toImport[0])\n  .withObject(toImport[1])\n  .withConsistencyLevel('ALL')  // default QUORUM\n  // .withTenant('tenantA')  // Optional; specify the tenant in multi-tenancy collections\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n\n/* The following is also possible:\nconst toImport = [\n  client.data\n    .creator()\n    .withClassName('Author')\n    .withId('36ddd591-2dee-4e7e-a3cc-eb86d30a4303')\n    .withProperties({\n      name: 'Jane Doe',\n      writesFor: [{\n        beacon: 'weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80',\n      }],\n    })\n    .payload(), // note the .payload(), not .do()!\n  client.data\n    .creator()\n    .withClassName('Author')\n    .withId('36ddd591-2dee-4e7e-a3cc-eb86d30a4304')\n    .withProperties({\n      name: 'John Doe',\n      writesFor: [{\n        beacon: 'weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80',\n      }],\n    })\n    .payload(), // note the .payload(), not .do()!\n  ];\n\nconst response = await client.batch\n  .objectsBatcher()\n  .withObject(toImport[0])\n  .withObject(toImport[1])\n  .withConsistencyLevel('ALL')  // default QUORUM\n  // .withTenant('tenantA')  // Optional; specify the tenant in multi-tenancy collections\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n*/\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate/entities/models\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/data/replication\"  // for consistency levels\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  objects := []*models.Object{\n    {\n      Class: \"Author\",\n      ID:    \"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",\n      Properties: map[string]interface{}{\n        \"name\": \"Jane Doe\",\n        \"writesFor\": map[string]string{\n          \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\",\n        },\n      },\n    },\n    {\n      Class: \"Author\",\n      ID:    \"36ddd591-2dee-4e7e-a3cc-eb86d30a4304\",\n      Properties: map[string]interface{}{\n        \"name\": \"John Doe\",\n        \"writesFor\": map[string]string{\n          \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\",\n        },\n      },\n    },\n  }\n\n  result, err := client.Batch().ObjectsBatcher().\n    WithObject(objects[0]).\n    WithObject(objects[1]).\n    WithConsistencyLevel(replication.ConsistencyLevel.ALL).  // default QUORUM\n    // WithTenant(\"tenantA\").  // Optional; specify the tenant in multi-tenancy collections\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.batch.model.ObjectGetResponse;\nimport io.weaviate.client.v1.data.model.WeaviateObject;\nimport io.weaviate.client.v1.data.replication.model.ConsistencyLevel;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    List<WeaviateObject> objects = new ArrayList() {\n      {\n        add(\n          WeaviateObject.builder()\n            .className(\"Author\")\n            .id(\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\")\n            .properties(new HashMap() {\n              {\n                put(\"name\", \"Jane Doe\");\n                put(\"writesFor\", new HashMap() {\n                  {\n                    put(\"beacon\", \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\");\n                  }\n                });\n              }\n            })\n            // .withTenant(\"tenantA\")  // Optional; specify the tenant in multi-tenancy collections\n            .build()\n        );\n        add(\n          WeaviateObject.builder()\n            .className(\"Author\")\n            .id(\"36ddd591-2dee-4e7e-a3cc-eb86d30a4304\")\n            .properties(new HashMap() {\n              {\n                put(\"name\", \"John Doe\");\n                put(\"writesFor\", new HashMap() {\n                  {\n                    put(\"beacon\", \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\");\n                  }\n                });\n              }\n            })\n            // .withTenant(\"tenantA\")  // Optional; specify the tenant in multi-tenancy collections\n            .build()\n        );\n      }\n    };\n\n    Result<ObjectGetResponse[]> result = client.batch().objectsBatcher()\n      .withObject(objects.get(0))\n      .withObject(objects.get(1))\n      .withConsistencyLevel(ConsistencyLevel.ALL)  // default QUORUM\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\ncurl \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"objects\": [{\n    \"class\": \"Author\",\n    \"id\": \"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\",\n    \"properties\": {\n        \"name\": \"Jane Doe\",\n        \"writesFor\": [{\n          \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\"\n        }]\n    },\n  }, {\n    \"class\": \"Author\",\n    \"id\": \"36ddd591-2dee-4e7e-a3cc-eb86d30a4304\",\n    \"properties\": {\n        \"name\": \"John Doe\",\n        \"writesFor\": [{\n          \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\"\n        }]\n    }\n  }]\n}' \\\nhttp://localhost:8080/v1/batch/objects?consistency_level=ALL\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Batch.objects", "path": "_includes/code/batch.objects.mdx", "link": "https://weaviate.io/_includes/code/batch.objects", "timestamp": "2024-05-08 15:30:38", "reader": "JSON", "meta": {}, "chunks": []}