{"text": "<!-- Imported from /developers/weaviate/api/graphql/search-operators/#hybrid -->\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLHybridWithPropertiesSpecified\"\n    endMarker=\"END GraphQLHybridWithPropertiesSpecified\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nresult = (\n  client.query\n  .get(\"JeopardyQuestion\", [\"question\", \"answer\"])\n  .with_additional([\"score\"])\n  .with_hybrid(\n    \"Venus\",\n    alpha=0.25,  # closer to pure keyword search\n# highlight-start\n    properties=[\"question\"]  # changing to \"answer\" will yield a different result set\n# highlight-end\n  )\n  .with_limit(3)do()\n)\n\nprint(json.dumps(result, indent=4))\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nconst response = await client.graphql\n  .get()\n  .withClassName('JeopardyQuestion')\n  .withFields('question answer _additional{ score }')\n  .withHybrid({\n    query: 'Venus',\n    alpha: 0.25,  // closer to pure keyword search\n// highlight-start\n    properties: ['question'],  // changing to \"answer\" will yield a different set of results\n// highlight-end\n  })\n  withLimit(3)\n  .do();\n\nconsole.log(response['data']['Get']['JeopardyQuestion']);\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\nHybridArgument hybrid = client.graphQL().arguments().HybridArgBuilder()\n  .query(\"Fisherman that catches salmon\")\n  .alpha(0.25f)  // closer to pure keyword search\n// highlight-start\n  .properties(String[]{\"question\"})  // changing to \"answer\" will yield a different result set\n// highlight-end\n  .build();\nField name = Field.builder().name(\"question\" \"answer\").build();\nField _additional = Field.builder()\n  .name(\"_additional\")\n  .fields(new Field[]{Field.builder().name(\"score\").build()})\n  .build();\n// when\ntestGenerics.createTestSchemaAndData(client);\nResult<GraphQLResponse> result = client.graphQL().get().withClassName(\"JeopardyQuestion\")\n  .withHybrid(hybrid)\n  .withFields(name, _additional)\n  .withLimit(3)\n  .run();\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n      Get {\n        JeopardyQuestion (\n          hybrid: {\n            query: \\\"Venus\\\"\n            alpha: 0.25\n# highlight-start\n            properties: [\\\"question\\\"]\n# highlight-end\n          }\n          limit: 3\n        )\n        {\n          question\n          answer\n          _additional { score }\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      hybrid: {\n        query: \"Venus\"\n        alpha: 0.25  # closer to pure keyword search\n# highlight-start\n        properties: [\"question\"]  # changing to \"answer\" will yield a different result set\n# highlight-end\n      }\n      limit: 3\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.hybrid.properties", "path": "_includes/code/graphql.filters.hybrid.properties.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.hybrid.properties", "timestamp": "2024-05-08 15:31:00", "reader": "JSON", "meta": {}, "chunks": []}