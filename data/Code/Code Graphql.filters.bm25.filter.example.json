{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLBM25WithFilter\"\n    endMarker=\"END GraphQLBM25WithFilter\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\n# highlight-start\nwhere_filter = {\n  \"path\": [\"wordCount\"],\n  \"operator\": \"LessThan\",\n  \"valueInt\": \"1000\"\n}\n# highlight-end\n\nquery_result = (\n  client.query\n  .get(\"Article\", [\"title\", \"summary\"])\n  .with_where(where_filter)\n  .with_bm25(query=\"how to fish\")\n  .do()\n)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withFields('title summary')\n  .withBm25({\n    query: 'how to fish',\n  })\n  // highlight-start\n  .withWhere({\n    operator: 'LessThan',\n    path: ['wordCount'],\n    valueInt: 1000,\n  })\n  // highlight-end\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\nresultSet, gqlErr := client.GraphQL().Get().WithClassName(\"Article\").WithHybrid(hybrid).WithWhere(where).WithFields(name).Do(context.Background())\n\n// highlight-start\nwhere := filters.Where().\nWithPath([]string{\"wordCount\"}).\n\t\t\t\tWithOperator(filters.LessThan).\n\t\t\t\tWithValueInt(1000)\n// highlight-end\n\nname = graphql.Field{Name: \"summary\"} // the output field\n\nbm25B := &BM25ArgumentBuilder{}\nbm25B = bm25B.WithQuery(\"How to fish\").WithProperties(\"title\", \"summary\")\n\nresultSet, gqlErr := client.GraphQL().Get().WithClassName(\"Article\").WithBM25(bm25B).WithWhere(where).WithFields(name).Do(context.Background())\narticles := get[\"Article\"].([]interface{})\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\nField title = Field.builder().name(\"title\" \"summary\").build();\n\n// highlight-start\nWhereFilter where = WhereFilter.builder()\n  .path(new String[]{ \"wordCount\" })\n  .operator(Operator.LessThan)\n  .valueInt(1000)\n  .build();\n// highlight-end\n\nBm25Argument bm25 = client.graphQL().arguments().Bm25ArgBuilder()\n  .query(\"how to fish\")\n  .properties(new String[]{\"title\",\"summary\"})\n  .build();\n\nResult<GraphQLResponse> result = client.graphQL().get()\n  .withClassName(\"Article\")\n  .withFields(title)\n  .withWhere(where)\n  .withBm25(bm25)\n  .run();\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Article(\n        bm25: { query: \\\"how to fish\\\", properties: [\\\"title\\\"] }\n        # highlight-start\n        where: { path: [\\\"wordCount\\\"], operator: LessThan, valueInt: 1000 }\n        # highlight-end\n      ) {\n        summary\n        title\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article (\n      bm25: { query: \"how to fish\", properties: [\"title\"] }\n    # highlight-start\n      where: { path: [\"wordCount\"], operator: LessThan, valueInt: 1000 }\n    # highlight-end\n    ) {\n      summary\n      title\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.bm25.filter.example", "path": "_includes/code/graphql.filters.bm25.filter.example.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.bm25.filter.example", "timestamp": "2024-05-08 15:30:57", "reader": "JSON", "meta": {}, "chunks": []}