{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python\">\n\n```python\n\nimport weaviate\nimport json\n\nclient = weaviate.Client(\n    url=\"https://WEAVIATE_INSTANCE_URL/\",  # Replace with your Weaviate endpoint\n    additional_headers={\n        \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\"  # Or \"X-Cohere-Api-Key\" or \"X-HuggingFace-Api-Key\"\n    }\n)\n\n# ===== import data =====\n# Load data\nimport requests\nurl = 'https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json'\nresp = requests.get(url)\ndata = json.loads(resp.text)\n\n# Prepare a batch process\nclient.batch.configure(batch_size=100)  # Configure batch\nwith client.batch as batch:\n    # Batch import all Questions\n    for i, d in enumerate(data):\n        # print(f\"importing question: {i+1}\")  # To see imports\n\n        properties = {\n            \"answer\": d[\"Answer\"],\n            \"question\": d[\"Question\"],\n            \"category\": d[\"Category\"],\n        }\n\n        batch.add_data_object(properties, \"Question\")\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'WEAVIATE_INSTANCE_URL',  // Replace with your Weaviate endpoint\n  headers: { 'X-OpenAI-Api-Key': 'YOUR-OPENAI-API-KEY' },  // Replace with your API key\n});\n\nasync function getJsonData() {\n  const file = await fetch('https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json');\n  return file.json();\n}\n\nasync function importQuestions() {\n  // Get the data from the data.json file\n  const data = await getJsonData();\n\n  // Prepare a batcher\n  let batcher = client.batch.objectsBatcher();\n  let counter = 0;\n  const batchSize = 100;\n\n  for (const question of data) {\n    // Construct an object with a class and properties 'answer' and 'question'\n    const obj = {\n      class: 'Question',\n      properties: {\n        answer: question.Answer,\n        question: question.Question,\n        category: question.Category,\n      },\n    };\n\n    // add the object to the batch queue\n    batcher = batcher.withObject(obj);\n\n    // When the batch counter reaches batchSize, push the objects to Weaviate\n    if (counter++ == batchSize) {\n      // flush the batch queue\n      await batcher.do();\n\n      // restart the batch queue\n      counter = 0;\n      batcher = client.batch.objectsBatcher();\n    }\n  }\n\n  // Flush the remaining objects\n  await batcher.do();\n}\n\nawait importQuestions();\n```\n\n</TabItem>\n{/* <TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n    cfg := weaviate.Config{\n        Host:   \"WEAVIATE_INSTANCE_URL/\",\n        Scheme: \"https\",\n    }\n\n    client, err := weaviate.NewClient(cfg)\n    if err != nil {\n        panic(err)\n    }\n\n    // add code here\n}\n```\n\n</TabItem> */}\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\n\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // add code here\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n# Replace ${WEAVIATE_INSTANCE_URL} with your instance URL.\n\ncurl \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"class\": \"Question\",\n    \"vectorizer\": \"text2vec-openai\",\n}' \\\nhttps://${WEAVIATE_INSTANCE_URL}/v1/schema\n```\n\n</TabItem> */}\n</Tabs>\n", "type": "Code", "name": "Code Quickstart.import.questions", "path": "_includes/code/quickstart.import.questions.mdx", "link": "https://weaviate.io/_includes/code/quickstart.import.questions", "timestamp": "2024-05-08 15:31:32", "reader": "JSON", "meta": {}, "chunks": []}