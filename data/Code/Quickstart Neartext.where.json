{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport EndToEndPyCode from '!!raw-loader!/_includes/code/quickstart/endtoend.py';\nimport EndToEndPy3Code from '!!raw-loader!/_includes/code/quickstart/endtoend.py3.py';\nimport EndToEndTSCode from '!!raw-loader!/_includes/code/quickstart/endtoend.ts';\nimport EndToEndTSCodeLegacy from '!!raw-loader!/_includes/code/quickstart/endtoend-v2.ts';\n\n\n<Tabs groupId=\"languages\">\n{/* <TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Question(\n      nearText: {\n        concepts: [\"biology\"],\n      }\n    ) {\n      question\n      answer\n      category\n    }\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<FilteredTextBlock\n  text={EndToEndPyCode}\n  startMarker=\"# NearTextWhereExample\"\n  endMarker=\"# END NearTextWhereExample\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n<FilteredTextBlock\n  text={EndToEndPy3Code}\n  startMarker=\"# NearTextWhereExample\"\n  endMarker=\"# END NearTextWhereExample\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"js\" label=\"JS/TS v3\">\n\n<FilteredTextBlock\n  text={EndToEndTSCode}\n  startMarker=\"// NearTextWhereExample\"\n  endMarker=\"// END NearTextWhereExample\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"js2\" label=\"JS/TS v2\">\n\n<FilteredTextBlock\n  text={EndToEndTSCodeLegacy}\n  startMarker=\"// NearTextWhereExample\"\n  endMarker=\"// END NearTextWhereExample\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/auth\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/filters\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:    \"WEAVIATE_INSTANCE_URL/\",  // Replace with your Weaviate endpoint\n    Scheme:  \"https\",\n    AuthConfig: auth.ApiKey{Value: \"YOUR-WEAVIATE-API-KEY\"}, // Replace with your Weaviate instance API key\n    Headers: map[string]string{\"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\"},  // Replace with your inference API key\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  fields := []graphql.Field{\n    {Name: \"question\"},\n    {Name: \"answer\"},\n    {Name: \"category\"},\n  }\n\n  nearText := client.GraphQL().\n    NearTextArgBuilder().\n    WithConcepts([]string{\"biology\"})\n\n  where := filters.Where().\n      WithPath([]string{\"category\"}).\n      WithOperator(filters.Equal).\n      WithValueText(\"ANIMALS\")\n\n  result, err := client.GraphQL().Get().\n    WithClassName(\"Question\").\n    WithFields(fields...).\n    WithNearText(nearText).\n    WithWhere(where).\n    WithLimit(2).\n    Do(context.Background())\n  if err != nil {\n    panic(err)\n  }\n\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextArgument;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextMoveParameters;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class App {\n  public static void main(String[] args) {\n    Map<String, String> headers = new HashMap<String, String>() { {\n      put(\"X-OpenAI-Api-Key\", \"YOUR-OPENAI-API-KEY\");\n    } };\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\", headers);  // Replace with your Weaviate endpoint\n    WeaviateClient client = new WeaviateClient(config);\n\n    NearTextMoveParameters moveTo = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"haute couture\" }).force(0.85f).build();\n\n    NearTextMoveParameters moveAway = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"finance\" }).force(0.45f)\n      .build();\n\n    NearTextArgument nearText = client.graphQL().arguments().nearTextArgBuilder()\n      .concepts(new String[]{ \"fashion\" })\n      .distance(0.6f) // use .certainty(0.7f) prior to v1.14\n      .moveTo(moveTo)\n      .moveAwayFrom(moveAway)\n      .build();\n\n    Field question = Field.builder().name(\"question\").build();\n    Field answer = Field.builder().name(\"answer\").build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"Question\")\n      .withFields(question, answer)\n      .withNearText(nearText)\n      .withLimit(1)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Question (\n        limit: 2\n        where: {\n          path: [\\\"category\\\"],\n          operator: Equal,\n          valueText: \\\"ANIMALS\\\"\n        }\n        nearText: {\n          concepts: [\\\"biology\\\"],\n        }\n      ) {\n        question\n        answer\n        category\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Authorization: Bearer $WEAVIATE_API_KEY\" \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    https://WEAVIATE_INSTANCE_URL/v1/graphql  # Replace WEAVIATE_INSTANCE_URL with your instance URL  # Replace this with your endpoint\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Quickstart Neartext.where", "path": "_includes/code/quickstart/neartext.where.mdx", "link": "https://weaviate.io/_includes/code/quickstart/neartext.where", "timestamp": "2024-05-08 15:31:40", "reader": "JSON", "meta": {}, "chunks": []}