{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport PythonV4Classification from '/_includes/client-python-v4-classification.md';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<PythonV4Classification/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\ntrainingSetWhere = {\n  \"path\": [\"wordCount\"],\n  \"operator\": \"GreaterThan\",\n  \"valueInt\": 100\n}\n\nclient.classification.schedule()\\\n            .with_type(\"knn\")\\\n            .with_class_name(\"Article\")\\\n            .with_based_on_properties([\"summary\"])\\\n            .with_classify_properties([\"hasPopularity\"])\\\n            .with_training_set_where_filter(trainingSetWhere)\\\n            .with_settings({\"k\":3})\\\n            .do()\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\n// the following trigger a classification without waiting\nlet response = await client.classifications\n  .scheduler()\n  .withType('knn')\n  .withSettings({ k: 3 })\n  .withClassName('Article')\n  .withClassifyProperties(['hasPopularity'])\n  .withBasedOnProperties(['summary'])\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n\n// the following triggers a classification with waiting for completion\nresponse = await client.classifications\n  .scheduler()\n  .withType('knn')\n  .withSettings({ k: 3 })\n  .withClassName('Article')\n  .withClassifyProperties(['hasPopularity'])\n  .withBasedOnProperties(['summary'])\n  .withWaitForCompletion()\n  .withWaitTimeout(60 * 1000)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/classifications\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/filters\"\n  \"github.com/weaviate/weaviate/usecases/classification\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  valueInt64 := func(in int64) *int64 {\n    return &in\n  }\n\n  valueInt32 := func(in int32) *int32 {\n    return &in\n  }\n\n  trainingSetWhere := (&filters.WhereBuilder{}).\n    WithOperator(filters.GreaterThan).\n    WithPath([]string{\"wordCount\"}).\n    WithValueInt(100)\n\n  classification, err := client.Classifications().Scheduler().\n    WithType(classifications.KNN).\n    WithSettings(&classification.ParamsKNN{K: valueInt32(3)}).\n    WithClassName(\"Article\").\n    WithClassifyProperties([]string{\"hasPopularity\"}).\n    WithBasedOnProperties([]string{\"summary\"}).\n    WithTrainingSetWhereFilter(trainingSetWhere).\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", classification)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.classifications.model.Classification;\nimport io.weaviate.client.v1.classifications.model.ClassificationType;\nimport io.weaviate.client.v1.classifications.model.ParamsKNN;\nimport io.weaviate.client.v1.filters.Operator;\nimport io.weaviate.client.v1.filters.WhereFilter;\n\npublic class App {\n    public static void main(String[] args) {\n        Config config = new Config(\"http\", \"localhost:8080\");\n        WeaviateClient client = new WeaviateClient(config);\n\n        WhereFilter trainingSetWhere = WhereFilter.builder()\n                .valueInt(100)\n                .operator(Operator.GreaterThan)\n                .path(new String[]{ \"wordCount\" })\n                .build();\n\n        Result<Classification> result = client.classifications().scheduler()\n                .withType(ClassificationType.KNN)\n                .withSettings(ParamsKNN.builder().k(3).build())\n                .withClassName(\"Article\")\n                .withClassifyProperties(new String[]{ \"hasPopularity\" })\n                .withBasedOnProperties(new String[]{ \"summary\" })\n                .withTrainingSetWhereFilter(trainingSetWhere)\n                .run();\n\n        if (result.hasErrors()) {\n            System.out.println(result.getError());\n            return;\n        }\n        System.out.println(result.getResult());\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\ncurl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"class\": \"Article\",\n        \"type\": \"knn\",\n        \"settings\": {\n          \"k\": 3\n        },\n        \"basedOnProperties\": [\n            \"summary\"\n        ],\n        \"classifyProperties\": [\n            \"hasPopularity\"\n        ],\n        \"filters\": {\n          \"trainingSetWhere\": {\"path\": [\"wordCount\"], \"operator\": \"GreaterThan\", \"valueInt\": 100}\n        }\n    }' \\\n    http://localhost:8080/v1/classifications\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Classification.knn.post", "path": "_includes/code/classification.knn.post.mdx", "link": "https://weaviate.io/_includes/code/classification.knn.post", "timestamp": "2024-05-08 15:30:41", "reader": "JSON", "meta": {}, "chunks": []}