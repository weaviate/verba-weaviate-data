{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport PythonV4Classification from '/_includes/client-python-v4-classification.md';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<PythonV4Classification/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nquery_result = (\n    client.classification.schedule()\n    .with_type(\"knn\")\n    .with_class_name(\"<className>\")\n    .with_based_on_properties([\"<property3>\"])  # must be specified, but for contextual classifications the current implementation takes the whole vector of the class (objects) into account\n    .with_classify_properties([\"<property1>\", \"<property2>\"])  # at least one property must be specified\n    .with_settings({\"k\": 3})  # additional classification settings, optional for KNN\n    .with_wait_for_completion()\n    .do()\n)\n\nprint(query_result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.classifications\n  .scheduler()\n  .withType('<e.g. knn>')\n  .withSettings(<e.g. { 'k': 3 }>)  // additional classification settings, optional for KNN\n  .withClassName('<className>')\n  .withClassifyProperties(['<property1>', '<property2>'])  // at least one property must be specified\n  .withBasedOnProperties(['<property3>'])  // must be specified, but for contextual classifications the current implementation takes the whole vector of the class (objects) into account\n  .withWaitForCompletion()\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/classifications\"\n  \"github.com/weaviate/weaviate/usecases/classification\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  classification, err := client.Classifications().\n    Scheduler().\n    WithType(classifications.<e.g. KNN>).\n    WithSettings(<&classification.ParamsKNN{K: 3}>).\n    WithClassName(\"<ClassName>\").\n    WithClassifyProperties([]string{\"<property1>\", \"<property2>\"}).  // at least one property must be specified\n    WithBasedOnProperties([]string{\"<property3>\"}).  // must be specified, but for contextual classifications the current implementation takes the whole vector of the class (objects) into account\n    WithWaitForCompletion.\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", classification)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.classifications.model.Classification;\nimport io.weaviate.client.v1.classifications.model.ClassificationType;\nimport io.weaviate.client.v1.classifications.model.ParamsKNN;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    Result<Classification> result = client.classifications()\n      .scheduler()\n      .withType(classifications.<e.g. ClassificationType.KNN>)\n      .withSettings(ParamsKNN.builder().k(3).build())\n            .withClassName(\"<ClassName>\")\n      .withClassifyProperties(new String[]{\"<property1>\", \"<property2>\"})  // at least one property must be specified\n      .withBasedOnProperties(new String[]{\"property3\"})  // must be specified, but for contextual classifications the current implementation takes the whole vector of the class (objects) into account\n      .withWaitForCompletion()\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n# At least one property needs to be specified for \"classifyProperties\"\n# \"basedOnProperties\" must be specified, but for contextual classifications the current implementation takes the whole vector of the class (objects) into account\ncurl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"class\": \"className\",\n        \"classifyProperties\": [\"<property1>\", \"<property2>\"],\n        \"basedOnProperties\": [\"<property3>\"],\n        \"type\": \"<e.g. knn>\"\n      }' \\\n    http://localhost:8080/v1/classifications\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Classification.post", "path": "_includes/code/classification.post.mdx", "link": "https://weaviate.io/_includes/code/classification.post", "timestamp": "2024-05-08 15:30:41", "reader": "JSON", "meta": {}, "chunks": []}