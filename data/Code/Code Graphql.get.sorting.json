{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nresult = (\n  client.query\n  .get(\"Article\", [\"title\", \"url\", \"wordCount\"])\n  .with_sort({\"path\": [\"title\"], \"order\": \"asc\" })\n  .do()\n)\nprint(result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withSort([{ path: ['title'], order: 'asc' }])\n  .withFields('title url wordCount')\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  title := graphql.Field{Name: \"title\"}\n  url := graphql.Field{Name: \"url\"}\n  wordCount := graphql.Field{Name: \"wordCount\"}\n\n  byTitleAsc := graphql.Sort{\n    Path: []string{\"title\"}, Order: graphql.Asc,\n  }\n\n  ctx := context.Background()\n  result, err := client.GraphQL().Get().\n    WithClassName(\"Article\").\n    WithSort(byTitleAsc).\n    WithFields(title, url, wordCount).\n    Do(ctx)\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.SortArgument;\nimport io.weaviate.client.v1.graphql.query.argument.SortOrder;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    Field title = Field.builder().name(\"title\").build();\n    Field url = Field.builder().name(\"url\").build();\n    Field wordCount = Field.builder().name(\"wordCount\").build();\n\n    SortArgument byTitleAsc = client.graphQL().arguments().sortArgBuilder()\n      .path(new String[]{ \"title\" })\n      .order(SortOrder.asc)\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"Article\")\n      .withSort(byTitleAsc)\n      .withFields(title, url, wordCount)\n      .run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Article(sort: [{\n        path: [\\\"title\\\"]\n        order: asc\n      }]) {\n        title\n        url\n        wordCount\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article(sort: [{\n      path: [\"title\"]     # Path to the property that should be used\n      order: asc          # Sort order, possible values: asc, desc\n    }]) {\n      title\n      url\n      wordCount\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.get.sorting", "path": "_includes/code/graphql.get.sorting.mdx", "link": "https://weaviate.io/_includes/code/graphql.get.sorting", "timestamp": "2024-05-08 15:31:13", "reader": "JSON", "meta": {}, "chunks": []}