{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport EndToEndPyCode from '!!raw-loader!/_includes/code/quickstart/endtoend.py';\nimport EndToEndPy3Code from '!!raw-loader!/_includes/code/quickstart/endtoend.py3.py';\nimport EndToEndTSCode from '!!raw-loader!/_includes/code/quickstart/endtoend.ts';\nimport EndToEndTSCodeLegacy from '!!raw-loader!/_includes/code/quickstart/endtoend-v2.ts';\n\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<FilteredTextBlock\n  text={EndToEndPyCode}\n  startMarker=\"# ===== define collection =====\"\n  endMarker=\"# ===== import data =====\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n<FilteredTextBlock\n  text={EndToEndPy3Code}\n  startMarker=\"# ===== define collection =====\"\n  endMarker=\"# ===== import data =====\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"js\" label=\"JS/TS v3\">\n\n<FilteredTextBlock\n  text={EndToEndTSCode}\n  startMarker=\"// Add the schema\"\n  endMarker=\"// END Add the schema\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"js2\" label=\"JS/TS v2\">\n\n<FilteredTextBlock\n  text={EndToEndTSCodeLegacy}\n  startMarker=\"// Add the schema\"\n  endMarker=\"// END Add the schema\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/auth\"\n\t\"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n\tcfg := weaviate.Config{\n\t\tHost:   \"WEAVIATE_INSTANCE_URL/\",  // Replace with your Weaviate endpoint\n\t\tScheme: \"https\",\n\t\tAuthConfig: auth.ApiKey{Value: \"YOUR-WEAVIATE-API-KEY\"}, // Replace with your Weaviate instance API key\n\t\tHeaders: map[string]string{\n\t\t\t\"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\",  // Replace with your inference API key\n\t\t},\n\t}\n\n\tclient, err := weaviate.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tclassObj := &models.Class{\n\t\t\tClass:      \"Question\",\n\t\t\tVectorizer: \"text2vec-openai\",  // If set to \"none\" you must always provide vectors yourself. Could be any other \"text2vec-*\" also.\n\t\t\tModuleConfig: map[string]interface{}{\n\t\t\t\t\"text2vec-openai\": map[string]interface{}{},\n\t\t\t\t\"generative-openai\": map[string]interface{}{},\n\t\t\t},\n\t\t}\n\n\t// add the schema\n\terr = client.Schema().ClassCreator().WithClass(classObj).Do(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n</TabItem>\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\n\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // we will create the class \"Question\" and the properties\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Question\")\n      .vectorizer(\"text2vec-openai\")  // If set to \"none\" you must always provide vectors yourself. Could be any other \"text2vec-*\" also.\n      .build();\n\n    // add the schema\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-openai\",\n  \"moduleConfig\": {\n      \"text2vec-openai\": {},\n      \"generative-openai\": {}\n  }\n}' | curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $WEAVIATE_API_KEY\" \\\n  -d @- \\\n  https://WEAVIATE_INSTANCE_URL/v1/schema  # Replace WEAVIATE_INSTANCE_URL with your instance URL\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Quickstart Collection.definition", "path": "_includes/code/quickstart/collection.definition.mdx", "link": "https://weaviate.io/_includes/code/quickstart/collection.definition", "timestamp": "2024-05-08 15:31:36", "reader": "JSON", "meta": {}, "chunks": []}