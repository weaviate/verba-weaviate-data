{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.filters.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START SingleConditionFilter\"\n    endMarker=\"END SingleConditionFilter\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nwhere_filter = {\n  \"path\": [\"wordCount\"],\n  \"operator\": \"GreaterThan\",\n  \"valueInt\": 1000\n}\n\nquery_result = (\n  client.query\n  .get(\"Article\", \"title\")\n  .with_where(where_filter)\n  .do()\n)\n\nprint(query_result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withFields('title')\n  .withWhere({\n    operator: 'GreaterThan',\n    path: ['wordCount'],\n    valueInt: 1000,\n  })\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/filters\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n\tcfg := weaviate.Config{\n\t\tHost:   \"localhost:8080\",\n\t\tScheme: \"http\",\n\t}\n\tclient, err := weaviate.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\ttitle := graphql.Field{Name: \"title\"}\n\twhere := filters.Where().\n\t\tWithPath([]string{\"wordCount\"}).\n\t\tWithOperator(filters.GreaterThan).\n\t\tWithValueInt(1000)\n\n\tctx := context.Background()\n\n\tresult, err := client.GraphQL().Get().\n\t\tWithClassName(\"Article\").\n\t\tWithFields(title).\n\t\tWithWhere(where).\n\t\tDo(ctx)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.filters.Operator;\nimport io.weaviate.client.v1.filters.WhereFilter;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n    public static void main(String[] args) {\n        Config config = new Config(\"http\", \"localhost:8080\");\n        WeaviateClient client = new WeaviateClient(config);\n\n        Field title = Field.builder().name(\"title\").build();\n\n        WhereFilter where = WhereFilter.builder()\n                .path(new String[]{ \"wordCount\" })\n                .operator(Operator.GreaterThan)\n                .valueInt(1000)\n                .build();\n\n        Result<GraphQLResponse> result = client.graphQL().get()\n                .withClassName(\"Article\")\n                .withFields(title)\n                .withWhere(where)\n                .run();\n\n        if (result.hasErrors()) {\n            System.out.println(result.getError());\n            return;\n        }\n        System.out.println(result.getResult());\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Article(where: {\n        path: [\\\"wordCount\\\"],\n        operator: GreaterThan,\n        valueInt: 1000\n      }) {\n        title\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article(where: {\n      path: [\"wordCount\"],    # Path to the property that should be used\n      operator: GreaterThan,  # operator\n      valueInt: 1000          # value (which is always = to the type of the path property)\n    }) {\n      title\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.where.simple", "path": "_includes/code/graphql.filters.where.simple.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.where.simple", "timestamp": "2024-05-08 15:31:10", "reader": "JSON", "meta": {}, "chunks": []}