{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport EndToEndPy3Code from '!!raw-loader!/_includes/code/quickstart/endtoend.py3.py';\nimport EndToEndPyCode from '!!raw-loader!/_includes/code/quickstart/endtoend.py';\nimport EndToEndTSCode from '!!raw-loader!/_includes/code/quickstart/endtoend.ts';\nimport EndToEndTSCodeLegacy from '!!raw-loader!/_includes/code/quickstart/endtoend-v2.ts';\n\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<FilteredTextBlock\n  text={EndToEndPyCode}\n  startMarker=\"# EndToEndExample\"\n  endMarker=\"# END EndToEndExample\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n<FilteredTextBlock\n  text={EndToEndPy3Code}\n  startMarker=\"# EndToEndExample\"\n  endMarker=\"# END EndToEndExample\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"js\" label=\"JS/TS v3\">\n\n<FilteredTextBlock\n  text={EndToEndTSCode}\n  startMarker=\"// EndToEndExample\"\n  endMarker=\"// END EndToEndExample\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"js2\" label=\"JS/TS v2\">\n\n<FilteredTextBlock\n  text={EndToEndTSCodeLegacy}\n  startMarker=\"// EndToEndExample\"\n  endMarker=\"// END EndToEndExample\"\n  language=\"ts\"\n/>\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"net/http\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/auth\"\n  \"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"WEAVIATE_INSTANCE_URL/\", // Replace with your Weaviate endpoint\n    Scheme: \"https\",\n    AuthConfig: auth.ApiKey{Value: \"YOUR-WEAVIATE-API-KEY\"}, // Replace with your Weaviate instance API key\n    Headers: map[string]string{\n      \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\",  // Replace with your inference API key\n    },\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n      panic(err)\n  }\n\n  // add the schema\n  classObj := &models.Class{\n    Class:      \"Question\",\n    Vectorizer: \"text2vec-openai\",\n    ModuleConfig: map[string]interface{}{\n      \"generative-openai\": map[string]interface{}{},\n    },\n  }\n\n  if client.Schema().ClassCreator().WithClass(classObj).Do(context.Background()) != nil {\n    panic(err)\n  }\n\n  // Retrieve the data\n  items, err := getJSONdata()\n  if err != nil {\n    panic(err)\n  }\n\n  // convert items into a slice of models.Object\n  objects := make([]*models.Object, len(items))\n  for i := range items {\n    objects[i] = &models.Object{\n      Class: \"Question\",\n      Properties: map[string]any{\n        \"category\": items[i][\"Category\"],\n        \"question\": items[i][\"Question\"],\n        \"answer\":   items[i][\"Answer\"],\n      },\n    }\n  }\n\n  // batch write items\n  batchRes, err := client.Batch().ObjectsBatcher().WithObjects(objects...).Do(context.Background())\n  if err != nil {\n    panic(err)\n  }\n  for _, res := range batchRes {\n    if res.Result.Errors != nil {\n      panic(res.Result.Errors.Error)\n    }\n  }\n}\n\nfunc getJSONdata() ([]map[string]string, error) {\n  // Retrieve the data\n  data, err := http.DefaultClient.Get(\"https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json\")\n  if err != nil {\n    return nil, err\n  }\n  defer data.Body.Close()\n\n  // Decode the data\n  var items []map[string]string\n  if err := json.NewDecoder(data.Body).Decode(&items); err != nil {\n    return nil, err\n  }\n  return items, nil\n}\n```\n</TabItem>\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\n\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");  // replace with your Weaviate endpoint\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // we will create the class \"Question\" and the properties\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Question\")\n      .vectorizer(\"text2vec-openai\")\n      .build();\n\n    // add the schema\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n#!/bin/bash\n# Requiring `bash` above enables process substitution support, used when redirecting the output of jq to the while loop.\necho \"Downloading the data file...\"\ncurl -O -L \"https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json\" --no-progress-meter\n\n# Replace with your Weaviate endpoint and API keys\nWEAVIATE_URL=https://WEAVIATE_INSTANCE_URL  # Replace WEAVIATE_INSTANCE_URL with your instance URL\nWEAVIATE_API_KEY=YOUR_WEAVIATE_API_KEY\nOPENAI_API_KEY=YOUR_OPENAI_API_KEY\n\nSCHEMA_API_URL=\"$WEAVIATE_URL/v1/schema\"\nBATCH_API_URL=\"$WEAVIATE_URL/v1/batch/objects\"\nBATCH_SIZE=100\n\n# Send to the batch endpoint valid JSON data (no comments, no newlines - https://github.com/weaviate/weaviate/issues/2745)\nfunction send_data() {\n  curl --no-progress-meter -X POST \"$BATCH_API_URL\" \\\n       -H \"Content-Type: application/json\" \\\n       -H \"Authorization: Bearer $WEAVIATE_API_KEY\" \\\n       -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n       -d \"$1\" \\\n       -o /dev/null  # suppress the output because vectors are long\n}\n\n# Uncomment to delete all Question objects if you see a \"Name 'Question' already used\" error\ncurl -X DELETE $SCHEMA_API_URL/Question -H \"Authorization: Bearer $WEAVIATE_API_KEY\"\n\necho \"Creating the schema. Weaviate's autoschema feature will infer class properties when importing...\"\necho '{\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-openai\",\n  \"moduleConfig\": {\n      \"generative-openai\": {}\n  }\n}' | curl --no-progress-meter \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $WEAVIATE_API_KEY\" \\\n  -d @- \\\n  -o /dev/null \\\n  $SCHEMA_API_URL\n\n# Read the JSON file and loop through its entries\nlines_processed=0\nbatch_data='{\"objects\": ['\n\nwhile read -r line; do\n  # Create the class object out of the JSON data\n  line=$(echo \"$line\" | jq '{class: \"Question\", properties: {answer: .Answer, question: .Question, category: .Category}}')\n\n  if [ $lines_processed -eq 0 ]; then\n    batch_data+=$line\n  else\n    batch_data+=\",$line\"\n  fi\n\n  lines_processed=$((lines_processed + 1))\n\n  # If the batch is full, send it to the API\n  if [ $lines_processed -eq $BATCH_SIZE ]; then\n    batch_data+=\"]}\"\n\n    send_data \"$batch_data\"\n\n    # Reset the batch data and counter\n    lines_processed=0\n    batch_data='{\"objects\": ['\n  fi\ndone < <(jq -c '.[]' jeopardy_tiny.json)  # process substitution\n\necho \"Sending the remaining data (if any) to the API...\"\nif [ $lines_processed -ne 0 ]; then\n  batch_data+=\"]}\"\n  send_data \"$batch_data\"\nfi\necho \"Import finished.\"\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Quickstart Endtoend", "path": "_includes/code/quickstart/endtoend.mdx", "link": "https://weaviate.io/_includes/code/quickstart/endtoend", "timestamp": "2024-05-08 15:31:37", "reader": "JSON", "meta": {}, "chunks": []}