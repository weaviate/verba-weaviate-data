{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.aggregate.simple.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLSimpleAggregateGroupby\"\n    endMarker=\"END GraphQLSimpleAggregateGroupby\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nresponse = (\n    client.query\n    .aggregate(\"Article\")\n    .with_group_by_filter([\"inPublication\"])\n    .with_meta_count()\n    .with_fields(\"meta { count } wordCount { mean } groupedBy { path value }\")\n    .do()\n)\n\nprint(response)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .aggregate()\n  .withClassName('Article')\n  .withGroupBy(['inPublication'])\n  .withFields('meta { count } wordCount { mean } groupedBy { value path }')\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n  meta := graphql.Field{\n    Name: \"meta\", Fields: []graphql.Field{\n      {Name: \"count\"},\n    },\n  }\n  wordCount := graphql.Field{\n    Name: \"wordCount\", Fields: []graphql.Field{\n      {Name: \"mean\"},\n    },\n  }\n  groupedBy := graphql.Field{\n    Name: \"groupedBy\", Fields: []graphql.Field{\n      {Name: \"value\"},\n      {Name: \"path\"},\n    },\n  }\n\n  result, err := client.GraphQL().Aggregate().\n    WithFields(meta, wordCount, groupedBy).\n    WithClassName(\"Article\").\n    WithGroupBy(\"inPublication\").\n    Do(context.Background())\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n    Field meta = Field.builder()\n      .name(\"meta\")\n      .fields(new Field[]{\n        Field.builder().name(\"count\").build()\n      }).build();\n    Field wordCount = Field.builder()\n      .name(\"wordCount\")\n      .fields(new Field[]{\n        Field.builder().name(\"mean\").build()\n      }).build();\n    Field groupedBy = Field.builder()\n      .name(\"groupedBy\")\n      .fields(new Field[]{\n        Field.builder().name(\"value\").build(),\n        Field.builder().name(\"path\").build()\n      }).build();\n\n    Result<GraphQLResponse> result = client.graphQL().aggregate()\n      .withClassName(\"Article\")\n      .withFields(meta, wordCount, groupedBy)\n      .withGroupBy(\"inPublication\")\n      .run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Aggregate {\n      Article(groupBy: [\\\"inPublication\\\"]) {\n        meta {\n          count\n        }\n        wordCount {\n          mean\n        }\n        groupedBy {\n          value\n          path\n        }\n      }\n    }\n  }\"\n}' | curl \\\n  -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer learn-weaviate' \\\n  -d @- \\\n  https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Aggregate {\n    Article (groupBy:[\"inPublication\"]) {\n      meta {\n        count\n      }\n      wordCount {\n        mean\n      }\n      groupedBy {\n        value\n        path\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.aggregate.groupby", "path": "_includes/code/graphql.aggregate.groupby.mdx", "link": "https://weaviate.io/_includes/code/graphql.aggregate.groupby", "timestamp": "2024-05-08 15:30:53", "reader": "JSON", "meta": {}, "chunks": []}