{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get{\n    Question(\n      nearText: {\n        concepts: [\"biology\"],\n      }\n    ){\n      question\n      answer\n    }\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\nimport json\n\nclient = weaviate.Client(\n    url=\"https://WEAVIATE_INSTANCE_URL/\",  # Replace with your Weaviate endpoint\n    additional_headers={\n        \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\"  # Or \"X-Cohere-Api-Key\" or \"X-HuggingFace-Api-Key\"\n    }\n)\n\nnearText = {\"concepts\": [\"biology\"]}\n\nresult = (\n    client.query\n    .get(\"Question\", [\"question\", \"answer\", \"category\"])\n    .with_near_text(nearText)\n    .with_limit(2)\n    .with_additional(['certainty'])\n    .do()\n)\n\nprint(json.dumps(result, indent=4))\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'WEAVIATE_INSTANCE_URL',  // Replace with your Weaviate endpoint\n  headers: { 'X-OpenAI-Api-Key': process.env['OPENAI_API_KEY'] },  // Replace with your API key\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Question')\n  .withFields('question answer category _additional {certainty}')\n  .withNearText({ concepts: ['biology'] })\n  .withLimit(2)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n{/* <TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:    \"WEAVIATE_INSTANCE_URL/\",  // Replace WEAVIATE_INSTANCE_URL with your instance URL\n    Scheme:  \"https\",\n    Headers: map[string]string{\"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\"},\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  className := \"Question\"\n\n  question := graphql.Field{Name: \"question\"}\n  answer := graphql.Field{Name: \"answer\"}\n\n  concepts := []string{\"biology\"}\n  nearText := client.GraphQL().NearTextArgBuilder().\n    WithConcepts(concepts).\n\n  ctx := context.Background()\n\n  result, err := client.GraphQL().Get().\n    WithClassName(className).\n    WithFields(question, answer).\n    WithNearText(nearText).\n    WithLimit(2).\n    Do(ctx)\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem> */}\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextArgument;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextMoveParameters;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class App {\n  public static void main(String[] args) {\n    Map<String, String> headers = new HashMap<String, String>() { {\n      put(\"X-OpenAI-Api-Key\", \"YOUR-OPENAI-API-KEY\");\n    } };\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\", headers);\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    NearTextMoveParameters moveTo = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"haute couture\" }).force(0.85f).build();\n\n    NearTextMoveParameters moveAway = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"finance\" }).force(0.45f)\n      .build();\n\n    NearTextArgument nearText = client.graphQL().arguments().nearTextArgBuilder()\n      .concepts(new String[]{ \"fashion\" })\n      .distance(0.6f) // use .certainty(0.7f) prior to v1.14\n      .moveTo(moveTo)\n      .moveAwayFrom(moveAway)\n      .build();\n\n    Field question = Field.builder().name(\"question\").build();\n    Field answer = Field.builder().name(\"answer\").build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"Question\")\n      .withFields(question, answer)\n      .withNearText(nearText)\n      .withLimit(1)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem> */}\n{/* <TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Question(\n        nearText: {\n          concepts: [\\\"biology\\\"],\n        },\n        limit: 1\n      ) {\n        question\n        answer\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    http://localhost:8080/v1/graphql\n```\n\n</TabItem> */}\n</Tabs>\n", "type": "Code", "name": "Code Quickstart.query.neartext.additional", "path": "_includes/code/quickstart.query.neartext.additional.mdx", "link": "https://weaviate.io/_includes/code/quickstart.query.neartext.additional", "timestamp": "2024-05-08 15:31:33", "reader": "JSON", "meta": {}, "chunks": []}