{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nfrom weaviate import Client\nimport time\n\ndef configure_batch(client: Client, batch_size: int, batch_target_rate: int):\n    \"\"\"\n    Configure the weaviate client's batch so it creates objects at `batch_target_rate`.\n\n    Parameters\n    ----------\n    client : Client\n        The Weaviate client instance.\n    batch_size : int\n        The batch size.\n    batch_target_rate : int\n        The batch target rate as # of objects per second.\n    \"\"\"\n\n    def callback(batch_results: dict) -> None:\n\n        # you could print batch errors here\n        time_took_to_create_batch = batch_size * (client.batch.creation_time/client.batch.recommended_num_objects)\n        time.sleep(\n            max(batch_size/batch_target_rate - time_took_to_create_batch + 1, 0)\n        )\n\n    client.batch.configure(\n        batch_size=batch_size,\n        timeout_retries=5,\n        callback=callback,\n    )\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n\t\"github.com/weaviate/weaviate/entities/models\"\n)\n\nvar (\n\t// adjust to your liking\n\ttargetRatePerMin = 600\n\tbatchSize        = 50\n)\n\nfunc main() {\n\tcfg := weaviate.Config{\n\t\tHost:   \"localhost:8080\",\n\t\tScheme: \"http\",\n\t}\n\tclient, err := weaviate.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// replace those 10000 empty objects with your actual data\n\tobjects := make([]*models.Object, 10000)\n\n\t// we aim to send one batch every tickInterval second.\n\ttickInterval := time.Duration(batchSize/targetRatePerMinute) * time.Minute\n\tt := time.NewTicker(tickInterval)\n\tbefore := time.Now()\n\n\tfor i := 0; i < len(objects); i += batchSize {\n\n\t\t// create a fresh batch\n\t\tbatch := client.Batch().ObjectsBatcher()\n\n\t\t// add batchSize objects to the batch\n\t\tfor j := i; j < i+batchSize; j++ {\n\t\t\tbatch = batch.WithObject(objects[i+j])\n\t\t}\n\n\t\t// send off batch\n\t\tres, err := batch.Do(context.Background())\n\t\t// TODO: inspect result for individual errors\n\t\t_ = res\n\t\t// TODO: check request error\n\t\t_ = err\n\n\t\t// we wait for the next tick. If the previous batch took longer than\n\t\t// tickInterval, we won't need to wait, effectively making this an\n\t\t// unthrottled import.\n\t\t<-t.C\n\t}\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Text2vec-api.throttling.example", "path": "_includes/code/text2vec-api.throttling.example.mdx", "link": "https://weaviate.io/_includes/code/text2vec-api.throttling.example", "timestamp": "2024-05-08 15:31:55", "reader": "JSON", "meta": {}, "chunks": []}