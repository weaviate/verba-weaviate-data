{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.filters.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START FilterByGeoCoordinates\"\n    endMarker=\"END FilterByGeoCoordinates\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nget_articles_where = \"\"\"\n  {\n    Get {\n      Publication(where: {\n        operator: WithinGeoRange,\n        valueGeoRange: {\n          geoCoordinates: {\n            latitude: 51.51,    # latitude\n            longitude: -0.09    # longitude\n          },\n          distance: {\n            max: 2000           # distance in meters\n          }\n        },\n        path: [\"headquartersGeoLocation\"] # property needs to be of geoLocation type.\n      }) {\n        name\n        headquartersGeoLocation {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\n\"\"\"\n\nquery_result = client.query.raw(get_articles_where)\nprint(query_result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Publication')\n  .withFields('name headquartersGeoLocation {latitude longitude}')\n  .withWhere({\n    operator: 'WithinGeoRange',\n    path: ['headquartersGeoLocation'],\n    valueGeoRange: {\n      geoCoordinates: {\n        latitude: 51.51,\n        longitude: -0.09,\n      },\n      distance: {\n        max: 2000,\n      },\n    },\n  })\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/filters\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n\tcfg := weaviate.Config{\n\t\tHost:   \"localhost:8080\",\n\t\tScheme: \"http\",\n\t}\n\tclient, err := weaviate.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfields := []graphql.Field{\n\t\t{Name: \"name\"},\n\t\t{Name: \"headquartersGeoLocation\", Fields: []graphql.Field{\n\t\t\t{Name: \"latitude\"},\n\t\t\t{Name: \"longitude\"},\n\t\t}},\n\t}\n\twhere := filters.Where().\n\t\tWithOperator(filters.WithinGeoRange).\n\t\tWithPath([]string{\"headquartersGeoLocation\"}).\n\t\tWithValueGeoRange(&filters.GeoCoordinatesParameter{\n\t\t\tLatitude:    51.51,\n\t\t\tLongitude:   -0.09,\n\t\t\tMaxDistance: 2000,\n\t\t})\n\n\tctx := context.Background()\n\n\tresult, err := client.GraphQL().Get().\n\t\tWithClassName(\"Publication\").\n\t\tWithFields(fields...).\n\t\tWithWhere(where).\n\t\tDo(ctx)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.filters.Operator;\nimport io.weaviate.client.v1.filters.WhereFilter;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n    public static void main(String[] args) {\n        Config config = new Config(\"http\", \"localhost:8080\");\n        WeaviateClient client = new WeaviateClient(config);\n\n        Field name = Field.builder().name(\"name\").build();\n        Field headquartersGeoLocation = Field.builder()\n                .name(\"headquartersGeoLocation\")\n                .fields(new Field[]{\n                        Field.builder().name(\"latitude\").build(),\n                        Field.builder().name(\"longitude\").build()\n                })\n                .build();\n\n        WhereFilter where = WhereFilter.builder()\n                .path(new String[]{ \"add\" })\n                .operator(Operator.WithinGeoRange)\n                .valueGeoRange(WhereFilter.GeoRange.builder()\n                        .geoCoordinates(WhereFilter.GeoCoordinates.builder()\n                                .latitude(51.51f)\n                                .longitude(-0.09f)\n                                .build())\n                        .distance(WhereFilter.GeoDistance.builder()\n                                .max(2000f)\n                                .build())\n                        .build())\n                .build();\n\n        Result<GraphQLResponse> result = client.graphQL().get()\n                .withClassName(\"Publication\")\n                .withFields(name, headquartersGeoLocation)\n                .withWhere(where)\n                .run();\n\n        if (result.hasErrors()) {\n            System.out.println(result.getError());\n            return;\n        }\n        System.out.println(result.getResult());\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Publication(where: {\n        operator: WithinGeoRange,\n        valueGeoRange: {\n          geoCoordinates: {\n            latitude: 51.51,\n            longitude: -0.09\n          },\n          distance: {\n            max: 2000\n          }\n        },\n        path: [\\\"headquartersGeoLocation\\\"]\n      }) {\n        name\n        headquartersGeoLocation {\n          latitude\n          longitude\n        }\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Publication(where: {\n      operator: WithinGeoRange,\n      valueGeoRange: {\n        geoCoordinates: {\n          latitude: 51.51,    # latitude\n          longitude: -0.09    # longitude\n        },\n        distance: {\n          max: 2000           # distance in meters\n        }\n      },\n      path: [\"headquartersGeoLocation\"] # property needs to be of geoLocation type.\n    }) {\n      name\n      headquartersGeoLocation {\n        latitude\n        longitude\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.where.geocoordinates", "path": "_includes/code/graphql.filters.where.geocoordinates.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.where.geocoordinates", "timestamp": "2024-05-08 15:31:08", "reader": "JSON", "meta": {}, "chunks": []}