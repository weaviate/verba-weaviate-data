{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport EndToEndPyCode from '!!raw-loader!/_includes/code/quickstart/endtoend.py';\nimport EndToEndPy3Code from '!!raw-loader!/_includes/code/quickstart/endtoend.py3.py';\nimport EndToEndTSCode from '!!raw-loader!/_includes/code/quickstart/endtoend.ts';\nimport EndToEndTSCodeLegacy from '!!raw-loader!/_includes/code/quickstart/endtoend-v2.ts';\n\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<FilteredTextBlock\n  text={EndToEndPyCode}\n  startMarker=\"# ===== import data =====\"\n  endMarker=\"# Test import\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n<FilteredTextBlock\n  text={EndToEndPy3Code}\n  startMarker=\"# ===== import data =====\"\n  endMarker=\"# Test import\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"js\" label=\"JS/TS v3\">\n\n<FilteredTextBlock\n  text={EndToEndTSCode}\n  startMarker=\"// Import data function\"\n  endMarker=\"// END Import data function\"\n  language=\"ts\"\n/>\n\n</TabItem>\n\n<TabItem value=\"js2\" label=\"JS/TS v2\">\n\n<FilteredTextBlock\n  text={EndToEndTSCodeLegacy}\n  startMarker=\"// Import data function\"\n  endMarker=\"// END Import data function\"\n  language=\"ts\"\n/>\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate/auth\"\n\t\"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n\tcfg := weaviate.Config{\n\t\tHost:       \"WEAVIATE_INSTANCE_URL/\", // Replace with your Weaviate endpoint\n\t\tScheme:     \"https\",\n\t\tAuthConfig: auth.ApiKey{Value: \"YOUR-WEAVIATE-API-KEY\"}, // Replace with your Weaviate instance API key\n\t\tHeaders: map[string]string{\n\t\t\t\"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\", // Replace with your inference API key\n\t\t},\n\t}\n\n\tclient, err := weaviate.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Retrieve the data\n\tdata, err := http.DefaultClient.Get(\"https://raw.githubusercontent.com/weaviate-tutorials/quickstart/main/data/jeopardy_tiny.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer data.Body.Close()\n\n\t// Decode the data\n\tvar items []map[string]string\n\tif err := json.NewDecoder(data.Body).Decode(&items); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// convert items into a slice of models.Object\n\tobjects := make([]*models.Object, len(items))\n\tfor i := range items {\n\t\tobjects[i] = &models.Object{\n\t\t\tClass: \"Question\",\n\t\t\tProperties: map[string]any{\n\t\t\t\t\"category\": items[i][\"Category\"],\n\t\t\t\t\"question\": items[i][\"Question\"],\n\t\t\t\t\"answer\":   items[i][\"Answer\"],\n\t\t\t},\n\t\t}\n\t}\n\n\t// batch write items\n\tbatchRes, err := client.Batch().ObjectsBatcher().WithObjects(objects...).Do(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, res := range batchRes {\n\t\tif res.Result.Errors != nil {\n\t\t\tpanic(res.Result.Errors.Error)\n\t\t}\n\t}\n}\n```\n\n</TabItem>\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\n\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // we will create the class \"Question\" and the properties\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Question\")\n      .vectorizer(\"text2vec-openai\")\n      .build();\n\n    // add the schema\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n# Replace with your Weaviate endpoint\nAPI_URL=\"http://WEAVIATE_INSTANCE_URL/v1/batch/objects\"\n# Replace with your Inference API token\nOPENAI_API_TOKEN=\"<OpenAI-API-Token>\"\n# Set batch size\nBATCH_SIZE=100\n\n# Read the JSON file and loop through its entries\nlines_processed=0\nbatch_data=\"{\\\"objects\\\": [\"\n\ncat jeopardy_tiny.json | jq -c '.[]' | while read line; do\n  # Concatenate lines\n  line=$(echo \"$line\" | jq \"{class: \\\"Question\\\", properties: {answer: .Answer, question: .Question, category: .Category}}\")\n  if [ $lines_processed -eq 0 ]; then\n    batch_data+=$line\n  else\n    batch_data+=\",$line\"\n  fi\n\n  lines_processed=$((lines_processed + 1))\n\n  # If the batch is full, send it to the API using curl\n  if [ $lines_processed -eq $BATCH_SIZE ]; then\n    batch_data+=\"]}\"\n\n    curl -X POST \"$API_URL\" \\\n         -H \"Content-Type: application/json\" \\\n         -H \"X-OpenAI-Api-Key: $OPENAI_API_TOKEN\" \\\n         -d \"$batch_data\"\n    echo \"\" # Print a newline for better output formatting\n\n    # Reset the batch data and counter\n    lines_processed=0\n    batch_data=\"{\\\"objects\\\": [\"\n  fi\ndone\n\n# Send the remaining data (if any) to the API using curl\nif [ $lines_processed -ne 0 ]; then\n  batch_data+=\"]}\"\n\n  curl -X POST \"$API_URL\" \\\n       -H \"Content-Type: application/json\" \\\n       -H \"X-OpenAI-Api-Key: $OPENAI_API_TOKEN\" \\\n       -d \"$batch_data\"\n  echo \"\" # Print a newline for better output formatting\nfi\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Quickstart Import", "path": "_includes/code/quickstart/import.mdx", "link": "https://weaviate.io/_includes/code/quickstart/import", "timestamp": "2024-05-08 15:31:39", "reader": "JSON", "meta": {}, "chunks": []}