{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n# GraphQL doesn't support png->base64 encoding, so please use a base64 encoded image in your query\n\n{\n  Get {\n    FashionItem(nearImage: {\n      image: \"/9j/4AAQSkZJRgABAgE...\"\n    }) {\n      image\n    }\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nnearImage = {\"image\": \"my_image_path.png\"}\n\nresult = (\n  client.query\n  .get(\"FashionItem\", \"image\")\n  .with_near_image(nearImage, encode=True)\n  .do()\n)\n\nprint(result)\n\n## OR use the weaviate.utils function:\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nencoded_image = weaviate.util.image_encoder_b64(\"my_image_path.png\")\n\nnearImage = {'image': 'encoded_image'}\n\nresult = (\n  client.query\n  .get('FashionItem', 'image')\n  .with_near_image(nearImage, encode=False)\n  .do()\n)\n\nprint(result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\n// The TypeScript client doesn't have a helper function for base64 image encoding\n\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('FashionItem')\n  .withFields('image')\n  .withNearImage({ image: '/9j/4AAQSkZJRgABAgE...' })\n  .do();\n\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"os\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  className := \"FashionItem\"\n  image := graphql.Field{Name: \"image\"}\n\n  filename := \"my_image_path.png\"\n  file, err := os.Open(filename)\n  if err != nil {\n    panic(err)\n  }\n\n  nearImage := client.GraphQL().NearImageArgBuilder().WithReader(file)\n  ctx := context.Background()\n\n  result, err := client.GraphQL().Get().\n    WithClassName(className).\n    WithFields(image).\n    WithNearImage(nearImage).\n    Do(ctx)\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.io.File;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearImageArgument;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    File imageFile = new File(\"my_image_path.png\");\n\n    String className = \"FashionItem\";\n    Field image = Field.builder().name(\"image\").build();\n\n    NearImageArgument nearImage = client.graphQL().arguments().nearImageArgBuilder()\n      .imageFile(imageFile)\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(className)\n      .withFields(image)\n      .withNearImage(nearImage)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      FashionItem(nearImage: {\n        image: \"/9j/4AAQSkZJRgABAgE...\"\n      }) {\n        image\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -d @- \\\n    http://localhost:8080/v1/graphql\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Img2vec-neural.nearimage.encode", "path": "_includes/code/img2vec-neural.nearimage.encode.mdx", "link": "https://weaviate.io/_includes/code/img2vec-neural.nearimage.encode", "timestamp": "2024-05-08 15:31:25", "reader": "JSON", "meta": {}, "chunks": []}