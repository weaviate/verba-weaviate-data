{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLnearVector\"\n    endMarker=\"END GraphQLnearVector\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nnearVector = {\n  \"vector\": [0.1, -0.15, 0.3.. ]  # Replace with a compatible vector\n}\n\nresult = (\n  client.query\n  .get(\"Publication\", \"name\")\n  .with_additional(\"distance\")\n  .with_near_vector(nearVector)\n  .do()\n)\n\nprint(result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Publication')\n  .withFields('name _additional {certainty}')\n  .withNearVector({\n    vector: [0.1, -0.15, 0.3, ... ]   // Replace with a compatible vector\n  })\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  className := \"Publication\"\n\n  name := graphql.Field{Name: \"name\"}\n  _additional := graphql.Field{\n    Name: \"_additional\", Fields: []graphql.Field{\n      {Name: \"certainty\"},  // only supported if distance==cosine\n      {Name: \"distance\"},   // always supported\n    },\n  }\n\n  nearVector := client.GraphQL().NearVectorArgBuilder().\n    WithVector([]float32{0.1, -0.15, 0.3})  // Replace with a compatible vector\n\n  ctx := context.Background()\n  result, err := client.GraphQL().Get().\n    WithClassName(className).\n    WithFields(name, _additional).\n    WithNearVector(nearVector).\n    Do(ctx)\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearVectorArgument;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    String className = \"Publication\";\n    Field title = Field.builder().name(\"title\").build();\n    Field _additional = Field.builder()\n      .name(\"_additional\")\n      .fields(new Field[]{\n        Field.builder().name(\"certainty\").build()  // only supported if distance==cosine\n        Field.builder().name(\"distance\").build()   // always supported\n      }).build();\n\n    Float[] vector = new Float[]{0.1f, -0.15f, 0.3f};  // Replace with a compatible vector\n    NearVectorArgument nearVector = NearVectorArgument.builder()\n      .vector(vector)\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(className)\n      .withFields(title, _additional)\n      .withNearVector(nearVector)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\nReplace the placeholder vector with a compatible vector.\n\n```bash\n# Note: under _additional, `certainty` is only supported if distance==cosine, but `distance` is always supported\n\necho '{\n  \"query\": \"{\n    Get {\n      Publication(\n        nearVector: {\n          vector: [0.1, -0.15, 0.3]\n        }\n      ) {\n        name\n        _additional {\n          certainty\n          distance\n        }\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get{\n    Publication(\n      nearVector: {\n        vector: [0.1, -0.15, 0.3]  # Replace with a compatible vector\n      }\n    ){\n      name\n      _additional {\n        certainty\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.nearvector", "path": "_includes/code/graphql.filters.nearVector.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.nearVector", "timestamp": "2024-05-08 15:31:06", "reader": "JSON", "meta": {}, "chunks": []}