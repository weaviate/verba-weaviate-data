{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Explore (\n    nearText: {\n      concepts: [\"New Yorker\"],\n      distance: 0.1,  # use certainty instead of distance prior to v1.14\n      moveAwayFrom: {\n        concepts: [\"fashion\", \"shop\"],\n        force: 0.2\n      }\n      moveTo: {\n        concepts: [\"publisher\", \"articles\"],\n        force: 0.5\n      },\n    }\n  ) {\n    beacon\n    certainty # only supported if distance==cosine.\n    distance  # always supported\n    className\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nexplore_articles_query = \"\"\"\n  {\n    Explore (\n      nearText: {\n        concepts: [\"New Yorker\"],\n        distance: 0.1,  # use certainty instead of distance prior to v1.14\n        moveAwayFrom: {\n          concepts: [\"fashion\", \"shop\"],\n          force: 0.2\n        }\n        moveTo: {\n          concepts: [\"publisher\", \"articles\"],\n          force: 0.5\n        },\n      }\n    ) {\n      beacon\n      certainty # only supported if distance==cosine.\n      distance  # always supported\n      className\n    }\n  }\n\"\"\"\n\nquery_result = client.query.raw(explore_articles_query)\nprint(query_result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .explore()\n  .withNearText({\n    concepts: ['New Yorkers'],\n    moveTo: { concepts: ['publisher', 'articles'], force: 0.5 },\n    moveAwayFrom: { concepts: ['fashion', 'shop'], force: 0.2 },\n    distance: 0.95,  // prior to v1.14, use certainty\n  })\n  .withFields('beacon certainty distance className')  // certainty is only supported if distance==cosine\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  concepts := []string{\"New Yorker\"}\n  distance := float32(0.95)\n  moveTo := &graphql.MoveParameters{\n    Concepts: []string{\"publisher\", \"articles\"},\n    Force:    0.5,\n  }\n  moveAwayFrom := &graphql.MoveParameters{\n    Concepts: []string{\"fashion\", \"shop\"},\n    Force:    0.2,\n  }\n  withNearText := client.GraphQL().NearTextArgBuilder().\n    WithConcepts(concepts).\n    WithDistance(0.6).  // prior to v1.14, use WithCertainty()\n    WithMoveTo(moveTo).\n    WithMoveAwayFrom(moveAwayFrom)\n\n  result, err := client.GraphQL().Explore().\n    WithFields(\n      graphql.Beacon,\n      graphql.Certainty,  // only supported if distance==cosine\n      graphql.Distance,   // always supported\n      graphql.ClassName).\n    WithNearText(withNearText).\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.ExploreFields;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextArgument;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextMoveParameters;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    NearTextMoveParameters moveTo = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"publisher\", \"articles\" }).force(0.5f).build();\n\n    NearTextMoveParameters moveAway = NearTextMoveParameters.builder()\n      .concepts(new String[]{ \"fashion\", \"shop\" }).force(0.2f)\n      .build();\n\n    NearTextArgument nearText = client.graphQL().arguments().nearTextArgBuilder()\n      .concepts(new String[]{ \"New Yorker\" })\n      .moveTo(moveTo)\n      .moveAwayFrom(moveAway)\n      .distance(0.95f)  // prior to v1.14 use .certainty()\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().explore()\n      .withFields(ExploreFields.BEACON,\n        ExploreFields.CERTAINTY,  // only supported if distance==cosine\n        ExploreFields.DISTANCE,   // always supported\n        ExploreFields.CLASS_NAME)\n      .withNearText(nearText)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\nNote: `certainty` is only supported if distance==cosine. `distance` is always supported.\necho '{\n  \"query\": \"{\n    Explore (\n      nearText: {\n        concepts: [\\\"New Yorker\\\"],\n        distance: 0.95, # prior to v1.14 use \"certainty\" instead of \"distance\"\n        moveAwayFrom: {\n          concepts: [\\\"fashion\\\", \\\"shop\\\"],\n          force: 0.2\n        }\n        moveTo: {\n          concepts: [\\\"publisher\\\", \\\"articles\\\"],\n          force: 0.5\n        },\n      }\n    ) {\n      beacon\n      certainty\n      distance\n      className\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -d @- \\\n    http://localhost:8080/v1/graphql\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.explore.simple", "path": "_includes/code/graphql.explore.simple.mdx", "link": "https://weaviate.io/_includes/code/graphql.explore.simple", "timestamp": "2024-05-08 15:30:56", "reader": "JSON", "meta": {}, "chunks": []}