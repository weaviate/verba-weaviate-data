{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport EndToEndPy3Code from '!!raw-loader!/_includes/code/quickstart/endtoend.py3.py';\nimport EndToEndTSCode from '!!raw-loader!/_includes/code/quickstart/endtoend.ts';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python\">\n\n<FilteredTextBlock\n  text={EndToEndPy3Code}\n  startMarker=\"# DockerInstantiationExample\"\n  endMarker=\"# END DockerInstantiationExample\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n<FilteredTextBlock\n  text={EndToEndTSCode}\n  startMarker=\"// DockerInstantiationExample\"\n  endMarker=\"// END DockerInstantiationExample\"\n  language=\"ts\"\n/>\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",  // Replace with your Weaviate endpoint\n    Scheme: \"http\",\n    Headers: map[string]string{\n      \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\",  // Replace with your inference API key\n    },\n  }\n\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n      panic(err)\n  }\n}\n```\n\n</TabItem>\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\n\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");  // Replace with your Weaviate endpoint\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // we will create the class \"Question\" and the properties\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Question\")\n      .vectorizer(\"text2vec-openai\")\n      .build();\n\n    // add the schema\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n  }\n}\n```\n\n</TabItem> */}\n<TabItem value=\"curl\" label=\"Curl\">\n\n- With `curl`, add the API key to the header as shown below:\n<br/>\n\n```bash\necho '{\n  \"query\": \"<QUERY>\"\n}' | curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    http://localhost:8080/v1/graphql\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Quickstart.autoschema.connect.docker", "path": "_includes/code/quickstart.autoschema.connect.docker.mdx", "link": "https://weaviate.io/_includes/code/quickstart.autoschema.connect.docker", "timestamp": "2024-05-08 15:31:29", "reader": "JSON", "meta": {}, "chunks": []}