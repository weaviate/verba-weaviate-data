{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport PyCode from '!!raw-loader!/_includes/code/graphql.additional.py';\n\n<Tabs groupId=\"languages\">\n  <TabItem value=\"py4\" label=\"Python (v4)\">\n    <FilteredTextBlock\n      text={PyCode}\n      startMarker=\"# START MergingEntities\"\n      endMarker=\"# END MergingEntities\"\n      language=\"py\"\n    />\n  </TabItem>\n\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nget_articles_group = \"\"\"\n  {\n    Get {\n      Publication(\n        group:{\n          type: merge,\n          force:0.05\n        }\n      ) {\n        name\n      }\n    }\n  }\n\"\"\"\n\nquery_result = client.query.raw(get_articles_group)\nprint(query_result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Publication')\n  .withFields('name')\n  .withGroup({\n    type: 'merge',\n    force: 0.05,\n  })\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  name := graphql.Field{Name: \"name\"}\n  group := client.GraphQL().GroupArgBuilder().WithType(graphql.Merge).WithForce(0.05)\n\n  result, err := client.GraphQL().Get().\n    WithClassName(\"Publication\").\n    WithFields(name).\n    WithGroup(group).\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.GroupArgument;\nimport io.weaviate.client.v1.graphql.query.argument.GroupType;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    Field name = Field.builder().name(\"name\").build();\n    GroupArgument group = GroupArgument.builder()\n      .type(GroupType.merge)\n      .force(0.05f)\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"Publication\")\n      .withFields(name)\n      .withGroup(group)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Publication(\n        group: {\n          type: merge,\n          force: 0.05\n        }\n      ) {\n        name\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Publication(\n      group: {\n        type: merge,\n        force: 0.05\n      }\n    ) {\n      name\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.group", "path": "_includes/code/graphql.filters.group.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.group", "timestamp": "2024-05-08 15:30:58", "reader": "JSON", "meta": {}, "chunks": []}