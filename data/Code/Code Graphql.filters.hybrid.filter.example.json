{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLHybridWithFilter\"\n    endMarker=\"END GraphQLHybridWithFilter\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\n# highlight-start\nwhere_filter = {\n  \"path\": [\"wordCount\"],\n  \"operator\": \"LessThan\",\n  \"valueInt\": \"1000\"\n}\n# highlight-end\nquery_result = (\n  client.query\n  .get(\"Article\", [\"title\", \"summary\"])\n  .with_where(where_filter)\n  .with_hybrid(query= \"How to catch an Alaskan Pollock\",alpha=0.5)\n  .do()\n)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withFields('title summary')\n  .withHybrid({\n    query: 'How to catch Alaskan Pollock',\n    alpha: 0.5,\n  })\n  // highlight-start\n  .withWhere({\n    operator: 'LessThan',\n    path: ['wordCount'],\n    valueInt: 1000,\n  })\n  // highlight-end\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\n// highlight-start\nwhere := filters.Where().\nWithPath([]string{\"content\"}).\n  WithOperator(filters.Equal).\n  WithValueString(\"Alaskan\")  // All results must have \"Alaskan\" in the content property\n// highlight-end\n\nname = graphql.Field{Name: \"summary\"}\n\nhybrid := &graphql.HybridArgumentBuilder{}\nhybrid.WithQuery(\"How to catch an Alaskan Pollock\").WithAlpha(0.5)\n\nresultSet, gqlErr := client.GraphQL().Get().WithClassName(\"Article\").WithHybrid(hybrid).WithWhere(where).WithFields(name).Do(context.Background())\narticles := get[\"Article\"].([]interface{})\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\nField title = Field.builder().name(\"title\" \"summary\").build();\n\n// highlight-start\nWhereFilter where = WhereFilter.builder()\n  .path(new String[]{ \"wordCount\" })\n  .operator(Operator.LessThan)\n  .valueInt(1000)\n  .build();\n// highlight-end\n\nHybridFilter hybridFilter = HybridFilter.builder()\n  .query(\"How to catch an Alaskan Pollock.\")\n  .alpha(0.5)\n  .build();\n\nResult<GraphQLResponse> result = client.graphQL().get()\n  .withClassName(\"Article\")\n  .withFields(title)\n  .withWhere(where)\n  .withHybrid(hybridFilter)\n  .run();\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n      Get {\n        Article (\n          hybrid: { query: \\\"How to catch an Alaskan Pollock\\\", alpha: 0.5 }\n          # highlight-start\n          where: { path: [\\\"wordCount\\\"], operator: LessThan, valueInt: 1000 }\n          # highlight-end\n        ) {\n          title\n          summary\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article (\n      hybrid: { query: \"how to fish\", alpha: 0.5 }\n    # highlight-start\n      where: { path: [\"wordCount\"], operator: LessThan, valueInt: 1000 }\n    # highlight-end\n    ) {\n      title\n      summary\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.hybrid.filter.example", "path": "_includes/code/graphql.filters.hybrid.filter.example.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.hybrid.filter.example", "timestamp": "2024-05-08 15:30:59", "reader": "JSON", "meta": {}, "chunks": []}