{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/rest.schema.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START CreateCollectionElaborate\"\n    endMarker=\"END CreateCollectionElaborate\"\n    language=\"py\"\n  />\n</TabItem>\n\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nclass_obj = {\n    \"class\": \"Article\",\n    \"description\": \"A written text, for example a news article or blog post\",\n    \"vectorIndexType\": \"hnsw\",\n    \"vectorIndexConfig\": {\n        \"distance\": \"cosine\",\n        \"efConstruction\": 128,\n        \"maxConnections\": 64\n    },\n    \"vectorizer\": \"text2vec-contextionary\",\n    \"moduleConfig\": {\n      \"text2vec-contextionary\": {\n        \"vectorizeClassName\": True\n      }\n    },\n    \"properties\": [\n        {\n            \"dataType\": [\n                \"text\"\n            ],\n            \"description\": \"Title of the article\",\n            \"name\": \"title\",\n            \"indexFilterable\": True,\n            \"indexSearchable\": True,\n            \"moduleConfig\": {\n                \"text2vec-contextionary\": {\n                  \"skip\": False,\n                  \"vectorizePropertyName\": False\n                }\n              }\n        },\n        {\n            \"dataType\": [\n                \"text\"\n            ],\n            \"description\": \"The content of the article\",\n            \"name\": \"content\",\n            \"indexFilterable\": True,\n            \"indexSearchable\": True,\n            \"moduleConfig\": {\n                \"text2vec-contextionary\": {\n                  \"skip\": False,\n                  \"vectorizePropertyName\": False\n                }\n              }\n        }\n    ],\n    \"shardingConfig\": {\n      \"virtualPerPhysical\": 128,\n      \"desiredCount\": 1,\n      \"desiredVirtualCount\": 128,\n    },\n    \"invertedIndexConfig\": {\n      \"stopwords\": {\n        \"preset\": \"en\",\n        \"additions\": [\"star\", \"nebula\"],\n        \"removals\": [\"a\", \"the\"]\n      },\n      \"indexTimestamps\": True\n    },\n    \"replicationConfig\": {\n      \"factor\": 3\n    }\n}\n\nclient.schema.create_class(class_obj)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst classObj = {\n  class: 'Article',\n  description: 'A written text, for example a news article or blog post',\n  vectorIndexType: 'hnsw',\n  vectorIndexConfig: {\n    distance: 'cosine',\n    efConstruction: 128,\n    maxConnections: 64,\n  },\n  vectorizer: 'text2vec-contextionary',\n  moduleConfig: {\n    'text2vec-contextionary': {\n      vectorizeClassName: true,\n    },\n  },\n  properties: [\n    {\n      dataType: [\n        'text',\n      ],\n      description: 'Title of the article',\n      name: 'title',\n      indexFilterable: true,\n      indexSearchable: true,\n      moduleConfig: {\n        'text2vec-contextionary': {\n          skip: false,\n          vectorizePropertyName: false,\n        },\n      },\n    },\n    {\n      dataType: [\n        'text',\n      ],\n      description: 'The content of the article',\n      name: 'content',\n      indexFilterable: true,\n      indexSearchable: true,\n      moduleConfig: {\n        'text2vec-contextionary': {\n          skip: false,\n          vectorizePropertyName: false,\n        },\n      },\n    },\n  ],\n  shardingConfig: {\n    virtualPerPhysical: 128,\n    desiredCount: 1,\n    desiredVirtualCount: 128,\n  },\n  invertedIndexConfig: {\n    stopwords: {\n      preset: 'en',\n      additions: ['star', 'nebula'],\n      removals: ['a', 'the'],\n    },\n    indexTimestamps: true,\n  },\n  replicationConfig: {\n    factor: 3,\n  },\n};\n\nconst response = await client\n  .schema\n  .classCreator()\n  .withClass(classObj)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  classObj := &models.Class{\n    Class:             \"Article\",\n    Description:       \"A written text, for example a news article or blog post\",\n    VectorIndexType:   \"hnsw\",\n    Vectorizer:        \"text2vec-contextionary\",\n    VectorIndexConfig: map[string]interface{}{\n      \"distance\": \"cosine\",\n      \"ef\": float64(128),\n      \"efConstruction\": float64(128),\n      \"maxConnections\": float64(32),\n    },\n    Properties: []*models.Property{\n      {\n        DataType:    []string{\"text\"},\n        Description: \"Title of the article\",\n        Name:        \"title\",\n        IndexFilterable: true,\n        IndexSearchable: true,\n      },\n      {\n        DataType:    []string{\"text\"},\n        Description: \"The content of the article\",\n        Name:        \"content\",\n        IndexFilterable: true,\n        IndexSearchable: true,\n      },\n    },\n    InvertedIndexConfig: &models.InvertedIndexConfig{\n      Stopwords: &models.StopwordConfig{\n        Preset:    \"en\",\n        Additions: []string{\"star\", \"nebula\"},\n        Removals:  []string{\"a\", \"the\"},\n      },\n      IndexTimestamps: true,\n    },\n    ReplicationConfig: &models.ReplicationConfig{\n      Factor: 3,\n    }\n  }\n\n  err := client.Schema().ClassCreator().WithClass(classObj).Do(context.Background())\n  if err != nil {\n    panic(err)\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.misc.model.InvertedIndexConfig;\nimport io.weaviate.client.v1.misc.model.ShardingConfig;\nimport io.weaviate.client.v1.misc.model.StopwordConfig;\nimport io.weaviate.client.v1.misc.model.VectorIndexConfig;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\nimport io.weaviate.client.v1.misc.model.ReplicationConfig;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    StopwordConfig stopwordConfig = StopwordConfig.builder()\n      .preset(\"en\")\n      .additions(new String[]{ \"star\", \"nebula\" })\n      .removals(new String[]{ \"a\", \"the\" })\n      .build();\n\n    InvertedIndexConfig invertedIndexConfig = InvertedIndexConfig.builder()\n      .stopwords(stopwordConfig)\n      .indexTimestamps(true)\n      .build();\n\n    VectorIndexConfig vectorIndexConfig = VectorIndexConfig.builder()\n      .distance(\"cosine\")\n      .cleanupIntervalSeconds(300)\n      .efConstruction(128)\n      .maxConnections(64)\n      .vectorCacheMaxObjects(500000)\n      .ef(-1)\n      .skip(false)\n      .dynamicEfFactor(8)\n      .dynamicEfMax(500)\n      .dynamicEfMin(100)\n      .flatSearchCutoff(40000)\n      .build();\n\n    ShardingConfig shardingConfig = ShardingConfig.builder()\n      .desiredCount(1)\n      .desiredVirtualCount(128)\n      .virtualPerPhysical(128)\n      .build();\n\n    ReplicationConfig replicationConfig = ReplicationConfig.builder()\n      .factor(3)\n      .build();\n\n\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Article\")\n      .description(\"A written text, for example a news article or blog post\")\n      .vectorIndexType(\"hnsw\")\n      .vectorizer(\"text2vec-contextionary\")\n      .invertedIndexConfig(invertedIndexConfig)\n      .shardingConfig(shardingConfig)\n      .vectorIndexConfig(vectorIndexConfig)\n      .replicationConfig(replicationConfig)\n      .properties(new ArrayList() { {\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.TEXT); } })\n          .description(\"Title of the article\")\n          .name(\"title\")\n          .indexFilterable(true)\n          .indexSearchable(true)\n          .build());\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.TEXT); } })\n          .description(\"The content of the article\")\n          .name(\"content\")\n          .indexFilterable(true)\n          .indexSearchable(true)\n          .build());\n      } })\n      .build();\n\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\ncurl \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"class\": \"Article\",\n    \"description\": \"A written text, for example a news article or blog post\",\n    \"vectorIndexType\": \"hnsw\",\n    \"vectorIndexConfig\": {\n        \"distance\": \"cosine\",\n        \"efConstruction\": 128,\n        \"maxConnections\": 64\n    },\n    \"vectorizer\": \"text2vec-contextionary\",\n    \"moduleConfig\": {\n      \"text2vec-contextionary\": {\n        \"vectorizeClassName\": true\n      }\n    },\n    \"properties\": [\n        {\n            \"dataType\": [\n                \"text\"\n            ],\n            \"description\": \"Title of the article\",\n            \"name\": \"title\",\n            \"indexFilterable\": true,\n            \"indexSearchable\": true,\n            \"moduleConfig\": {\n                \"text2vec-contextionary\": {\n                  \"skip\": false,\n                  \"vectorizePropertyName\": true\n                }\n              }\n        },\n        {\n            \"dataType\": [\n                \"text\"\n            ],\n            \"description\": \"The content of the article\",\n            \"name\": \"content\",\n            \"indexFilterable\": true,\n            \"indexSearchable\": true,\n            \"moduleConfig\": {\n                \"text2vec-contextionary\": {\n                  \"skip\": false,\n                  \"vectorizePropertyName\": true\n                }\n              }\n        }\n    ],\n    \"shardingConfig\": {\n      \"virtualPerPhysical\": 128,\n      \"desiredCount\": 1,\n      \"desiredVirtualCount\": 128,\n    },\n    \"invertedIndexConfig\": {\n      \"stopwords\": {\n        \"preset\": \"en\",\n        \"additions\": [\"star\", \"nebula\"],\n        \"removals\": [\"a\", \"the\"]\n      },\n      \"indexTimestamps\": true\n    },\n    \"replicationConfig\": {\n      \"factor\": 3\n    }\n}' \\\nhttp://localhost:8080/v1/schema\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Schema.things.create.elaborate", "path": "_includes/code/schema.things.create.elaborate.mdx", "link": "https://weaviate.io/_includes/code/schema.things.create.elaborate", "timestamp": "2024-05-08 15:31:45", "reader": "JSON", "meta": {}, "chunks": []}