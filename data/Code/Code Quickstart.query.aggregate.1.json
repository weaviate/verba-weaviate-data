{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n{<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Aggregate {\n    Question {\n      meta {\n        count\n      }\n    }\n  }\n}\n```\n\n</TabItem>}\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\nimport json\n\nclient = weaviate.Client(\n    url=\"https://WEAVIATE_INSTANCE_URL/\",  # Replace with your Weaviate endpoint\n    additional_headers={\n        \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\"  # Or \"X-Cohere-Api-Key\" or \"X-HuggingFace-Api-Key\"\n    }\n)\n\nresult = (\n    client.query\n    .aggregate(\"Question\")\n    .with_fields(\"meta { count }\")\n    .do()\n)\n\nprint(json.dumps(result, indent=4))\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate, { ApiKey } from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'WEAVIATE_INSTANCE_URL',  // Replace with your Weaviate endpoint\n  apiKey: new ApiKey('YOUR-WEAVIATE-API-KEY'),  // Replace with your Weaviate API key\n  headers: { 'X-OpenAI-Api-Key': process.env['OPENAI_API_KEY'] },  // Replace with your API key\n});\n\nconst response = await client.graphql\n  .aggregate()\n  .withClassName('Question')\n  .withFields('meta { count }')\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n{/* <TabItem value=\"go\" label=\"Go\">\n\n```go\nTBC\n```\n\n</TabItem> */}\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\nTBC\n```\n\n</TabItem> */}\n{/* <TabItem value=\"curl\" label=\"Curl\">\n\n```bash\nTBC\n```\n\n</TabItem> */}\n</Tabs>\n", "type": "Code", "name": "Code Quickstart.query.aggregate.1", "path": "_includes/code/quickstart.query.aggregate.1.mdx", "link": "https://weaviate.io/_includes/code/quickstart.query.aggregate.1", "timestamp": "2024-05-08 15:31:32", "reader": "JSON", "meta": {}, "chunks": []}