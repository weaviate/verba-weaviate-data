{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLHybridWithVector\"\n    endMarker=\"END GraphQLHybridWithVector\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nresult = (\n  client.query\n  .get(\"Article\", [\"title\", \"summary\"])\n  .with_additional([\"score\"])\n  .with_hybrid(\"Fisherman that catches salmon\", alpha=0.5, vector=[1, 2, 3])\n  .do()\n  )\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withFields('title summary _additional { score }')\n  .withHybrid({\n    query: 'Fisherman that catches salmon',\n    vector: [1, 2, 3],  // optional. Not needed if Weaviate handles the vectorization.\n    alpha: 0.5, // optional, defaults to 0.75\n  })\n  .do();\nconsole.log(response);\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\nhybrid := &HybridArgumentBuilder{}\n\thybrid.WithQuery(\"Fisherman that catches salmon\").WithVector(1, 2, 3).WithAlpha(0.5)\n\n\tquery := builder.WithClassName(\"Article\").WithHybrid(hybrid).build()\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\nHybridArgument hybrid = client.graphQL().arguments().HybridArgBuilder()\n  .query(\"Fisherman that catches salmon\")\n  .vector(Float[]{1f,2f,3f})\n  .alpha(0.5f)\n  .build();\nField name = Field.builder().name(\"title\" \"summary\").build();\nField _additional = Field.builder()\n  .name(\"_additional\")\n  .fields(new Field[]{Field.builder().name(\"score\").build()})\n  .build();\n// when\ntestGenerics.createTestSchemaAndData(client);\nResult<GraphQLResponse> result = client.graphQL().get().withClassName(\"Article\")\n  .withHybrid(hybrid)\n  .withFields(name, _additional).run();\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n# The `vector` below is optional. Not needed if Weaviate handles the vectorization.\n# If you provide your own embeddings, put the vector query there, and make sure it has the correct number of dimensions.\necho '{\n  \"query\": \"{\n      Get {\n        Article(\n          hybrid: {\n            query: \\\"Fisherman that catches salmon\\\"\n            alpha: 0.5\n            vector: [1, 2, 3]\n          })\n        {\n          title\n          summary\n          _additional { score }\n      }\n    }\n  }\"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article (\n      hybrid: {\n        query: \"Fisherman that catches salmon\"\n        alpha: 0.5\n        vector: [1, 2, 3] # optional. Not needed if Weaviate handles the vectorization. If you provide your own embeddings, put the vector query here.\n      })\n     {\n      title\n      summary\n      _additional { score }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Graphql.filters.hybrid.vector", "path": "_includes/code/graphql.filters.hybrid.vector.mdx", "link": "https://weaviate.io/_includes/code/graphql.filters.hybrid.vector", "timestamp": "2024-05-08 15:31:00", "reader": "JSON", "meta": {}, "chunks": []}