{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/rest.objects.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START SpecifyVectorInObject\"\n    endMarker=\"END SpecifyVectorInObject\"\n    language=\"py\"\n  />\n</TabItem>\n\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\ndata_obj = {\n    \"foo\": \"bar\"\n}\n\ndata_uuid = client.data_object.create(\n  data_obj,\n  \"YourClass\",\n  uuid=\"36ddd591-2dee-4e7e-a3cc-eb86d30a0923\", # optional, if not provided, one is going to be generated\n  vector = [0.3, 0.2, 0.1, .... 0.9], # supported types are `list`, `numpy.ndarray`, `torch.Tensor` and `tf.Tensor`.\n)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst vector = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9];\n\nconst response = await client.data\n  .creator()\n  .withClassName('Publication')\n  .withId('df48b9f6-ba48-470c-bf6a-57657cb07390')\n  .withProperties({\n    'name': 'Elsevier',\n    'headquartersGeoLocation': {\n      'latitude': 52.3932696,\n      'longitude': 4.8374263,\n    },\n  })\n  .withVector(vector)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  dataSchema := map[string]interface{}{\n    \"foo\": \"bar\",\n  }\n\n  vector := []float32{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9}\n\n  created, err := client.Data().Creator().\n    WithClassName(\"YourClass\").\n    WithID(\"36ddd591-2dee-4e7e-a3cc-eb86d30a0923\").\n    WithProperties(dataSchema).\n    WithVector(vector).\n    Do(context.Background())\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", created)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.data.model.WeaviateObject;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    Map<String, Object> dataSchema = new HashMap<>();\n    dataSchema.put(\"name\", \"Jodi Kantor\");\n    dataSchema.put(\"writesFor\", new HashMap() { {\n      put(\"beacon\", \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\");\n    } });\n\n    Float[] vector = new Float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.6f, 0.7f, 0.8f, 0.9f};\n\n    Result<WeaviateObject> result = client.data().creator()\n      .withClassName(\"Author\")\n      .withID(\"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\")\n      .withVector(vector)\n      .withProperties(dataSchema)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\ncurl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n      \"class\": \"YourClass\",\n      \"vector\": [0.3, -0.012, 0.071, ..., -0.09],\n      \"properties\": {\n          \"foo\": \"bar\"\n      }\n  }' \\\n    http://localhost:8080/v1/objects\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Semantic-kind.create.vector", "path": "_includes/code/semantic-kind.create.vector.mdx", "link": "https://weaviate.io/_includes/code/semantic-kind.create.vector", "timestamp": "2024-05-08 15:31:49", "reader": "JSON", "meta": {}, "chunks": []}