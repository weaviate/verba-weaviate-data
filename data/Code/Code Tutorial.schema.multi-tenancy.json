{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\nimport PyCode from '!!raw-loader!/_includes/code/starter-guides/schema.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n\n<FilteredTextBlock\n  text={PyCode}\n  startMarker=\"# START SchemaWithMultiTenancy\"\n  endMarker=\"# END SchemaWithMultiTenancy\"\n  language=\"py\"\n/>\n\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\nimport json\n\nclient = weaviate.Client(\"https://WEAVIATE_INSTANCE_URL/\")  # Replace with your Weaviate endpoint\n\n# we will create the class \"Question\"\nclass_obj = {\n    \"class\": \"Question\",\n    \"description\": \"Information from a Jeopardy! question\",  # description of the class\n    \"vectorizer\": \"text2vec-openai\",\n    \"moduleConfig\": {\n        \"generative-openai\": {}  # Set `generative-openai` as the generative module\n    },\n    \"properties\": [\n        {\n            \"name\": \"question\",\n            \"dataType\": [\"text\"],\n            \"description\": \"The question\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {  # this must match the vectorizer used\n                    \"vectorizePropertyName\": True,\n                    \"tokenization\": \"lowercase\"\n                }\n            }\n        },\n        {\n            \"name\": \"answer\",\n            \"dataType\": [\"text\"],\n            \"description\": \"The answer\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {  # this must match the vectorizer used\n                    \"vectorizePropertyName\": False,\n                    \"tokenization\": \"whitespace\"\n                }\n            }\n        },\n    ],\n    # highlight-start\n    \"multiTenancyConfig\": {\"enabled\": True},  # Enable multi-tenancy\n    # highlight-end\n}\n\n# add the schema\nclient.schema.create_class(class_obj)\n```\n\n</TabItem>\n\n<TabItem value=\"js\" label=\"JS/TS v3\">\n\n```js\nimport weaviate from 'weaviate-client';\n\n const client = await weaviate.connectToWCS(\n  '<WCS-URL>',\n  {\n    authCredentials: new weaviate.ApiKey('<API-KEY>'),\n  } \n)\n\n// Define the 'Question' class\nconst classObj = const schema = {\n  name: 'Question',\n  properties: [\n    {\n      name: 'question',\n      dataType: 'text' as const,\n      description: 'Category of the question' as const,\n      tokenization: 'lowercase' as const,\n      vectorizePropertyName: true,\n      \n    },\n    {\n      name: 'answer',\n      dataType: 'text' as const,\n      description: 'The question' as const,\n      tokenization: 'whitespace' as const,\n      vectorizePropertyName: false,\n    }\n  ],\n  vectorizer: weaviate.configure.vectorizer.text2VecOpenAI(),\n  generative: weaviate.configure.generative.openAI(),\n  multiTenancy: weaviate.configure.multiTenancy({enabled: true})\n}\n\n// Add the class to the schema\nconst newCollection = await client.collections.create(schema) \n```\n\n</TabItem>\n\n\n<TabItem value=\"js2\" label=\"JS/TS v2\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'WEAVIATE_INSTANCE_URL',  // Replace with your Weaviate endpoint\n});\n\n// Define the 'Question' class\nconst classObj = {\n  class: 'Question',\n  description: 'Information from a Jeopardy! question',  // description of the class\n  vectorizer: 'text2vec-openai',\n  moduleConfig: {\n      generative-openai: {}  // Set `generative-openai` as the generative module\n  },\n  properties: [\n    {\n      name: 'question',\n      dataType: ['text'],\n      description: 'The question',\n      moduleConfig: {\n        'text2vec-openai': {  // this must match the vectorizer used\n          vectorizePropertyName: true,\n          tokenization: 'lowercase'  // Use \"lowercase\" tokenization\n        },\n      }\n    },\n    {\n      name: 'answer',\n      dataType: ['text'],\n      description: 'The answer',\n      moduleConfig: {\n        'text2vec-openai': {  // this must match the vectorizer used\n          vectorizePropertyName: false,\n          tokenization: 'whitespace'  // Use \"whitespace\" tokenization\n        },\n      }\n    },\n  ],\n  // highlight-start\n  multiTenancyConfig: { enabled: true }  // Enable multi-tenancy\n  // highlight-end\n};\n\n// Add the class to the schema\nawait client\n  .schema\n  .classCreator()\n  .withClass(classObj)\n  .do();\n```\n\n</TabItem>\n{/* <TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate/entities/models\"\n\n)\n\nfunc main() {\n    cfg := weaviate.Config{\n        Host:   \"WEAVIATE_INSTANCE_URL/\",  // Replace WEAVIATE_INSTANCE_URL with your instance URL\n        Scheme: \"https\",\n    }\n\n    client, err := weaviate.NewClient(cfg)\n    if err != nil {\n        panic(err)\n    }\n\n    // we will create the class \"Question\"\n    classObj := &models.Class{\n        Class:       \"Question\",\n        Description: \"Information from a Jeopardy! question\",  // description of the class\n        Properties: []*models.Property{\n            {\n                DataType:    []string{\"string\"},\n                Description: \"The question\",\n                Name:        \"question\",\n            },\n            {\n                DataType:    []string{\"string\"},\n                Description: \"The answer\",\n                Name:        \"answer\",\n            },\n        },\n    }\n\n    // add the schema\n    err := client.Schema().ClassCreator().WithClass(classObj).Do(context.Background())\n    if err != nil {\n        panic(err)\n    }\n\n    // get the schema\n    schema, err := client.Schema().Getter().Do(context.Background())\n    if err != nil {\n        panic(err)\n    }\n\n    // print the schema\n    fmt.Printf(\"%v\", schema)\n}\n```\n\n</TabItem> */}\n{/* <TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL/\");\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n\n    WeaviateClient client = new WeaviateClient(config);\n\n    // we will create the class \"Question\"\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Question\")\n      .description(\"Information from a Jeopardy! question\")\n      .properties(new ArrayList() { {\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.STRING); } })\n          .description(\"The question\")\n          .name(\"question\")\n          .build());\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.STRING); } })\n          .description(\"The answer\")\n          .name(\"answer\")\n          .build());\n      } })\n      .build();\n\n    // add the schema\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    // get the schema\n    Result<Schema> result = client.schema().getter().run();\n    if (result.hasErrors()) {\n        System.out.println(result.getError());\n        return;\n    }\n\n    // print the schema\n    System.out.println(result.getResult());\n\n  }\n}\n```\n\n</TabItem> */}\n{/* <TabItem value=\"curl\" label=\"Curl\">\n\n```bash\n# Replace WEAVIATE_INSTANCE_URL with your instance URL\n\ncurl \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"class\": \"Question\",\n    \"description\": \"Information from a Jeopardy! question\",\n    \"properties\": [\n        {\n            \"dataType\": [\"text\"],\n            \"description\": \"The question\",\n            \"name\": \"question\"\n        },\n        {\n            \"dataType\": [\"text\"],\n            \"description\": \"The answer\",\n            \"name\": \"answer\"\n        }\n    ]\n}' \\\nhttps://WEAVIATE_INSTANCE_URL/v1/schema\n\ncurl https://WEAVIATE_INSTANCE_URL/v1/schema\n```\n\n</TabItem> */}\n</Tabs>\n", "type": "Code", "name": "Code Tutorial.schema.multi-tenancy", "path": "_includes/code/tutorial.schema.multi-tenancy.mdx", "link": "https://weaviate.io/_includes/code/tutorial.schema.multi-tenancy", "timestamp": "2024-05-08 15:31:56", "reader": "JSON", "meta": {}, "chunks": []}