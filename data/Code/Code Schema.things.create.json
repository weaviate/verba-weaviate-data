{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/rest.schema.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START CreateSimpleCollection\"\n    endMarker=\"END CreateSimpleCollection\"\n    language=\"py\"\n  />\n</TabItem>\n\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nclass_obj = {\n    \"class\": \"Article\",\n    \"description\": \"A written text, for example a news article or blog post\",\n    \"properties\": [\n        {\n            \"dataType\": [\"text\"],\n            \"description\": \"Title of the article\",\n            \"name\": \"title\",\n        },\n        {\n            \"dataType\": [\"text\"],\n            \"description\": \"The content of the article\",\n            \"name\": \"content\"\n        }\n    ]\n}\n\nclient.schema.create_class(class_obj)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'http',\n  host: 'localhost:8080',\n});\n\nconst classObj = {\n  'class': 'Article',\n  'description': 'A written text, for example a news article or blog post',\n  'vectorizeClassName': true,\n  'properties': [\n    {\n      'name': 'title',\n      'dataType': ['string'],\n      'description': 'Title of the article',\n      'vectorizePropertyName': true,\n      'index': true,\n    },\n    {\n      'name': 'content',\n      'dataType': ['text'],\n      'description': 'The content of the article',\n    },\n  ],\n};\n\nconst response = await client\n  .schema\n  .classCreator()\n  .withClass(classObj)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n    \"context\"\n\n    \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n    \"github.com/weaviate/weaviate/entities/models\"\n)\n\nfunc main() {\n    cfg := weaviate.Config{\n        Host:   \"localhost:8080\",\n        Scheme: \"http\",\n    }\n    client, err := weaviate.NewClient(cfg)\n    if err != nil {\n      panic(err)\n    }\n\n    classObj := &models.Class{\n        Class:       \"Article\",\n        Description: \"A written text, for example a news article or blog post\",\n        Properties: []*models.Property{\n            {\n                DataType:    []string{\"string\"},\n                Description: \"Title of the article\",\n                Name:        \"title\",\n            },\n            {\n                DataType:    []string{\"text\"},\n                Description: \"The content of the article\",\n                Name:        \"content\",\n            },\n        },\n    }\n\n    err := client.Schema().ClassCreator().WithClass(classObj).Do(context.Background())\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.ArrayList;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.schema.model.DataType;\nimport io.weaviate.client.v1.schema.model.Property;\nimport io.weaviate.client.v1.schema.model.WeaviateClass;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    WeaviateClass clazz = WeaviateClass.builder()\n      .className(\"Article\")\n      .description(\"A written text, for example a news article or blog post\")\n      .properties(new ArrayList() { {\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.STRING); } })\n          .description(\"Title of the article\")\n          .name(\"title\")\n          .build());\n        add(Property.builder()\n          .dataType(new ArrayList(){ { add(DataType.TEXT); } })\n          .description(\"The content of the article\")\n          .name(\"content\")\n          .build());\n      } })\n      .build();\n\n    Result<Boolean> result = client.schema().classCreator().withClass(clazz).run();\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\ncurl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"class\": \"Article\",\n        \"description\": \"A written text, for example a news article or blog post\",\n        \"properties\": [\n            {\n            \"dataType\": [\n                \"string\"\n            ],\n            \"description\": \"Title of the article\",\n            \"name\": \"title\"\n            },\n            {\n            \"dataType\": [\n                \"text\"\n            ],\n            \"description\": \"The content of the article\",\n            \"name\": \"content\"\n            }\n        ]\n    }' \\\n    http://localhost:8080/v1/schema\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Schema.things.create", "path": "_includes/code/schema.things.create.mdx", "link": "https://weaviate.io/_includes/code/schema.things.create", "timestamp": "2024-05-08 15:31:45", "reader": "JSON", "meta": {}, "chunks": []}