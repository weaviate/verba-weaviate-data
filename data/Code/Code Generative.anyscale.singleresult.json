{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    PodClip (limit:1){\n      speaker\n      content\n      _additional {\n        generate(\n          singleResult:{\n          \tprompt: \"\"\"\n            Please summarize the following podcast clip into one sentence.\n            Speaker: {speaker} said {content}.\n            \"\"\"\n          }\n        ){\n          singleResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"py\" label=\"Python\">\n\n```python\nimport weaviate\n\nclient  = weaviate.Client(\n  url = \"https://WEAVIATE_INSTANCE_URL/\",  # Replace WEAVIATE_INSTANCE_URL with your instance URL\n  additional_headers={\n      \"X-Anyscale-Api-Key\": \"YOUR-ANYSCALE-API-KEY\"\n  }\n)\n\n# highlight-start\n# instruction for the generative module\ngeneratePrompt = \"Please summarize the following podcast clip into one sentence. Speaker: {speaker} said {content}.\"\n# highlight-end\n\nresult = (\n  client.query\n  .get(\"PodClip\", [\"speaker\", \"content\"])\n  # highlight-start\n  .with_generate(single_prompt=generatePrompt)\n  # highlight-end\n  .with_limit(1)\n).do()\n\nprint(result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```ts\nimport weaviate, { ApiKey } from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'edu-demo.weaviate.network',\n  apiKey: new ApiKey('learn-weaviate'),\n  headers: { 'X-Anyscale-Api-Key': process.env['ANYSCALE_API_KEY'] },\n});\n\n// highlight-start\n// instruction for the generative module\nconst generatePrompt = 'Please summarize the following podcast clip into one sentence. Speaker: {speaker} said {content}.';\n// highlight-end\n\nconst response = await client.graphql\n  .get()\n  .withClassName('PodClip')\n  .withFields('speaker content')\n  .withGenerate({\n    singlePrompt: generatePrompt,\n  })\n  .withLimit(1)\n  .do();\nconsole.log(JSON.stringify(response, null, 2));\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:    \"WEAVIATE_INSTANCE_URL\",  // Replace with your instance URL\n    Scheme:  \"https\",\n    Headers: map[string]string{\"X-Anyscale-Api-Key\": \"YOUR-ANYSCALE-API-KEY\"},\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n  ctx := context.Background()\n\n  fields := []graphql.Field{\n    {Name: \"speaker\"},\n    {Name: \"content\"},\n  }\n\n  // highlight-next-line\n  gs := graphql.NewGenerativeSearch().SingleResult(\"\\\"Please summarize the following podcast clip into one sentence. Speaker: {speaker} said {content}.\\\"\")\n\n  result, err := client.GraphQL().Get().\n    WithClassName(\"PodClip\").\n    WithFields(fields...).\n    // highlight-next-line\n    withGenerativeSearch(generativeSearch).\n    WithLimit(1).\n    Do(ctx)\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.NearTextArgument;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Map<String, String> headers = new HashMap<String, String>() {\n      {put(\"X-Cohere-Api-Key\", \"YOUR-COHERE-API-KEY\");}\n    };\n    Config config = new Config(\"https\", \"WEAVIATE_INSTANCE_URL\", headers);\n    // Replace WEAVIATE_INSTANCE_URL with your instance URL\n    WeaviateClient client = new WeaviateClient(config);\n\n    // highlight-start\n    // instruction for the generative module\n    GenerativeSearchBuilder generativeSearch = GenerativeSearchBuilder.builder()\n      .singleResultPrompt(\"\\\"Please summarize the following podcast clip into one sentence. Speaker: {speaker} said {content}.\\\"\")\n      .build();\n    // highlight-end\n\n    Field speaker = Field.builder().name(\"speaker\").build();\n    Field content = Field.builder().name(\"content\").build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"PodClip\")\n      .withFields(speaker, content)\n      // highlight-next-line\n      .withGenerativeSearch(generativeSearch)\n      .withLimit(1)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      PodClip(\n        limit: 1\n      ) {\n        title\n        summary\n        # highlight-start\n        _additional {\n          generate(\n            singleResult: {\n              prompt: \\\"\\\"\\\"\n                Please summarize the following podcast clip into one sentence.\n                Speaker: {speaker} said {content}.\n              \\\"\\\"\\\"\n            }\n          ) {\n            singleResult\n            error\n          }\n        }\n        # highlight-end\n      }\n    }\n  }\n  \"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H \"Authorization: Bearer $WEAVIATE_API_KEY\" \\\n    -H \"X-Anyscale-Api-Key: $ANYSCALE_API_KEY\" \\\n    -d @- \\\n    https://WEAVIATE_INSTANCE_URL/v1/graphql  # Replace WEAVIATE_INSTANCE_URL with your instance URL\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Generative.anyscale.singleresult", "path": "_includes/code/generative.anyscale.singleresult.mdx", "link": "https://weaviate.io/_includes/code/generative.anyscale.singleresult", "timestamp": "2024-05-08 15:30:47", "reader": "JSON", "meta": {}, "chunks": []}