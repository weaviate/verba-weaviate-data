{"text": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport FilteredTextBlock from '@site/src/components/Documentation/FilteredTextBlock';\n\nimport PyCode from '!!raw-loader!/_includes/code/graphql.search-operators.py';\n\n<Tabs groupId=\"languages\">\n<TabItem value=\"py\" label=\"Python (v4)\">\n  <FilteredTextBlock\n    text={PyCode}\n    startMarker=\"START GraphQLQnAExample\"\n    endMarker=\"END GraphQLQnAExample\"\n    language=\"py\"\n  />\n</TabItem>\n<TabItem value=\"py3\" label=\"Python (v3)\">\n\n```python\nimport weaviate\nimport os\n\nclient = weaviate.Client(\n    \"https://edu-demo.weaviate.network\",\n    auth_client_secret=weaviate.auth.AuthApiKey(\"learn-weaviate\"),\n    additional_headers={\n        \"X-OpenAI-Api-Key\": os.environ[\"OPENAI_API_KEY\"]  # Replace with your OPENAI API key\n    }\n)\n\nask = {\n  \"question\": \"Who is the king of the Netherlands?\",\n  \"properties\": [\"summary\"]\n}\n\nresult = (\n  client.query\n  .get(\"Article\", [\"title\", \"_additional {answer {hasAnswer property result startPosition endPosition} }\"])\n  .with_ask(ask)\n  .with_limit(1)\n  .do()\n)\n\nprint(result)\n```\n\n</TabItem>\n<TabItem value=\"js\" label=\"JavaScript/TypeScript\">\n\n```js\nimport weaviate from 'weaviate-ts-client';\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'edu-demo.weaviate.network',\n  apiKey: new weaviate.ApiKey('learn-weaviate'),\n  headers: {\n    'X-OpenAI-Api-Key': process.env['OPENAI_API_KEY'],\n  },\n});\n\nconst response = await client.graphql\n  .get()\n  .withClassName('Article')\n  .withAsk({\n    question: 'Who is the king of the Netherlands?',\n    properties: ['summary'],\n  })\n  .withFields('title _additional { answer { hasAnswer property result startPosition endPosition } }')\n  .withLimit(1)\n  .do();\nconsole.log(response);\n\n```\n\n</TabItem>\n<TabItem value=\"go\" label=\"Go\">\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n  \"github.com/weaviate/weaviate-go-client/v4/weaviate/graphql\"\n)\n\nfunc main() {\n  cfg := weaviate.Config{\n    Host:   \"localhost:8080\",\n    Scheme: \"http\",\n  }\n  client, err := weaviate.NewClient(cfg)\n  if err != nil {\n    panic(err)\n  }\n\n  className := \"Article\"\n  fields := []graphql.Field{\n    {Name: \"title\"},\n    {Name: \"_additional\", Fields: []graphql.Field{\n      {Name: \"answer\", Fields: []graphql.Field{\n        {Name: \"hasAnswer\"},\n        {Name: \"certainty\"},\n        {Name: \"property\"},\n        {Name: \"result\"},\n        {Name: \"startPosition\"},\n        {Name: \"endPosition\"},\n      }},\n    }},\n  }\n  ask := client.GraphQL().AskArgBuilder().\n    WithQuestion(\"Who is the king of the Netherlands?\").\n    WithProperties([]string{\"summary\"})\n  ctx := context.Background()\n\n  result, err := client.GraphQL().Get().\n    WithClassName(className).\n    WithFields(fields...).\n    WithAsk(ask).\n    WithLimit(1).\n    Do(ctx)\n\n  if err != nil {\n    panic(err)\n  }\n  fmt.Printf(\"%v\", result)\n}\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n\n```java\npackage io.weaviate;\n\nimport io.weaviate.client.Config;\nimport io.weaviate.client.WeaviateClient;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.AskArgument;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n\n    Field title = Field.builder().name(\"title\").build();\n    Field _additional = Field.builder()\n      .name(\"_additional\")\n      .fields(new Field[]{\n        Field.builder()\n          .name(\"answer\")\n          .fields(new Field[]{\n            Field.builder().name(\"hasAnswer\").build(),\n            Field.builder().name(\"certainty\").build(),\n            Field.builder().name(\"property\").build(),\n            Field.builder().name(\"result\").build(),\n            Field.builder().name(\"startPosition\").build(),\n            Field.builder().name(\"endPosition\").build()\n          }).build()\n      }).build();\n\n    AskArgument ask = AskArgument.builder()\n      .question(\"Who is the king of the Netherlands?\")\n      .properties(new String[]{ \"summary\" })\n      .build();\n\n    Result<GraphQLResponse> result = client.graphQL().get()\n      .withClassName(\"Article\")\n      .withFields(title, _additional)\n      .withAsk(ask)\n      .withLimit(1)\n      .run();\n\n    if (result.hasErrors()) {\n      System.out.println(result.getError());\n      return;\n    }\n    System.out.println(result.getResult());\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"curl\" label=\"Curl\">\n\n```bash\necho '{\n  \"query\": \"{\n    Get {\n      Article(\n        ask: {\n          question: \\\"Who is the king of the Netherlands?\\\",\n          properties: [\\\"summary\\\"]\n        },\n        limit: 1\n      ) {\n        title\n        _additional {\n          answer {\n            hasAnswer\n            property\n            result\n            startPosition\n            endPosition\n          }\n        }\n      }\n    }\n  }\n  \"\n}' | curl \\\n    -X POST \\\n    -H 'Content-Type: application/json' \\\n    -H 'Authorization: Bearer learn-weaviate' \\\n    -H \"X-OpenAI-Api-Key: $OPENAI_API_KEY\" \\\n    -d @- \\\n    https://edu-demo.weaviate.network/v1/graphql\n```\n\n</TabItem>\n<TabItem value=\"graphql\" label=\"GraphQL\">\n\n```graphql\n{\n  Get {\n    Article(\n      ask: {\n        question: \"Who is the king of the Netherlands?\",\n        properties: [\"summary\"],\n      },\n      limit: 1\n    ) {\n      title\n      _additional {\n        answer {\n          hasAnswer\n          property\n          result\n          startPosition\n          endPosition\n        }\n      }\n    }\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n", "type": "Code", "name": "Code Qna-transformers.ask", "path": "_includes/code/qna-transformers.ask.mdx", "link": "https://weaviate.io/_includes/code/qna-transformers.ask", "timestamp": "2024-05-08 15:31:28", "reader": "JSON", "meta": {}, "chunks": []}