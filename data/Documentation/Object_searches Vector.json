{"text": "\nIn this scenario, we've added data objects and our own vectors. Accordingly, any similarity searches will also require a vector input. This can be done with a `near vector` query.\n\n###  Code\n\nThis example finds entries in \"Movie\" based on their similarity to the input vector and prints out the title and release year of the top 5 matches.\n\n\n\n##  Explain the code\n\nThe results are based on similarity of the vector embeddings between the query and the database object text. In this case, the embeddings are input manually in the query.\n\nThe `limit` parameter here sets the maximum number of results to return.\n\nThe `return_metadata` parameter takes an instance of the `MetadataQuery` class to set metadata to return in the search results. The current query returns the vector distance to the query.\n\n\n  Example results\n\n```text\nIn Time 2011\nDistance to query: 0.179\n\nGattaca 1997\nDistance to query: 0.180\n\nI, Robot 2004\nDistance to query: 0.182\n\nMad Max: Fury Road 2015\nDistance to query: 0.190\n\nThe Maze Runner 2014\nDistance to query: 0.193\n```\n\n\n\n###  Response object\n\nThe returned object is an instance of a custom class. Its `objects` attribute is a list of search results, each object being an instance of another custom class.\n\nEach returned object will:\n- Include all properties and its UUID by default except those with blob data types.\n- Not include any other information (e.g. references, metadata, vectors.) by default.\n\n###  Where did the query vector come from?\n\nThe query vector in this example is obtained similarly to how it was in the [data ingestion](../102_object_collections/25_generate_vectors.mdx). The only difference is that the vector is not stored in the database, but is used directly in the query.\n\n\n\n\n", "type": "Documentation", "name": "Object_searches Vector", "path": "developers/academy/py/starter_custom_vectors/103_object_searches/10_vector.mdx", "link": "https://weaviate.io/developers/academy/py/starter_custom_vectors/object_searches/vector", "timestamp": "2024-05-08 10:47:58", "reader": "JSON", "meta": {}, "chunks": []}