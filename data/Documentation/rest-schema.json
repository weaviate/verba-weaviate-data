{"text": "\n\n- How-to - Configure: Schema\n- References - Configuration: Schema.\n\n## Get the schema\nDumps the current Weaviate schema. The result contains an array of objects.\n\n### Method and URL\n\n```js\nGET /v1/schema\n```\n\n### Example request\n\n\n\n\n### Example response\n\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Category\",\n      \"description\": \"Category an article is a type off\",\n      \"moduleConfig\": {\n        \"text2vec-contextionary\": {\n          \"vectorizeClassName\": false\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"category name\",\n          \"indexFilterable\": true,\n          \"indexSearchable\": true,\n          \"moduleConfig\": {\n            \"text2vec-contextionary\": {\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"name\"\n        }\n      ],\n      \"vectorIndexType\": \"hnsw\",\n      \"vectorizer\": \"none\"\n    },\n    {\n      \"class\": \"Publication\",\n      \"description\": \"A publication with an online source\",\n      \"moduleConfig\": {\n        \"text2vec-contextionary\": {\n          \"vectorizeClassName\": false\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"Name of the publication\",\n          \"name\": \"name\"\n        },\n        {\n          \"dataType\": [\n            \"geoCoordinates\"\n          ],\n          \"description\": \"Geo location of the HQ\",\n          \"name\": \"headquartersGeoLocation\"\n        },\n        {\n          \"dataType\": [\n            \"Article\"\n          ],\n          \"description\": \"The articles this publication has\",\n          \"name\": \"hasArticles\"\n        },\n        {\n          \"dataType\": [\n            \"Article\"\n          ],\n          \"description\": \"Articles this author wrote\",\n          \"name\": \"wroteArticles\"\n        }\n      ],\n      \"vectorIndexType\": \"hnsw\",\n      \"vectorizer\": \"none\"\n    },\n    {\n      \"class\": \"Author\",\n      \"description\": \"Normalised types\",\n      \"moduleConfig\": {\n        \"text2vec-contextionary\": {\n          \"vectorizeClassName\": true\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"Name of the author\",\n          \"name\": \"name\"\n        },\n        {\n          \"dataType\": [\n            \"Publication\"\n          ],\n          \"description\": \"The publication this author writes for\",\n          \"name\": \"writesFor\"\n        }\n      ],\n      \"vectorIndexType\": \"hnsw\",\n      \"vectorizer\": \"none\"\n    },\n    {\n      \"class\": \"Article\",\n      \"description\": \"Normalised types\",\n      \"moduleConfig\": {\n        \"text2vec-contextionary\": {\n          \"vectorizeClassName\": false\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"title of the article\",\n          \"indexFilterable\": true,\n          \"indexSearchable\": true,\n          \"moduleConfig\": {\n            \"text2vec-contextionary\": {\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"title\"\n        },\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"url of the article\",\n          \"indexFilterable\": true,\n          \"indexSearchable\": false,\n          \"moduleConfig\": {\n            \"text2vec-contextionary\": {\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"url\"\n        },\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"summary of the article\",\n          \"indexFilterable\": true,\n          \"indexSearchable\": true,\n          \"moduleConfig\": {\n            \"text2vec-contextionary\": {\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"summary\"\n        },\n        {\n          \"dataType\": [\n            \"date\"\n          ],\n          \"description\": \"date of publication of the article\",\n          \"name\": \"publicationDate\"\n        },\n        {\n          \"dataType\": [\n            \"int\"\n          ],\n          \"description\": \"Words in this article\",\n          \"name\": \"wordCount\"\n        },\n        {\n          \"dataType\": [\n            \"Author\",\n            \"Publication\"\n          ],\n          \"description\": \"authors this article has\",\n          \"name\": \"hasAuthors\"\n        },\n        {\n          \"dataType\": [\n            \"Publication\"\n          ],\n          \"description\": \"publication this article is in\",\n          \"name\": \"inPublication\"\n        },\n        {\n          \"dataType\": [\n            \"Category\"\n          ],\n          \"description\": \"category this article is of\",\n          \"name\": \"ofCategory\"\n        },\n        {\n          \"dataType\": [\n            \"boolean\"\n          ],\n          \"description\": \"whether the article is currently accessible through the url\",\n          \"name\": \"isAccessible\"\n        }\n      ],\n      \"vectorIndexType\": \"hnsw\",\n      \"vectorizer\": \"none\"\n    }\n  ]\n}\n```\n\n## Create a class\n\nCreate a new data object class in the schema.\n\nFrom `v1.5.0` onwards, creating a schema is optional. Learn more about Auto Schema.\n\n### Method and URL\n\n```js\nPOST /v1/schema\n```\n\n### Parameters\n\nLearn more about the schema configuration here.\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `class` | body | string | The name of the class. Multiple words should be concatenated in CamelCase, e.g. `ArticleAuthor`. |\n| `description` | body | string | Description of the class. |\n| `vectorIndexType` | body | string | Defaults to hnsw. Can be omitted in schema definition since this is the only available type for now. |\n| `vectorIndexConfig` | body | object | Vector index type specific settings. |\n| `vectorizer` | body | string | Vectorizer to use for data objects added to this class. Default can be set via Weaviate environment variables. |\n| `moduleConfig` > `text2vec-contextionary`  > `vectorizeClassName` | body | boolean | Include the class name in vector calculation (default true). Learn more about semantic indexing in Weaviate. |\n| `properties` | body | array | An array of property objects. |\n| `properties` > `dataType` | body | array | See the available data types. |\n| `properties` > `description` | body | string | Description of the property. |\n| `properties` > `moduleConfig`  > `text2vec-contextionary` > `skip` | body | boolean | If true, the whole property will NOT be included in vectorization. Default is false, meaning that the object will be NOT be skipped. |\n| `properties` > `moduleConfig`  > `text2vec-contextionary` > `vectorizePropertyName` | body | boolean | Whether the name of the property is used in the calculation for the vector position of data objects. Default is true. Learn more about semantic indexing in Weaviate. |\n| `properties` > `name` | body | string | The name of the property. Multiple words should be concatenated in camelCase, e.g. `nameOfAuthor`. |\n| `properties` > `indexFilterable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed with the filterable, Roaring Bitmap index? Read more about indexing in Weaviate. |\n| `properties` > `indexSearchable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed to allow BM25/hybrid-search index? Read more on how to configure indexing in Weaviate. |\n| `properties` > `indexInverted` (deprecated) | body | boolean | Should the data stored in this property be indexed? Learn more about indexing in Weaviate. |\n| `properties` > `tokenization` | body | string | Only for `string`/`text` props. Introduced in `v1.12.0`. Control how a field is tokenized in the inverted index. Defaults to `\"word\"`, can be set to `\"field\"`. Learn more about property tokenization.|\n| `invertedIndexConfig` > `stopwords` | body | object | Configure which words should be treated as stopwords and therefore be ignored on querying (stopwords are still indexed). Since `v1.18`, stopwords can be configured at runtime.See more details here. |\n| `invertedIndexConfig` > `indexTimestamps` | body | boolean | Maintain an inverted index for each object by its internal timestamps, currently including `creationTimeUnix` and `lastUpdateTimeUnix`.See more details here. |\n| `replicationConfig` > `factor` | body | int | The replication factor, aka the number of copies in a replicated Weaviate setup. |\n| `multiTenancyConfig` > `enabled` | body | Boolean | Whether to enable multi-tenancy for this class. (Defaults to `false`.) |\n\n### Example request for creating a class\n\n\n\n\nOr with all the possible parameters:\n\n\n\n\n\n## Get a single class from the schema\n\nRetrieves the configuration of a single class in the schema.\n\n### Method and URL\n\n```js\nGET /v1/schema/{ClassName}\n```\n\n### Example request\n\n\n\n\n## Delete a class\n\nRemove a class (and all data in the instances) from the schema.\n\n### Method and URL\n\n```js\nDELETE v1/schema/{class_name}\n```\n\n### URL parameters\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `{class_name}` | path | string | The name of the class |\n\n### Example request for deleting a class\n\n\n\n\n## Update a class\n\nUpdate settings of an existing schema class. Use this endpoint to alter an existing class in the schema.\n\n\n- Please note that not all settings are mutable. The list of mutable settings are shown below:\n\n  - `description`\n  - `invertedIndexConfig`\n    - `bm25`\n      - `b`\n      - `k1`\n    - `cleanupIntervalSeconds`\n    - `stopwords`\n      - `additions`\n      - `preset`\n      - `removals`\n  - `replicationConfig`\n    - `factor`\n  - `vectorIndexConfig`\n    - `dynamicEfFactor`\n    - `dynamicEfMin`\n    - `dynamicEfMax`\n    - `flatSearchCutoff`\n    - `skip`\n    - `vectorCacheMaxObjects`\n    - `pq`\n      - `bitCompression`\n      - `centroids`\n      - `enabled`\n      - `segments`\n      - `trainingLimit`\n      - `encoder`\n        - `type`\n        - `distribution`\n\n- To update any other (i.e. immutable) setting, you need to delete the class, re-create it with the correct setting and then re-import the data.\n\n\nThis endpoint cannot be used to introduce additional properties. For this, use `POST /v1/schema/{ClassName}/properties`. A typical use case for this endpoint is to update configuration, such as `vectorIndexConfig/dynamicEfFactor` or `vectorIndexConfig/pq/bitCompression`. Note that even in mutable sections, such as `vectorIndexConfig`, some fields may be immutable.\n\nYou should attach a body to this PUT request with the **entire** new configuration of the class.\n\n### Method and URL\n\n```js\nPUT v1/schema/{class_name}\n```\n\n### Parameters\n\nThe URL must contain the following parameter:\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `{class_name}` | path | string | The name of the class |\n\nParameters in the PUT body:\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `class` | body | string | The name of the class. Multiple words should be concatenated in CamelCase, e.g. `ArticleAuthor`. |\n| `description` | body | string | Description of the class. |\n| `vectorIndexType` | body | string | Defaults to hnsw. Can be omitted in schema definition since this is the only available type for now. |\n| `vectorIndexConfig` | body | object | Vector index type specific settings. |\n| `vectorizer` | body | string | Vectorizer to use for data objects added to this class. Default can be set via Weaviate environment variables. |\n| `moduleConfig` > `text2vec-contextionary`  > `vectorizeClassName` | body | boolean | Include the class name in vector calculation (default true). Learn more about how to configure indexing in Weaviate. |\n| `properties` | body | array | An array of property objects. |\n| `properties` > `dataType` | body | array | See the available data types |\n| `properties` > `description` | body | string | Description of the property. |\n| `properties` > `moduleConfig`  > `text2vec-contextionary` > `skip` | body | boolean | If true, the whole property will NOT be included in vectorization. Default is false, meaning that the object will be NOT be skipped. |\n| `properties` > `moduleConfig`  > `text2vec-contextionary` > `vectorizePropertyName` | body | boolean | Whether the name of the property is used in the calculation for the vector position of data objects. Default is true. Learn more about how to configure indexing in Weaviate. |\n| `properties` > `name` | body | string | The name of the property. Multiple words should be concatenated in camelCase, e.g. `nameOfAuthor`. |\n| `properties` > `indexFilterable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed with the filterable, Roaring Bitmap index? Read more about indexing in Weaviate. |\n| `properties` > `indexSearchable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed to allow BM25/hybrid-search index? Read more about indexing in Weaviate. |\n| `properties` > `indexInverted` (deprecated) | body | boolean | Should the data stored in this property be indexed? Learn more about indexing in Weaviate. |\n| `properties` > `tokenization` | body | string | Only for `string`/`text` props. Introduced in `v1.12.0`. Control how a field is tokenized in the inverted index. Defaults to `\"word\"`. If `string` is used, can be set to `\"field\"`. Learn more about property tokenization. |\n| `invertedIndexConfig` > `stopwords` | body | object | Configure which words should be treated as stopwords and therefore be ignored when querying (stopwords are still indexed). Since`v1.18`, stopwords can be configured at runtime.See more details here. |\n| `invertedIndexConfig` > `indexTimestamps` | body | boolean | Maintain an inverted index for each object by its internal timestamps, currently including `creationTimeUnix` and `lastUpdateTimeUnix` See more details here. |\n\n\n#### Example request for updating a class\n\n\n\n\n## Add a property\n\n### Method and URL\n\n```js\nPOST v1/schema/{class_name}/properties\n```\n\n### Parameters\n\n| Name | Location | Type | Description |\n| ---- | -------- | -----| ----------- |\n| `dataType` | body | array | An available data type. |\n| `description` | body | string | Description of the property. |\n| `moduleConfig`  > `text2vec-contextionary` > `skip` | body | boolean | If true, the whole property will NOT be included in vectorization. Default is false, meaning that the object will be NOT be skipped. |\n| `moduleConfig`  > `text2vec-contextionary` > `vectorizePropertyName` | body | boolean | Whether the name of the property is used in the calculation for the vector position of data objects. Default is true. Learn more about how to configure indexing in Weaviate. |\n| `name` | body | string | The name of the property. Multiple words should be concatenated in camelCase like `nameOfAuthor`. |\n| `indexFilterable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed with the filterable, Roaring Bitmap index? Read more about indexing in Weaviate. |\n| `indexSearchable` (available from `v1.19`) | body | boolean | Should the data stored in this property be indexed to allow BM25/hybrid-search index? Read more about indexing in Weaviate. |\n| `indexInverted` (deprecated) | body | boolean | Should the data stored in this property be indexed? Learn more about indexing in Weaviate. |\n\n### Example request for adding a property\n\n\n\n\n## Inspect the shards of a class\n\nAs described in Architecture > Storage, creation of a class leads to creating an index which manages all the disk storage and vector indexing. An index itself can be comprised of multiple shards. If a class index is used on multiple nodes of a multi-node Weaviate cluster there must be at least one shard per node.\n\nYou can view a list of all shards for a particular class:\n\n### Method and URL\n\nThis API was added in `v1.12.0`.\n\n```js\nGET v1/schema/{class_name}/shards\n```\n\n### Parameters\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `{class_name}` | URL path | string | The name of the class |\n\n### Example request viewing shards of a class\n\n\n\n\n## Update shard status\n\nA shard may have been marked as read-only, for example because the disk was full. You can manually set a shard to `READY` again using the following API. There is also a convenience function in each client to set the status of all shards of a class.\n\n### Method and URL\n\nThis API was added in `v1.12.0`\n\n```js\nPUT v1/schema/{class_name}/shards/{shard_name}\n```\n\n### Parameters\n\n| Name | Location | Type | Description |\n| ---- | -------- | ---- | ----------- |\n| `{class_name}` | URL path | string | The name of the class. |\n| `{shard_name}` | URL path | string | The name/id of the shard. |\n| `status` | body | string | The status to update the shard to. One of `READONLY`, `READY`. |\n\n### Example requests to update the status of a shard\n\n\n\n\n## Multi-tenancy\n\n- Multi-tenancy available from version `v1.20`\n- (Experimental) Tenant activity status setting available from version `v1.21`\n\n- How-to manage data: Multi-tenancy operations\n- Concepts: Data structure: Multi-tenancy\n\nTenants are used to separate data between different users or groups of users. They can be specified as follows:\n\n### Add tenant(s)\n\nPass a payload with an array of tenant objects. The available fields are:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `name` | string | (Required) The name of the tenant. |\n| `activityStatus` | string | (Optional, experimental) The activity status of the tenant. Can be `HOT` (default) or `COLD`. |\n\n#### Example payload\n\n```\n[\n  {\n    \"name\": \"TENANT_A\"\n  },\n  {\n    \"name\": \"TENANT_B\",\n    \"activityStatus\": \"COLD\"\n  }\n]\n```\n\n\n\n\n```js\nPOST v1/schema/{class_name}/tenants\n```\n\n### List tenants\n\n```js\nGET v1/schema/{class_name}/tenants\n```\n\n### Remove tenants\n\nPass a payload with an array of tenant names in the form of `[\"TENANT_NAME1\", \"TENANT_NAME2\"]` to remove from the class.\n\n```js\nDELETE v1/schema/{class_name}/tenants\n```\n\n### Update tenants\n\n```js\nPUT v1/schema/{class_name}/tenants\n```\n\nPass a payload with an array of tenant objects. For updating tenants, both `name` and `activityStatus` are required.\n\n#### Example payload\n\n```\n[\n  {\n    \"name\": \"TENANT_A\",\n    \"activityStatus\": \"COLD\"\n  },\n  {\n    \"name\": \"TENANT_B\",\n    \"activityStatus\": \"HOT\"\n  }\n]\n```\n\n\n\n\n", "type": "Documentation", "name": "rest-schema", "path": "developers/weaviate/api/rest/schema.md", "link": "https://weaviate.io/developers/weaviate/api/rest/schema", "timestamp": "2023-11-02 10:52:30", "reader": "JSON", "meta": {}, "chunks": []}