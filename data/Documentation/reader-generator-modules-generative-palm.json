{"text": "\n\n## In short\n\n* The Generative PaLM (`generative-palm`) module generates responses based on the data stored in your Weaviate instance.\n* The module can generate a response for each returned object, or a single response for a group of objects.\n* The module adds a `generate {}` operator to the GraphQL `_additional {}` property of the `Get {}` queries.\n* Added in Weaviate `v1.19.1`.\n* You need an API key for a PaLM API to use this module. The module uses the Google Cloud `access token`.\n* **Its usage may incur costs**.\n    * Please check the vendor pricing (e.g. check Google Vertex AI pricing).\n* The default model is `chat-bison`.\n\nAs of the time of writing (September 2023), you must manually enable the Vertex AI API on your Google Cloud project. You can do so by following the instructions here.\n\n## Introduction\n\n`generative-palm` generates responses based on the data stored in your Weaviate instance.\n\nThe module works in two steps:\n1. (Weaviate) Run a search query in Weaviate to find relevant objects.\n2. (PaLM) Use a PaLM model to generate a response based on the results (from the previous step) and the provided prompt or task.\n\nYou can use the Generative PaLM module with non-PaLM upstream modules. For example, you could use `text2vec-openai`, `text2vec-cohere` or `text2vec-huggingface` to vectorize and query your data, but then rely on the `generative-palm` module to generate a response.\n\nThe generative module can provide results for:\n* each returned object, using `singleResult{ prompt }`\n* the group of all results together, using `groupedResult{ task }`\n\nYou need to input both a query and a prompt (for individual responses) or a task (for all responses).\n\n## Inference API key\n\nAs the `generative-palm` uses a PaLM API endpoint, you must provide a valid PaLM API key to weaviate.\n\n### For Google Cloud users\n\nThis is called an `access token` in Google Cloud.\n\nIf you have the Google Cloud CLI tool installed and set up, you can view your token by running the following command:\n\n```shell\ngcloud auth print-access-token\n```\n\n### Providing the key to Weaviate\n\nYou can provide your PaLM API key by providing `\"X-Palm-Api-Key\"` through the request header. If you use the Weaviate client, you can do so like this:\n\n\n\n\nOptionally (not recommended), you can provide the PaLM API key as an environment variable.\n\n\n  How to provide the PaLM API key as an environment variable\n\nDuring the **configuration** of your Docker instance, by adding `PALM_APIKEY` under `environment` to your `Docker Compose` file, like this:\n\n  ```yaml\n  environment:\n    PALM_APIKEY: 'your-key-goes-here'  # Setting this parameter is optional; you can also provide the key at runtime.\n    ...\n  ```\n\n\n\n### Token expiration for Google Cloud users\n\n\n\n\n## Module configuration\n\nThis module is enabled and pre-configured on Weaviate Cloud Services.\n\n### Docker Compose file (Weaviate open source only)\n\nYou can enable the Generative Palm module in your Docker Compose file (e.g. `docker-compose.yml`). Add the `generative-palm` module (alongside any other module you may need) to the `ENABLE_MODULES` property, like this:\n\n```\nENABLE_MODULES: 'text2vec-palm,generative-palm'\n```\n\n\n  See a full example of a Docker configuration with generative-palm\n\nHere is a full example of a Docker configuration, which uses the `generative-palm` module in combination with `text2vec-palm`, and provides the API key:\n\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    command:\n      - --host\n      - 0.0.0.0\n      - --port\n      - '8080'\n      - --scheme\n      - http\n    image:\n      semitechnologies/weaviate:||site.weaviate_version||\n    ports:\n      - 8080:8080\n    restart: on-failure:0\n    environment:\n      QUERY_DEFAULTS_LIMIT: 25\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'\n      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'\n      DEFAULT_VECTORIZER_MODULE: 'text2vec-palm'\n      // highlight-next-line\n      ENABLE_MODULES: 'text2vec-palm,generative-palm'\n      PALM_APIKEY: sk-foobar  # Setting this parameter is optional; you can also provide the key at runtime.\n      CLUSTER_HOSTNAME: 'node1'\n```\n\n\n\n## Schema configuration\n\nYou can define settings for this module in the schema, including the API endpoint and project information, as well as optional model parameters.\n\nNote that the `projectId` parameter is required.\n\n### Example schema\n\nFor example, the following schema configuration will set the PaLM API information, as well as the optional parameters.\n\n- The `\"projectId\"` is REQUIRED, and may be something like `\"cloud-large-language-models\"`\n- The `\"apiEndpoint\"` is optional, and may be something like: `\"us-central1-aiplatform.googleapis.com\"`, and\n- The `\"modelId\"` is optional, and may be something like `\"chat-bison\"`.\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Document\",\n      \"description\": \"A class called document\",\n      ...,\n      \"moduleConfig\": {\n        // highlight-start\n        \"generative-palm\": {\n          \"projectId\": \"YOUR-GOOGLE-CLOUD-PROJECT-ID\",    // Required. Replace with your value: (e.g. \"cloud-large-language-models\")\n          \"apiEndpoint\": \"YOUR-API-ENDPOINT\",             // Optional. Defaults to \"us-central1-aiplatform.googleapis.\n          \"modelId\": \"YOUR-GOOGLE-CLOUD-ENDPOINT-ID\",     // Optional. Defaults to \"chat-bison\"\n          \"temperature\": 0.2,      // Optional\n          \"maxOutputTokens\": 512,  // Optional\n          \"topK\": 3,               // Optional\n          \"topP\": 0.95,            // Optional\n        }\n        // highlight-end\n      }\n    }\n  ]\n}\n```\n\nSee the relevant PaLM API documentation for further details on these parameters.\n\n\n  New to Weaviate Schemas?\n\nIf you are new to Weaviate, check out the Weaviate schema tutorial.\n\n\n\n## How to use\n\nThis module extends the `_additional {...}` property with a `generate` operator.\n\n`generate` takes the following arguments:\n\n| Field | Data Type | Required | Example | Description |\n|- |- |- |- |- |\n| `singleResult {prompt}`  | string | no | `Summarize the following in a tweet: {summary}`  | Generates a response for each individual search result. You need to include at least one result field in the prompt, between braces. |\n| `groupedResult {task}`  | string | no | `Explain why these results are similar to each other`  | Generates a single response for all search results |\n\n### Example of properties in the prompt\n\nWhen piping the results to the prompt, at least one field returned by the query must be added to the prompt. If you don't add any fields, Weaviate will throw an error.\n\nFor example, assume your schema looks like this:\n\n```graphql\n{\n  Article {\n    title\n    summary\n  }\n}\n```\n\nYou can add both `title` and `summary` to the prompt by enclosing them in curly brackets:\n\n```graphql\n{\n  Get {\n    Article {\n      title\n      summary\n      _additional {\n        generate(\n          singleResult: {\n            prompt: \"\"\"\n            Summarize the following in a tweet:\n\n            {title} - {summary}\n            \"\"\"\n          }\n        ) {\n          singleResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\n### Example - single result\n\nHere is an example of a query where:\n* we run a vector search (with `nearText`) to find articles about \"Italian food\"\n* then we ask the generator module to describe each result as a Facebook ad.\n  * the query asks for the `summary` field, which it then includes in the `prompt` argument of the `generate` operator.\n\n\n\n\n### Example response - single result\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"Article\": [\n        {\n          \"_additional\": {\n            \"generate\": {\n              \"error\": null,\n              \"singleResult\": \"This Facebook Ad will explore the fascinating history of Italian food and how it has evolved over time. Learn from Dr Eva Del Soldato and Diego Zancani, two experts in Italian food history, about how even the emoji for pasta isn't just pasta -- it's a steaming plate of spaghetti heaped with tomato sauce on top. Discover how Italy's complex history has shaped the Italian food we know and love today.\"\n            }\n          },\n          \"summary\": \"Even the emoji for pasta isn't just pasta -- it's a steaming plate of spaghetti heaped with tomato sauce on top. But while today we think of tomatoes as inextricably linked to Italian food, that hasn't always been the case. \\\"People tend to think Italian food was always as it is now -- that Dante was eating pizza,\\\" says Dr Eva Del Soldato , associate professor of romance languages at the University of Pennsylvania, who leads courses on Italian food history. In fact, she says, Italy's complex history -- it wasn't unified until 1861 -- means that what we think of Italian food is, for the most part, a relatively modern concept. Diego Zancani, emeritus professor of medieval and modern languages at Oxford University and author of \\\"How We Fell in Love with Italian Food,\\\" agrees.\",\n          \"title\": \"How this fruit became the star of Italian cooking\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### Example - grouped result\n\nHere is an example of a query where:\n* we run a vector search (with `nearText`) to find publications about finance,\n* then we ask the generator module to explain why these articles are about finance.\n\n\n\n\n### Example response - grouped result\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"Publication\": [\n        {\n          \"_additional\": {\n            \"generate\": {\n              \"error\": null,\n              \"groupedResult\": \"The Financial Times, Wall Street Journal, and The New York Times Company are all about finance because they provide news and analysis on the latest financial markets, economic trends, and business developments. They also provide advice and commentary on personal finance, investments, and other financial topics.\"\n            }\n          },\n          \"name\": \"Financial Times\"\n        },\n        {\n          \"_additional\": {\n            \"generate\": null\n          },\n          \"name\": \"Wall Street Journal\"\n        },\n        {\n          \"_additional\": {\n            \"generate\": null\n          },\n          \"name\": \"The New York Times Company\"\n        }\n      ]\n    }\n  }\n}\n```\n\n## Additional information\n\n### Supported models\n\nThe `chat-bison` model is used by default. The model has the following properties:\n\n- Max input token: 8,192\n- Max output tokens: 1,024\n- Training data: Up to Feb 2023\n\n\n\n\n", "type": "Documentation", "name": "reader-generator-modules-generative-palm", "path": "developers/weaviate/modules/reader-generator-modules/generative-palm.md", "link": "https://weaviate.io/developers/weaviate/modules/reader-generator-modules/generative-palm", "timestamp": "2023-11-13 10:41:00", "reader": "JSON", "meta": {}, "chunks": []}