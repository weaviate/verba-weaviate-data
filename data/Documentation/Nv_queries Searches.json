{"text": "\nAs collections with named vectors can include multiple vectors, any vector or similarity search must specify a \"target\" vector.\n\nThis applies for `near_text` and `near_vector` searches, as well as multimodal searches such as `near_image` and so on. Let's explore a few examples here.\n\n##  Text searches\n\n###  Code\n\nHere, we look for entries in \"MovieNVDemo\" based on their similarity to the phrase `\"A joyful holiday film\"`. Note, however, that we show multiple versions of the same query, each with a different `target_vector` parameter:\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n###  Explain the code\n\nEach named vector here is based on a different property of the movie data.\n\nThe first search compares the meaning of the movie **title** with the query, the second search compares the **entire summary** (overview) with the query, and the third compares the **poster (and the title)** with the query.\n\nWeaviate also allows each named vector to be set with a different vectorizer. You will recall that the `poster_title` vector is created by the CLIP models, while the `title` and `overview` properties are created by the OpenAI model.\n\nAs a result, each named vector can be further specialized by using the right model for the right property.\n\n###  Explain the results\n\nThe results of each search are different, as they are based on different properties of the movie data.\n\n#### `title` vs `overview`\n\nNote that the search with 'overview' target vector includes titles like \"Home Alone\" and \"Home Alone 2: Lost in New York\", which are not included in the other searches.\n\nThis is because the plot of these movies are holiday-themed, even though the titles are not obviously joyful or holiday-related.\n\n#### `poster`\n\nThe search with `poster_title` target vector interestingly includes \"Misery\" - the Stephen King horror movie! This is very likely because the poster of the movie is a snowy scene. And since the CLIP vectorizer is trained to identify elements of images, it identifies this terrifying film as a result of the search.\n\nGiven the imagery of the poster only and no other context, you would have to say that the search isn't wrong, even though anyone who's read the book or watched the movie would agree.\n\n\n  \n\n```text\nHow the Grinch Stole Christmas 2000 8871\nDistance to query: 0.162\n\nThe Nightmare Before Christmas 1993 9479\nDistance to query: 0.177\n\nThe Pursuit of Happyness 2006 1402\nDistance to query: 0.182\n\nJingle All the Way 1996 9279\nDistance to query: 0.184\n\nMrs. Doubtfire 1993 788\nDistance to query: 0.189\n```\n\n  \n  \n\n```text\nHow the Grinch Stole Christmas 2000 8871\nDistance to query: 0.148\n\nHome Alone 1990 771\nDistance to query: 0.164\n\nOnward 2020 508439\nDistance to query: 0.172\n\nHome Alone 2: Lost in New York 1992 772\nDistance to query: 0.175\n\nLittle Miss Sunshine 2006 773\nDistance to query: 0.176\n```\n\n  \n  \n\nPosters for the top 5 matches:\n\n\n\n\n\n\n```text\nLife Is Beautiful 1997 637\nDistance to query: 0.621\n\nGroundhog Day 1993 137\nDistance to query: 0.623\n\nJingle All the Way 1996 9279\nDistance to query: 0.625\n\nTraining Day 2001 2034\nDistance to query: 0.627\n\nMisery 1990 1700\nDistance to query: 0.632\n```\n\n  \n\n\n##  Hybrid search\n\n###  Code\n\nThis example finds entries in \"MovieNVDemo\" with the highest hybrid search scores for the term \"history\", and prints out the title and release year of the top 5 matches.\n\n\n\n###  Explain the code\n\nHybrid search with named vectors work the same way as with other vector searches with named vectors. You must provide a `target_vector` parameter to specify the named vector for the vector search component of the hybrid search.\n\n##  Keyword search\n\nAs named vectors affect the vector representations of objects, they do not affect keyword searches. You can perform keyword searches on named vector collections using the same syntax as you would for any other collections.\n\n##  Named vectors in search\n\nThe use of named vectors enables flexible search options that can be tailored to your needs.\n\nEach object can have as many named vectors as you would like, with any combinations of properties and vectorizers, or even multiple custom vectors provided by your own models.\n\nThis flexibility allows you to create databases with vector representations that are tailored to your specific use case, and to search for similar items based on any combination of properties.\n\n##  What about RAG?\n\nRAG, or retrieval augmented generation, queries with named vectors work the same way as with other vector searches with named vectors. You must provide a `target_vector` parameter to specify the named vector for the vector search component of the RAG query.\n\nThis, in turn, can improve the quality of the generation. Let's explore a few examples in the [next section](./20_use_cases.mdx).\n\n\n\n", "type": "Documentation", "name": "Nv_queries Searches", "path": "developers/academy/py/named_vectors/103_nv_queries/10_searches.mdx", "link": "https://weaviate.io/developers/academy/py/named_vectors/nv_queries/searches", "timestamp": "2024-05-08 10:47:39", "reader": "JSON", "meta": {}, "chunks": []}