{"text": "\n\n## GraphQL\n\nWeaviate's basic query language is GraphQL. GraphQL is a query language built on using graph data structures. It is an efficient method of data retrieval and mutation, since it mitigates the common over-fetching and under-fetching problems of other query languages.\n\nGraphQL is case-sensitive (reference), so make sure to use the correct casing when writing your queries.\n\n## All references\n\nAll references have their individual subpages. Click on one of the references below for more information.\n\n- Get{}\n- Aggregate{}\n- Explore{}\n- filters\n- search operators\n- additional properties\n\n## Query structure\n\nYou can query Weaviate for semantic kinds based on standard GraphQL queries. The examples below only contain the GraphQL query. You can POST a GraphQL query to Weaviate as follows:\n\n```bash\ncurl http://localhost/v1/graphql -X POST -H 'Content-type: application/json' -d '{GraphQL query}'\n```\n\nA GraphQL JSON object is defined as:\n\n```json\n{\n    \"query\": \"{ # GRAPHQL QUERY }\"\n}\n```\n\nGraphQL queries follows a defined structure, defined to interact with your data in Weaviate as good as possible. Queries are structured as follows:\n\n\n```graphql\n{\n   {\n       {\n        \n        _\n      }\n  }\n}\n```\n\n- There are three **functions** currently defined in Weaviate's GraphQL: `Get{}`, `Aggregate{}` and `Explore{}`. `Get{}` functions are used to easily retrieve data from your Weaviate instance, while `Aggregate{}` is used to obtain meta information about data objects and its properties. With `Explore{}` you can browse through the data to with semantic search, and a slightly different query structure than above is used (there is no `` defined, since you are searching in a fuzzy way):\n\n```graphql\n{\n  Explore () {\n      beacon\n      certainty\n      className\n  }\n}\n```\n\n- **Class** is the name of the class you want to fetch, defined in the schema.\n- With including a **property** (lowercase) list in the query, you specify exactly which property values you want to return. If the property is a reference to another object (beacon), then use the following structure:\n\n```graphql\n{\n   {\n     {\n      \n      \n        ... on  {\n          \n          _additional {\n            \n          }\n        }\n      _additional {\n        \n      }\n    }\n  }\n}\n```\n\n- To obtain meta information about a data object (for example for interpretation or visualization purposes), use an **additional property**.\n\n## Limitations\n\nGraphQL _integer_ data currently only supports `int32`, and does not support `int64`. This means that currently _integer_ data fields in Weaviate with integer values larger than `int32`, will not be returned using GraphQL queries. We are working on solving this issue. As current workaround is to use a `string` instead.\n\n## Consistency level\n\nGraphQL (`Get`) queries are run with a tunable consistency level.\n\n\n\n\n", "type": "Documentation", "name": "api-graphql", "path": "developers/weaviate/api/graphql/index.md", "link": "https://weaviate.io/developers/weaviate/api/graphql", "timestamp": "2023-11-02 10:52:21", "reader": "JSON", "meta": {}, "chunks": []}