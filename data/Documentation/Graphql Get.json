{"text": "\n\n\n## Overview\n\nThis page covers object-level query functions. They are collectively referred to as `Get` queries within.\n\n\n### Parameters\n\nA `Get` query requires the target collection to be specified.\n\n- In GraphQL calls, the properties to be retrieved to be must be specified explicitly.\n- In gRPC calls, all properties are fetched by default.\n\n- Metadata retrieval is optional in both GraphQL and gRPC calls.\n\n#### Available arguments\n\nEach `Get` query can include any of the following types of arguments:\n\n| Argument | Description | Required |\n| -------- | ----------- | -------- |\n| Collection | Also called \"class\". The object collection to be retrieved from. | Yes |\n| Properties | Properties to be retrieved | Yes (GraphQL)  (No if using gRPC API) |\n| Cross-references | Cross-references to be retrieved | No |\n| [Metadata](./additional-properties.md) | Metadata (additional properties) to be retrieved | No |\n| [Conditional filters](./filters.md) | Filter the objects to be retrieved | No |\n| [Search operators](./search-operators.md) | Specify the search strategy (e.g. near text, hybrid, bm25) | No |\n| [Additional operators](./additional-operators.md) | Specify additional operators (e.g. limit, offset, sort) | No |\n| [Tenant name](#multi-tenancy) | Specify the tenant name | Yes, if multi-tenancy enabled. ([Read more: what is multi-tenancy?](../../concepts/data.md#multi-tenancy)) |\n| [Consistency level](#consistency-levels) | Specify the consistency level | No |\n\n\n#### Example usage\n\n\n\n\n  Example response\n\nThe above query will result in something like the following:\n\n\n\n\n\n\n  Order of retrieved objects\n\nWithout any arguments, the objects are retrieved according to their ID.\n\nAccordingly, such a `Get` query is not suitable for a substantive object retrieval strategy. Consider the [Cursor API](./additional-operators.md#cursor-with-after) for that purpose.\n\n\n\n- [How-to search: Basics](../../search/basics.md)\n\n### `Get` groupBy\n\nYou can use retrieve groups of objects that match the query.\n\nThe groups are defined by a property, and the number of groups and objects per group can be limited.\n\n\n\n\n#### Syntax\n\n```graphql\n{\n  Get{\n    (\n        # e.g. nearVector, nearObject, nearText\n      groupBy:{\n        path: []  # Property to group by (only one property or cross-reference)\n        groups:   # Max. number of groups\n        objectsPerGroup:   # Max. number of objects per group\n      }\n    ) {\n      _additional {\n        group {\n          id  # An identifier for the group in this search\n          groupedBy{ value path }  # Value and path of the property grouped by\n          count  # Count of objects in this group\n          maxDistance  # Maximum distance from the group to the query vector\n          minDistance  # Minimum distance from the group to the query vector\n          hits {  # Where the actual properties for each grouped objects will be\n              # Properties of the individual object\n            _additional {\n              id  # UUID of the individual object\n              vector  # The vector of the individual object\n              distance  # The distance from the individual object to the query vector\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n#### Example usage:\n\n\n\n\n\n### Consistency levels\n\n\nWhere replication is enabled, you can specify a `consistency` argument with a `Get` query. The available options are:\n- `ONE`\n- `QUORUM` (Default)\n- `ALL`\n\nRead more about consistency levels [here](../../concepts/replication-architecture/consistency.md).\n\n\n\n### Multi-tenancy\n\n\nIn a multi-tenancy collection, each `Get` query must specify a tenant.\n\n\n\n\n- [How-to manage data: Multi-tenancy operations](../../manage-data/multi-tenancy.md)\n\n## Cross-references\n\nWeaviate supports cross-references between objects. Each cross-reference behaves like a property.\n\nYou can retrieve cross-referenced properties with a `Get` query.\n\n\n\n\n  Expected response\n\n\n\n\n\n- [How-to retrieve cross-referenced properties](../../search/basics.md#retrieve-cross-referenced-properties)\n\n## Additional properties / metadata\n\nVarious metadata properties may be retrieved with `Get{}` requests. They include:\n\nProperty | Description |\n-------- | ----------- |\n`id` | Object id |\n`vector` | Object vector |\n`generate` | Generative module outputs |\n`rerank` | Reranker module outputs |\n`creationTimeUnix` | Object creation time |\n`lastUpdateTimeUnix` | Object last updated time |\n`distance` | Vector distance to query (vector search only) |\n`certainty` | Vector distance to query, normalized to certainty (vector search only) |\n`score` | Search score (BM25 and hybrid only) |\n`explainScore` | Explanation of the score (BM25 and hybrid only) |\n`classification` | Classification outputs |\n`featureProjection` | Feature projection outputs |\n\nThey are returned through the `_additional` properties in the response.\n\nFor further information see:\n\n- [References: GraphQL: Additional properties](./additional-properties.md)\n- [How-to search: Specify fetched properties](../../search/basics.md#specify-the-fetched-properties)\n\n\n## Search operators\n\nThe following search operators are available.\n\n| Argument | Description | Required modules (at least one of) | Learn more |\n| --- | --- | --- | --- |\n| `nearObject` | Vector search using a Weaviate object | *none* | [Learn more](./search-operators.md#nearobject) |\n| `nearVector` | Vector search using a raw vector | *none* | [Learn more](./search-operators.md#nearvector) |\n| `nearText` | Vector search using a text query | `text2vec-xxx` | [Transformers](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-transformers.md#how-to-use), [Contextionary](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-contextionary.md#how-to-use), [OpenAI](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-openai.md#how-to-use), [CLIP](/developers/weaviate/modules/retriever-vectorizer-modules/multi2vec-clip.md#how-to-use), [Hugging Face](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-huggingface.md#how-to-use), [Cohere](/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere.md#how-to-use) |\n| `nearImage` | Vector search using an image | `multi2vec-clip`, `img2vec-neural` | [CLIP](/developers/weaviate/modules/retriever-vectorizer-modules/multi2vec-clip.md#neartext), [Img2Vec](/developers/weaviate/modules/retriever-vectorizer-modules/img2vec-neural.md#nearimage-search) |\n| `hybrid` | Combine vector and BM25 search results |   *none* | [Learn more](../graphql/search-operators.md#hybrid) |\n| `bm25`   | Keyword search with BM25F ranking  | *none* | [Learn more](../graphql/search-operators.md#bm25) |\n\nFor further information see:\n\n- [References: GraphQL: Search operators](./search-operators.md)\n- [How-to search: Similarity search](../../search/similarity.md)\n- [How-to search: Image search](../../search/image.md)\n- [How-to search: BM25 search](../../search/bm25.md)\n- [How-to search: Hybrid search](../../search/hybrid.md)\n\n## Conditional filters\n\n`Get{}` queries can be combined with a conditional filter.\n\nFor further information see:\n\n- [References: GraphQL: Conditional Filters](./filters.md)\n- [How-to search: Filters](../../search/filters.md)\n\n\n## Additional operators\n\n`Get{}` queries can be combined with additional operators such as `limit`, `offset`, `autocut`, `after` or `sort`.\n\nFor further information see:\n\n- [References: GraphQL: Additional Operators](./additional-operators.md)\n\n\n##  Related pages\n- [How-to: Search: Basics](../../search/basics.md)\n\n\n\n", "type": "Documentation", "name": "Graphql Get", "path": "developers/weaviate/api/graphql/get.md", "link": "https://weaviate.io/developers/weaviate/api/graphql/get", "timestamp": "2024-05-08 10:49:21", "reader": "JSON", "meta": {}, "chunks": []}