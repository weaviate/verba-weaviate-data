{"text": "\nWeaviate is not a continuously deployed application, as it is published as releases\nand users install Weaviate themselves. Nevertheless, we aim to treat it with\nthe same level of CI/CD-maturity as one would a continuously deployed\napplication.\n\n## Trunk-based development\n\nAs Weaviate is open-source, we welcome everyone's contributions. It is therefore\nnot feasible to allow for true trunk-based development. Outside contributors\ndon't have write access to our `master`/`main` branches. And the \"GitHub flow\"\n(small PRs for every contribution) is well established in the OSS community.\n\nNevertheless, we believe in the benefits of trunk-based development and want to\nget as close to it as possible.\n\nIn practice this means:\n\n* Keep every single commit production ready. Do not use the comfort of a branch\n  to temporarily ignore quality standards, knowing that you can still fix them\n  before creating a Pull Request. As a rule of thumb, every commit should have a\n  passing test suite and should contain anything that you wouldn't want to be\n  used at scale.\n\n  There might be situations, especially when developing complex features, where\n  you explicitly make commits which are \"not production-ready\". For example to\n  get a get an integration test to pass you might require several commits.\n  Please, clearly mark such commits as \"WIP\".\n\n* The best time to merge a PR is yesterday. There is no harm in having a\n  non-breaking, not-yet finished feature already on the trunk. (Especially as\n  every commit is production-ready). However, there is harm in three branches\n  deviating for a week and leading to massive merge conflicts. Thus, be\n  prepared to merge your contribution even if it's not fully complete yet. We\n  can always hide unfinished features from users using feature toggles, etc.\n\n## Semantic Versioning\n\nWe generally aim to avoid breaking changes. Having to update a major version\nfrequently is annoying - but it is even more annoying for the user to have to\ntry to fix a bug themselves.\n\nWeaviate uses semantic versioning to indicate to users that an upgrade path is\nsafe. Having said that, pre-`v1.0.0`, there were some special situations:\n\n### Versions 0.x.y\n\nSince we have no good way of indicating breaking changes without raising the\nmajor version, we have come up with the following scheme while we are below\nversion `v1.0.0`:\n\n* Both patches and new features are indicated in the patch version. E.g.\n  `0.22.18` might contain new (non-breaking) features as well as fixes over\n  `0.22.17`.\n* Breaking changes (which should happen very rarely) increase the minor\n  version. E.g. `0.23.0` will contain breaking changes over `0.22.x`. This\n  workaround will no longer be required once version `v1.0.0` is published and\n  proper semantic versioning can be done.\n\n### Versions 1.x.y and larger\n\nVersions v1.0.0 and onwards use Semantic Versioning as it was intended.\n\n## Deprecations\n\nWe aim not to introduce a breaking change without having a deprecation period\nfirst. The rule of thumb is:\n\n* If we want to rename something, allow both in parallel, but clearly mark the\n  old way as deprecated.\n* If we want to remove something, clearly show a deprecation notice when the\n  user uses a deprecated feature. This message should present a user with an\n  alternative to the deprecated behavior.\n\nTo introduce a new deprecation, add it to `deprecations/deprecations.yml`. This\nwill auto-generate an entry for this deprecation. You can then use the provided\nmethods to show this deprecation when the user uses a deprecated feature.\n\n## Releases\n\nThere is no fixed release schedule. We aim to publish new features and fixes as\nearly as possible.\n\nHowever, keep in mind, that an upgrade of an installation can be effort to a\nuser. If we thus know that several features will be ready within a few days, we\ncan group those releases.\n\nDo not confuse release frequency with merging to master. While there might be\nvalue to the user in holding back a release a few days, there are no benefits\nto holding back a high-quality pull request. In fact, there are only\ndisadvantages: Mainly deviating code-bases and painful merge conflicts.\n\n### Making a release\n\n*This section only applies to Weaviate employees. Outside contributors cannot make\nreleases. If you have made a contribution and think it should be released,\nplease let us know on the public Weaviate Slack.*\n\nThere is a convenience script located at `tools/prepare_release.sh`, to use it\nadhere to the following steps:\n\n1. Merge everything that should be included, make sure CI is happy.\n2. Update the desired target version in `openapi-specs/schema.json`.\n3. Run all auto-code generation using `tools/gen-code-from-swagger.sh`.\n4. Run the convenience script at `tools/prepare_release.sh`. It will create a\n   commit and tag and print a release note template to the terminal.\n5. Push the commit and tag using `git push && git push --tags`\n6. Create a new GitHub Release using the template. Clearly indicate all\n   changes, and link to the respective issues. Check prior releases for\n   inspiration.\n\n## More Resources\n\n\n\n", "type": "Documentation", "name": "weaviate-core-cicd", "path": "developers/contributor-guide/weaviate-core/cicd.md", "link": "https://weaviate.io/developers/contributor-guide/weaviate-core/cicd", "timestamp": "2023-11-02 10:52:02", "reader": "JSON", "meta": {}, "chunks": []}