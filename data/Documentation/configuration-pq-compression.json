{"text": "\n\nStarting in v1.23, AutoPQ simplifies configuring PQ on new collections.\n\n\n\n\n\n\n\nTo configure HNSW, see Configuration: Vector index .\n\n## Enable PQ compression\n\nAutoPQ streamlines PQ configuration for new collections. AutoPQ is not currently available in Weaviate Cloud Services (WCS).\n\nIf you are using WCS or cannot enable asynchronous indexing, you can still use the two phase method to enable PQ.\n\n- Use AutoPQ to enable PQ compression.\n- Use the two phase method to enable PQ compression.\n\n## Configure AutoPQ\n\n\nIf you have a new collection, enable AutoPQ so that you don't have to load your data in two phases.\n\n### Set the environment variable\n\nAutoPQ requires asynchronous indexing. To enable AutoPQ, set the environment variable `ASYNC_INDEXING=true` and restart your instance. You cannot enable AutoPQ without asynchronous indexing.\n\nAutoPQ is not currently available in WCS.\n\n### Configure PQ\n\nTo enable PQ for a collection, update your collection definition.\n\nIf you use the Python client v4, set `quantizer=wvc.Reconfigure.VectorIndex.Quantizer.pq()`.\n\nIf you use one of the other clients, set `pq_enabled=True` in the vector index configuration section, .\n\nFor additional configuration options, see the parameter table.\n\n\n  \n     \n  \n\n  \n     \n  \n\n  \n     \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Load your data\n\nLoad your data. You do not have to load an initial set of training data. AutoPQ creates the PQ codebook when the object counts reach the training limit. By default, training limit is 100,000 objects per shard.\n\n## Two phase configuration method\n\nIf you cannot enable AutoPQ, use the two phase configuration method to enable PQ. If you are configuring PQ on a new collection, be sure to import a set of 10,000 to 100,000 objects per shard before enabling PQ.\n\nWeaviate logs messages when PQ is enabled and when vector compression is complete. Do not import the rest of your data until the training step is complete.\n\nTo enable PQ compression using the two step method, complete the following steps.\n\n- Phase One: Create a codebook\n\n    - Configure an initial schema without PQ\n    - Load some training data\n    - Enable and train PQ\n\n- Phase Two: Load the rest of your data\n\n    - Load the rest of your data\n\nThe next few sections work through these steps.\n\n### Phase One: Create a codebook\n\nUse one of the Weaviate client libraries to connect to your instance.\n\n#### Configure an initial schema without PQ\n\nEvery collection in your Weaviate instance is defined by a schema. Weaviate uses the schema during your initial data load.\n\n\n  \n     \n  \n\n  \n     \n  \n\n  \n     \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n#### Load some training data\n\nIf you are starting with a new collection, you should load between 10,000 and 100,000 objects from your data set. If you have multiple shards, you need to load between 10,000 and 100,000 objects on each shard. If you already have data in your Weaviate instance, you can move to the next step.\n\nWhen you load data for this training phase, you can use any of the objects in your data set to create the codebook. However, try to chose the objects at random so that they are independent and identically distributed.\n\n\n\n  \n    Download sample data\n  \n\n  \n    Use these scripts to get the data for these examples. If you are configuring your own system, you do not need to import this sample data.\n  \n\n\n  \n      \n  \n\n  \n      \n  \n\n  \n      \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n\n\n  \n     \n  \n\n  \n     \n  \n\n  \n     \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n#### Enable PQ and create the codebook\n\nTo enable PQ compression, update your collection (class) schema to set `pq_enabled=True` (or define a `quantizer` if you use the Python Client v4.). After you update the schema, Weaviate uses up to `pq_training_limit` objects to train PQ.\n\n\n\n\nTo enable PQ, update your schema as shown below. For additional configuration options, see the parameter table.\n\n\n\n  \n     \n  \n\n  \n     \n  \n\n  \n     \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Phase Two: Load the rest of your data\n\nIf you are starting with a new Weaviate instance, you can load the rest of your data after PQ creates the codebook. Weaviate compresses the new data when it adds it to the database.\n\nIf you already have data in your Weaviate instance when you create the codebook, Weaviate automatically compresses the remaining objects (the ones after the initial training set).\n\n## PQ Parameters\n\nYou can configure PQ compression by setting the following parameters at the collection level.\n\n\n\n\n\n## Additional tools and considerations\n\n### Change the codebook training limit\n\nFor most use cases, 100,000 objects is an optimal training size. There is little benefit to increasing `trainingLimit`. If you do increase `trainingLimit`, the training period will take longer. You could also have memory problems if you set a high `trainingLimit`.\n\nIf you have fewer than 100,000 objects per shard and want to enable compression, consider using binary quantization (BQ) instead. BQ is a better choice for smaller data sets.\n\n### Check the system logs\n\nWhen compression is enabled, Weaviate logs diagnostic messages like these.\n\n```bash\npq-conf-demo-1  | {\"action\":\"compress\",\"level\":\"info\",\"msg\":\"switching to compressed vectors\",\"time\":\"2023-11-13T21:10:52Z\"}\n\npq-conf-demo-1  | {\"action\":\"compress\",\"level\":\"info\",\"msg\":\"vector compression complete\",\"time\":\"2023-11-13T21:10:53Z\"}\n```\n\nIf you use `docker-compose` to run Weaviate, you can get the logs on the system console.\n\n```bash\ndocker compose logs -f --tail 10 weaviate\n```\n\nYou can also view the log file directly. Check `docker` to get the file location.\n\n```bash\ndocker inspect --format='{{.LogPath}}' \n```\n\n### Review the current `pq` configuration\n\nTo review the current `pq` configuration, you can retrieve it as shown below.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Related pages\n\n- Configuration: Vector index\n- Tutorial: Schema\n\n\n\n", "type": "Documentation", "name": "configuration-pq-compression", "path": "developers/weaviate/configuration/pq-compression.md", "link": "https://weaviate.io/developers/weaviate/configuration/pq-compression", "timestamp": "2024-02-08 21:21:16", "reader": "JSON", "meta": {}, "chunks": []}