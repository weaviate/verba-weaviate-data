{"text": "\n\nThe current Java client version is `v||site.java_client_version||`.\n\nThe `package` and `import` paths have been updated from `technology.semi.weaviate` to `io.weaviate`.\n\nSee the Migration Guide for more info.\n\n## Installation and setup\nTo get the latest stable version of the Java client library, add this dependency to your project:\n\n```xml\n\n  io.weaviate\n  client\n  4.0.0  \n\n```\n\nThis API client is compatible with Java 8 and beyond.\n\nYou can use the client in your project as follows:\n\n```java\npackage io.weaviate;\n\n\npublic class App {\n  public static void main(String[] args) {\n    Config config = new Config(\"http\", \"localhost:8080\");\n    WeaviateClient client = new WeaviateClient(config);\n    Result meta = client.misc().metaGetter().run();\n    if (meta.getError() == null) {\n      System.out.printf(\"meta.hostname: %s\\n\", meta.getResult().getHostname());\n      System.out.printf(\"meta.version: %s\\n\", meta.getResult().getVersion());\n      System.out.printf(\"meta.modules: %s\\n\", meta.getResult().getModules());\n    } else {\n      System.out.printf(\"Error: %s\\n\", meta.getError().getMessages());\n    }\n  }\n}\n```\n\n## Authentication\n\nimport ClientAuthIntro from '/developers/weaviate/client-libraries/_components/client.auth.introduction.mdx'\n\n\n\n### WCS authentication\n\nimport ClientAuthWCS from '/developers/weaviate/client-libraries/_components/client.auth.wcs.mdx'\n\n\n\n### API key authentication\n\n\nimport ClientAuthApiKey from '/developers/weaviate/client-libraries/_components/client.auth.api.key.mdx'\n\n\n\n```java\n\nConfig config = new Config(\"https\", \"some-endpoint.weaviate.network\");\nWeaviateClient client = WeaviateAuthClient.apiKey(config, \"YOUR-WEAVIATE-API-KEY\");  // Replace w/ your Weaviate instance API key\n```\n\n### OIDC authentication\n\nimport ClientAuthOIDCIntro from '/developers/weaviate/client-libraries/_components/client.auth.oidc.introduction.mdx'\n\n\n\n####  Resource Owner Password Flow\n\nimport ClientAuthFlowResourceOwnerPassword from '/developers/weaviate/client-libraries/_components/client.auth.flow.resource.owner.password.mdx'\n\n\n\n```java\n\nConfig config = new Config(\"http\", \"weaviate.example.com:8080\");\nWeaviateAuthClient.clientPassword(\n    config,\n    \"Your user\",\n    \"Your password\",\n    Arrays.asList(\"scope1\", \"scope2\") // optional, depends on the configuration of your identity provider (not required with WCS)\n);\n```\n\n####  Client Credentials flow\n\nimport ClientAuthFlowClientCredentials from '/developers/weaviate/client-libraries/_components/client.auth.flow.client.credentials.mdx'\n\n\n\n```java\n\nConfig config = new Config(\"http\", \"weaviate.example.com:8080\");\nWeaviateAuthClient.clientCredentials(\n    config,\n    \"your_client_secret\",\n    Arrays.asList(\"scope1\" ,\"scope2\") // optional, depends on the configuration of your identity provider\n);\n```\n\n####  Refresh Token flow\n\nimport ClientAuthBearerToken from '/developers/weaviate/client-libraries/_components/client.auth.bearer.token.mdx'\n\n\n\n```java\n\nConfig config = new Config(\"http\", \"weaviate.example.com:8080\");\nWeaviateAuthClient.bearerToken(\n    config,\n    \"Your_access_token\",\n    500,  // lifetime in seconds\n    \"Your_refresh_token\",\n);\n```\n\n## Custom headers\n\nYou can pass custom headers to the client, which are added at initialization:\n\n```java\n\npublic class App {\n  public static void main(String[] args) {\n    Map headers = new HashMap() { {\n      put(\"header_key\", \"value\");\n    } };\n    Config config = new Config(\"http\", \"localhost:8080\", headers);\n    WeaviateClient client = new WeaviateClient(config);\n  }\n}\n```\n\n## References\n\nAll RESTful endpoints and GraphQL functions references covered by the Java client, and explained on those reference pages in the code blocks.\n\n## Design\n\n### Builder pattern\n\nThe Java client functions are designed with a 'Builder pattern'. A pattern is used to build complex query objects. This means that a function (for example to retrieve data from Weaviate with a request similar to a RESTful GET request, or a more complex GraphQL query) is built with single objects to reduce complexity. Some builder objects are optional, others are required to perform specific functions. All is documented on the RESTful API reference pages and the GraphQL reference pages.\n\nThe code snippet above shows a simple query similar to `RESTful GET /v1/meta`. The client is initiated by requiring the package and connecting to the running instance. Then, a query is constructed by using the `.metaGetter()` on `.misc()`. The query will be sent with the `.run()` function, this object is thus required for every function you want to build and execute.\n\n## Migration Guides\n\n### From `3.x.x` to `4.0.0`\n\n#### Moved from `technology.semi.weaviate` to `io.weaviate` package\n\nBefore:\n```java\npackage technology.semi.weaviate;\n```\n\nAfter:\n```java\npackage io.weaviate;\n```\n\n### From `2.4.0` to `3.0.0`\n\n#### Removed @Deprecated method `Aggregate::withFields(Fields fields)`\n\nBefore:\n```java\n// // \nFields fields = Fields.builder().fields(new Field[]{name, description}).build();\nclient.graphQL().aggregate().withFields(fields)...\n```\n\nAfter:\n```java\nclient.graphQL().aggregate().withFields(name, description)...\n```\n\n#### Removed @Deprecated method `Get::withFields(Fields fields)`\n\nBefore:\n```java\n// // \nFields fields = Fields.builder().fields(new Field[]{name, description}).build();\nclient.graphQL().get().withFields(fields)...\n```\n\nAfter:\n```java\nclient.graphQL().get().withFields(name, description)...\n```\n\n#### Removed @Deprecated method `Get::withNearVector(Float[] vector)`\n\nBefore:\n```java\nclient.graphQL().get().withNearVector(new Float[]{ 0f, 1f, 0.8f })...\n```\n\nAfter:\n```java\n// \nNearVectorArgument nearVector = NearVectorArgument.builder().vector(new Float[]{ 0f, 1f, 0.8f }).certainty(0.8f).build();\nclient.graphQL().get().withNearVector(nearVector)...\n```\n\n#### All `where` filters use the same implementation\n\nWith `batch delete` feature, unified `filters.WhereFilter` implementation is introduced, which replaces `classifications.WhereFilter`, `graphql.query.argument.WhereArgument` and `graphql.query.argument.WhereFilter`.\n\n##### GraphQL\n\nBefore:\n```java\n// // // \nGeoCoordinatesParameter geo = GeoCoordinatesParameter.builder()\n    .latitude(50.51f)\n    .longitude(0.11f)\n    .maxDistance(3000f)\n    .build();\nWhereArgument where = WhereArgument.builder()\n    .valueGeoRange(geo)\n    .operator(WhereOperator.WithinGeoRange)\n    .path(new String[]{ \"add \"})\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\nAfter:\n```java\n// // \nWhereFilter where = WhereFilter.builder()\n    .valueGeoRange(WhereFilter.GeoRange.builder()\n        .geoCoordinates(WhereFilter.GeoCoordinates.builder()\n            .latitude(50.51f)\n            .longitude(0.11f)\n            .build()\n        )\n        .distance(WhereFilter.GeoDistance.builder()\n            .max(3000f)\n            .build()\n        )\n        .build()\n    )\n    .operator(Operator.WithinGeoRange)\n    .path(new String[]{ \"add\" })\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\nBefore:\n```java\n// // \nWhereArgument where = WhereArgument.builder()\n    .valueText(\"txt\")\n    .operator(WhereOperator.Equal)\n    .path(new String[]{ \"add\" })\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\nAfter:\n```java\n// // \nWhereFilter where = WhereFilter.builder()\n    .valueText(\"txt\")\n    .operator(Operator.Equal)\n    .path(new String[]{ \"add\" })\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\nBefore:\n```java\n// // // \nWhereArgument where = WhereArgument.builder()\n    .operands(new WhereFilter[]{\n        WhereFilter.builder()\n            .valueInt(10)\n            .path(new String[]{ \"wordCount\" })\n            .operator(WhereOperator.LessThanEqual)\n            .build(),\n        WhereFilter.builder()\n            .valueText(\"word\")\n            .path(new String[]{ \"word\" })\n            .operator(WhereOperator.LessThan)\n            .build()\n    })\n    .operator(WhereOperator.And)\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\nAfter:\n```java\n// // \nWhereFilter where = WhereFilter.builder()\n    .operands(new WhereFilter[]{\n        WhereFilter.builder()\n            .valueInt(10)\n            .path(new String[]{ \"wordCount\" })\n            .operator(Operator.LessThanEqual)\n            .build(),\n        WhereFilter.builder()\n            .valueText(\"word\")\n            .path(new String[]{ \"word\" })\n            .operator(Operator.LessThan)\n            .build(),\n    })\n    .operator(Operator.And)\n    .build();\n\nclient.graphQL().aggregate().withWhere(where)...\n```\n\n##### Classification\n\nBefore:\n```java\n// // // // // \nWhereFilter where = WhereFilter.builder()\n    .valueGeoRange(WhereFilterGeoRange.builder()\n        .geoCoordinates(GeoCoordinates.builder()\n            .latitude(50.51f)\n            .longitude(0.11f)\n            .build())\n        .distance(WhereFilterGeoRangeDistance.builder()\n            .max(3000d)\n            .build())\n        .build())\n    .operator(Operator.WithinGeoRange)\n    .path(new String[]{ \"geo\" })\n    .build();\n\nclient.classifications().scheduler().withTrainingSetWhereFilter(where)...\n```\n\nAfter:\n```java\n// // \nWhereFilter where = WhereFilter.builder()\n    .valueGeoRange(WhereFilter.GeoRange.builder()\n        .geoCoordinates(WhereFilter.GeoCoordinates.builder()\n            .latitude(50.51f)\n            .longitude(0.11f)\n            .build())\n        .distance(WhereFilter.GeoDistance.builder()\n            .max(3000f)\n            .build())\n        .build())\n    .operator(Operator.WithinGeoRange)\n    .path(new String[]{ \"geo\" })\n    .build();\n\nclient.classifications().scheduler().withTrainingSetWhereFilter(where)...\n```\n\n## Client releases\n\n\n\n\n## Change logs\n\nCheck the\nchange logs on GitHub\nfor updates on the latest `Java client` changes.\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-java", "path": "developers/weaviate/client-libraries/java.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/java", "timestamp": "2023-11-13 10:40:22", "reader": "JSON", "meta": {}, "chunks": []}