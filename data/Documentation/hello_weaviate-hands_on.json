{"text": "\n### &nbsp;&nbsp; Preparation\n\nThis section includes queries using the OpenAI inference endpoint. If you don't already have an OpenAI account, we recommend creating one. At the time of writing, OpenAI provides trial credits which should be sufficient for these exercises.\n\n## &nbsp;&nbsp; Overview\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\nNow that you've set up your own Weaviate instance and installed a client, let's get hands-on with Weaviate.\n\n### &nbsp;&nbsp; Client instantiation\n\nCreate a `client` object for persistent access to your Weaviate instance. You can set the following parameters:\n\n- **Host URL (required)**\n\n  This is the location of your Weaviate instance. The URL resembles\n\n  ```\n  https://your-sandbox-uo2vgb1z.weaviate.network\n  ```\n\n- **Authentication details (optional)**\n\n  If authentication is enabled, you MUST provide your authentication information here. Otherwise the Weaviate instance will not provide access.\n\n  ```\n  AbCdEfGhIjKlMnOpAXB6gbBIaxHDuuwWj5OD\n  ```\n- **Additional headers (optional)**\n\n  You can provide additional headers. These headers provide API keys for inference services such as Cohere, Hugging Face or OpenAI.\n\nA fully configured client resembles this sample code, edited to match your Weaviate instance.\n\n\n\n\n\n\n### &nbsp;&nbsp; Try it out!\n\nNow, connect to your Weaviate instance.\n\n1. Copy the client code below to a file called `connection_example.py`.\n1. Edit the file to use your Weaviate URL\n1. Edit the API key to use the key for your sandbox.\n\n   You can find the API keys for your sandbox by clicking the \"Details\" button and looking for \"API keys\" in the Authentication tab. The key resembles this one.\n1. Run the file.\n\n   ```\n   python3 connection_example.py\n   ```\n\n\n   \n\nCongratulations! You've made your first request to a Weaviate API! The `meta` REST endpoint returns configuration details for your instance.\n\nThe Weaviate API allows you to do quite a bit. We will try out some examples in the next sections. For more details, see the API documentation.\n\n## &nbsp;&nbsp; Weaviate API and the client\n\n### &nbsp;&nbsp; Available APIs\n\nWeaviate uses two API types - REST APIs and GraphQL APIs. They work together to provide a rich set of functionality.\n\nThe **REST API** provides:\n- CRUD (Create, Read, Update and Delete) operations\n- Metadata about the database\n\nThe **GraphQL API** provides:\n- Data searches\n- Data object retrieval\n- Information aggregation\n- Vector space exploration\n\nYou will learn about these capabilities over the course of these units.\n\n\n  What is REST?\n\nREST is an acronym for **RE**presentational **S**tate **T**ransfer.\n\nA REST API provides multiple endpoints, each with its own URL, that can be used to interact with the application.\n\nThe endpoints are organized into a hierarchy, with each endpoint representing a resource. The client can then request information about these resources by sending a request to the server.\n\n\n\n\n  What is GraphQL?\n\nGraphQL is a query language for APIs.\n\nFirst released by Facebook in 2015, it is now maintained by the GraphQL Foundation.\n\nGraphQL is a specification for a query language that can be used to request information from a server. GraphQL is a **strongly typed** language, which means that the client must specify the type of data that it wants to receive.\n\n\n\n### &nbsp;&nbsp; Access the REST API\n\nYou can access the REST API and the GraphQL API with the Weaviate client libraries, or with other tools as long as the tool formats the request properly.\n\nIn these examples, the code shown in each set of tabs is functionally the same. Both REST calls request meta information. Both GraphQL calls ask for the same data.\n\n####  Example 1: REST vs client requests\n\n\n\n\n####  Example 2: GraphQL vs client requests\n\n\n\n\nNow, let's try out more substantive queries.\n\n## &nbsp;&nbsp; Running queries\n\n -->\n\n### &nbsp;&nbsp; Connect to our demo instance\n\nNow let's try to connect to a Weaviate demo instance and run some queries on the sample data. The instance has these details:\n\n- `url`: `https://edu-demo.weaviate.network`\n- `Weaviate API key`: `readonly-demo`\n\nUse these instance details and see if you can:\n- Instantiate a Weaviate client\n- Check that the connection by fetching the metadata as we did above.\n\nBonus points if you can do it without looking at the snippet below:\n\n\n\n  Connect to the demo instance\n\n\n\n\n\n### &nbsp;&nbsp; Vector searches\n\nThe next query searches the `WikiCity` objects for the cities that are closest to the specified text, which in this case is simply, \"Major European city\".\n\nTo run this query, update the connection file you just created.\n\n- Comment out any lines that request meta information\n- Add the OpenAI authorization key you created earlier\n- Add the following code snippet\n\n\n\n\nTry varying the query concept from \"Major European city\" to another - what do you see? Is it in line with what you expected?\n\n### &nbsp;&nbsp; Question answering\n\nThis example searches the `WikiCity` objects to answer the question, \"When was the London Olympics?\" Update your code from the last example, and try it out yourself.\n\n\n\n\nTry varying the question from, \"When was the London Olympics?\" to another, city-related, question. What do you see?\n\nTry to see what types of questions work better than others. Do you notice any patterns?\n\n### &nbsp;&nbsp; Generative search\n\nThis example also searches the `WikiCity` objects, but this one uses the Weaviate `generative-openai` module to transform the results. In this case, the module produces tweets about cities in Southeast Asia.\n\nUpdate your demo code once again, and try it out:\n\n\n\n\nTry varying the prompt from:\n\n```\n\"Write a tweet with a potentially surprising fact from {wiki_summary}\"\n```\n\nWhat happens if you remove {wiki_summary}?\n\n## &nbsp;&nbsp; Review\n\n### &nbsp;&nbsp; Review exercise\n\n\n\n\n\n### &nbsp;&nbsp; Key takeaways\n\n- Weaviate uses two API types, REST and GraphQL. REST is used for CRUD operations and metadata, while GraphQL is used for data searches, retrieving data objects, and exploring vector spaces.\n- Client libraries are used to access both REST and GraphQL APIs, providing a convenient way to interact with Weaviate instances.\n- You have connected to a demo Weaviate instance to run vector searches, question-answering queries, and generative searches.\n\n\n\n\nimport Quiz from '/src/components/Academy/quiz.js'\nconst apiRecap = [{\n  questionText: 'Which of the following is not true about the Weaviate API?',\n  answerOptions: [\n    {\n      answerText: 'Weaviate users can use both REST and GraphQL.',\n      isCorrect: false,\n      feedback: 'They are both available for all users, and serve complementary roles in communicating with Weaviate.',\n    },\n    {\n      answerText: 'The REST API can be used to retrieve instance configuration data.',\n      isCorrect: false,\n      feedback: 'the `meta` endpoint is available for this purpose.',\n    },\n    {\n      answerText: 'Both GraphQL and REST APIs can be used in Weaviate to perform vector searches.',\n      isCorrect: true,\n      feedback: 'Only the GraphQL API performs vector searches.',\n    },\n    {\n      answerText: 'None of the above.',\n      isCorrect: false,\n      feedback: 'The truth is out there!',\n    },\n  ]\n}];\nconst clientLimits = [{\n  questionText: 'What can\\'t Weaviate clients do?',\n  answerOptions: [\n    {\n      answerText: 'Analyze the retrieved results.',\n      isCorrect: true,\n      feedback: 'They cannot perform any data analysis.',\n    },\n    {\n      answerText: 'Communicate with the Weaviate REST API.',\n      isCorrect: false,\n      feedback: 'They can all perform REST API requests.',\n    },\n    {\n      answerText: 'Communicate with the Weaviate GraphQL API.',\n      isCorrect: false,\n      feedback: 'They can all perform GraphQL API requests.',\n    },\n  ]\n}];\n", "type": "Documentation", "name": "hello_weaviate-hands_on", "path": "developers/academy/zero_to_mvp/101_hello_weaviate/50_hands_on.mdx", "link": "https://weaviate.io/developers/academy/zero_to_mvp/hello_weaviate/hands_on", "timestamp": "2024-02-08 20:21:11", "reader": "JSON", "meta": {}, "chunks": []}