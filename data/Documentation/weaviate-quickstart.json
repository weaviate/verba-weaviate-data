{"text": "\n\n\n\n## Overview\n\nWelcome to the Quickstart guide for Weaviate, an open-source vector database. This tutorial is intended to be a hands-on introduction to Weaviate.\n\nIn the next ~20 minutes, you will:\n- Build a Weaviate vector database, and\n- Query it with:\n    - *semantic search*,\n    - an added *filter* and\n    - *generative searches* to transform your search results with a large language model (LLM).\n\n#### Object vectors\n\nVectors are mathematical representations of data objects, which enable similarity-based searches in vector databases like Weaviate.\n\nWith Weaviate, you have options to:\n- Have **Weaviate create vectors** for you, or\n- Specify **custom vectors**.\n\nThis tutorial demonstrates both methods.\n\n#### Source data\n\nWe will use a (tiny) dataset of quizzes.\n\n\n  See the dataset\n\nThe data comes from a TV quiz show (\"Jeopardy!\")\n\n|    | Category   | Question                                                                                                          | Answer                  |\n|---:|:-----------|:------------------------------------------------------------------------------------------------------------------|:------------------------|\n|  0 | SCIENCE    | This organ removes excess glucose from the blood & stores it as glycogen                                          | Liver                   |\n|  1 | ANIMALS    | It's the only living mammal in the order Proboseidea                                                              | Elephant                |\n|  2 | ANIMALS    | The gavial looks very much like a crocodile except for this bodily feature                                        | the nose or snout       |\n|  3 | ANIMALS    | Weighing around a ton, the eland is the largest species of this animal in Africa                                  | Antelope                |\n|  4 | ANIMALS    | Heaviest of all poisonous snakes is this North American rattlesnake                                               | the diamondback rattler |\n|  5 | SCIENCE    | 2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification | species                 |\n|  6 | SCIENCE    | A metal that is \"ductile\" can be pulled into this while cold & under pressure                                     | wire                    |\n|  7 | SCIENCE    | In 1953 Watson & Crick built a model of the molecular structure of this, the gene-carrying substance              | DNA                     |\n|  8 | SCIENCE    | Changes in the tropospheric layer of this are what gives us weather                                               | the atmosphere          |\n|  9 | SCIENCE    | In 70-degree air, a plane traveling at about 1,130 feet per second breaks it                                      | Sound barrier           |\n\n\n\nTry it directly on Google Colab (or go to the file).\n\n## Step 1: Create a Weaviate database\n\nYou need a Weaviate instance to work with. We recommend creating a free cloud sandbox instance on Weaviate Cloud Services (WCS).\n\nGo to the WCS quickstart and follow the instructions to create a sandbox instance, and come back here.  Collect the **API key** and **URL** from the `Details` tab in WCS.\n\nAs of November 2023, WCS clusters are not yet compatible with the new API introduced in the v4 Python client. We suggest creating a Weaviate instance using another method, such as Docker Compose.\n\nIf you prefer another method, see this section.\n\n## Step 2: Install a client library\n\nWe suggest using a Weaviate client (read more) to work with your preferred programming language.\n\nTo install your preferred client, run the installation code for your language:\n\n\n\n\n\n\n## Step 3: Connect to Weaviate\n\nTo connect to your Weaviate instance, you need the following information:\n\n- The Weaviate **URL** (get it from WCS `Details` tab),\n- The Weaviate **API key** (if enabled - get it from WCS `Details` tab), and\n- An OpenAI **inference API key** (sign up here).\n\nRun the following example code to connect to Weaviate. You can re-use the resulting `client` object in the following steps.\n\nimport ConnectToWeaviateWithKey from '/_includes/code/quickstart/connect.withkey.mdx'\n\n\n\n## Step 4: Define a class\n\nNext, we define a data collection (a \"class\" in Weaviate) to store objects in. This is analogous to creating a table in relational (SQL) databases.\n\nThe following code:\n- Configures a class object with:\n  - Name `Question`\n  - Vectorizer module `text2vec-openai`\n  - Generative module `generative-openai`\n- Then creates the class.\n\nRun it to create the class in your Weaviate instance.\n\nimport CodeAutoschemaMinimumSchema from '/_includes/code/quickstart/collection.definition.mdx'\n\n\n\nIf you prefer another setup, see this section.\n\nNow you are ready to add objects to Weaviate.\n\n## Step 5: Add objects\n\nYou can now add objects to Weaviate. You will be using a batch import (read more) process for maximum efficiency.\n\nThe guide covers both ways of obtaining a vector, starting with using a `vectorizer`.\n\nIf you are not sure which option to follow, use Option 1, as it is the simplest to get started with.\n\n### *Option 1*: `vectorizer`\n\nRun the code below to import data without specifying a vector. This causes Weaviate to use the `vectorizer` defined for the class to create a vector embedding for each object.\n\nimport CodeAutoschemaImport from '/_includes/code/quickstart/import.mdx'\n\n\n\nThe above code:\n- Loads objects, and\n- Adds objects to the target class (`Question`) one by one.\n\n### *Option 2*: Custom vectors\n\nAlternatively, you can also provide your own vectors to Weaviate. Regardless of whether a `vectorizer` is set, if a vector is specified, Weaviate will use it to represent the object.\n\nTo import data with corresponding pre-computed vectors, run the code below. This causes Weaviate to use the vector provided for each object.\n\nimport CodeAutoschemaImportCustomVectors from '/_includes/code/quickstart/import.custom.vectors.mdx'\n\n\n\nDo *not* specify object vectors as an object property. This will cause Weaviate to treat it as a regular property, rather than as a vector embedding.\n\n## Partial recap\n\nThe following code puts the above steps together.\n\nIf you have not been following along with the snippets, run the code block below. This will let you run queries in the next section.\n\n\n  End-to-end code\n\n\nimport CodeAutoschemaEndToEnd from '/_includes/code/quickstart/endtoend.mdx'\n\n\n\n\n\n## Step 6: Queries\n\nNow, let's run some queries on your Weaviate instance. Weaviate powers many different types of searches. We will try a few here.\n\n### Semantic search\n\nLet's start with a similarity search. A `nearText` search looks for objects in Weaviate whose vectors are most similar to the vector for the given input text.\n\nRun the following code to search for objects whose vectors are most similar to that of `biology`.\n\nimport CodeAutoschemaNeartext from '/_includes/code/quickstart/neartext.mdx'\n\n\n\nYou should see results like this:\n\nimport BiologyQuestionsJson from '/_includes/code/quickstart/response.biology.questions.mdx'\n\n\n\nThe response includes a list of objects whose vectors are most similar to the word `biology`. The top 2 results are returned here as we have set a `limit` to `2`.\n\nNotice that even though the word `biology` does not appear anywhere, Weaviate returns biology-related entries.\n\nThis example shows why vector searches are powerful. Vectorized data objects allow for searches based on degrees of similarity, as shown here.\n\n### Semantic search with a filter\n\nYou can add Boolean filters to searches. For example, the above search can be modified to only in objects that have a \"category\" value of \"ANIMALS\". Run the following code to see the results:\n\nimport CodeAutoschemaNeartextWithWhere from '/_includes/code/quickstart/neartext.where.mdx'\n\n\n\nYou should see results like this:\n\nimport BiologyQuestionsWhereJson from '/_includes/code/quickstart/response.biology.where.questions.mdx'\n\n\n\nThe results are limited to objects from the `ANIMALS` category.\n\nUsing a Boolean filter allows you to combine the flexibility of vector search with the precision of `where` filters.\n\n\n\n\n### Generative search (single prompt)\n\nNext, let's try a generative search. A generative search, also called retrieval augmented generation, prompts a large language model (LLM) with a combination of a user query as well as data retrieved from a database.\n\nTo see what happens when an LLM uses query results to perform a task that is based on our prompt, run the code below.\n\nNote that the code uses a `single prompt` query, which asks the model generate an answer for *each* retrieved database object.\n\nimport CodeAutoschemaGenerative from '/_includes/code/quickstart/generativesearch.single.mdx'\n\n\n\nYou should see results similar to this:\n\nimport BiologyGenerativeSearchJson from '/_includes/code/quickstart/response.biology.generativesearch.single.mdx'\n\n\n\nWe see that Weaviate has retrieved the same results as before. But now it includes an additional, generated text with a plain-language explanation of each answer.\n\n### Generative search (grouped task)\n\nThe next example uses a `grouped task` prompt instead to combine all search results and send them to the LLM with a prompt.\n\nTo ask the LLM to write a tweet about these search results, run the following code.\n\nimport CodeAutoschemaGenerativeGrouped from '/_includes/code/quickstart/generativesearch.grouped.mdx'\n\n\n\nThe first returned object will include the generated text. Here's one that we got:\n\nimport BiologyGenerativeSearchGroupedJson from '/_includes/code/quickstart/response.biology.generativesearch.grouped.mdx'\n\n\n\nGenerative search sends retrieved data from Weaviate to a large language model, or LLM. This allows you to go beyond simple data retrieval, but transform the data into a more useful form, without ever leaving Weaviate.\n\n\n\n## Recap\n\nWell done! You have:\n- Created your own cloud-based vector database with Weaviate,\n- Populated it with data objects,\n    - Using an inference API, or\n    - Using custom vectors,\n- Performed searches, including:\n    - Semantic search,\n    - Semantic search with a filter and\n    - Generative search.\n\nWhere next is up to you. We include a few links below - or you can check out the sidebar.\n\n\n\n## Next\n\nYou can do much more with Weaviate. We suggest trying:\n\n- Examples from our search how-to guides for keyword, similarity, hybrid, generative searches and filters or\n- Learning how to manage data, like reading, batch importing, updating, deleting objects or bulk exporting data.\n\nFor more holistic learning, try  Weaviate Academy. We have built free courses for you to learn about Weaviate and the world of vector search.\n\nYou can also try a larger, 1,000 row version of the Jeopardy! dataset, or this tiny set of 50 wine reviews.\n\n\n\n## FAQs & Troubleshooting\n\nWe provide answers to some common questions, or potential issues below.\n\n### Questions\n\n#### Can I use another deployment method?\n\nimport ConnectToWeaviateDocker from '/_includes/code/quickstart.autoschema.connect.docker.mdx'\n\n\n  See answer\n\n\n\nYes, you can use any method listed on our installation options sections.\n\n\n\nUsing Docker Compose may be a convenient option for many. To do so:\n1. Save this `Docker Compose` file as `docker-compose.yml`,\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    command:\n    - --host\n    - 0.0.0.0\n    - --port\n    - '8080'\n    - --scheme\n    - http\n    image: semitechnologies/weaviate:||site.weaviate_version||\n    ports:\n    - 8080:8080\n    restart: on-failure:0\n    environment:\n      OPENAI_APIKEY: $OPENAI_APIKEY\n      QUERY_DEFAULTS_LIMIT: 25\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'\n      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'\n      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'\n      ENABLE_MODULES: 'text2vec-openai,generative-openai'\n      CLUSTER_HOSTNAME: 'node1'\n...\n```\n2. Run `docker compose up -d` from the location of your `docker-compose.yml` file, and then\n3. Connect to Weaviate at `http://localhost:8080`.\n\nIf you are using this `Docker Compose` file, Weaviate will not require API-key authentication. So your connection code will change to:\n\n\n\n\n\n#### Can I use different modules?\n\n\n  See answer\n\nIn this example, we use the `OpenAI` inference API. But you can use others.\n\nIf you do want to change the vectorizer, or the generative module, you can. You will need to:\n- Ensure that the module is available in the Weaviate instance you are using,\n- Modify your class definition to suit your chosen modules, and\n- Make sure to use the right API key(s) (if necessary) for your modules.\n\nEach of the following modules is available in the free sandbox.\n\n- Vectorizer modules:\n    - `text2vec-cohere`\n    - `text2vec-huggingface`\n    - `text2vec-openai`\n    - `text2vec-palm`\n- Generative modules:\n    - `generative-cohere`\n    - `generative-openai`\n    - `generative-palm`\n\nDepending on your choice, make sure to pass on the API key(s). You can do so by setting the header with the appropriate line(s) from below, remembering to replace the placeholder with your actual key:\n\n```js\n\"X-Cohere-Api-Key\": \"YOUR-COHERE-API-KEY\",  // For Cohere\n\"X-HuggingFace-Api-Key\": \"YOUR-HUGGINGFACE-API-KEY\",  // For Hugging Face\n\"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\",  // For OpenAI\n\"X-Palm-Api-Key\": \"YOUR-PALM-API-KEY\",  // For PaLM\n```\n\nAdditionally, we also provide suggested `vectorizer` module configurations.\n\n\n\n\n```js\nclass_obj = {\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-cohere\",\n  \"moduleConfig\": {\n    \"text2vec-cohere\": {\n      \"model\": \"embed-multilingual-v2.0\", // Default model. This is the same model as `multilingual-22-12`\n      \"truncate\": \"RIGHT\" // Defaults to RIGHT if not set\n    }\n  }\n}\n```\n\n\n\n\n```js\nclass_obj = {\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-huggingface\",\n  \"moduleConfig\": {\n    \"text2vec-huggingface\": {\n      \"model\": \"sentence-transformers/all-MiniLM-L6-v2\",  // Can be any public or private Hugging Face model.\n      \"options\": {\n        \"waitForModel\": true,  // Try this if you get a \"model not ready\" error\n      }\n    }\n  }\n}\n```\n\n\n\n\n```js\nclass_obj = {\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-openai\",\n  \"moduleConfig\": {\n    \"text2vec-openai\": {\n      \"model\": \"ada\",\n      \"modelVersion\": \"002\",\n      \"type\": \"text\"\n    }\n  }\n}\n```\n\n\n\n\n```js\nclass_obj = {\n  \"class\": \"Question\",\n  \"vectorizer\": \"text2vec-palm\",\n  \"moduleConfig\": {\n    \"text2vec-palm\": {\n      \"projectId\": \"YOUR-GOOGLE-CLOUD-PROJECT-ID\",    // Required. Replace with your value: (e.g. \"cloud-large-language-models\")\n      \"apiEndpoint\": \"YOUR-API-ENDPOINT\",             // Optional. Defaults to \"us-central1-aiplatform.googleapis.com\".\n      \"modelId\": \"YOUR-GOOGLE-CLOUD-MODEL-ID\",        // Optional. Defaults to \"textembedding-gecko\".\n    },\n  }\n}\n```\n\n\n\n\n\n\n#### Is a `vectorizer` setting mandatory?\n\n\n  See answer\n\n- No. You always have the option of providing vector embeddings yourself.\n- Setting a `vectorizer` gives Weaviate the option of creating vector embeddings for you.\n    - If you do not wish to, you can set this to `none`.\n\n\n\n#### What is a sandbox, exactly?\n\n\n  Note: Sandbox expiry & options\n\n\n\n\n\n\n### Troubleshooting\n\n#### If you see Error: Name 'Question' already used as a name for an Object class\n\n\n  See answer\n\nYou may see this error if you try to create a class that already exists in your instance of Weaviate. In this case, you can follow these instructions to delete the class.\n\nimport CautionSchemaDeleteClass from '/_includes/schema-delete-class.mdx'\n\n\n\n\n\n#### How to confirm class creation\n\n\n  See answer\n\nIf you are not sure whether the class has been created, you can confirm it by visiting the `schema` endpoint here (replace the URL with your actual endpoint):\n\n```\nhttps://some-endpoint.weaviate.network/v1/schema\n```\n\nYou should see:\n\n```json\n{\n    \"classes\": [\n        {\n            \"class\": \"Question\",\n            ...  // truncated additional information here\n            \"vectorizer\": \"text2vec-openai\"\n        }\n    ]\n}\n```\n\nWhere the schema should indicate that the `Question` class has been added.\n\nWeaviate uses a combination of RESTful and GraphQL APIs. In Weaviate, RESTful API endpoints can be used to add data or obtain information about the Weaviate instance, and the GraphQL interface to retrieve data.\n\n\n\n#### How to confirm data import\n\n\n  See answer\n\nTo confirm successful data import, navigate to the `objects` endpoint to check that all objects have been imported (replace with your actual endpoint):\n\n```\nhttps://some-endpoint.weaviate.network/v1/objects\n```\n\nYou should see:\n\n```json\n{\n    \"deprecations\": null,\n    \"objects\": [\n        ...  // Details of each object\n    ],\n    \"totalResults\": 10  // You should see 10 results here\n}\n```\n\nWhere you should be able to confirm that you have imported all `10` objects.\n\n\n\n#### If the `nearText` search is not working\n\n\n  See answer\n\nTo perform text-based (`nearText`) similarity searches, you need to have a vectorizer enabled, and configured in your class.\n\nMake sure you configured it as shown in this section.\n\nIf it still doesn't work - please reach out to us!\n\n\n\n\n\n\n", "type": "Documentation", "name": "weaviate-quickstart", "path": "developers/weaviate/quickstart/index.md", "link": "https://weaviate.io/developers/weaviate/quickstart", "timestamp": "2023-11-02 10:53:40", "reader": "JSON", "meta": {}, "chunks": []}