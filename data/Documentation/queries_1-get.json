{"text": "\n\nMake sure to complete the Weaviate Academy Preparation mini-unit before starting this unit to make sure that you can run the client library and connect to the demo Weaviate instance without issues.\n\n\nBelow, you will see code snippets that do not include client instantiation details. Before running these snippets, make sure to instantiate the client as shown below.\n\n\n\n\n\n\n\n## &nbsp;&nbsp;Overview\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\n## &nbsp;&nbsp;About `Get` queries\n\nIn many use cases, retrieving objects from a Weaviate instance may be the most common operation.\n\nFor example, a user may want to retrieve a list of passages most closely related to the input query, or they may wish to retrieve a list of images which are most similar to another image. It is even possible to retrieve a set of images that best match a given passage.\n\nIn Weaviate, such operations to retrieve objects are performed using the `Get` function.\n\n### &nbsp;&nbsp;`Get` function syntax\n\nA basic `Get` function looks as follows:\n\n\n\n\n- The `Class` field specifies the name of the class of objects to be retrieved.\n- The `arguments` argument specifies the search criteria to be used to retrieve the objects.\n- The `properties` argument specifies the properties of the objects to be retrieved, including any `_additional` properties.\n\nNow let's try out some concrete `Get` queries.\n\n## &nbsp;&nbsp;Standalone `Get` queries\n\nA basic, standalone, `Get` query might look as follows:\n\n### &nbsp;&nbsp;Example\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat results do you expect? See if you can correspond each field to the syntax.\n\nNow, try it out yourself. The query should return something like this:\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"answer\": \"Amazon.com\",\n          \"question\": \"On July 16, 1995 this company made its first sale, a science textbook\"\n        },\n        {\n          \"answer\": \"Parfait\",\n          \"question\": \"The French name of this layered ice cream dessert means \\\"perfect\\\"\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n### &nbsp;&nbsp;Response object from Weaviate\n\nAs you see above, the response object from Weaviate is in JSON format, where the results are obtained via the `data` field. It is then arranged in a corresponding manner to reflect the query as well as the queried object.\n\nIn the above example, the `Get` field reflects the query function, and the `JeopardyQuestion` field reflects the queried object class, containing returned objects. Each object contains `answer` and `question` fields, reflecting the requested properties.\n\n\n   Explain this query\n\nIn this case, Weaviate will return two objects due to the `.with_limit(2)` argument. Without this limit, Weaviate would return a maximum number according to its configuration.\n\nAs this does not apply any user-specific criteria to the search, the specific results will likely not be very useful.\n\nHowever, this may be a viable method for \"sanity\" checks, such as checking that you can connect to a Weaviate instance, or that at least some objects have been imported successfully.\n\n\n\n### &nbsp;&nbsp;`Class` and `properties`\n\nIn the above example, we specify a `Class` of `JeopardyQuestion` and `properties` of `questions` and `answer`.\n\nThat is possible because those follow the structure of our data in Weaviate. To see the available data classes and properties, you can take a look at the Weaviate schema, as shown below:\n\n\n  How do I see the schema?\n\nYou can fetch the schema like this - try it out!\n\n```python\nclient.schema.get()\n```\n\n\n\n\n\n\nThe `Class` and `properties` fields must correspond to collections of objects that have been defined in the Weaviate schema.\n\nThe `Class` must be the name of a data object collection, and the `properties` a list of properties to be retrieved.\n\nThe schema contains the `JeopardyQuestion` class, with properties: `question`, `answer` and `points`.\n\nSo, a query retrieving objects from the `Question` class could specify any of its properties such as `question`, `answer`, and `points`.\n\nTry out the above query again, with these changes.\n- Can you get the `points` property as well?\n- What happens if you don't specify any properties?\n\nNo. You can only search one class at a time.\n\n\nThis is because each class constitutes a single `vector space`. If you want to search multiple collections of objects, you will have to perform multiple searches, or consider putting them into one class and using a filter to distinguish between them as required.\n\n\nWe will consider this topic in more detail in a later unit, including what it means for each class to constitute a distinct `vector space`, and how to think about building a schema in Weaviate.\n\n## &nbsp;&nbsp;`Get` with `additional` properties\n\nYou can retrieve additional properties that are not defined in the schema. These properties may be inherent to the object, or relate to the query performed.\n\n### &nbsp;&nbsp;Example\n\nIn this example, we've built on the previous example to add the `.with_additional` method.\n\n\n\n\nAgain, consider what the response might look like. What would have changed in the response?\n\nNow, try it out yourself. The query should return something like this:\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.1791926,\n            \"id\": \"b1645a32-0c22-5814-8f35-58f142eadf7e\"\n          },\n          \"answer\": \"escaping the Earth's gravity (and go off into outer space, on your way to the moon, for instance)\",\n          \"question\": \"It takes approximately 24,840 MPH to achieve this\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.18123823,\n            \"id\": \"ef263438-b152-5540-97f7-99f4076bd124\"\n          },\n          \"answer\": \"the Milky Way\",\n          \"question\": \"This is the name of our own galaxy\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n### &nbsp;&nbsp;Response object from Weaviate\n\nIn this response, you see that the `_additional` field has been added to the response object, with `distance` and `id` nested under it.\n\n\n   Explain this query\n\nHere, the `distance` and `id` properties contain the object's distance to the query and its unique ID respectively.\n\n\n\n### &nbsp;&nbsp;`_additonal` properties\n\nAs the name suggests, `_additional` properties are separate to those explicitly created as class properties.\n\nThe above query included the `distance` property in the `_additional` field. This represents the degree of similarity (or, in this case, the *dissimilarity*) between the input vector and the vector of the object.\n\n\nThe object vector can also be retrieved through an `_additional` field, by specifying `vector` in its sub-field.\n\nNote that the returned vector in many cases will be a very long list of numbers.\n\n\nTry out the above query again, with these changes.\n- Can you get the `vector` property as well?\n- Earlier, providing an empty list as the main properties under the `.get()` method will have caused an error. What happens if you try it again, now that you are requesting additional properties?\n\n## &nbsp;&nbsp;Review\n\n### &nbsp;&nbsp;Review exercise\n\nSee in-line exercises.\n\n### &nbsp;&nbsp;Key takeaways\n\n- The 'Get' function can be used to retrieve objects in Weaviate.\n- The 'Get' function syntax requires specifying the class, properties, and any additional arguments related to the search criteria.\n- Weaviate responses are in JSON format.\n- Class and properties fields must correspond to the objects and properties defined in the Weaviate schema.\n- 'Get' queries can retrieve additional properties not defined in the schema, which can be inherent to the object or related to the query performed.\n- '_additional' properties can include distance, id, and vector information, providing more context and information about the retrieved objects.\n\nimport Quiz from '/src/components/Academy/quiz.js'\nconst nearText = [{\n  questionText: 'questionText',\n  answerOptions: [\n    {\n      answerText: 'answerOne',\n      isCorrect: false,\n      feedback: 'feedbackOne',\n    },\n    {\n      answerText: 'answerTwo',\n      isCorrect: false,\n      feedback: 'feedbackTwo',\n    },\n    {\n      answerText: 'answerThree',\n      isCorrect: false,\n      feedback: 'feedbackThree',\n    },\n  ]\n}];\n\n\n\n", "type": "Documentation", "name": "queries_1-get", "path": "developers/academy/zero_to_mvp/102_queries_1/10_get.mdx", "link": "https://weaviate.io/developers/academy/zero_to_mvp/queries_1/get", "timestamp": "2023-11-02 10:51:28", "reader": "JSON", "meta": {}, "chunks": []}