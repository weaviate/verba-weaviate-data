{"text": "\n##  Code\n\nThis example imports the movie data into our collection.\n\n\n\nThe code:\n- Loads the source data & gets the collection\n- Enters a context manager with a batcher (`batch`) object\n- Loops through the data and adds objects to the batcher\n- Prints out any import errors\n\n##  Explain the code\n\n###  Preparation\n\nWe use the requests library to load the data from the source, in this case a JSON file. The data is then converted to a Pandas DataFrame for easier manipulation.\n\nThen, we create a collection object (with `client.collections.get`) so we can interact with the collection.\n\n###  Batch context manager\n\nThe `batch` object is a context manager that allows you to add objects to the batcher. This is useful when you have a large amount of data to import, as it abstracts away the complexity of managing the batch size and when to send the batch.\n\n\n\nThis example uses the `.dynamic()` method to create a dynamic batcher, which automatically determines and updates the batch size during the import process. There are also other batcher types, like `.fixed_size()` for specifying the number of objects per batch, and `.rate_limit()` for specifying the number of objects per minute.\n\n###  Add data to the batcher\n\n#### Convert data types\n\nThe data is converted from a string to the correct data types for Weaviate. For example, the `release_date` is converted to a datetime object, and the `genre_ids` are converted to a list of integers.\n\n\n\n#### Add objects to the batcher\n\nThen we loop through the data and add each object to the batcher. The `batch.add_object` method is used to add the object to the batcher, and the batcher will send the batch according to the specified batcher type.\n\n\n\n###  Error handling\n\nBecause a batch includes multiple objects, it's possible that some objects will fail to import. The batcher saves these errors.\n\nYou can print out the errors to see what went wrong, and then decide how to handle them, such as by raising an exception. In this example, we simply print out the errors.\n\n\n\nNote that the list of errors is cleared when a new context manager is entered, so you must handle the errors before initializing a new batcher.\n\n##  Where do the vectors come from?\n\nWhen the batcher sends the queue to Weaviate, the objects are added to the collection. In our case, the movie collection.\n\nRecall that the collection has a vectorizer module, and we do not specify vectors here. So Weaviate uses the specified vectorizer to generate vector embeddings from the data.\n\n\n", "type": "Documentation", "name": "Text_collections Import_data", "path": "developers/academy/py/starter_text_data/102_text_collections/30_import_data.mdx", "link": "https://weaviate.io/developers/academy/py/starter_text_data/text_collections/import_data", "timestamp": "2024-05-08 10:48:15", "reader": "JSON", "meta": {}, "chunks": []}