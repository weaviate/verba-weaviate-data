{"text": "\n## &nbsp;&nbsp;Overview\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\n## &nbsp;&nbsp;Available operators\n\nSo far, you've seen different query functions such as `Get`, and `Aggregate`, and search operators such as `nearVector`, `nearObject` and `nearText`.\n\nNow, let's take a look at filters.\n\nA filter is a way to specify additional criteria to be applied to the results. There are a number of available filters in Weaviate.\n\n### &nbsp;&nbsp;Available filters\n\nThere exist many available filters, but we do not need to cover them all at this moment. For now, let's explore a few of the most commonly used filters:\n\n- `where`: Apply a Boolean condition to filter the available data.\n- `limit`: Restrict the maximum objects to be retrieved.\n- `offset`: For pagination of search results.\n\n## &nbsp;&nbsp;Filter data with `where`\n\nThe `where` filter is analogous to the `WHERE` clause in a SQL query. As in the SQL clause, the `where` filter can be used to apply a boolean conditional to the data.\n\n### &nbsp;&nbsp;Single operand example\n\nWe ran an example query like this earlier:\n\n\n\n\nWhich returned these answers:\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.1791926,\n            \"id\": \"b1645a32-0c22-5814-8f35-58f142eadf7e\"\n          },\n          \"answer\": \"escaping the Earth's gravity (and go off into outer space, on your way to the moon, for instance)\",\n          \"question\": \"It takes approximately 24,840 MPH to achieve this\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.18123823,\n            \"id\": \"ef263438-b152-5540-97f7-99f4076bd124\"\n          },\n          \"answer\": \"the Milky Way\",\n          \"question\": \"This is the name of our own galaxy\"\n        }\n      ]\n    }\n  }\n}\n```\n\nSo let's extend our query to now include a `where` argument that uses a `Like` operator.\n\n\n\n\nCan you guess how you would expect the earlier response to change, if at all?\n\nHere is the actual response:\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.18400955,\n            \"id\": \"ddcc3f06-5410-5944-85c4-3cb56ab27088\"\n          },\n          \"answer\": \"space shuttles\",\n          \"question\": \"These transports, first sent up in 1981, lift off like a rocket & land like a plane\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.2267003,\n            \"id\": \"36ffe6ca-9b73-5a54-80eb-a93f01822956\"\n          },\n          \"answer\": \"Robert Goddard\",\n          \"question\": \"He's been called the \\\"Father of Modern Rocketry\\\"\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n\n   Explain this query\n\nObserve that the results have changed. The previous results have been removed as they do not contain the text `rocket` in the `question` property.\n\nThis approach of combining a vector search with a filter is a powerful way to find objects that are similar to a given input, but also meet additional criteria as you see. And while filtering may remove some objects which might otherwise be \"closer\" to the query vector than the remaining ones, it provides a powerful strategy to find the most relevant objects by removing false positive.\n\n\n\nWe can apply the query to filter the data in any number of ways. For example, consider this query:\n\n\n\n\nHow do you expect that this query will be different to the earlier queries?\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.18251508,\n            \"id\": \"15f06117-012c-506d-b5c5-24df2e750f35\"\n          },\n          \"answer\": \"the Milky Way\",\n          \"points\": 400,\n          \"question\": \"Into the 20th Century it was thought the universe was one big galaxy--this one\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.19289112,\n            \"id\": \"584a6c68-0ebe-561f-b32a-3a735eadf02e\"\n          },\n          \"answer\": \"Asteroid\",\n          \"points\": 400,\n          \"question\": \"A 1991 photo of Gaspra taken by the Galileo probe was the first close-up of one of these minor planets\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n\n   Explain this query\n\nThis query has been modified to only return `JeopardyQuestion` objects with a `points` value greater than 200.\n\nAccordingly, the returned data set is very different.\n\n\n\nTry filtering for `JeopardyQuestion` objects with:\n- a `points` value equal to 200\n- a `points` value greater than or equal to 600\n\nYou can find the list of available operators on this page.\n\n### &nbsp;&nbsp;Multiple operands example\n\nThe query syntax can extend to beyond a single operand to take advantage of multiple conditions:\n\n\n\n\nTake a look at the `where` argument (i.e. `.with_where`). What limitations do you expect in the results?\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.2267003,\n            \"id\": \"a488fbe5-c2c6-50ad-8938-4b9f20dc56d1\"\n          },\n          \"answer\": \"Robert Goddard\",\n          \"points\": 400,\n          \"question\": \"He's been called the \\\"Father of Modern Rocketry\\\"\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.24946856,\n            \"id\": \"c00decd4-4cf1-5b03-a789-a57077e082fb\"\n          },\n          \"answer\": \"Huntsville\",\n          \"points\": 1000,\n          \"question\": \"A campus for the University of Alabama is here, nicknamed \\\"Rocket City, U.S.A.\\\"\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n\n   Explain this query\n\nThis query has been modified to only return `JeopardyQuestion` objects with a `points` value great than than 400, AND include the text `rocket` in the `question` field.\n\n\n\nYou can apply these filters to an `Aggregate` query also. Try it yourself.\n\nTry these:\n- adding a `where` filter to an `Aggregation` query, following the above pattern.\n\n## &nbsp;&nbsp;Result pagination with `offset`\n\nWhen you query for data, you can use the `offset` operator to skip a number of results. This is useful for pagination, where you want to show a certain number of results per page.\n\nThe `offset` operator works in conjunction with the existing `limit` operator to shows results from the `offset+1` to `offset+1+limit`.\n\nFor example, to list the first ten results, set `limit`: 10. Then, to \"display the second page of 10\", set `offset`: 10, `limit`:10 and so on.\n\nThe syntax, using `offset` is as follows:\n\n\n\n\n\n   See the JSON response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"JeopardyQuestion\": [\n        {\n          \"answer\": \"the Milky Way\",\n          \"question\": \"Into the 20th Century it was thought the universe was one big galaxy--this one\"\n        },\n        {\n          \"answer\": \"space shuttles\",\n          \"question\": \"These transports, first sent up in 1981, lift off like a rocket & land like a plane\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n\n   Explain this query\n\nThis query retrieves the next 2 results (`limit`: 2) after the first 2 results (`offset`: 2).\n\nWe can confirm this by comparing the results of two queries with different result limits. The query below retrieves the top 4 results. The last two results from that query are the same as the result in the query that uses limit with pagination.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(limit: 4) {\n      answer\n      question\n    }\n  }\n}\n```\n\n\n\n\n\n\nSo, the `n` th page would have `offset`: `n*m`, `limit`: `m`, where `m` is the number of results per page.\n\nThe `offset` operator is available with all vector search functions including `Get` and `Aggregate`.\n\n## &nbsp;&nbsp;Review\n\n\n\n\n\n### &nbsp;&nbsp;Key takeaways\n\n- Filters are used to apply additional criteria to the results. Some commonly used filters include `where`, `limit` and `offset`.\n- The `where` filter allows you to apply a boolean condition to the data being queried. It can be used with various operators like `Like`, `Greater`, `Equal`, etc.\n- You can use multiple conditions within a `where` filter to further refine your query results.\n- The `offset` operator can be used in conjunction with `limit` to skip results and build pagination.\n\nimport Quiz from '/src/components/Academy/quiz.js'\nconst whereUsage = [{\n  questionText: 'Which filter is used to apply a boolean condition to the data in Weaviate?',\n  answerOptions: [\n    {\n      answerText: 'limit',\n      isCorrect: false,\n      feedback: 'This is used to set the maximum number of objects to retrieve.',\n    },\n    {\n      answerText: 'offset',\n      isCorrect: false,\n      feedback: 'This is used to skip a number of results.',\n    },\n    {\n      answerText: 'where',\n      isCorrect: true,\n      feedback: 'It is similar to the WHERE clause in SQL.',\n    },\n  ]\n}];\nconst offsetExample = [{\n  questionText: 'How can you combine the offset and limit operators to display the second page of results with 10 results per page?',\n  answerOptions: [\n    {\n      answerText: 'Set offset: 10 and limit: 10',\n      isCorrect: true,\n      feedback: 'This would get results 11-20.',\n    },\n    {\n      answerText: 'Set offset: 20 and limit: 10',\n      isCorrect: false,\n      feedback: 'This would get results 21-30.',\n    },\n    {\n      answerText: 'Set offset: 10 and limit: 20',\n      isCorrect: false,\n      feedback: 'This would get results 11-30',\n    },\n  ]\n}];\n\n\n\n", "type": "Documentation", "name": "queries_1-filters", "path": "developers/academy/zero_to_mvp/102_queries_1/50_filters.mdx", "link": "https://weaviate.io/developers/academy/zero_to_mvp/queries_1/filters", "timestamp": "2024-02-08 21:19:53", "reader": "JSON", "meta": {}, "chunks": []}