{"text": "\n\n\n\n## Overview\n\nThis page shows you how to add conditional filters to your searches with the `where` operator.\n\nA filter is a set of Boolean (i.e. `True` or `False`) conditions. Accordingly, a filter will only include or exclude objects and will not affect their rankings.\n\n- API References: Filters\n\n## List of filter operators\n\nFor a list of filter operators, see the API references: Filters page.\n\n### `ContainsAny` and `ContainsAll`\n\nThe `ContainsAny` and `ContainsAll` operators filter objects using values of an array as criteria.\n\nTo use either of these operators, provide the filter criterion array as `valueText`. Note that the usage of `ContainsAny` and `ContainsAll` is different for batch deletion operations (read more).\n\n## A single-condition filter\n\nTo add a filter, you must provide at least one `where` condition to your query.\n\nThe following example specifies that the `round` property must equal `\"Double Jeopardy!\"`. Note that the `valueText` parameter is used since the property datatype is `text`.\n\nSee this page for the list of available filter arguments.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### With a search operator\n\nConditional filters can be combined with a search operator such as `nearXXX`, `hybrid` or `bm25`.\n\nThe following example adds a `points` filter to a `nearText` query, where the `points` property must be greater than 200. Note that the `valueInt` is used as the property datatype is `int`.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### By partial matches (text)\n\nWith `text` data type properties, you can use the `Like` operator to filter by partial matches.\n\nThe following example filters for objects including the text `\"inter\"` in any part of a token in the `answer` property.\n\n`*` matches zero or more characters, whereas `?` matches exactly one unknown character.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Multiple-condition filters\n\nTo add a multiple-condition filter, you must set the operator to `And` or `Or`, and set two or more conditions under the corresponding `operands` parameter.\n\nThe following example specifies and `And` condition, so that both:\n- the `round` property must equal `\"Double Jeopardy!\"`, and\n- the `points` property must be less than 600.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### Nested multiple conditions\n\nConditional filters can be nested in Weaviate. To do so, set the `operator` of an outer `operands` value to `And` or `Or`. Then, you can provide two or more conditions to the inner `operands`.\n\nThe following example specifies that:\n- the `answer` property must contain a substring `\"nest\"`, `And`\n- the `points` property must be greater than 700, `Or`, the `points` property must be less than 300.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Filter using cross-references\n\nYou can filter objects using properties from a cross-referenced object.\n\nThe following example filters `JeopardyQuestion` objects using properties of `JeopardyCategory` that they are cross-referencing.\n\nMore specifically, the example filters for the `title` property of `JeopardyCategory` objects that are cross-referenced from the `JeopardyQuestion` object. The `title` property must include the substring `Sport`.\n\nThe results are case-insensitive here, as the `title` property is defined with `word` tokenization.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Filter by metadata\n\nYou can filter by any number of metadata properties, such as object id, property length, timestamp, null state and more.\n\nSee the API references: Filters page for the full list of available metadata filters and any special usage patterns.\n\n## Improving filter performance\n\n\n\n\n\n\n", "type": "Documentation", "name": "search-filters", "path": "developers/weaviate/search/filters.md", "link": "https://weaviate.io/developers/weaviate/search/filters", "timestamp": "2023-11-13 10:41:30", "reader": "JSON", "meta": {}, "chunks": []}