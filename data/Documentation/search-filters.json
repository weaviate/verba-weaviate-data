{"text": "\n\nFilters let you include, or exclude, particular objects from your result set based on provided conditions.\nFor a list of filter operators, see Filters.\n\n## Filter with one condition\n\nAdd a `filter` to your query, to limit the result set.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Filter with multiple conditions\n\nTo filter with two or more conditions, use `And` or `Or` to define the relationship between the conditions.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Nest filters\n\nYou can group and nest filters.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n\n  \n    Additional information\n  \n\nTo create a nested filter, follow these steps.\n\n- Set the outer `operator` equal to `And` or `Or`.\n- Add `operands`.\n- Within an `operand`, set `operator` equal to `And` or `Or` to nest a group.\n- Add `operands` to the nested group.\n\n\n\n## Combine filters and search operators\n\nFilters work with search operators like `nearXXX`, `hybrid`, and `bm25`.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Filter text on partial matches\n\nIf the object property is a `text`, or `text`-like data type such as object ID, use `Like` to filter on partial text matches.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n\n  \n    Additional information\n  \n  \n    The `*` wildcard operator matches zero or more characters. The `?` operator matches exactly one character.\n  \n\n\n## Filter using cross-references\n\nTo filter on properties from a cross-referenced object, add the collection name to the filter.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Filter by metadata\n\nFilters also work with metadata properties such as object id, property length, and timestamp.\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\nFor the full list, see API references: Filters.\n\n## By geo-coordinates\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n## Improve filter performance\n\nIf you encounter slow filter performance, consider adding a `limit` parameter or additional `where` operators to restrict the size of your data set.\n\n## Considerations for `ContainsAny` and `ContainsAll`\n\nThe `ContainsAny` and `ContainsAll` operators take an array of values as input. The operators filter objects that contain any, or all, of the values.  To use `ContainsAny` or `ContainsAll`, pass the array of values as `valueText`.\n\nIf you want to do a batch delete, see Delete objects. `ContainsAny` and `ContainsAll` have different behavior in batch deletion operations.\n\n## Related pages\n\n- API References: Filters\n\n\n\n\n", "type": "Documentation", "name": "search-filters", "path": "developers/weaviate/search/filters.md", "link": "https://weaviate.io/developers/weaviate/search/filters", "timestamp": "2024-02-08 21:21:57", "reader": "JSON", "meta": {}, "chunks": []}