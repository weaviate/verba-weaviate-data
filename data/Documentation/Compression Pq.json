{"text": "\n[Product quantization](/developers/weaviate/concepts/vector-quantization#product-quantization) (PQ), is a technique used to compress vectors. In Weaviate, it can be used to reduce the size of the in-memory [HNSW index](/developers/weaviate/concepts/vector-index.md#hierarchical-navigable-small-world-hnsw-index), which can improve performance and reduce resource requirements as well as costs.\n\n##  What is product quantization?\n\nProduct quantization compresses vectors in two ways. One, by dividing them into \"segments\", and two, quantizing each segment to be represented by one of a \"codebook\" of centroids.\n\nIn the diagram below, we show a vector of L dimensions, where each dimension is a floating point number. The vector is divided into L/x segments, and each segment is quantized to be represented by one of N centroids.\n\n\n\nAs an example, a 768-dimensional vector can be compressed into a 128-segment quantized vector of 1-byte integers.\n\nThis will reduce the length of the vector by a factor of 6, and also the size of each segment from a floating point number (4 bytes) to a byte, representing one of 256 centroids.\n\nAs a result, the size of the vector is reduced by 24 (from 768 lots of 4 byte numbers to 128 lots of 1 byte numbers).\n\nThe HNSW index can then be built on the PQ-compressed vectors, which will reduce the size of the index in memory.\n\n###  Lossiness\n\nPQ is a lossy compression technique, as the original floating point numbers are quantized to a smaller set of integers. This means that some information is lost in the compression process.\n\nHowever, Weaviate compensates for this by overfetching vectors from the index, and then rescoring the vectors in the uncompressed space. In practice, we find that this compensates quite well for the lossiness of PQ.\n\n##  Configure PQ\n\nThis example creates a collection with product quantization (PQ) enabled, using default settings.\n\n\n\n###  Explain the code\n\nThis will create a collection with PQ enabled, using the default settings.\n\nBut it is important to note that the compression does not occur immediately. PQ relies on quantization of the vectors, so it is configured to wait until there are sufficient vectors to reach a \"training set\", by default 100,000 vectors.\n\nThe training set is used to calculate the centroids for the quantization. Once the training set is reached, the PQ compression will occur.\n\nThis type of PQ configuration is called \"AutoPQ\", and is available in Weaviate `v1.23` or later, with asynchronous indexing enabled.\n\n\nIf you are using an earlier version of Weaviate, or have asynchronous indexing disabled, you will need to use a different configuration. Please refer to the [PQ configuration documentation](/developers/weaviate/configuration/pq-compression.md#manually-configure-pq) for more information.\n\n##  Customize PQ\n\nMany PQ parameters are configurable. While the default settings are suitable for many use cases, you may want to customize the PQ configuration to suit your specific requirements.\n\nThe example below shows how to configure PQ with custom settings, such as with a lower training set size, and a different number of centroids.\n\n\n\nPlease refer to the [PQ configuration documentation](/developers/weaviate/configuration/pq-compression.md#pq-parameters) for more information on the available settings.\n\n\n\n", "type": "Documentation", "name": "Compression Pq", "path": "developers/academy/py/compression/100_pq.mdx", "link": "https://weaviate.io/developers/academy/py/compression/pq", "timestamp": "2024-05-08 10:47:35", "reader": "JSON", "meta": {}, "chunks": []}