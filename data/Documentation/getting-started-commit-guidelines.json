{"text": "## Introduction\n\nWhen collaborating with git, each commit provides a frozen snapshot of work for you or others to review. It is good practice is to create a commit per \"logical change\", so that each commit represents a \"unit\" of work done.\n\nYou might have heard that changing one variable at a time during scientific experimentation makes the output and therefore its effect easier to interpret. In the same way, creating one commit per logical change or theme helps the maintainer understand and review your work. It will also create logical, isolated checkpoints from which changes can be integrated into other branches.\n\nAnother big part of creating good commits is writing good commit messages. Writing good commit messages helps the whole team. It will help others understand what you have done, and help you become a better software developer.\n\n## Tips on writing good commit messages\n\n* Be concise. This will speed up review, and thus the feedback loop.\n* Be precise and specific, as to help people searching or navigating through the commit history.\n\nExamples of **good commit messages** include:\n\n* `add sitemap plugin to the website`\n* `update ruby version to 2.7.5`\n* `update version number dynamically`\n* `fix typo in introduction to user guide`\n\nExample of **bad commit messages**, with reasons, include:\n\n* `Fixed typo in the doc` (which doc?)\n* `Changed CSS style` (why? how?)\n* `modified README.md` (why? how?)\n* `Added search feature in the docs` (which files? how?)\n\nNote: Some people prefer to use an imperative present tense in commit messages. There is no consensus on this, and is likely to be situational. The most important thing is to ensure that the substance of the changes are clear in the message. In other words, don't do this \ud83d\ude09.\n\nTaking time to write a consistent, specific, and accurate git commit messages will help the reader, who will thank you for it. This will often include your future self! So think of it as an investment where the return is based primarily on clarity of communication.\n\n## Example commit message structure\n\nOne way to write good commit messages is to use a template structure. One structure would be to think of it like a GitHub issue, with three parts:\n\n* Summary line\n* Issue reference\n* Description\n\n### Summary Line:\n\nSummary line are used throughout git. So try not to exceed 50 characters (while being informative), and put a blank line afterwards before the message body. This will help git parse the summary line correctly.\n\nExample:\n\n```text\nadd new blog \"Why vector search is so fast\"\n```\n\n### Issue reference\n\n* If the commit fixes an issue, reference that issue using `#` symbol: \"This PR fixes: #ISSUE_NUMBER.\".\n\n* The issue reference will add the commit link to the issue automatically.\n\nExample:\n\n```text\nWhy:\nThis PR fixes: #123\n```\n\n### Description\n\nEvery repository has a pull request template with a specific set of headers that you can use to write the body of commit messages. You can modify this template at the time of making a pull request and exclude the parts which is not necessary.\n\nExample:\n\n```text\nWhat's being changed:\n\nThis pull request adds blog page feature to the documentation website,\nwhere people can read about Weaviate's latest releases.\nBlogs can be updated by adding markdown files to `_posts/blog/` folder.\n\nType of change:\n\n[] Bug fix (non-breaking change which fixes an issue)\n[x] Feature or enhancements (non-breaking change which adds functionality)\n[] Documentation updates (non-breaking change which updates documents)\n\nHow Has This Been Tested?\n\nThis has been tested locally by building and running the site\n```text\n\n* Each description line must be no more than 75 characters long (there is no limit on number of lines).\n\n* You should explain why the changes were made. This is especially important for complex, non-self-explanatory changes.\n\n* You must select the type of change you made. Remove the irrelevant options from the list by putting a `x` in the square brackets in front of the type of change.\n\n* The commit message is primarily for your and others' benefit, and they should be able to understand it both now and in the future.\n\n* If the summary is self-explanatory, you can omit writing the description.\n\n* Tests are essential, and you should describe how you tested your changes locally and whether you discovered any other breaking changes.\n```\n\n## More Examples\nWe include additional git commit message examples below:\n\n* For a bugfix\n\n```text\nfix: static version number on quickstart page\n\nWhy:\nThis PR fixes: #103\n\nWhat's being changed:\n\nIn quick-start.md file of every version, the version present in the example\ndidn't match the configuration. This problem was caused due to variable\nweaviate_version which had hard-coded value of v1.12.1. This caused all\nthe pages to show fix version.\n\nWorkaround for this was to include a this tag, which identified current\nversion of the page and call the variable current_page_version in front\nof version key.\n\nType of change:\n\n[x] Bug fix (non-breaking change which fixes an issue)\n\nHow Has This Been Tested?\n\nThis has been tested locally by building and running the site\n```\n\n* For a new feature\n\n```text\nadd copy to clipboard functionality to docs\n\nWhat's being changed:\n\nThe documentation site contains a large number of code snippets that we\nneed to manually copy. The addition of a copy to clipboard functionality\nwill make it easier to copy the codes and reuse them.\n\nType of change:\n\n[x] Feature or enhancements (non-breaking change which adds functionality)\n\nHow Has This Been Tested?\n\nThis has been tested locally by building and running the site\n```\n\n* For documentation changes\n\n```text\nfix typo in getting started docker compose example\n\nWhat's being changed:\n\nThis PR corrects a typo in developers/weaviate/current/getting-started/\ninstallation.md, where the docker-compose.yml example lacks a '. The\ndocker-compose.yml file previously did not work, but it now does.\n\nType of change:\n\n[x] Documentation updates (non-breaking change which updates documents)\n\nHow Has This Been Tested?\n\nThis has been tested locally by building and running the site\n```\n", "type": "Documentation", "name": "getting-started-commit-guidelines", "path": "developers/contributor-guide/getting-started/commit-guidelines.md", "link": "https://weaviate.io/developers/contributor-guide/getting-started/commit-guidelines", "timestamp": "2023-11-13 10:39:41", "reader": "JSON", "meta": {}, "chunks": []}