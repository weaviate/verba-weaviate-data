{"text": "\nNow that you have a Kubernetes cluster, you can deploy Weaviate on it. This section will show you how to deploy Weaviate on Kubernetes using Helm.\n\n##  Helm chart\n\nAs mentioned earlier, **Helm** is a package manager for Kubernetes. It uses a packaging format called **charts**.\n\nA **Helm chart** is a collection of files that describe a set of Kubernetes resources. It is the equivalent of a **package** in other package managers, such as pip or npm.\n\nWeaviate provides a [Helm chart](https://github.com/weaviate/weaviate-helm) that you can use to deploy Weaviate on Kubernetes. So, we will use this Helm chart to deploy Weaviate on your Kubernetes cluster.\n\n##  Deployment\n\nFirst, add the [Weaviate Helm repository](https://weaviate.github.io/weaviate-helm) to your Helm installation. This will make the Weaviate Helm chart available to you.\n\n```bash\nhelm repo add weaviate https://weaviate.github.io/weaviate-helm\n```\n\n\nIf you have previously added the `weaviate` Helm repository, run this to update it to the latest version.\n\n```bash\nhelm repo update weaviate\n```\n\nYou should periodically [update the Helm repositories](https://helm.sh/docs/helm/helm_repo_update/) to ensure that you have the latest information about available charts.\n\n\nNext, generate a configuration file (`values.yaml`) for the Weaviate Helm chart.\n\n```bash\nhelm show values weaviate/weaviate > values.yaml\n```\n\nThis command fetches the default values for the Weaviate Helm chart and saves them to a file named `values.yaml`. You can now edit this file to customize the deployment configuration.\n\nThere are many settings you can configure here. It may be beneficial to explore them in the `values.yaml` file, and review the relevant settings through the in-line comments, or in the [official Weaviate documentation](/developers/weaviate/index.md) if you are curious.\n\nFor now, let's configure a couple of important settings, before deploying Weaviate.\n\n##  Configuration\n\nBefore we go further, let's update the configuration file to:\n\n- Enable the gRPC service\n- Enable Cohere integrations\n\nOpen the `values.yaml` file in a text editor, and update the following sections:\n\n#### Enable the gRPC service\n\nSet the `enabled` field to `true` and the `type` field to `LoadBalancer`. This will expose the gRPC service as a LoadBalancer service, which will allow you to access it from outside the Kubernetes cluster, which in turn enables use of the [fast gRPC API](/blog/grpc-performance-improvements).\n\n```yaml\ngrpcService:\n  enabled: true  # \u2b05\ufe0f Make sure this is set to true\n  name: weaviate-grpc\n  ports:\n    - name: grpc\n      protocol: TCP\n      port: 50051\n  type: LoadBalancer  # \u2b05\ufe0f Set this to LoadBalancer (from NodePort) for this example\n```\n\n#### Enable Cohere integrations\n\n```yaml\n  text2vec-cohere:\n\n    enabled: true  # \u2b05\ufe0f Make sure this is set to true\n\n  # ... settings not shown ...\n  generative-cohere:\n\n    enabled: true  # \u2b05\ufe0f Make sure this is set to true\n```\n\nSave the file after making these changes. You are now ready to deploy Weaviate on your Kubernetes cluster.\n\n##  Run Weaviate\n\nMake sure your Kubernetes cluster is up and running (e.g. with `minikube start`), and you have configured `kubectl` to access it.\n\nLet's first create a namespace for Weaviate:\n\n```bash\nkubectl create namespace weaviate\n```\n\nThis will let us deploy Weaviate in a [separate namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/#when-to-use-multiple-namespaces). This is not mandatory, but we will do it here as it is good practice to allow better organization of resources.\n\nThen, run the following command:\n\n```bash\nhelm upgrade --install \\\n  \"weaviate\" \\\n  weaviate/weaviate \\\n  --namespace \"weaviate\" \\\n  --values ./values.yaml\n```\n\nThis command will deploy Weaviate in the `weaviate` namespace of your Kubernetes cluster using the configuration specified in the `values.yaml` file.\n\nNow, if you run this:\n\n```bash\nkubectl get pods -n weaviate\n```\n\nYou should see the Weaviate pods running in the `weaviate` namespace.\n\nNote that it may take a little bit of time for the pods to start up. You can check the status of the pods by running the `kubectl get pods -n weaviate` command multiple times.\n\n```bash\n\u276f kubectl get pods -n weaviate\nNAME         READY   STATUS    RESTARTS   AGE\nweaviate-0   0/1     Pending   0          15s\n\n\u276f kubectl get pods -n weaviate\nNAME         READY   STATUS    RESTARTS   AGE\nweaviate-0   1/1     Running   0          59s\n```\n\nNote how here, the `weaviate-0` pod went from `Pending` to `Running`.\n\nCongratulations! You have successfully deployed Weaviate on your local Kubernetes cluster. Next, let's confirm some basic interactions with Weaviate.\n\n\n", "type": "Documentation", "name": "K8s Setup_weaviate", "path": "developers/academy/deployment/k8s/30_setup_weaviate.mdx", "link": "https://weaviate.io/developers/academy/deployment/k8s/setup_weaviate", "timestamp": "2024-05-08 10:47:30", "reader": "JSON", "meta": {}, "chunks": []}