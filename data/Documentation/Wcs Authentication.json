{"text": "\nThere are two ways to connect to your [Weaviate Cloud Services (WCS)](https://console.weaviate.cloud/) instance:\n\n- [Connect a browser to WCS through the WCS Console.](/developers/wcs/authentication#connect-with-a-browser)\n\n   - The WCS console is a multi-purpose tool. Login to manage your clusters, users, and billing.\n   - The built-in [Query console](./console.mdx) is useful to connect without a client application.\n\n- [Connect a client application to WCS through APIs.](/developers/wcs/authentication#connect-with-an-api)\n\n   - For applications, use the WCS API and one of the [client libraries](/developers/weaviate/client-libraries) to connect to WCS.\n\nBrowser authentication uses a username and password for authentication. The Weaviate clients use API keys to authenticate.\n\n## Connect with a browser\n\nThe WCS dashboard lets you monitor and control your Weaviate clusters from your browser. It also provides account management tools and a [GraphQL query app](./console.mdx).\n\nTo connect to WCS with a browser, follow these steps:\n\n1. Open the [WCS login page](https://console.weaviate.cloud/) in a browser.\n1. Click `Login to Weaviate Cloud Services`.\n1. Enter your email address and password to authenticate.\n\n### Enable multi-factor authentication\n\nMulti-factor authentication (MFA) increases the security of browser logins. To enable MFA, follow these steps.\n\n1. Use your browser to connect to the WCS console.\n1. Click the silhouette of a person in the sidebar\n\n![Enable MFA icon](./img/mfa-enable-icon.jpg)\n\n3. Click the 'Manage Two-Factor Authentication' button.\n1. Enter your username and password to authenticate to WCS.\n1. Open your authenticator application and scan the QR code.\n1. Enter the code from your application in WCS to complete the setup.\n\nAfter you configure MFA, WCS prompts you to supply the one-time authentication code each time you log in.\n\n![Enter MFA code](./img/mfa-one-time-code.jpg)\n\n### MFA and applications\n\nIf you use a JavaScript or TypeScript client to connect an application to Weaviate, do not enable MFA for that client's account. There is no way to pass the the one-time authentication code, so the application cannot connect to WCS. Use API keys to connect client applications to WCS.\n\n### Disable MFA\n\nTo disable MFA, [contact support](mailto:support@weaviate.io).\n\n## Connect with an API\n\nBy default, API keys are enabled for all WCS clusters. Managed clusters have an administrator key and a read-only key. Sandbox clusters only have an administrator key.\n\n![API keys](./img/wcs-api-keys.jpg)\n\n### Retrieve your API keys\n\nTo retrieve your API keys, follow these steps:\n\n1. Open the WCS console and find the panel for your cluster.\n1. Click the `Details` button.\n\n![API key button](./img/wcs-api-keys-panel.jpg)\n\n3. Click the `API keys` button.\n1. Copy the key and store it in a safe location.\n\n\n### Authenticate a client application\n\nThe Weaviate server authenticates every request.\n\nIf you use a tool like cURL, add your API key to the request header.\n\nIf you use a Weaviate client library, pass the API key when you instantiate the client connection. After the connection is established, you do not have to pass the API key when you make requests.\n\nDo not hard-code your API key in your client code. Consider passing the API key as an environment variable or using a similar secure coding technique.\n\n```bash\nexport WEAVIATE_API_KEY=\"replaceThisPartWithYourAPIKey\"\n```\n\n\n\n## Manage API keys\n\nIf you have a managed cluster, you can create and delete API keys.\n\nThere are two types of API key, `ReadOnly` and `Admin`.\n\n- `Admin` keys are read-write.\n- `ReadOnly` keys do not grant write access to the database.\n\n### Create an API key\n\nIf you have a managed cluster, you can create new API keys. New API keys are not available in Sandbox clusters.\n\nWCS restarts the cluster when you add a new API key. If you have a stand-alone cluster, you will have a short downtime while the cluster restarts. There is no downtime if you have a high availability cluster.\n\nTo create a new API key, follow these steps:\n\n1. Click the `Details` button.\n1. Click the `API keys` button.\n1. Click `Add Key`.\n\n![Add API key UI](./img/wcs-add-key-details.jpg)\n\n4. Choose the key scope, read-only or admin.\n1. Click `Generate` to create the key.\n\n### Delete an API key\n\nIf you have a managed cluster, you can delete API keys.\n\nWCS restarts the cluster when you delete an API key. If you have a stand-alone cluster, you will have a short downtime while the cluster restarts. There is no downtime if you have a high availability cluster.\n\nTo delete an API key, follow these steps:\n\n1. Click the `Details` button.\n1. Click the `API keys` button.\n1. Click the trash-can icon to delete the API key.\n\n![Add API key UI](./img/wcs-delete-api-key.jpg)\n\n## Connect via the query app\n\nThe built in [GraphQL query app](./console.mdx) connects to clusters in your organization without any additional authentication.\n\nIf you use the GraphQL query app to connect to a Weaviate instance that is not part of your organization, provide an API key for the remote instance.\n\nTo pass the API key, add it to the `Headers` at the bottom of the GraphQL query app.\n\n![API key in header](./img/wcs-auth-header.jpg)\n\n## Troubleshooting \n\nThis section has solutions for some common problems. For additional help, [contact support](#support).\n \n### Reset your password\n\nTo reset your WCS password, follow these steps:\n\n1. Go to the WCS [login page](https://console.weaviate.cloud).\n1. Click on click the login button.\n1. Click `Forgot Password`.\n1. Check your email account for a password reset email from WCS.\n1. Click the link and follow the instructions to reset your password. The link is only valid for five minutes.\n\n### Connection timeouts\n\nThe new Python client uses the gRPC protocol to connect to WCS. The gRPC protocol improves query performance, but the protocol is sensitive to network speeds. If you run into timeout errors, increase the connection timeout value in your connection code.\n\n\n\n\n   \n\n\n\n\nAlternatively, leave the default timeout values, but skip the initial connection checks. \n\n\n\n\n   \n\n\n\n\n### gRPC health check error\n\n**Problem**: gRPC returns a health check error after you update a managed cluster. \n\n```\nweaviate.exceptions.WeaviateGRPCUnavailableError: gRPC health check could not be completed.\n```\n\n**Solution**: Verify the cluster URL is correct and update the URL if needed.\n\nWhen a managed cluster is updated, the cluster URL may change slightly. WCS still routes the old URL, so some connections work, however the new gRPC and the old HTTP URLS are different so connections that require gRCP fail.\n\nTo check the URLs, open the WCS Console and check the details panel for your cluster. If you prefix Cluster URL with `grpc-`, the Cluster URL and the Cluster gRPC URL should match.\n\n![Compare URLs](./img/wcs-console-url-check.jpg)\n\nCompare the Cluster URL with the connection URL in your application. The old URL and the new URL are similar, but the new one may have an extra subdomain such as `.c0.region`. \n\nIf the URLs are different, update your application's connection code to use the new Cluster URL.\n  \n## More resources\n\nTo authenticate with a Weaviate client library, see the following:\n\n- [Python](/developers/weaviate/client-libraries/python/index.md#authentication)\n- [TypeScript/JavaScript](/developers/weaviate/client-libraries/typescript#authentication)\n- [Go](/developers/weaviate/client-libraries/go.md#authentication)\n- [Java](/developers/weaviate/client-libraries/java.md#authentication)\n\n## Support\n\n\n\n\n", "type": "Documentation", "name": "Wcs Authentication", "path": "developers/wcs/authentication.mdx", "link": "https://weaviate.io/developers/wcs/authentication", "timestamp": "2024-05-08 10:49:11", "reader": "JSON", "meta": {}, "chunks": []}