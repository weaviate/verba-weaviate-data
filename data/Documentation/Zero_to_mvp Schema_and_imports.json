{"text": "\n##  Unit overview\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\n\n\nThe previous units introduced you to the fundamentals of Weaviate, its capabilities, and how to execute basic queries on existing data. Now that you're familiar with the various query types, it's time to explore how to populate your own Weaviate instance with data.\n\nIn this unit, we'll examine how to use Weaviate to effectively structure your data so that you can retrieve the right information the way you want. We'll delve into defining a schema for your data and importing data into Weaviate.\n\nBy the end of this unit, Weaviate's overall data architecture will start to become clearer in your mind. This will start to empower you to build a vector database that really suits your needs and goals.\n\nLet's get started.\n\n###  Prerequisites\n\n- (**Required**) A Python (3) environment with `weaviate-client` installed.\n- (**Required**) Complete [101A Weaviate Academy Preparation](../setup.mdx)\n- (*Recommended*) Complete [Hello, Weaviate](../101_hello_weaviate/index.mdx)\n- (*Recommended*) Complete [Queries 1](../102_queries_1/index.mdx)\n\n##  Learning objectives\n\n\n\n\n\n\n", "type": "Documentation", "name": "Zero_to_mvp Schema_and_imports", "path": "developers/academy/py/zero_to_mvp/103_schema_and_imports/index.mdx", "link": "https://weaviate.io/developers/academy/py/zero_to_mvp/schema_and_imports", "timestamp": "2024-05-08 10:48:46", "reader": "JSON", "meta": {}, "chunks": []}