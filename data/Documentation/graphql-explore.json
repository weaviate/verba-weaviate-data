{"text": "\n\n\nThe `Explore` function is currently not available on Weaviate Cloud Services (WCS) instances, or others where it is likely that multiple vector spaces will exist.\n\nAs WCS by default enables multiple inference-API modules and therefore multiple vector spaces, `Explore` is disabled by default by Weaviate.\n\n\n## Explore{} query structure and syntax\n\nThe `Explore{}` function has the following syntax:\n\n```graphql\n{\n  Explore (\n    limit: ,              # The maximum amount of objects to return\n    nearText: {                # Either this or 'nearVector' is required\n      concepts: []!,   # Required - An array of search items. If the text2vec-contextionary is the vectorization module, the concepts should be present in the Contextionary.\n      certainty: ,      # Minimal level of certainty, computed by normalized distance\n      moveTo: {                # Optional - Giving directions to the search\n        concepts: []!, # List of search items\n        force: !        # The force to apply for a particular movement. Must be between 0 (no movement) and 1 (largest possible movement).\n      },\n      moveAwayFrom: {          # Optional - Giving directions to the search\n        concepts: []!, # List of search items\n        force: !        # The force to apply for a particular movement. Must be between 0 (no movement) and 1 (largest possible movement).\n      }\n    },\n    nearVector: {              # Either this or 'nearText' is required\n      vector: []!,      # Required - An array of search items, which length should match the vector space\n      certainty:        # Minimal level of certainty, computed by normalized distance\n    }\n  ) {\n    beacon\n    certainty                  # certainty value based on a normalized distance calculation\n    className\n  }\n}\n```\n\nAn example query:\n\n\n\n\nThe result might look like this:\n\n```json\n{\n  \"data\": {\n    \"Explore\": [\n      {\n        \"beacon\": \"weaviate://localhost/7e9b9ffe-e645-302d-9d94-517670623b35\",\n        \"certainty\": 0.975523,\n        \"className\": \"Publication\"\n      }\n    ]\n  },\n  \"errors\": null\n}\n```\n\n### CamelCase interpretation\n\nWeaviate's vectorization module `text2vec-contextionary` splits words based on CamelCase. For example, if a user wants to explore for the iPhone (the Apple device) they should use `iphone` rather than `iPhone` because the latter will be interpreted as `[i, phone]`.\n\n## Explore filter arguments\n\n### Concepts\n\nStrings written in the `Concepts` array are your fuzzy search terms. An array of concepts is required to set in the Explore query, and all words in this array should be present in the Contextionary.\n\nThere are three ways to define the `concepts` array argument in the Explore filter.\n\n- `[\"New York Times\"]` = one vector position is determined based on the occurrences of the words\n- `[\"New\", \"York\", \"Times\"]` = all concepts have a similar weight.\n- `[\"New York\", \"Times\"]` = a combination of the two above.\n\nA practical example would be: `concepts: [\"beatles\", \"John Lennon\"]`\n\n#### Distance\n\nYou can set a maximum allowed `distance`, which will be used to determine which\ndata results to return. The interpretation of the value of the distance field\ndepends on the distance metric used.\n\nIf the distance metric is `cosine` you can also use `certainty` instead of\n`distance`. Certainty normalizes the distance in a range of 0..1, where 0\nrepresents a perfect opposite (cosine distance of 2) and 1 represents vectors\nwith an identical angle (cosine distance of 0). Certainty is not available on\nnon-cosine distance metrics.\n\n#### Moving\n\nBecause pagination is not possible in multidimensional storage, you can improve your results with additional explore functions which can move away from semantic concepts or towards semantic concepts. E.g., if you look for the concept 'New York Times' but don't want to find the city New York, you can use the `moveAwayFrom{}` function by using the words 'New York'. This is also a way to exclude concepts and to deal with negations (`not` operators in similar query languages). Concepts in the `moveAwayFrom{}` filter are not per definition excluded from the result, but the resulting concepts are further away from the concepts in this filter.\n\n## Additional filters\n\n`Explore{}` functions can be extended with search filters (both semantic filters as traditional filters). Because the filters work on multiple core functions (like `Aggregate{}`) there is a specific documentation page dedicated to filters.\n\n\n\n\n", "type": "Documentation", "name": "graphql-explore", "path": "developers/weaviate/api/graphql/explore.md", "link": "https://weaviate.io/developers/weaviate/api/graphql/explore", "timestamp": "2023-11-13 10:40:03", "reader": "JSON", "meta": {}, "chunks": []}