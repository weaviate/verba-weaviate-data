{"text": "\nLearn how to connect to Weaviate.\n\nConfigure your connection to provide authentication parameters and API keys for Weaviate and third-party services. Connect with services like Cohere, Hugging Face, and OpenAI to use their models with your data.\n\n## Prerequisites\n\nTo configure a connection, you need the following information:\n\n- The location of your Weaviate instance\n- If authentication is enabled, the allowed authentication methods\n- If you are using modules, the API keys and module connection details\n\n### Where to find connection details\n\n**Weaviate Cloud Services (WCS)** If you are using [Weaviate Cloud Services (WCS)](https://console.weaviate.cloud/), the dashboard has a \"Details\" button. Click the button to get the following information:\n\n - The cluster URL\n - Authentication type\n - API keys, if enabled\n - Module details\n\n**Docker and Kubernetes** If you are using Docker or Kubernetes, your URL will depend on how the container is configured to provide access.\n\n- For Docker Compose, see `docker-compose.yml`.\n- For Kubernetes, see `values.yaml` in the Helm chart.\n\nDocker instances by default use the `http://localhost:8080` address.\n\n**Embedded Weaviate** If you are using Embedded Weaviate, you do not need to specify a URL when you create the client. Embedded instances usually don't need authentication credentials. For details, see the [Embedded Weaviate documentation](../installation/embedded.md).\n\n### Environment variables\n\nThese examples use environment variables to store connection details and sensitive information such as API keys.\n\nTo set environment variables, use the following syntax, where `WEAVIATE_URL` is the environment variable name and `http://localhost:8080` is the value:\n\n\n\n\n```bash\nexport WEAVIATE_URL=\"http://localhost:8080\"\n```\n\n\n\n\n```shell\n$Env:WEAVIATE_URL=\"http://localhost:8080\"\n```\n\n\n\n\n```shell\nset WEAVIATE_URL=http://localhost:8080\n```\n\n\n\n\nThen, they can be accessed as follows.\n\nThis method is more secure than hardcoding sensitive information in your code, which is shown the commented-out examples below as what not to do.\n\n\n\n    \n\n\n\n```js\nconst weaviateUrl = process.env.WEAVIATE_URL;\nconst weaviateKey = process.env.WEAVIATE_API_KEY;\n\n// Uncomment and use these lines if you want to hardcode (not recommended for production)\n// const weaviateUrl = \"\";\n// const weaviateKey = \"\";\n```\n\n\n\n\n```go\nweaviateUrl := os.Getenv(\"WEAVIATE_URL\")\nweaviateKey := os.Getenv(\"WEAVIATE_API_KEY\")\n\n// Uncomment and use these lines if you want to hardcode (not recommended for production)\n// weaviateUrl = \"\"\n// weaviateKey = \"\"\n```\n\n\n\n\n```java\nString weaviateUrl = System.getenv(\"WEAVIATE_URL\");\nString weaviateKey = System.getenv(\"WEAVIATE_API_KEY\");\n\n// Uncomment and use these lines if you want to hardcode (not recommended for production)\n// weaviateUrl = \"\";\n// weaviateKey = \"\";\n```\n\n\n\n\n## Connecting to Weaviate\n\n### Without authentication\n\nDo not expose your Weaviate instance to the public internet if authentication is not enabled. If you do not enable authentication, anyone who has the URL can access your Weaviate instance.\n\nTo connect to Weaviate without authentication, follow these examples:\n\n\n\n### With authentication\n\nIf authentication is enabled, use a Weaviate API key or OIDC credentials to connect. For details, see [Authentication](../configuration/authentication.md).\n\n#### Weaviate API keys\n\nTo authenticate with a Weaviate API key, follow these examples. Note they use [environment variables](#environment-variables) to store the API key.\n\nEdit the sample code to use your Weaviate API key. Be sure to use your Weaviate API key and not the API key for a third-party service like Cohere, Hugging Face, or OpenAI.\n\n\n\n#### OIDC\n\nThis example shows a typical OIDC configuration. OIDC providers use a variety of authentication configurations. Your identity provider may use a different configuration, but the concepts are the same. For details, see [OIDC authentication](../configuration/authentication.md#oidc---a-systems-perspective).\n\nTo authenticate with OIDC, follow these examples:\n\n\n\n### Connect to embedded Weaviate\n\nEmbedded instances usually don't need authentication credentials.\n\n\n\n### Timeouts\n\nFor [gRPC-enabled](../api/grpc.md) clients, you can set timeout values for initialization, queries or insertions independently. If you are experiencing timeouts, adjust these values to suit your use case.\n\n\n    \n        \n    \n\n\n\n## Third party API keys\n\nModules that use external APIs often need API keys. The Weaviate clients send these keys as additional headers.\n\nTo add third party API keys, follow these examples:\n\n\n\n## Next\n\nFor more details, see:\n\n- [Authentication](../configuration/authentication.md)\n- [Configuration](../configuration/index.md)\n- [Modules](../modules/index.md)\n\nFor additional tutorials, see:\n\n- [Build schemas](../starter-guides/schema.md)\n- [Import data](../tutorials/import.md)\n- [Query data](../tutorials/query.md)\n\n\n", "type": "Documentation", "name": "Starter-guides Connect", "path": "developers/weaviate/starter-guides/connect.mdx", "link": "https://weaviate.io/developers/weaviate/starter-guides/connect", "timestamp": "2024-05-08 10:50:57", "reader": "JSON", "meta": {}, "chunks": []}