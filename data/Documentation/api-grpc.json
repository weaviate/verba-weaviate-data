{"text": "\n## Overview\n\nStarting with Weaviate `v1.19.0`, a gRPC interface is being progressively added to Weaviate. gRPC is a high-performance, open-source universal RPC framework that is contract-based and can be used in any environment. It is based on HTTP/2 and Protocol Buffers, and is therefore very fast and efficient.\n\nThe gRPC API is currently in beta and is not yet feature-complete.\n\n## Protocol Buffer (Protobuf) definitions\n\nA gRPC interface is defined through its Protocol Buffer, or Protobuf (read more) definitions.\n\nIn the case of Weaviate, the `.proto` files are listed in the Core library's proto directory.\n\nThis directory contains the following files:\n\n- `weaviate.proto`: The main Protobuf definition file. This file defines the `Weaviate` service, and specifies the RPC methods available in the Weaviate service.\n- `batch.proto`: Defines data structures for handling batch object operations. This file is imported by `weaviate.proto`.\n- `search_get.proto`: Defines data structures for handling search (get) operations. This file is imported by `weaviate.proto`.\n- `base.proto`: Defines base data structures to be used elsewhere. This file is imported by `batch.proto` and `search_get.proto`.\n\n## How to use gRPC\n\n### Server-side\n\nTo take advantage of the gRPC API, we recommend using the latest version of Weaviate. We suggest using port `50051` for gRPC calls. This can be set in the configuration file for Weaviate.\n\nAs an example, the snippet below maps `50051` as the host port so that it can be accessed from outside the container. The `50051` port is mapped to the `50051` port inside the container for gRPC calls, and the `8080` port is mapped to the `8080` port inside the container for REST calls.\n\n```yaml:\n\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    # ... Other settings\n    ports:\n     - \"8080:8080\"  # REST calls\n     - \"50051:50051\"  # gRPC calls\n  # ... Other settings\n```\n\n### Client-side\n\nYou will be able to use the gRPC interace through the (`v4` Weaviate Python client library). gRPC support in the other client libraries will follow.\n\nAlternatively, you can use other tools, such as the `grpcurl` command-line tool, to interact with the gRPC API. Some options include:\n\n- `grpcurl` command-line tool (GitHub repo)\n- Postman (How to send a gRPC request with Postman)\n", "type": "Documentation", "name": "api-grpc", "path": "developers/weaviate/api/grpc.md", "link": "https://weaviate.io/developers/weaviate/api/grpc", "timestamp": "2023-11-02 10:52:23", "reader": "JSON", "meta": {}, "chunks": []}