{"text": "\n\n -->\n\nimport PreviewUnit from '../../_snippets/preview.mdx'\n\n\n\n## &nbsp;&nbsp;Overview\n\nWe continue our discussion of chunking techniques by taking you through **variable-size** chunking techniques, including some example implementations.\n\n## &nbsp;&nbsp;Variable-size chunking\n\nNow let's look at variable-size chunking. Unlike fixed-size chunking, the chunk size here is an *outcome*, rather than an *input parameter*.\n\nIn variable-size chunking, some marker is used to split the text. The marker may be syntactic, such as a sentence or paragraph marker, or even structural such as a markdown header.\n\n### &nbsp;&nbsp;Implementations\n\nA pseudocode implementation of variable-size chunking could look like this:\n\n```python\n# Given a text of length L\n# Identify a marker (e.g. full-stop, paragraph marker (two newlines), or a Markdown header\n# Split the text into chunks at each marker\n```\n\nWhich could be implemented in Python as below:\n\n\n\n\n\n\n\nOr, we could use special markers - such as Markdown headers - to split the text.\n\n(Since the *Pro Git* book is written in Asciidoc, we'll use Asciidoc headers instead - they all start with new lines followed by `==`.)\n\n\n\n\n\n\n\nAgain, let's now apply these to concrete examples.\n\n### &nbsp;&nbsp;Examples\n\nWe can apply these splitters to the same text as before.\n\n\n\n\n\n\n\nAnd the outputs look like this. Now, what do you observe?\n\n\n\n\n\n\n\n\n\n\nOne thing that might stand out immediately is that both of our very simple marker-based chunker ends up extracting the heading as one chunk, which may not be desirable.\n\nIn reality, you may employ a mixed strategy where very short chunks like this may be appended to the next chunk, assuming that it is likely to be something like a title, or a section heading.\n\nLet's take a look at such a strategy.\n\n\n## &nbsp;&nbsp;Mixed strategy\n\nYou could use a mix of fixed-size chunking and variable-size chunking to get the best of both worlds. For example, you could use a variable-size chunker to split the chunks at paragraph markers, but apply a fixed-size filter.\n\nMore specifically, any chunks that are too small could be merged with the next chunk, and/or any chunks that are too large could be split at the middle, or at another marker within the chunk.\n\n### &nbsp;&nbsp;Examples\n\nOne implementation may look as follows:\n\n```python\n# Given a text of length L\n# Identify a marker (e.g. full-stop, paragraph marker (two newlines), or a Markdown header\n# Split the text into chunks at each marker\n# If any of the chunks are too small, merge them with the next chunk\n# If any of the chunks are too large, split them - e.g. at the middle or using another marker within the chunk\n```\n\nWhich could be implemented in Python like this:\n\n\n\n\n\n\n\nProducing these chunks.\n\n\n\nThis strategy will not produce chunks that are too small, while still basing them based on a syntactic marker, respecting the boundary of a heading.\n\nSince we've seen chunking strategies in action on a single text, let's now look at how they may work on a larger set of texts. We'll also take a look at what retrieval results may look like, using different chunking strategies.\n\n&nbsp;&nbsp;Review\n\n\n\nAny quiz questions\n\n### &nbsp;&nbsp;Review exercise\n\nTry out ...\n\n### &nbsp;&nbsp;Key takeaways\n\nAdd summary\n\n\n\n\n\n", "type": "Documentation", "name": "chunking-how_2", "path": "developers/academy/standalone/chunking/25_how_2.mdx", "link": "https://weaviate.io/developers/academy/standalone/chunking/how_2", "timestamp": "2024-02-08 21:19:40", "reader": "JSON", "meta": {}, "chunks": []}