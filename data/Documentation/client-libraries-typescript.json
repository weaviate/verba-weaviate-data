{"text": "\n\nThe current TypeScript client version is `v||site.typescript_client_version||`.\n\n## Overview\n\nThe TypeScript client can be used for both JavaScript and TypeScript scripts.\n\n\n\n\n## Installation and setup\n\nThe TypeScript client library package can be installed using npm.\n\n```bash\nnpm install weaviate-ts-client\n```\n\n## Usage and type definitions\n\nOnce installed, you can use the client in your TypeScript and JavaScript scripts, as shown in the following examples.\n\n### Usage\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',  // Replace with your endpoint\n});\n\nclient\n  .schema\n  .getter()\n  .do()\n  .then(res => {\n    console.log(res);\n  })\n  .catch(err => {\n    console.error(err)\n  });\n```\n\n\n\n\n```ts\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',  // Replace with your endpoint\n});\n\nconst response = await client\n  .schema\n  .getter()\n  .do();\nconsole.log(response);\n```\n\n\n\n\nIf you are having any issues with the import statement in TypeScript (e.g. if `weaviate` is `undefined`), try adding `\"esModuleInterop\": true` to your `\"compilerOptions\"` in `tsconfig.json`.\n\n### Type definitions\n\nThe type definitions can be found under the `types` subdirectory of the package in the `*.d.ts` files, for example as shown on the npm package page.\n\n## Authentication\n\nimport ClientAuthIntro from '/developers/weaviate/client-libraries/_components/client.auth.introduction.mdx'\n\n\n\n### WCS authentication\n\nimport ClientAuthWCS from '/developers/weaviate/client-libraries/_components/client.auth.wcs.mdx'\n\n\n\n### API key authentication\n\nimport ClientAuthApiKey from '/developers/weaviate/client-libraries/_components/client.auth.api.key.mdx'\n\n\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\n// Instantiate the client with the auth config\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'edu-demo.weaviate.network',  // Replace with your endpoint\n  apiKey: new weaviate.ApiKey('learn-weaviate'),  // Replace w/ your Weaviate instance API key\n});\n```\n\n\n\n\n```ts\n\n// Instantiate the client with the auth config\nconst client: WeaviateClient = weaviate.client({\n  scheme: 'https',\n  host: 'edu-demo.weaviate.network',  // Replace with your endpoint\n  apiKey: new ApiKey('learn-weaviate'),  // Replace w/ your Weaviate instance API key\n});\n```\n\n\n\n\n### OIDC authentication\n\nimport ClientAuthOIDCIntro from '/developers/weaviate/client-libraries/_components/client.auth.oidc.introduction.mdx'\n\n\n\nWhen using OIDC with the TypeScript client, its background token refresh process can block a script from exiting. If this behavior is not desired, you can:\n1. Set the `silentRefresh` parameter as `false` in the OIDC configuration. Or,\n1. Stop the process via `client.oidcAuth?.stopTokenRefresh()`, e.g. when a script is expected to exit, or token refresh is no longer needed.\n\n####  Resource Owner Password Flow\n\nimport ClientAuthFlowResourceOwnerPassword from '/developers/weaviate/client-libraries/_components/client.auth.flow.resource.owner.password.mdx'\n\n\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new weaviate.AuthUserPasswordCredentials({\n    username: 'user123',\n    password: 'password',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n    scopes: ['offline_access']  // optional, depends on the configuration of your identity provider (not required with WCS)\n  })\n});\n```\n\n\n\n\n```ts\n\nconst client: WeaviateClient = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new AuthUserPasswordCredentials({\n    username: 'user123',\n    password: 'password',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n    scopes: ['offline_access']  // optional, depends on the configuration of your identity provider (not required with WCS)\n  })\n});\n```\n\n\n\n\n####  Client Credentials flow\n\nimport ClientAuthFlowClientCredentials from '/developers/weaviate/client-libraries/_components/client.auth.flow.client.credentials.mdx'\n\n\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new weaviate.AuthClientCredentials({\n    clientSecret: 'supersecuresecret',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n    scopes: ['scope1', 'scope2']  // optional, depends on the configuration of your identity provider\n  })\n});\n```\n\n\n\n\n```ts\n\nconst client: WeaviateClient = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new AuthClientCredentials({\n    clientSecret: 'supersecuresecret',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n    scopes: ['scope1', 'scope2']  // optional, depends on the configuration of your identity provider\n  })\n});\n```\n\n\n\n\n####  Refresh Token flow\n\nimport ClientAuthBearerToken from '/developers/weaviate/client-libraries/_components/client.auth.bearer.token.mdx'\n\n\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new weaviate.AuthAccessTokenCredentials({\n    accessToken: 'abcd1234',\n    expiresIn: 900,\n    refreshToken: 'efgh5678',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n  })\n});\n```\n\n\n\n\n```ts\n\nconst client: WeaviateClient = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  authClientSecret: new AuthAccessTokenCredentials({\n    accessToken: 'abcd1234',\n    expiresIn: 900,\n    refreshToken: 'efgh5678',\n    silentRefresh: true, // Default: true - if false, you must refresh the token manually; if true, this background process will prevent a script from exiting.\n  })\n});\n```\n\n\n\n\n## Custom headers\n\nYou can pass custom headers to the client, which are added at initialization:\n\n\n\n\n```js\nconst { default: weaviate } = require('weaviate-ts-client');\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  headers: { headerName: 'HeaderValue' }\n});\n```\n\n\n\n\n```ts\n\nconst client: WeaviateClient = weaviate.client({\n  scheme: 'https',\n  host: 'some-endpoint.weaviate.network',\n  headers: { headerName: 'HeaderValue' }\n});\n```\n\n\n\n\nThese headers will then be included in every request that the client makes.\n\n## References\n\nWe are in the process of migrating our JavaScript code examples to TypeScript as necessary. Please be patient.\n\nOur RESTful endpoints and GraphQL functions covered by the TypeScript client currently have JavaScript examples in the code blocks.\n\n## Design\n\n### Builder pattern\n\nThe TypeScript client is designed following the Builder pattern. The pattern is used to build complex query objects. This means that calls (for example to retrieve data with a RESTful GET request, or using a more complex GraphQL query) are built with chained objects to reduce complexity. Some builder objects are optional, others are required to perform specific functions. Builder examples can be found in the RESTful API reference pages and the GraphQL reference pages.\n\nThe code snippet at the top of this page shows a simple query corresponding to the RESTful request `GET /v1/schema`. The client is initialized by requiring the package and connecting to a local instance. Then, a query is constructed by getting the `.schema` with `.getter()`. The query will be sent with the `.do()` call. `do()` is required for every function you want to build and execute.\n\n### General notes\n- All methods use ES6 Promises to deal with asynchronous code, so you need to use `.then()` after function calls, or have `async`/`await` support.\n- In the case of an error, the Promise rejects with the specific error message. (If using `async`/`await`, a rejected promises acts like a thrown exception).\n- Internally the client uses `isomorphic-fetch` to make the REST calls, so it should work from both the browser and NodeJS applications without any required changes.\n\n## TypeScript for JavaScript users\n\nTypeScript is a superset of JavaScript. There are, however, some differences that you should be aware of. This section offers some suggestions for JavaScript users who are new to TypeScript.\n\n### Run a TypeScript file\n\nTo run a TypeScript file, first convert it to JavaScript. The `typescript` package from `npm` includes the `tsc` utility. Use `tsc` to convert (transpile) the TypeScript file. \n\nInstall the `typescript` package. Add the `-g` flag if you want the package to be available globally.\n\n```bash\nnpm install typescript\n```\n\nSome packages, like the Weaviate TypeScript client, require extra configuration. The root directory of a TypeScript project has a `tsconfig.json` file. Add the following to your `tsconfig.json`.\n\n- Compiler options\n\n  - `\"target\": \"esnext\"` \n  - `\"module\": \"esnext\"`\n  - `\"moduleResolution\": \"node\"` \n\n- `\"include\": [\"*.ts\"]`  (Or specific files)\n- `\"lib\": [ \"es2018\" ]`\n\nDon't specify filenames on the command line when you use `tsconfig.json`. Specify the TypeScript files in `tsconfig.json` instead. `tsc` only reads `tsconfig.json` when you run it by itself.\n\n```bash\ntsc\n```\n\n`node` only allows the `import` statement in modules. To allow the `import` statement, add the following to your `package.json` file.\n\n```json\n{ \n   \"type\": \"module\"\n}\n```\n\n### Example\n\nTo run this example, complete these steps. \n\n- Install the `typescript` package. \n- Update the `tsconfig.json` and `package.json` files as described above.\n- Copy the sample code.\n- Save the code as `sample.ts` in the same directory as `tsconfig.json` and `package.json`.\n- Convert and run the code.\n\nUse this code to create `sample.ts`.\n\n\n  Sample TypeScript code\n\n```ts\n\nconst client = weaviate.client({\n  scheme: 'https',\n  host: 'edu-demo.weaviate.network',\n  apiKey: new weaviate.ApiKey('learn-weaviate'),\n});\n\nconsole.log(client.misc)\n```\n\n\nConvert `sample.ts`.\n\n```bash\ntsc \n```\n\nRun the converted file.\n\n```bash\nnode sample.js  \n```\n\nThe output looks like this.\n\n\n  Sample output\n\n```json\n{\n  \"clientId\": \"wcs\",\n  \"href\": \"https://auth.wcs.api.weaviate.io/auth/realms/SeMI/.well-known/openid-configuration\"\n}\n```\n\n\n## Client releases\n\n\n\n\n## Change logs\n\nSee the change logs on GitHub.\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-typescript", "path": "developers/weaviate/client-libraries/typescript.mdx", "link": "https://weaviate.io/developers/weaviate/client-libraries/typescript", "timestamp": "2024-02-08 21:21:00", "reader": "JSON", "meta": {}, "chunks": []}