{"text": "\n\n\n\n## Overview\n\nThe **Concepts** section explains various aspects related to Weaviate and its architecture to help you get the most out of it. You can read these sections in any order.\n\nIf you are after a practical guide, try the quickstart tutorial.\n\n## Core concepts\n\n**Data structure**\n\n- How Weaviate deals with data objects, including how they are stored, represented, and linked to each other.\n\n**Modules**\n\n- An overview of Weaviate's module system, including what can be done with modules, existing module types, and custom modules.\n\n**Indexing**\n\n- Read how data is indexed within Weaviate using inverted and ANN indices, and about configurable settings.\n\n**Vector indexing**\n\n- Read more about Weaviate's vector indexing architecture, such as the HNSW algorithm, distance metrics, and configurable settings.\n\n## Weaviate Architecture\n\nThe figure below gives a 30,000 feet view of Weaviate's architecture.\n\nWeaviate module APIs overview\n\nYou can learn more about the individual components in this figure by following these guides:\n\n**Learn about storage inside a shard**\n  * How Weaviate stores data\n  * How Weaviate makes writes durable\n  * How an inverted index, a vector index and an object store interact with each other\n\n**Ways to scale Weaviate horizontally**\n  * Different motivations to scale\n  * Sharding vs. Replication\n  * Configuring a cluster\n  * Consistency\n\n**How to plan resources**\n  * The roles of CPU, Memory and GPUs\n  * How to size a cluster correctly\n  * Speeding up specific processes\n  * Preventing bottlenecks\n\n**Filtered vector search**\n  * Combine vector search with filters\n  * Learn how combining an HNSW with an inverted index leads to high-recall, high-speed filtered queries\n\n**User-facing interfaces**\n  * Design philosophy behind user-facing APIs\n  * Role of the REST and GraphQL APIs\n\n**Replication architecture**\n  * About replication\n  * Weaviate's implementation\n  * Use cases\n\n\n\n\n", "type": "Documentation", "name": "weaviate-concepts", "path": "developers/weaviate/concepts/index.md", "link": "https://weaviate.io/developers/weaviate/concepts", "timestamp": "2024-02-08 21:21:02", "reader": "JSON", "meta": {}, "chunks": []}