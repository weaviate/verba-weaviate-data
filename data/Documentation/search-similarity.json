{"text": "\n\n\n\n## Overview\n\nThis page shows you how to perform similarity-based searches with the `nearXXX` operators.\n\nThese operators work by searching for objects with the most similar vector representation to the query. Note that due to differences in configuration and data, we have a separate page for image searches.\n\n- API References: Search operators\n- How-to: Image search\n\n## Similarity-based operators\n\nThese operators are available:\n\n* `near` - Finds objects closest to an input medium:\n    * E.g.: Use it to find text objects most similar to `cute animals`, or images most similar to a particular image.\n* `nearObject` - Finds objects closest to another Weaviate object:\n    * E.g.: Use it to find Weaviate objects most similar to object `56b9449e-65db-5df4-887b-0a4773f52aa7`.\n* `nearVector` - Find objects closest to an input vector.\n    * E.g.: Use it to find Weaviate objects most similar to vector `[-0.368, 0.1397, ... , 0.0971]`.\n\n### An input medium\n\n\nYou can use these operators to find objects most similar to a raw (un-vectorized) input, such as text or image. For text objects, you can provide an input text to `nearText`, and for image objects, you can provide an input image to `nearImage`. (Or either if you are using CLIP.)\n\nThe example below searches the `JeopardyQuestion` class for the top 2 objects best matching `\"animals in movies\"`, using `nearText`:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### An object\n\nYou can use the `nearObject` operator to find objects most similar to an existing Weaviate object. To do so, specify the object ID (e.g. `56b9449e-65db-5df4-887b-0a4773f52aa7`) as shown below.\n\nSee this section\n\nThe example below searches the `JeopardyQuestion` class for the top 2 objects best matching the object with ID `56b9449e-65db-5df4-887b-0a4773f52aa7`, using `nearObject`:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n\n\n### A vector\n\nYou can use the `nearVector` operator to find objects most similar to an input vector (e.g. `[-0.368, 0.1397, ... , 0.0971]`).\n\nThe example below searches the `JeopardyQuestion` class for the top 2 objects best matching the object with the provided vector, using `nearVector`:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Limit the results\n\nYou can set a limit on:\n- the number of results returned (with `limit`), or\n- how similar the results are to the query (with `distance`), or\n- the number of \"jumps\" in `distance` from the query (with the `autocut` filter).\n\n`autocut` can be combined with `limit`, to set the maximum number of results returned by `autocut`.\n\n### Number of results\n\nYou can set the maximum number of results returned with `limit` in the same way as shown in the search basics how-to guide.\n\nSimilarly, you can retrieve a maximum `n` objects after the first `m` results by using `limit` with `offset` as shown in the search basics how-to guide.\n\nTo limit the number of results returned by a `near...` query, add the `limit` operator. To start at a given offset, add the `offset` operator. For example if we want to obtain the animals in movies #2 and #3 from the `nearText` example above, we'll need to use `offset: 1, limit: 2`. The example below searches the `JeopardyQuestion` class for objects best matching `\"animals in movies\"`, skips 1 object (`offset`) and returns the next 2 objects:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n### Distance threshold\n\nYou can set a threshold for similarity search by setting a maximum `distance`. The distance indicates how dissimilar two objects are.\n\nMultiple distance metrics are available in Weaviate. You can set it in the schema as shown here.\n\nThe example below searches the `JeopardyQuestion` class for objects best matching `\"animals in movies\"`, returning those with a `distance` less than `0.18`:\n\n\n  \n    \n  \n  \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\nThe numerical value for `distance` will depend on many factors, including the vectorization model and the distance metric used. As such, there are no hard and fast rules. In this case, we selected this value as our trial and error evaluation of this dataset indicated this value to produce relatively intuitive outputs.\n\nIf the distance metric is set as `cosine` the `certainty` variable can be used, which normalizes the complement of distance to a value between 0 and 1.\n\n\n### Autocut\n\nAnother way to limit the results returned by a similarity search is to use the `autocut` filter. Autocut takes a positive integer parameter `N`, looks at the distance between each result and the query, and stops returning results after the `N`th \"jump\" in distance. For example, if the distances for six objects returned by `nearText` were `[0.1899, 0.1901, 0.191, 0.21, 0.215, 0.23]` then `autocut: 1` would return the first three objects, `autocut: 2` would return all but the last object, and `autocut: 3` would return all objects.\n\nAutocut can be used as follows:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Group results by a property or cross-reference\n\n\nYou can group search results by any arbitrary property or cross-reference.\n\nThe example below searches the `JeopardyQuestion` class for objects best matching `\"animals in movies\"`, fetching the 10 closest results. Then those results are grouped by `round`, returning a maximum of two groups, each group with a maximum of two results (`hits`):\n\nTo group results by a cross-reference, try replacing the `path` value from `round` to `hasCategory` in the example below.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Add a conditional (`where`) filter\n\nYou can add a conditional filter to your search results using the `where` argument.\n\nThe example below searches the `JeopardyQuestion` class for the top 2 objects best matching `\"animals in movies\"`, as long as their `round` property is exactly `\"Double Jeopardy!\"`:\n\n\n  \n    \n  \n  \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Find least similar results\n\nSometimes you may want to find objects that are the least similar to a given input. This might be possible for some distance metrics:\n\n- For cosine distances, perform a similarity search for a negative of a vector to find least.\n- For Euclidean or dot distances, the definition of \"least similar\" vector is not as clear-cut.\n\nAccordingly, we generally recommend using cosine distance for this use case, and searching for a *negative* of your input vector with `nearVector`.\n\n\n  Further discussions\n\nHere, the concept of `least similar` relates to finding vectors that are opposite to each other in the embedding space.\n\nThis may not necessarily mean that these `least similar` results have the opposite meaning in a semantic sense, such as antonyms in words.\n\nTake the words rain and drought for example. While these are opposite concepts, both of them are unrelated to astrophysics. As such, in many models the distance between embeddings for 'rain' and 'astrophysics' will be likely greater than the distance between embeddings for 'rain' and 'drought'. Accordingly, you should consider the context of your use case when interpreting the results.\n\n\n\n\n\n\n", "type": "Documentation", "name": "search-similarity", "path": "developers/weaviate/search/similarity.md", "link": "https://weaviate.io/developers/weaviate/search/similarity", "timestamp": "2023-11-13 10:41:35", "reader": "JSON", "meta": {}, "chunks": []}