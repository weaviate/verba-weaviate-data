{"text": "\n\n- Configuration: Backups\n\n## Overview\n\nWhen running Weaviate with Docker or Kubernetes, you can persist its data by mounting a volume to store the data outside of the containers. Doing so will cause the Weaviate instance to also load the data from the mounted volume when it is restarted.\n\nNote that Weaviate now offers native backup modules starting with `v1.15` for single-node instances, and `v1.16` for multi-node instances. For older versions of Weaviate, persisting data as described here will allow you to back up Weaviate.\n\n## Docker Compose\n\n### Persistence\n\nWhen running Weaviate with Docker Compose, you can set the `volumes` variable under the `weaviate` service and a unique cluster hostname as an environment variable.\n\n```yaml\nservices:\n  weaviate:\n    volumes:\n      - /var/weaviate:/var/lib/weaviate\n    environment:\n      CLUSTER_HOSTNAME: 'node1'\n```\n\n* About the volumes\n  * `/var/weaviate` is the location where you want to store the data on the local machine\n  * `/var/lib/weaviate` (after the colon) is the location inside the container, don't change this\n* About the hostname\n  * The `CLUSTER_HOSTNAME` can be any arbitrarily chosen name\n\nIn the case you want a more verbose output, you can change the environment variable for the `LOG_LEVEL`\n\n```yaml\nservices:\n  weaviate:\n    environment:\n      LOG_LEVEL: 'debug'\n```\n\nA complete example of a Weaviate without modules but with an externally mounted volume and more verbose output:\n\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    command:\n    - --host\n    - 0.0.0.0\n    - --port\n    - '8080'\n    - --scheme\n    - http\n    image: semitechnologies/weaviate:||site.weaviate_version||\n    ports:\n    - 8080:8080\n    - 50051:50051\n    restart: on-failure:0\n    volumes:\n      - /var/weaviate:/var/lib/weaviate # \n", "type": "Documentation", "name": "configuration-persistence", "path": "developers/weaviate/configuration/persistence.md", "link": "https://weaviate.io/developers/weaviate/configuration/persistence", "timestamp": "2024-02-08 21:21:16", "reader": "JSON", "meta": {}, "chunks": []}