{"text": "\n\nThe current Python client version is `v||site.python_client_version||`\n\nThe Python client is available in two versions: `v3` and `v4`. The `v4` client (currently in beta) is the latest version and is recommended for new projects. The `v3` client is still available for backwards compatibility, but will not be updated with new features. The documentation on this page is for the `v3` client. For the `v4` client, see this page.\n\n## Installation and setup\n\n### Requirements\n\nThe `v3` client is not to be used with with the gRPC API that was introduced in Weaviate `1.22`. You can still use Weaviate `1.22` and newer with the `v3` client, however it will not take advantage of improvements made with the gRPC API. For the gRPC API, use the `v4` client.\n\n### Installation\n\nThe `v3` Python library is available on PyPI.org. The package can be installed using pip. The client is developed and tested for Python 3.7 and higher.\n\n```bash\npip install \"weaviate-client==3.*\"\n```\n\n### Set-up\n\nNow you can use the client in your Python scripts as follows:\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"https://some-endpoint.weaviate.network\")  # Replace the URL with that of your Weaviate instance\n\nclient.schema.get()  # Get the schema to test connection\n```\n\nOr, with additional arguments such as those below:\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\n  url=\"https://some-endpoint.weaviate.network\",  # URL of your Weaviate instance\n  auth_client_secret=auth_config,  # (Optional) If the Weaviate instance requires authentication\n  timeout_config=(5, 15),  # (Optional) Set connection timeout & read timeout time in seconds\n  additional_headers={  # (Optional) Any additional headers; e.g. keys for API inference services\n    \"X-Cohere-Api-Key\": \"YOUR-COHERE-API-KEY\",            # Replace with your Cohere key\n    \"X-HuggingFace-Api-Key\": \"YOUR-HUGGINGFACE-API-KEY\",  # Replace with your Hugging Face key\n    \"X-OpenAI-Api-Key\": \"YOUR-OPENAI-API-KEY\",            # Replace with your OpenAI key\n  }\n)\n\nclient.schema.get()  # Get the schema to test connection\n```\n\n## Authentication\n\nimport ClientAuthIntro from '/developers/weaviate/client-libraries/_components/client.auth.introduction.mdx'\n\n\n\n### WCS authentication\n\nimport ClientAuthWCS from '/developers/weaviate/client-libraries/_components/client.auth.wcs.mdx'\n\n\n\n### API key authentication\n\n\nimport ClientAuthApiKey from '/developers/weaviate/client-libraries/_components/client.auth.api.key.mdx'\n\n\n\n```python\nimport weaviate\n\nauth_config = weaviate.auth.AuthApiKey(api_key=\"YOUR-WEAVIATE-API-KEY\")  # Replace w/ your Weaviate instance API key\n\n# Instantiate the client with the auth config\nclient = weaviate.Client(\n    url=\"https://some-endpoint.weaviate.network\",  # Replace w/ your endpoint\n    auth_client_secret=auth_config\n)\n```\n\n### OIDC authentication\n\nimport ClientAuthOIDCIntro from '/developers/weaviate/client-libraries/_components/client.auth.oidc.introduction.mdx'\n\n\n\n####  Resource Owner Password Flow\n\nimport ClientAuthFlowResourceOwnerPassword from '/developers/weaviate/client-libraries/_components/client.auth.flow.resource.owner.password.mdx'\n\n\n\n```python\nimport weaviate\n\nresource_owner_config = weaviate.AuthClientPassword(\n  username = \"user\",\n  password = \"pass\",\n  scope = \"offline_access\" # optional, depends on the configuration of your identity provider (not required with WCS)\n  )\n\n# Initiate the client with the auth config\nclient = weaviate.Client(\"http://localhost:8080\", auth_client_secret=resource_owner_config)\n```\n\n####  Client Credentials flow\n\nimport ClientAuthFlowClientCredentials from '/developers/weaviate/client-libraries/_components/client.auth.flow.client.credentials.mdx'\n\n\n\n```python\nimport weaviate\n\nclient_credentials_config = weaviate.AuthClientCredentials(\n  client_secret = \"client_secret\",\n  scope = \"scope1 scope2\" # optional, depends on the configuration of your identity provider (not required with WCS)\n  )\n\n# Initiate the client with the auth config\nclient = weaviate.Client(\"https://localhost:8080\", auth_client_secret=client_credentials_config)\n```\n\n####  Refresh Token flow\n\nimport ClientAuthBearerToken from '/developers/weaviate/client-libraries/_components/client.auth.bearer.token.mdx'\n\n\n\n```python\nimport weaviate\n\nbearer_config = weaviate.AuthBearerToken(\n  access_token=\"some token\"\n  expires_in=300 # in seconds, by default 60s\n  refresh_token=\"other token\" # Optional\n)\n\n# Initiate the client with the auth config\nclient = weaviate.Client(\"https://localhost:8080\", auth_client_secret=bearer_config)\n```\n\n## Custom headers\n\nYou can pass custom headers to the client, which are added at initialization:\n\n```python\nclient = weaviate.Client(\n  url=\"https://localhost:8080\",\n  additional_headers={\"HeaderKey\": \"HeaderValue\"},\n)\n```\n\n## Neural Search Frameworks\n\nThere is a variety of neural search frameworks that use Weaviate under the hood to store, search through, and retrieve vectors.\n\n- deepset's haystack\n- Jina's DocArray\n\n# References documentation\n\nOn this Weaviate documentation website, you will find how to use the Python client for all RESTful endpoints and GraphQL functions. For each reference, a code block is included with an example of how to use the function with the Python (and other) clients. The Python client, however, has additional functionalities, which are covered in the full client documentation on weaviate-python-client.readthedocs.io. Some of these additional functions are highlighted here below.\n\n### Example: client.schema.create(schema)\nInstead of adding classes one by one using the RESTful `v1/schema` endpoint, you can upload a full schema in JSON format at once using the Python client. Use the function `client.schema.create(schema)` as follows:\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\nschema = {\n  \"classes\": [{\n    \"class\": \"Publication\",\n    \"description\": \"A publication with an online source\",\n    \"properties\": [\n      {\n        \"dataType\": [\n          \"text\"\n        ],\n        \"description\": \"Name of the publication\",\n        \"name\": \"name\"\n      },\n      {\n        \"dataType\": [\n          \"Article\"\n        ],\n        \"description\": \"The articles this publication has\",\n        \"name\": \"hasArticles\"\n      },\n      {\n        \"dataType\": [\n            \"geoCoordinates\"\n        ],\n        \"description\": \"Geo location of the HQ\",\n        \"name\": \"headquartersGeoLocation\"\n      }\n    ]\n  }, {\n    \"class\": \"Article\",\n    \"description\": \"A written text, for example a news article or blog post\",\n    \"properties\": [\n      {\n        \"dataType\": [\n          \"text\"\n        ],\n        \"description\": \"Title of the article\",\n        \"name\": \"title\"\n      },\n      {\n        \"dataType\": [\n          \"text\"\n        ],\n        \"description\": \"The content of the article\",\n        \"name\": \"content\"\n      }\n    ]\n  }, {\n    \"class\": \"Author\",\n    \"description\": \"The writer of an article\",\n    \"properties\": [\n      {\n        \"dataType\": [\n            \"text\"\n        ],\n        \"description\": \"Name of the author\",\n        \"name\": \"name\"\n      },\n      {\n        \"dataType\": [\n            \"Article\"\n        ],\n        \"description\": \"Articles this author wrote\",\n        \"name\": \"wroteArticles\"\n      },\n      {\n        \"dataType\": [\n            \"Publication\"\n        ],\n        \"description\": \"The publication this author writes for\",\n        \"name\": \"writesFor\"\n      }\n    ]\n  }]\n}\n\nclient.schema.create(schema)\n```\n\n#### Example: Blog Post on How to get started with Weaviate and the Python client\n\nA full example of how to use the Python client for Weaviate can be found in this article on Towards Data Science.\n\n## Batching\n\nBatching is a way of importing/creating `objects` and `references` in bulk using a single API request to the Weaviate server. With Python this can be done using 3 different methods:\n\n1. ***Auto-batching***\n2. ***Dynamic-batching***\n3. ***Manual-batching***\n\nGenerally, we recommend use of `client.batch` in a context manager, which will automatically flush the batch when exiting. This is the easiest way to use the batching functionality.\n\nThe following parameters have the greatest impact on the batch import speed:\n\n| Parameter | Type | Recommendedvalue | Purpose |\n| :- | :- | :- |:- |\n| `batch_size` | integer | 50 - 200 | Initial batch size\n| `num_workers` | integer | 1 - 2 | Maximum number of parallel workers\n| `dynamic` | boolean | True | If true, dynamically adjust the `batch_size` based on the number of items in the batch\n\n### Multi-threading batch import\n\n\nMulti-threading Batch import works with both `Auto-batching` and `Dynamic-batching`.\n\nTo use it, set the number of workers (threads) using the `.configure(...)` (same as `.__call__(...)`) by setting the argument `num_workers` in the batch configuration. See also Batch configuration below.\n\nMultithreading is disabled by default (num_workers=1). Use with care to not overload your Weaviate instance.\n\n**Example**\n\n```python\nclient.batch(  # or client.batch.configure(\n  batch_size=100,\n  dynamic=True,\n  num_workers=4,\n)\n```\n\n### Auto-batching\n\nThis method allows the Python client to handle all the `object` and `reference` import/creation. This means that you do NOT have to explicitly import/create objects and cross-references. All you need to do is add everything you want imported/created to the `Batch`, and the `Batch` is going to take care of creating the objects and cross-references among them. To enable auto-batching we need to configure `batch_size` to be a positive integer (by default `None`) (see Batch configuration below for more information). The `Batch` is going to import/create objects, then create cross-references, if the number of objects + number of references == `batch_size`. See example below:\n\n```python\nimport weaviate\nfrom weaviate.util import generate_uuid5\nclient = weaviate.Client(\"http://localhost:8080\")\n\n# create schema\nschema = {\n  \"classes\": [\n    {\n      \"class\": \"Author\",\n      \"properties\": [\n        {\n          \"name\": \"name\",\n          \"dataType\": [\"text\"]\n        },\n        {\n          \"name\": \"wroteBooks\",\n          \"dataType\": [\"Book\"]\n        }\n      ]\n    },\n    {\n      \"class\": \"Book\",\n      \"properties\": [\n        {\n          \"name\": \"title\",\n          \"dataType\": [\"text\"]\n        },\n        {\n          \"name\": \"ofAuthor\",\n          \"dataType\": [\"Author\"]\n        }\n      ]\n    }\n  ]\n}\n\nclient.schema.create(schema)\n\nauthor = {\n  \"name\": \"Jane Doe\",\n}\nbook_1 = {\n  \"title\": \"Jane's Book 1\"\n}\nbook_2 = {\n  \"title\": \"Jane's Book 2\"\n}\n\nclient.batch.configure(\n  batch_size=5, # int value for batch_size enables auto-batching, see Batch configuration section below\n)\n\nwith client.batch as batch:\n  # add author\n  uuid_author = generate_uuid5(author, \"Author\")\n  batch.add_data_object(\n    data_object=author,\n    class_name=\"Author\",\n    uuid=uuid_author,\n  )\n  # add book_1\n  uuid_book_1 = generate_uuid5(book_1, \"Book\")\n  batch.add_data_object(\n    data_object=book_1,\n    class_name=\"Book\",\n    uuid=uuid_book_1,\n  )\n  # add references author ---> book_1\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_1,\n    to_object_class_name=\"Book\",\n  )\n  # add references author  book_2\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_2,\n    to_object_class_name=\"Book\",\n  )\n  # add references author  book_1\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_1,\n    to_object_class_name=\"Book\",\n  )\n  # add references author  book_2\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_2,\n    to_object_class_name=\"Book\",\n  )\n  # add references author  book_1\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_1,\n    to_object_class_name=\"Book\",\n  )\n  # add references author  book_2\n  batch.add_reference(\n    from_object_uuid=uuid_author,\n    from_object_class_name=\"Author\",\n    from_property_name=\"wroteBooks\",\n    to_object_uuid=uuid_book_2,\n    to_object_class_name=\"Book\",\n  )\n  # add references author \n  Example code\n\nThe following Python code can be used to handle errors on individual data objects in the batch.\n\n```python\nimport weaviate\n\nclient = weaviate.Client(\"http://localhost:8080\")\n\ndef check_batch_result(results: dict):\n  \"\"\"\n  Check batch results for errors.\n\n  Parameters\n  ----------\n  results : dict\n      The Weaviate batch creation return value, i.e. returned value of the client.batch.create_objects().\n  \"\"\"\n  if results is not None:\n    for result in results:\n      if 'result' in result and 'errors' in result['result']:\n        if 'error' in result['result']['errors']:\n          print(\"We got an error!\", result)\n\nobject_to_add = {\n    \"name\": \"Jane Doe\",\n    \"writesFor\": [{\n        \"beacon\": \"weaviate://localhost/f81bfe5e-16ba-4615-a516-46c2ae2e5a80\"\n    }]\n}\n\nclient.batch.configure(\n  # `batch_size` takes an `int` value to enable auto-batching\n  # (`None` is used for manual batching)\n  batch_size=100,\n  # dynamically update the `batch_size` based on import speed\n  dynamic=False,\n  # `timeout_retries` takes an `int` value to retry on time outs\n  timeout_retries=3,\n  # checks for batch-item creation errors\n  # this is the default in weaviate-client >= 3.6.0\n  callback=check_batch_result,\n  consistency_level=weaviate.data.replication.ConsistencyLevel.ALL,  # default QUORUM\n)\n\nwith client.batch as batch:\n  batch.add_data_object(object_to_add, \"Author\", \"36ddd591-2dee-4e7e-a3cc-eb86d30a4303\", vector=[1,2])\n  # lets force an error, adding a second object with unmatching vector dimensions\n  batch.add_data_object(object_to_add, \"Author\", \"cb7d0da4-ceaa-42d0-a483-282f545deed7\", vector=[1,2,3])\n```\n\nThis can also be applied to adding references in batch. Note that sending batches, especially references, skips some validations at the object and reference level. Adding this validation on single data objects like above makes it less likely for errors to go undiscovered.\n\n\n\n\n## Design\n\n### GraphQL query builder pattern\n\nFor complex GraphQL queries (e.g. with filters), the client uses a builder pattern to form the queries. An example is the following query with multiple filters:\n\n```python\nimport weaviate\nclient = weaviate.Client(\"http://localhost:8080\")\n\nwhere_filter = {\n  \"path\": [\"wordCount\"],\n  \"operator\": \"GreaterThan\",\n  \"valueInt\": 1000\n}\n\nnear_text_filter = {\n  \"concepts\": [\"fashion\"],\n  \"certainty\": 0.7,\n  \"moveAwayFrom\": {\n    \"concepts\": [\"finance\"],\n    \"force\": 0.45\n  },\n  \"moveTo\": {\n    \"concepts\": [\"haute couture\"],\n    \"force\": 0.85\n  }\n}\n\nquery_result = client.query\\\n    .get(\"Article\", [\"title\"])\\\n    .with_where(where_filter)\\\n    .with_near_text(near_text_filter)\\\n    .with_limit(50)\\\n    .do()\n\nprint(query_result)\n```\n\nNote that you need to use the `.do()` method to execute the query.\n\nYou can use `.build()` to inspect the resulting GraphQL query\n\n```python\nquery_result = client.query\\\n    .get(\"Article\", [\"title\"])\\\n    .with_where(where_filter)\\\n    .with_near_text(near_text_filter)\\\n    .with_limit(50)\n\nquery_result.build()\n\n>>> '{Get{Article(where: {path: [\"wordCount\"] operator: GreaterThan valueInt: 1000} limit: 50 nearText: {concepts: [\"fashion\"] certainty: 0.7 moveTo: {force: 0.85 concepts: [\"haute couture\"]} moveAwayFrom: {force: 0.45 concepts: [\"finance\"]}} ){title}}}'\n\n```\n\n## Best practices and notes\n\n### Thread-safety\n\nWhile the Python client is fundamentally designed to be thread-safe, it's important to note that due to its dependency on the `requests` library, complete thread safety isn't guaranteed.\n\nThis is an area that we are looking to improve in the future.\n\nPlease be particularly aware that the batching algorithm within our client is not thread-safe. Keeping this in mind will help ensure smoother, more predictable operations when using our Python client in multi-threaded environments.\n\nIf you are performing batching in a multi-threaded scenario, ensure that only one of the threads is performing the batching workflow at any given time. No two threads can use the same `client.batch` object at one time.\n\n## Client releases\n\n\n\n\n## Change logs\n\nFor more detailed information on client updates, check the change logs. The logs\nare hosted here:\n\n- GitHub\n- Read the Docs\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-python_v3", "path": "developers/weaviate/client-libraries/python_v3.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/python_v3", "timestamp": "2024-02-08 21:20:59", "reader": "JSON", "meta": {}, "chunks": []}