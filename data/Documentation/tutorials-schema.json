{"text": "\n\n## Overview\n\nIn this section, we will explore schema construction, including discussing some of the more commonly specified parameters. We will also discuss the auto-schema feature and why you might want to take the time to manually set the schema.\n\n## Prerequisites\n\nWe recommend you complete the Quickstart tutorial first.\n\nBefore you start this tutorial, you should follow the steps in the tutorials to have:\n\n- A new instance of Weaviate running (e.g. on the Weaviate Cloud Services),\n- An API key for your preferred inference API, such as OpenAI, Cohere, or Hugging Face, and\n- Installed your preferred Weaviate client library.\n\nIf you have completed the entire Quickstart tutorial, your Weaviate instance will contain data objects and a schema. **We recommend deleting the `Question` class before starting this section.** See below for details on how to do so:\n\n### Deleting classes\n\nimport CautionSchemaDeleteClass from '/_includes/schema-delete-class.mdx'\n\n\n\n## Introduction\n\n### What is a schema?\n\n\n\n\n### Quickstart recap\n\nIn the Quickstart tutorial, you saw how to specify the name and the vectorizer for a data collection, called a \"class\" in Weaviate:\n\nimport CodeAutoschemaMinimumSchema from '/_includes/code/quickstart/collection.definition.mdx'\n\n\n\nThen when you navigated to the `schema` endpoint at `https://some-endpoint.weaviate.network/v1/schema`, you will have seen the above-specified class name and the vectorizer.\n\nBut you might have also noticed that the `schema` included a whole lot of information that you did not specify.\n\nThat's because Weaviate inferred them for us, using the \"auto-schema\" feature.\n\n### Auto-schema vs. manual schema\n\nWeaviate requires a complete schema for each class of data objects.\n\nIf any required information is missing, Weaviate will use the auto-schema feature to fill in infer the rest from the data being imported as well as the default settings.\n\nWhile this may be suitable in some circumstances, in many cases you may wish to explicitly define a schema. Manually defining the schema will help you ensure that the schema is suited for your specific data and needs.\n\n## Create a class\n\nA collection of data in Weaviate is called a \"class\". We will be adding a class to store our quiz data.\n\n### About classes\n\nHere are some key considerations about classes:\n\nEach Weaviate class:\n- Is always written with a capital letter first. This is to distinguish them from generic names for cross-referencing.\n- Constitutes a distinct vector space. A search in Weaviate is always restricted to a class.\n- Can have its own vectorizer. (e.g. one class can have a `text2vec-openai` vectorizer, and another might have `multi2vec-clip` vectorizer, or `none` if you do not intend on using a vectorizer).\n- Has `property` values, where each `property` specifies the data type to store.\n\nYes! You can bring your own vectors and pass them to Weaviate directly. See this reference for more information.\n\n### Create a basic class\n\nLet's create a class called **Question** for our data.\n\nOur **Question** class will:\n- Contain three properties:\n    - name `answer`: type `text`\n    - name `question`: type `text`\n    - name `category`: type `text`\n- Use a `text2vec-openai` vectorizer\n\nRun this code with your client to define the schema for the **Question** class and display the created schema information.\n\n\n\n\nClasses always start with a capital letter. Properties always begin with a small letter. You can use `CamelCase` class names, and property names allow underscores. Read more about schema classes, properties and data types here.\n\nThe result should look something like this:\n\n\n  See the returned schema\n\n```json\n{\n    \"classes\": [\n        {\n            \"class\": \"Question\",\n            \"description\": \"Information from a Jeopardy! question\",\n            \"invertedIndexConfig\": {\n                \"bm25\": {\n                    \"b\": 0.75,\n                    \"k1\": 1.2\n                },\n                \"cleanupIntervalSeconds\": 60,\n                \"stopwords\": {\n                    \"additions\": null,\n                    \"preset\": \"en\",\n                    \"removals\": null\n                }\n            },\n            \"moduleConfig\": {\n                \"text2vec-openai\": {\n                    \"model\": \"ada\",\n                    \"modelVersion\": \"002\",\n                    \"type\": \"text\",\n                    \"vectorizeClassName\": true\n                }\n            },\n            \"properties\": [\n                {\n                    \"dataType\": [\n                        \"text\"\n                    ],\n                    \"description\": \"The question\",\n                    \"moduleConfig\": {\n                        \"text2vec-openai\": {\n                            \"skip\": false,\n                            \"vectorizePropertyName\": false\n                        }\n                    },\n                    \"name\": \"question\",\n                    \"tokenization\": \"word\"\n                },\n                {\n                    \"dataType\": [\n                        \"text\"\n                    ],\n                    \"description\": \"The answer\",\n                    \"moduleConfig\": {\n                        \"text2vec-openai\": {\n                            \"skip\": false,\n                            \"vectorizePropertyName\": false\n                        }\n                    },\n                    \"name\": \"answer\",\n                    \"tokenization\": \"word\"\n                },\n                {\n                    \"dataType\": [\n                        \"text\"\n                    ],\n                    \"description\": \"The category\",\n                    \"moduleConfig\": {\n                        \"text2vec-openai\": {\n                            \"skip\": false,\n                            \"vectorizePropertyName\": false\n                        }\n                    },\n                    \"name\": \"category\",\n                    \"tokenization\": \"word\"\n                }\n            ],\n            \"replicationConfig\": {\n                \"factor\": 1\n            },\n            \"shardingConfig\": {\n                \"virtualPerPhysical\": 128,\n                \"desiredCount\": 1,\n                \"actualCount\": 1,\n                \"desiredVirtualCount\": 128,\n                \"actualVirtualCount\": 128,\n                \"key\": \"_id\",\n                \"strategy\": \"hash\",\n                \"function\": \"murmur3\"\n            },\n            \"vectorIndexConfig\": {\n                \"skip\": false,\n                \"cleanupIntervalSeconds\": 300,\n                \"maxConnections\": 64,\n                \"efConstruction\": 128,\n                \"ef\": -1,\n                \"dynamicEfMin\": 100,\n                \"dynamicEfMax\": 500,\n                \"dynamicEfFactor\": 8,\n                \"vectorCacheMaxObjects\": 1000000000000,\n                \"flatSearchCutoff\": 40000,\n                \"distance\": \"cosine\"\n            },\n            \"vectorIndexType\": \"hnsw\",\n            \"vectorizer\": \"text2vec-openai\"\n        }\n    ]\n}\n```\n\n\n\nWe get back a lot of information here.\n\nSome of it is what we specified, such as the class name (`class`), and `properties` including their `dataType` and `name`. But the others are inferred by Weaviate based on the defaults and the data provided.\n\n### Class property specification examples\n\nAnd depending on your needs, you might want to change any number of these. For example, you might change:\n\n- `dataType` to modify the type of data being saved. For example, classes with dataType `text` will be tokenized differently to those with `string` dataType (read more).\n- `moduleConfig` to modify how each module behaves. In this case, you could change the model and/or version for the OpenAI inference API, and the vectorization behavior such as whether the class name is used for vectorization.\n- `properties` / `moduleConfig` to further modify module behavior at a class data property level. You might choose to skip a particular property being included for vectorization.\n- `invertedIndexConfig` to add or remove particular stopwords, or change BM25 indexing constants.\n- `vectorIndexConfig` to change vector index (e.g. HNSW) parameters, such as for speed / recall tradeoffs.\n\nSo for example, you might specify a schema like the one below:\n\n```json\n{\n    \"class\": \"Question\",\n    \"description\": \"Information from a Jeopardy! question\",\n    \"moduleConfig\": {\n        \"text2vec-openai\": {\n            \"vectorizeClassName\": false  // Default: true\n        }\n    },\n    \"invertedIndexConfig\": {\n        \"bm25\": {\n            \"k1\": 1.5,  // Default: 1.2\n            \"b\": 0.75\n        }\n    },\n    \"properties\": [\n        {\n            \"dataType\": [\"text\"],\n            \"description\": \"The question\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {\n                    \"vectorizePropertyName\": true  // Default: false\n                }\n            },\n            \"name\": \"question\",\n        },\n        ...\n    ]\n}\n```\n\nWith this you will have changed the specified properties from their defaults. Note that in the rest of the tutorials, we assume that you have not done this.\n\nYou can read more about various schema, data types, modules, and index configuration options in the pages below.\n\n- Schema\n- Data types\n- Modules\n- Indexes\n\n## Recap\n\n- The schema is where you define the structure of the information to be saved.\n- A schema consists of classes and properties, which define concepts.\n\n- Any unspecified setting is inferred by the auto-schema feature based on the data and defaults.\n- The schema can be modified through the RESTful API.\n- A class or property in Weaviate is immutable, but can always be extended.\n\n## Suggested reading\n\n- Reference: `schema` endpoint RESTful API\n- Tutorial: Import in detail\n- Tutorial: Queries in detail\n- Tutorial: Introduction to modules\n- Tutorial: Introduction to Weaviate Console\n\n\n\n\n", "type": "Documentation", "name": "tutorials-schema", "path": "developers/weaviate/tutorials/schema.md", "link": "https://weaviate.io/developers/weaviate/tutorials/schema", "timestamp": "2023-11-13 10:41:45", "reader": "JSON", "meta": {}, "chunks": []}