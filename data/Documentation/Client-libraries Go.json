{"text": "\nThe current Go client version is `v||site.go_client_version||`.\n\nThe Weaviate Go client is compatible with Go 1.16+.\n\n## Installation\nThe client doesn't support the old Go modules system. Create a repository for your code before you import the Weaviate client.\n\nCreate a repository:\n\n```bash\ngo mod init github.com/weaviate-go-client\ngo mod tidy\n```\n\nTo get the latest stable version of the Go client library, run the following:\n\n```bash\ngo get github.com/weaviate/weaviate-go-client/v4\n```\n\n## Example\n\nThis example establishes a connection to your Weaviate instance and retrieves the schema.:\n\n``` go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/weaviate/weaviate-go-client/v4/weaviate\"\n)\n\nfunc GetSchema() {\n    cfg := weaviate.Config{\n        Host:   \"localhost:8080\",\n\t\t  Scheme: \"http\",\n    }\n    client, err := weaviate.NewClient(cfg)\n    if err != nil {\n        panic(err)\n    }\n\n    schema, err := client.Schema().Getter().Do(context.Background())\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%v\", schema)\n}\n\nfunc main() {\n   GetSchema()\n}\n```\n\n## Authentication\n\nimport ClientAuthIntro from '/developers/weaviate/client-libraries/_components/client.auth.introduction.mdx'\n\n\n\n### WCS authentication\n\nimport ClientAuthWCS from '/developers/weaviate/client-libraries/_components/client.auth.wcs.mdx'\n\n\n\n### API key authentication\n\n\nimport ClientAuthApiKey from '/developers/weaviate/client-libraries/_components/client.auth.api.key.mdx'\n\n\n\n\n```go\ncfg := weaviate.Config{\n\tHost:       \"weaviate.example.com\",\n\tScheme:     \"http\",\n\tAuthConfig: auth.ApiKey{Value: \"my-secret-key\"},\n\tHeaders:    nil,\n}\nclient, err := weaviate.NewClient(cfg)\nif err != nil{\n  fmt.Println(err)\n}\n```\n\n### OIDC authentication\n\nimport ClientAuthOIDCIntro from '/developers/weaviate/client-libraries/_components/client.auth.oidc.introduction.mdx'\n\n\n\n####  Resource Owner Password Flow\n\nimport ClientAuthFlowResourceOwnerPassword from '/developers/weaviate/client-libraries/_components/client.auth.flow.resource.owner.password.mdx'\n\n\n\n```go\ncfg := weaviate.Config{\n\tHost:   \"weaviate.example.com\",\n\tScheme: \"http\",\n\tAuthConfig: auth.ResourceOwnerPasswordFlow{\n\t\tUsername: \"Your user\",\n\t\tPassword: \"Your password\",\n\t\tScopes:   []string{\"offline_access\"}, // optional, depends on the configuration of your identity provider (not required with WCS)\n\t},\n\tHeaders: nil,\n}\nclient, err := weaviate.NewClient(cfg)\nif err != nil{\n\tfmt.Println(err)\n}\n```\n\n####  Client Credentials flow\n\nimport ClientAuthFlowClientCredentials from '/developers/weaviate/client-libraries/_components/client.auth.flow.client.credentials.mdx'\n\n\n\n```go\ncfg := weaviate.Config{\n\tHost:   \"weaviate.example.com\",\n\tScheme: \"http\",\n\tAuthConfig: auth.ClientCredentials{\n\t\tClientSecret: \"your_client_secret\",\n\t\tScopes:       []string{\"scope1 scope2\"}, // optional, depends on the configuration of your identity provider (not required with WCS)\n\t},\n\tHeaders: nil,\n}\nclient, err := weaviate.NewClient(cfg)\nif err != nil{\n\tfmt.Println(err)\n}\n```\n\n####  Refresh Token flow\n\nimport ClientAuthBearerToken from '/developers/weaviate/client-libraries/_components/client.auth.bearer.token.mdx'\n\n\n\n```go\ncfg := weaviate.Config{\n\tHost:   \"weaviate.example.com\",\n\tScheme: \"http\",\n\tAuthConfig: auth.BearerToken{\n\t\tAccessToken:  \"some token\",\n\t\tRefreshToken: \"other token\",\n\t\tExpiresIn:    uint(500), // in seconds\n\t},\n\tHeaders: nil,\n}\nclient, err := weaviate.NewClient(cfg)\nif err != nil{\n\tfmt.Println(err)\n}\n```\n\n## Custom headers\n\nYou can pass custom headers to the client, which are added at initialization:\n\n```go\ncfg := weaviate.Config{\n  Host:\"weaviate.example.com\",\n  Scheme: \"http\",\n  AuthConfig: nil,\n  Headers: map[string]string{\n    \"header_key1\": \"value\",\n    \"header_key2\": \"otherValue\",\n    },\n}\nclient, err := weaviate.NewClient(cfg)\nif err != nil{\n  fmt.Println(err)\n}\n```\n\n## References\n\nAll [RESTful endpoints](/developers/weaviate/api/rest) and [GraphQL functions](../api/graphql/index.md) references covered by the Go client, and explained on those reference pages in the code blocks.\n\n## Design\n\n### Builder pattern\n\nThe Go client functions are designed with a 'Builder pattern'. A pattern is used to build complex query objects. This means that a function (for example to retrieve data from Weaviate with a request similar to a RESTful GET request, or a more complex GraphQL query) is built with single objects to reduce complexity. Some builder objects are optional, others are required to perform specific functions. All is documented on the [RESTful API reference pages](/developers/weaviate/api/rest) and the [GraphQL reference pages](../api/graphql/index.md).\n\nThe code snippet above shows a simple query similar to `RESTful GET /v1/schema`. The client is initiated by requiring the package and connecting to the running instance. Then, a query is constructed by getting the `.Schema` with `.Getter()`. The query will be sent with the `.Go()` function, this object is thus required for every function you want to build and execute.\n\n## Migration Guides\n\n### From `v2` to `v4`\n\n#### Unnecessary `.Objects()` removed from `GraphQL.Get()`\n\nBefore:\n\n```go\nclient.GraphQL().Get().Objects().WithClassName...\n```\n\nAfter:\n\n```go\nclient.GraphQL().Get().WithClassName\n```\n\n#### GraphQL `Get().WithNearVector()` uses a builder pattern\n\nIn `v2` specifying a `nearVector` argument to `client.GraphQL().Get()` required passing a string. As a result the user had to know the structure of the GraphQL API. `v4` fixes this by using a builder pattern like so:\n\nBefore:\n\n```go\nclient.GraphQL().Get().\n  WithNearVector(\"{vector: [0.1, -0.2, 0.3]}\")...\n```\n\nAfter\n\n```go\nnearVector := client.GraphQL().NearVectorArgBuilder().\n  WithVector([]float32{0.1, -0.2, 0.3})\n\nclient.GraphQL().Get().\n  WithNearVector(nearVector)...\n```\n\n\n#### All `where` filters use the same builder\n\nIn `v2` filters were sometimes specified as strings, sometimes in a structured way. `v4` unifies this and makes sure that you can always use the same builder pattern.\n\n##### GraphQL Get\n\nBefore:\n\n```go\n// using filter encoded as string\nwhere := `where :{\n  operator: Equal\n  path: [\"id\"]\n  valueText: \"5b6a08ba-1d46-43aa-89cc-8b070790c6f2\"\n}`\n\nclient.GraphQL().Get().\n  Objects().\n  WithWhere(where)...\n```\n\n```go\n// using deprecated graphql arg builder\nwhere := client.GraphQL().WhereArgBuilder().\n  WithOperator(graphql.Equal).\n  WithPath([]string{\"id\"}).\n  WithValueString(\"5b6a08ba-1d46-43aa-89cc-8b070790c6f2\")\n\nclient.GraphQL().Get().\n  Objects().\n  WithWhere(where)...\n```\n\nAfter:\n\n```go\nwhere := filters.Where().\n  WithPath([]string{\"id\"}).\n  WithOperator(filters.Equal).\n  WithValueString(\"5b6a08ba-1d46-43aa-89cc-8b070790c6f2\")\n\nclient.GraphQL().Get().\n  WithWhere(where)...\n```\n\n##### GraphQL Aggregate\n\nBefore:\n\n```go\nwhere := client.GraphQL().WhereArgBuilder().\n  WithPath([]string{\"id\"}).\n  WithOperator(graphql.Equal).\n  WithValueString(\"5b6a08ba-1d46-43aa-89cc-8b070790c6f2\")\n\nclient.GraphQL().Aggregate().\n  Objects().\n  WithWhere(where)...\n```\n\nAfter:\n\n```go\nwhere := filters.Where().\n  WithPath([]string{\"id\"}).\n  WithOperator(filters.Equal).\n  WithValueString(\"5b6a08ba-1d46-43aa-89cc-8b070790c6f2\")\n\nclient.GraphQL().Aggregate().\n  WithWhere(where)...\n```\n\n##### Classification\n\nBefore:\n\n```go\nvalueInt := 100\nvalueText  := \"Government\"\n\nsourceWhere := &models.WhereFilter{\n  ValueInt: &valueInt,\n  Operator: string(graphql.GreaterThan),\n  Path:     []string{\"wordCount\"},\n}\n\ntargetWhere := &models.WhereFilter{\n  ValueString: &valueText,\n  Operator:    string(graphql.NotEqual),\n  Path:        []string{\"name\"},\n}\n\nclient.Classifications().Scheduler().\n  WithSourceWhereFilter(sourceWhere).\n  WithTargetWhereFilter(targetWhere)...\n```\n\nAfter:\n\n```go\nsourceWhere := filters.Where().\n  WithOperator(filters.GreaterThan).\n  WithPath([]string{\"wordCount\"}).\n  WithValueInt(100)\n\ntargetWhere := filters.Where().\n  WithOperator(filters.NotEqual).\n  WithPath([]string{\"name\"}).\n  WithValueString(\"Government\")\n\nclient.Classifications().Scheduler().\n  WithSourceWhereFilter(sourceWhere).\n  WithTargetWhereFilter(targetWhere)...\n```\n\n#### GraphQL `Get().WithFields()`\n\nIn `v2` `.WithFields()` took a GraphQL string that required knowledge of how GraphQL fields are structured. Now this can be done with a variadic function. E.g:\n\nBefore:\n\n```go\nclient.GraphQL.Get().WithClassName(\"MyClass\").WithFields(\"name price age\")...\n```\n\nAfter:\n\n```go\nclient.GraphQL.Get().WithClassName(\"MyClass\").\n  WithFields(graphql.Field{Name: \"name\"},graphql.Field{Name: \"price\"}, graphql.Field{Name: \"age\"})...\n```\n\n#### Graphql `Get().WithGroup()`\n\nIn `v2` `.WithFields()` took a GraphQL string that required knowledge of how GraphQL fields are structured. Now this can be done with a builder. E.g:\n\nBefore:\n\n```go\nclient.GraphQL.Get().WithClassName(\"MyClass\")\n  .WithGroup(\"{type:merge force:1.0}\")\n```\n\nAfter:\n\n```go\ngroup := client.GraphQL().GroupArgBuilder()\n  .WithType(graphql.Merge).WithForce(1.0)\n\nclient.GraphQL.Get().WithClassName(\"MyClass\").WithGroup(group)\n```\n\n#### Graphql `Data().Validator()` property renamed\n\nIn `v2` the naming of the method to specify the Schema was inconsistent with other places in the client. This has been fixed in `v4`. Rename according to the following:\n\nBefore:\n```go\nclient.Data().Validator().WithSchema(properties)\n```\n\nAfter:\n```go\nclient.Data().Validator().WithProperties(properties)\n```\n\n## Client releases\n\n\n\n## Change logs\n\nCheck the\n[change logs on GitHub](https://github.com/weaviate/weaviate-go-client/releases)\nfor updates on the latest `Go client` changes.\n\n\n\n", "type": "Documentation", "name": "Client-libraries Go", "path": "developers/weaviate/client-libraries/go.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/go", "timestamp": "2024-05-08 10:49:35", "reader": "JSON", "meta": {}, "chunks": []}