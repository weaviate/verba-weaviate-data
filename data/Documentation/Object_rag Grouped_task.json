{"text": "\nA 'grouped task' generation wil perform RAG queries on the set of retrieved objects. This is useful when you want to transform the set of objects as a whole, with one prompt.\n\n###  Code\n\nThis example finds entries in \"Movie\" based on their similarity to the input vector. Then, instructs the large language model to find commonalities between them.\n\nThe generated text, and each of the results are then printed out to the console.\n\n\n\n##  Explain the code\n\nFor `grouped_task` queries, you simply pass on the prompt to the `grouped_task` parameter. This will instruct Weaviate to pass on the:\n- text properties from all retrieved objects, and\n- the prompt\n\nto the large language model.\n\n\n  Example results\n\n```text\nIn Time\nGattaca\nI, Robot\nMad Max: Fury Road\nThe Maze Runner\nThese movies all take place in a futuristic or dystopian society where the characters must navigate complex systems and face challenges related to technology, society, and survival. They all explore themes of control, power, and the consequences of scientific advancements on humanity.\n```\n\n\n\n###  Optional parameters\n\nYou can also pass on a list of properties to be used, as the `grouped_properties` parameter. This can be useful to reduce the amount of data passed on to the large language model and omit irrelevant properties.\n\n###  Response object\n\nA RAG query with the `grouped_task` parameter will return a response with an additional `generated` attribute. This attribute will contain the generated output for the set of objects.\n\n\n", "type": "Documentation", "name": "Object_rag Grouped_task", "path": "developers/academy/py/starter_custom_vectors/104_object_rag/30_grouped_task.mdx", "link": "https://weaviate.io/developers/academy/py/starter_custom_vectors/object_rag/grouped_task", "timestamp": "2024-05-08 10:48:00", "reader": "JSON", "meta": {}, "chunks": []}