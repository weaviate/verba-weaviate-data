{"text": "\n\n\n\n## Overview\n\nYou can use cross-references to establish directional relationships between classes, for example from a `Book` to its `Author`, or from an `Author` to their `Book`s.\n\nTo define a cross-reference, you must:\n1. At the class level, set up a `cross-reference` property in one class (`from`) referring to another (`to`) class, then\n2. For individual objects, establish the cross-reference between a particular object of the `from` class, to an object of the `to` class, using their ids.\n\nFor classes where multi-tenancy is enabled, you can establish a cross-reference from a multi-tenancy class object to:\n- A non-multi-tenancy class object, or\n- A multi-tenancy class object belonging to the same tenant.\n\nSee Manage data: multi-tenancy operations for details on how.\n\nCreating cross-references does not affect object vectors in either direction.\n\n- References: REST - /v1/objects\n\n\n### Data set\n\n\n\n\nThe example for this howto is a dataset consisting of 1000 questions & answers from the popular quiz show \"Jeopardy!\". The two classes of interest are: `JeopardyQuestion` and `JeopardyCategory`. Let's pick some objects of interest:\n\nQuestions:\n\n```json\n{\n  \"answer\": \"San Francisco\",\n  \"question\": \"This city's Cable Car Museum...\",\n  \"_additional\": {\n    \"id\": \"00ff6900-e64f-5d94-90db-c8cfa3fc851b\"\n  }\n}\n```\n\nCategories:\n\n```json\n[\n  {\n    \"title\": \"U.S. CITIES\",\n    \"_additional\": {\n      \"id\": \"20ffc68d-986b-5e71-a680-228dba18d7ef\"\n    }\n  },\n  {\n    \"title\": \"MUSEUMS\",\n    \"_additional\": {\n      \"id\": \"fec50326-dfa1-53c9-90e8-63d0240bd933\"\n    }\n  }\n]\n```\n\n\n## Add a one-way cross-reference property\n\nThis requires adding one reference property `from` a class referring `to` another, and adding one cross-reference per object pair.\n\nTo add a cross-reference property in the class definition, specify its `dataType` as the name of another class in the schema.\n\nFor example to specify the cross-reference from `JeopardyQuestion` to `JeopardyCategory`:\n\n\n\nTo add a cross-reference from an object to another, specify its source class and id, the property name, and the class and id of the target object. In the example below, we'll _add_ (not set) the \"U.S. CITIES\" category to the \"San Francisco\" Q&A (which by default only has the \"MUSEUMS\" category):\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Add two-way cross-references\n\nThis requires adding reference properties in both directions, and adding two cross-references per object pair (`from` A -> `to` B and `from` B -> `to` A).\n\nTo define a bidirectional reference between two classes, add a property to each class with the `dataType` set to the name of the other class:\n\n`JeopardyQuestion` class:\n\n\n`JeopardyCategory` class:\n```json\n    {\n        \"class\": \"JeopardyCategory\",\n        \"description\": \"A Jeopardy! category\",\n        \"properties\": [\n            {\"name\": \"title\", \"dataType\": [\"text\"]},\n            // highlight-start\n            {\n                 \"name\": \"hasQuestion\",\n                \"dataType\": [\"JeopardyQuestion\"],\n                \"description\": \"Question in this category\"\n            }\n            // highlight-end\n        ]\n    }\n```\n\nTo set up a two-way cross-reference between two objects, set each cross-reference in turn:\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Add multiple (one-to-many) cross-references\n\nTo add a one-to-many cross-reference relationship, add to the source object each of the cross-references to the target objects that you need.\n\nFor example, to mark that the \"San Francisco\" Q&A belongs to multiple categories, e.g. \"US. CITIES\" and \"MUSEUMS\":\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Delete a cross-reference\n\nDeleting a cross-reference requires specifying the parameters that define the cross-reference.\n\nTo delete a cross-reference, specify the class, id and cross-reference property name of the source object, and the class and id of the target object:\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n\nWhat happens if the `to` object is deleted?\nIf an object is deleted, cross-references to it will be left intact. A Get query using the inline fragment syntax will correctly retrieve only fields in the existing cross-references objects, but getting the object by ID will show all cross-references, whether the objects they point to exist or not.\n\n\n## Update a cross-reference\n\nTo update the cross-references stored in a property of an object, specify the object's UUID, class name and cross-references property name, as well as the new list of cross-referenced UUIDs and their class (if all objects are of the same class) or classes (one class per each UUID):\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Batch creation\n\nCross-references can be created using batches just like data objects. This can be done by using the same batch process, but by adding cross-references to the batch instead of data objects.\n\nPlease see the batch import how-to for more on batch imports.\n\n\n## Retrieve cross-references\n\nCross-references in Weaviate are not themselves objects, but properties of objects. As such, you can retrieve cross-reference in one of two ways:\n1. Retrieve the object that it belongs to. This will return the cross-reference as a property of the object.\n1. Retrieve the cross-reference as a part of a query. Just as you can retrieve any other property of search results, you can retrieve cross-reference properties.\n\n\n\n\n", "type": "Documentation", "name": "manage-data-cross-references", "path": "developers/weaviate/manage-data/cross-references.mdx", "link": "https://weaviate.io/developers/weaviate/manage-data/cross-references", "timestamp": "2023-11-02 10:53:08", "reader": "JSON", "meta": {}, "chunks": []}