{"text": "\n\nThe Python client is currently in beta, and we want to hear from you.\n\nIf you notice any bugs, or have any feedback, please let us know on this forum thread\n\n## Overview\n\nThis page describes the `v4` Python client for Weaviate. This client is also called the `collections` client, because the main interactions is with a collection (also called `Class` in Weaviate).\n\nThe full set of features will be covered in the client documentation page. This page will cover the key ideas and aspects, especially those specifc to the Python client.\n\n## Installation\n\nThe Python library is available on PyPI.org. The package can be installed using pip. The client is developed and tested for Python 3.8 to 3.12.\n\n```bash\npip install --pre \"weaviate-client==4.*\"\n```\n\n### Requirements\n\n#### Weaviate version\n\nThe `v4` client is only compatible with Weaviate `1.22.0` and higher. This is due to its user of gRPC. If you are using an older version of Weaviate, please use the `v3` client.\n\n#### gRPC port\n\nNote that you will need the corresponding gRPC port to be open on your Weaviate instance. The default port is `50051`. If you are running Weaviate locally, you can open this port by adding the following to your `docker-compose.yml` file:\n\n```yaml\n    ports:\n     - \"8080:8080\"\n     - \"50051:50051\"\n```\n\n## Instantiation\n\nYou can instantiate the client using one of multiple methods. For example, you can use one of the following helper `connect` functions:\n\n- `weaviate.connect_to_wcs()`\n- `weaviate.connect_to_local()`\n- `weaviate.connect_to_embedded()`\n- `weaviate.connect_to_custom()`\n\nOr, you can instantiate a `weaviate.WeaviateClient` object directly.\n\nFor example, you can connect to a local instanct like this:\n\n\n\nOr connect to a Weaviate Cloud Services (WCS) instance like this:\n\n\n\nOr instantiate a client directly like this:\n\n\n\n#### API keys for external API use\n\nYou can pass on API keys for services such as Cohere, OpenAI and so on through additional headers.\n\nFor example, to use the OpenAI API, you can pass on the API key like this:\n\n\n\n#### Timeout values\n\nYou can also set timeout values for the client as a tuple  (connection timeout & read timeout time) in seconds.\n\n\n\n### Authentication\n\nSome helper `connect` functions allow you to pass on authentication credentials. For example, the `connect_to_wcs` method allows for a WCS api key to be passed in.\n\n\n\nFor authentication workflows not supported by the helper functions, you can pass on authentication credentials directly when instantiating the `WeaviateClient` object.\n\nFor example, you can pass on OIDC username and password like this:\n\n\n\nOr, you can pass the WCS API key like this:\n\n\n\nThe client also supports OIDC authentication with Client Credentials flow and Refresh Token flow. They are available through the `AuthClientCredentials` and `AuthBearerToken` classes respectively.\n\n## Key ideas\n\nThe `v4` client is also called the `collections` client, because the main interactions is with a collection (also called `Class` in Weaviate). (From here, we will use `collections` instead of `Class`.)\n\nThis client also includes custom Python classes to provide IDE assistance and typing help. You can import them individually, like so:\n\n```\nfrom weaviate.classes import Property, ConfigFactory, DataObject\n```\n\nBut it may be convenient to import the whole set of classes like this.\n\n```\nimport weaviate.classes as wvc\n```\n\n## Collection methods\n\nOperations in the `v4` client are grouped into submodules. The key submodules for interacting with objects are:\n\n- `data`: CUD operations (read operations are in `query`)\n- `query`: Search operations\n- `aggregate`: Aggregation operations\n- `generate`: Retrieval augmented generation operations\n- `query_group_by`: Object-level group by operations\n- `aggregate_group_by`: Aggregation-level group by operations\n\n### Collection iterator (`cursor` API)\n\nThe `v4` client adds a Pythonic iterator method for each collection. This wraps the `cursor` API and allows you to iterate over all objects in a collection.\n\nThis will fetch all objects in the `articles` collection, including most of its properties and metadata.\n\n\n\nYou can specify what properties to retrieve. This will only fetch the `title` property. Doing so will switch off default metadata retrieval.\n\n\n\nYou can also specify what metadata to retrieve. This will only fetch the `uuid` metadata. Doing so will switch off default property retrieval.\n\n\n\nNote that as the `cursor` API inherently requires the object UUID for indexing, the `uuid` metadata is always retrieved.\n\n### Data model / generics\n\nYou can choose to provide a generic type to a query or data operation. This can be beneficial as the generic class is used to extract the return properties and statically type the response.\n\n\n\n## Client releases\n\n\n\n\n## Change logs\n\nFor more detailed information on client updates, check the change logs. The logs\nare hosted here:\n\n- GitHub\n- Read the Docs\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-python", "path": "developers/weaviate/client-libraries/python.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/python", "timestamp": "2023-11-02 10:52:39", "reader": "JSON", "meta": {}, "chunks": []}