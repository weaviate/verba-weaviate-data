{"text": "\n\n## Overview\n\nThis page broadly covers the Weaviate Python client (`v4` release). For usage information not specific to the Python client, such as code examples, see the relevant pages in the Weaviate documentation.\n\n## High-level ideas\n\n### Helper classes\n\nThe client library provides numerous additional Python classes to provide IDE assistance and typing help. You can import them individually, like so:\n\n```\nfrom weaviate.classes.config import Property, ConfigFactory\nfrom weaviate.classes.data import DataObject\nfrom weaviate.classes.query import Filter\n```\n\nBut it may be convenient to import the whole set of classes like this. You will see both usage styles in our documentation.\n\n```\nimport weaviate.classes as wvc\n```\n\nFor discoverability, the classes are arranged into submodules.\n\n\n  See the list of submodules\n\n| Module                      | Description                         |\n|-----------------------------|-------------------------------------|\n| `weaviate.classes.config`   | Collection creation / modification  |\n| `weaviate.classes.data`     | CUD operations                      |\n| `weaviate.classes.query`    | query/search operations             |\n| `weaviate.classes.aggregate`| aggregate operations                |\n| `weaviate.classes.generic`  | generics                            |\n| `weaviate.classes.init`     | initialization                      |\n| `weaviate.classes.tenants`  | tenants                             |\n| `weaviate.classes.batch`    | batch operations                    |\n\n\n\n### Connection termination\n\nYou must ensure your client connections are closed. You can use `client.close()`, or use a context manager to close client connections for you.\n\n#### `client.close()` with `try` / `finally`\n\nThis will close the client connection when the `try` block is complete (or if an exception is raised).\n\n\n\n#### Context manager\n\nThis will close the client connection when you leave the `with` block.\n\n\n\n## Installation\n\nThe Python client library is developed and tested using Python 3.8+. It is available on PyPI.org, and can be installed with:\n\n```bash\npip install -U \"weaviate-client==4.*\"  # For beta versions: `pip install --pre -U \"weaviate-client==4.*\"`\n```\n\n### Requirements\n\n#### gRPC\n\nThe `v4` client uses remote procedure calls (RPCs) under-the-hood. Accordingly, a port for gRPC must be open to your Weaviate server.\n\n\n  docker-compose.yml example\n\nIf you are running Weaviate with Docker, you can map the default port (`50051`) by adding the following to your `docker-compose.yml` file:\n\n```yaml\n    ports:\n     - 8080:8080\n     - 50051:50051\n```\n\n\n\n#### WCS compatibility\n\nThe free (sandbox) tier of WCS is compatible with the `v4` client as of 31 January, 2024. Sandboxes created before this date will not be compatible with the `v4` client.\n\n#### Weaviate server version\n\nThe `v4` client requires Weaviate `1.23.7` or higher. Generally, we encourage you to use the latest version of the Python client *and* the Weaviate server.\n\n## Instantiate a client\n\nThere are multiple ways to connect to your Weaviate instance. To instantiate a client, use one of these styles:\n\n- Python client v4 helper methods\n- Python client v4 explicit connection\n- Python client v3 style connection\n\n### Python client v4 helper functions\n\n- `weaviate.connect_to_wcs()`\n- `weaviate.connect_to_local()`\n- `weaviate.connect_to_embedded()`\n- `weaviate.connect_to_custom()`\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe `v4` client helper functions provide some optional parameters to customize your client.\n\n- Specify external API keys\n- Specify connection timeout values\n- Specify authentication details\n\n#### External API keys\n\nTo add API keys for services such as Cohere or OpenAI, use the `headers` parameter.\n\n\n\n#### Timeout values\n\nSet timeout values, in seconds, for the client.\n\nThe syntax is: `timeout=(, )`\n\n\n\n\nIf you are seeing errors while using the `generate` submodule, try increasing the timeout values (e.g. to `(60, 120)`). The `generate` submodule uses a large language model to generate text.\n\n\nAccordingly, the speed of the `generate` submodule is dependent on the speed of the language model (and any API that is serving the language model). Increasing the timeout values will allow the client to wait longer for the language model to respond.\n\n#### Authentication\n\nSome of the `connect` helper functions take authentication credentials. For example, `connect_to_wcs` accepts a WCS API key or OIDC authentication credentials.\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nFor OIDC authentication with the Client Credentials flow, use the `AuthClientCredentials` class.\n\nFor OIDC authentication with the Refresh Token flow, use the `AuthBearerToken` class.\n\nIf the helper functions do not provide the customization you need, use the `WeaviateClient` class to instantiate the client.\n\n\n### Python client v4 explicit connection\n\nIf you need to pass custom parameters, use the `weaviate.WeaviateClient` class to instantiate a client. This is the most flexible way to instantiate the client object.\n\nPlease note that when directly instantiating a connection, you must connect to the server manually by calling the `.connect()` method.\n\n\n\n### Python client v3 API\n\nTo create an older, `v3` style `Client` object, use the `weaviate.Client` class. This method available for backwards compatibility. Where possible, use a client v4 connection.\n\nTo create a `v3` style client, refer to the `v3` client documentation.\n\n## Batching\n\nThe `v4` client offers two ways to perform batch imports. From the client object directly, or from the collection object.\n\nWe recommend using the collection object to perform batch imports of single collections or tenants. If you are importing objects across many collections, such as in a multi-tenancy configuration, using `client.batch` may be more convenient.\n\n### Batch sizing\n\nThere are three ways to configure the batch size. They are `dynamic`, `fixed_size` and `rate_limit`.\n\n| Method | Description | When to use |\n| :-- | :-- | :-- |\n| `dynamic` | The batch size is dynamically calculated by Weaviate. | Recommended starting point. |\n| `fixed_size` | The batch size is fixed to a size specified by a user. | When you want to control the batch size. |\n| `rate_limit` | The number of objects sent to Weaviate is rate limited (specified as n_objects per minute). | When you want to avoid hitting third-party vectorization API rate limits. |\n\n#### Usage\n\nWe recommend using a context manager as shown below.\n\nThese methods return completely localized context managers. Accordingly, attributes of one batch such as `failed_objects` and `failed_references` will not be included in any subsequent calls.\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nIn the batching process, if the background thread responsible for sending the batches raises an exception this is now re-raised in the main thread.\n\n### Error handling\n\nDuring a batch import, any failed objects or references will be stored for retrieval.\n\nA list of failed objects can be obtained through `batch.failed_objects` and a list of failed references can be obtained through `batch.failed_references`.\n\nNote that these lists are reset when a batching process is initialized. So make sure to retrieve them before starting a new batch import block.\n\n\n\n## Working with collections\n\n### Instantiate a collection\n\nYou can instantiate a collection object by creating a collection, or by retrieving an existing collection.\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n### Collection submodules\n\nOperations in the `v4` client are grouped into submodules. The key submodules for interacting with objects are:\n\n- `data`: CUD operations (read operations are in `query`)\n- `batch`: Batch import operations\n- `query`: Search operations\n- `generate`: Retrieval augmented generation operations\n    - Build on top of `query` operations\n- `aggregate`: Aggregation operations\n\n### `data`\n\nThe `data` submodule contains all object-level CUD operations, including:\n\n- `insert` for creating objects.\n    - This function takes the object properties as a dictionary.\n- `insert_many` for batch creating multiple objects.\n    - This function takes the object properties as a dictionary or as a `DataObject` instance.\n- `update` for updating objects (for `PATCH` operations).\n- `replace` for replacing objects (for `PUT` operations).\n- `delete_by_id` for deleting objects by ID.\n- `delete_many` for batch deletion.\n- `reference_xxx` for reference operations, including `reference_add`, `reference_add_many`, `reference_update` and `reference_delete`.\n\nSee some examples below. Note that each function will return varying types of objects.\n\nAs of `4.4b1`, `insert_many` sends one request for the entire function call. A future release may\nsend multiple requests as batches.\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### `insert_many` with DataObjects\n\nThe `insert_many` function takes a list of `DataObject` instances or a list of dictionaries. This is useful if you want to specify additional information to the properties, such as cross-references, object uuid, or a custom vector.\n\n\n\n#### Cross-reference creation\n\nCross-references should be added under a `references` parameter in the relevant function/method, with a structure like:\n\n```python\n{\n    \"\": \"\"\n}\n```\n\nFor example:\n\n\n\nUsing the `properties` parameter to add references is deprecated and will be removed in the future.\n\n### `query`\n\nThe `query` submodule contains all object-level query operations, including `fetch_objects` for retrieving objects without additional search parameters, `bm25` for keyword search,  `near_` for vector search operators, `hybrid` for hybrid search and so on.\n\nThese queries return a `_QueryReturn` object, which contains a list of `_Object` objects.\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n#### Queries with custom returns\n\nYou can further specify:\n- Whether to include the object vector (via `include_vector`)\n    - Default is `False`\n- Which properties to include (via `return_properties`)\n    - All properties are returned by default\n- Which references to include (via `return_references`)\n- Which metadata to include\n    - No metadata is returned by default\n\nEach object includes its UUID as well as all properties by default.\n\nFor example:\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n#### `query` + group by\n\nResults of a query can be grouped by a property as shown here.\n\nThe results are organized by both their individual objects as well as the group.\n- The `objects` attribute is a list of objects, each containing a `belongs_to_group` property to indicate which group it belongs to.\n- The `group` attribute is a dictionary with each key indicating the value of the group, and the value being a list of objects belonging to that group.\n\n\n\n### `generate`\n\nThe RAG / generative search functionality is a two-step process involving a search followed by prompting a large language model. Therefore, function names are shared across the `query` and `generate` submodules, with additional parameters available in the `generate` submodule.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nOutputs of the `generate` submodule queries include `generate` attributes at the top level for the `grouped_task` tasks, while `generate` attributes attached with each object contain results from `single_prompt` tasks.\n\n### `aggregate`\n\nTo use the `aggregate` submodule, supply one or more ways to aggregate the data. For example, they could be by a count of objects matching the criteria, or by a metric aggregating the objects' properties.\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n#### `aggregate` + group by\n\nResults of a query can be grouped and aggregated as shown here.\n\nThe results are organized the group, returning a list of groups.\n\n\n\n### Collection iterator (`cursor` API)\n\nThe `v4` client adds a Pythonic iterator method for each collection. This wraps the `cursor` API and allows you to iterate over all objects in a collection.\n\nThis example fetches all the objects, and their properties, from the `questions` collection.\n\n\n\nYou can specify which properties to retrieve. This example fetches the `answer` property.\n\n\n\nYou can also specify which metadata to retrieve. This example fetches the `creation_time` metadata.\n\n\n\nSince the `cursor` API requires the object UUID for indexing, the `uuid` metadata is always retrieved.\n\nYou can also get the size of the collection by using the built-in `len` function.\n\n\n\n### Data model and generics\n\nYou can choose to provide a generic type to a query or data operation. This can be beneficial as the generic class is used to extract the return properties and statically type the response.\n\n\n\n## Migration guides\n\n### Beta releases\n\n\n  Migration guides - beta releases\n\n#### Changes in `v4.4b9`\n\n##### `weaviate.connect_to_x` methods\n\nThe `timeout` argument has been moved into the `additional_config` argument that takes the class `weaviate.config.AdditionalConfig` as input.\n\n##### Queries\n\nAll optional arguments to methods in the `query` namespace now are enforced as keyword arguments.\n\nThere is now runtime logic for parsing query arguments enforcing the correct type.\n\n##### Batch processing\n\nIntroduction of three distinct algorithms using different batching styles under-the-hood:\n- `client.batch.dynamic()`\n- `client.batch.fixed_size()`\n- `client.batch.rate_limit()`\n\n`client.batch.dynamic() as batch` is a drop-in replacement for the previous `client.batch as batch`, which is now deprecated and will be removed on release.\n```python\nwith client.batch.dynamic() as batch:\n  ...\n```\nis equivalent to:\n```python\nwith client.batch as batch:\n  ...\n```\n\n`client.batch.fixed_size() as batch` is a way to configure your batching algorithm to only use a fixed size.\n```python\nwith client.batch.dynamic() as batch:\n  ...\n```\nis equivalent to:\n```python\nclient.batch.configure_fixed_size()\nwith client.batch as batch:\n  ...\n```\n\n`client.batch.rate_limit() as batch` is a new way to help avoid hitting third-party vectorization API rate limits. By specifying `request_per_minute` in the\n`rate_limit()` method, you can force the batching algorithm to send objects to Weaviate at the speed your third-party API is capable of processing objects.\n\nThese methods now return completely localised context managers. This means that `failed_objects` and `failed_references` of one batch won't be included\nin any subsequent calls.\n\nFinally, if the background thread responsible for sending the batches raises an exception this is now re-raised in the main thread rather than silently erroring.\n\n##### Filters\n\nThe argument `prop` in `Filter.by_property` has been renamed to `name`\n\nRef counting is now achievable using `Filter.by_ref_count(ref)` rather than `Filter([ref])`\n\n#### Changes in `v4.4b8`\n\n##### Reference filters\n\nReference filters have a simplified syntax. The new syntax looks like this:\n\n```python\nFilter.by_ref(\"ref\").by_property(\"target_property\")\n```\n\n#### Changes in `v4.4b7`\n\n##### Library imports\n\nImporting directly from `weaviate` is deprecated. Use `import weaviate.classes as wvc` instead.\n\n##### Close client connections\n\nStarting in v4.4b7, you have to explicitly close your client connections. There are two ways to close client connections.\n\nUse `client.close()` to explicitly close your client connections.\n\n```python\nimport weaviate\nclient = weaviate.connect_to_local()\n\nprint(client.is_ready())\n\nclient.close()\n```\n\nUse a context manager to close client connections for you.\n\n```python\nimport weaviate\n\nwith weaviate.connect_to_local() as client:\n     print(client.is_ready())\n\n# Python closes the client when you leave the 'with' block\n```\n\n##### Batch processing\n\nThe v4.4b7 client introduces changes to `client.batch`.\n\n- `client.batch` requires a context manager.\n- Manual mode is removed, you cannot send batches with `.create_objects`.\n- Batch size and the number of concurrent requests are dynamically assigned. Use `batch.configure_fixed_size` to specify values.\n- The `add_reference` method is updated.\n- The `to_object_collection` method is removed.\n\nUpdated `client.batch` parameters\n\n| Old value | Value in v4.4b7 |\n| :-- | :-- |\n| from_object_uuid: UUID | from_uuid: UUID |\n| from_object_collection: str | from_collection: str |\n| from_property_name: str | from_property: str |\n| to_object_uuid: UUID | to: Union[WeaviateReference, List[UUID]] |\n| to_object_collection: Optional[str] = None | |\n| tenant: Optional[str] = None | tenant: Optional[str] = None |\n\n\n##### Filter syntax\n\nFilter syntax is updated in v4.4b7.\n\n**NOTE**: The filter reference syntax is simplified in 4.4b8.\n\n| Old syntax | New syntax in v4.4b7 |\n| :-- | :-- |\n| Filter(path=property) | Filter.by_property(property) |\n| Filter(path=[\"ref\", \"target_class\", \"target_property\"]) | Filter.by_ref().link_on(\"ref\").by_property(\"target_property\") |\n| FilterMetadata.ByXX | Filter.by_id() Filter.by_creation_time()  Filter.by_update_time() |\n\nThe pre-4.4b7 filter syntax is deprecated. The new, v4.4b7 syntax looks like this.\n\n```python\nimport weaviate\nimport datetime\nimport weaviate.classes as wvc\n\nclient = weaviate.connect_to_local()\n\njeopardy = client.collections.get(\"JeopardyQuestion\")\nresponse = jeopardy.query.fetch_objects(\n    filters=wvc.query.Filter.by_property(\"round\").equal(\"Double Jeopardy!\") &\n            wvc.query.Filter.by_creation_time().greater_or_equal(datetime.datetime(2005, 1, 1)) |\n            wvc.query.Filter.by_creation_time().greater_or_equal(datetime.datetime(2000, 12, 31)),\n            limit=3\n    )\n\n\nclient.close()\n```\n\n##### `reference_add_many` updated\n\nThe `reference_add_many` syntax is updated; `DataReferenceOneToMany` is now `DataReference`.\n\n```python\ncollection.data.reference_add_many(\n    [\n        DataReference(\n            from_property=\"ref\",\n            from_uuid=uuid_from,\n            to_uuid=*one or a list of UUIDs*,\n        )\n    ]\n)\n```\n\n##### References\n\nMulti-target references updated. These are the new functions:\n\n- `ReferenceProperty.MultiTarget`\n- `DataReference.MultiTarget`\n- `QueryReference.MultiTarget`\n\nUse `ReferenceToMulti` for multi-target references.\n\n#### Older client changes\n\n##### References\n\n* References are now added through a `references` parameter during collection creation, object insertion and queries. See examples for:\n    * Collection creation\n    * Cross-reference creation\n    * Queries\n* The `FromReference` class is now called `QueryReference`.\n\n##### Reorganization of classes/parameters\n\n* `weaviate.classes` submodule further split into:\n    * `weaviate.classes.config`\n    * `weaviate.classes.data`\n    * `weaviate.classes.query`\n    * `weaviate.classes.generic`\n* `vector_index_config` parameter factory functions for `wvc.config.Configure` and `wvc.config.Reconfigure` have changed to, e.g.:\n    ```python\n    client.collections.create(\n        name=\"YourCollection\",\n        # highlight-start\n        vector_index_config=wvc.config.Configure.VectorIndex.hnsw(\n            distance_metric=wvc.config.VectorDistances.COSINE,\n            vector_cache_max_objects=1000000,\n            quantizer=wvc.config.Configure.VectorIndex.Quantizer.pq()\n        ),\n        # highlight-end\n    )\n    ```\n    * `vector_index_type` parameter has been removed.\n* `vectorize_class_name` parameter in the `Property` constructor method is `vectorize_collection_name`.\n* `[collection].data.update()` / `.replace()` *args order changed, aiming to accommodate not providing properties when updating.\n* `[collection].data.reference_add` / `.reference_delete` / `.reference_replace` the `ref` keyword was renamed to `to`.\n* `collections.create()` / `get()`: `data_model` kwarg to keyword to provide generics was renamed to `data_model_properties` .\n* `[object].metadata.uuid` is now `[object].uuid`.\n* `[object].metadata.creation_time_unix` is now `[object].metadata.creation_time`.\n* `[object].metadata.last_update_time_unix` is now `[object].metadata.last_update`.\n* `quantitizer` is renamed to `quantizer`\n* To request the vector in the returned data, use the `include_vector` parameter (example).\n\n##### Data types\n\n* Time metadata (for creation and last updated time) now returns a `datetime` object, and the parameters are renamed to `creation_time` and `last_update_time` under `MetadataQuery`.\n    * `metadata.creation_time.timestamp() * 1000` will return the same value as before.\n* `query.fetch_object_by_id()` now uses gRPC under the hood (rather than REST), and returns objects in the same format as other queries.\n* `UUID` and `DATE` properties are returned as typed objects.\n\n\n\n## Best practices and notes\n\n### Thread-safety\n\nWhile the Python client is fundamentally designed to be thread-safe, it's important to note that due to its dependency on the `requests` library, complete thread safety isn't guaranteed.\n\nThis is an area that we are looking to improve in the future.\n\nPlease be particularly aware that the batching algorithm within our client is not thread-safe. Keeping this in mind will help ensure smoother, more predictable operations when using our Python client in multi-threaded environments.\n\nIf you are performing batching in a multi-threaded scenario, ensure that only one of the threads is performing the batching workflow at any given time. No two threads can use the same `client.batch` object at one time.\n\n### Response object structure\n\nEach query response object typically include multiple attributes. Consider this query.\n\n\n\nEach response includes attributes such as `objects` and `generated`. Then, each object in `objects` include multiple attributes such as `uuid`, `vector`, `properties`, `references`, `metadata` and `generated`.\n\n\n\nTo limit the response payload, you can specify which properties and metadata to return.\n\n\n\nThis is the formatted output.\n\n -->\n\n### Tab completion in Jupyter notebooks\n\nIf you use a browser to run the Python client with a Jupyter notebook, press `Tab` for code completion while you edit. If you use VSCode to run your Jupyter notebook, press  `control` + `space` for code completion.\n\n\n## Client releases\n\n\n\n\n## Change logs\n\nFor more detailed information on client updates, check the change logs. The logs\nare hosted here:\n\n- GitHub\n- Read the Docs\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-python", "path": "developers/weaviate/client-libraries/python.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/python", "timestamp": "2024-02-08 20:22:29", "reader": "JSON", "meta": {}, "chunks": []}