{"text": "\n\nThe Python client is currently in beta, and we want to hear from you.\n\nYou can test the new client locally, but it is not available on Weaviate Cloud Services (WCS) yet. \n\nIf you notice any bugs, or have any feedback, please let us know on this forum thread\n\n## Overview\n\nThis page describes the `v4` Python client for Weaviate. This client is also called the `collections` client, because the main interactions is with a collection. (Some Weaviate documentation still says \"Class\" instead of \"collection.\")\n\nThe full set of features is covered in the client documentation pages. This page covers key ideas and aspects of the new Python client.\n\n## Installation\n\nThe Python library is available on PyPI.org. The package can be installed using pip. The client is developed and tested for Python 3.8 to 3.12.\n\n```bash\npip install --pre \"weaviate-client==4.*\"\n```\n\n### Requirements\n\n#### Weaviate version\n\nThe `v4` client is only compatible with Weaviate `1.22.0` and higher. This is because it requires gRPC and gRPC is not available in earlier versions. If you are using an older version of Weaviate, please use the `v3` client.\n\n#### gRPC port\n\nYou have to open a port for gRPC on your Weaviate instance. The default port is `50051`. If you are running Weaviate locally, you can open this port by adding the following to your `docker-compose.yml` file:\n\n```yaml\n    ports:\n     - \"8080:8080\"\n     - \"50051:50051\"\n```\n#### WCS availability\n\nYou can test the new client locally, but it is not available on Weaviate Cloud Services (WCS) yet.\n\n## Instantiation\n\nYou can instantiate the client using one of multiple methods. For example, you can use one of the following helper `connect` functions:\n\n\n- `weaviate.connect_to_local()`\n- `weaviate.connect_to_embedded()`\n- `weaviate.connect_to_custom()`\n\nCurrently, WCS instances cannot be used with the `v4` client as they lack gRPC support. We are working on adding WCS support, and ask for your patience in the meantime.\n\nOr, you can instantiate a `weaviate.WeaviateClient` object directly.\n\nFor example, you can connect to a local instance like this:\n\n\n\n -->\n\nOr instantiate a client directly like this:\n\n\n\n#### API keys for external API use\n\nYou can pass on API keys for services such as Cohere, OpenAI and so on through additional headers.\n\nFor example, to use the OpenAI API, you can pass on the API key like this:\n\n\n\n#### Timeout values\n\nYou can also set timeout values for the client as a tuple  (connection timeout & read timeout time) in seconds.\n\n\n\n### Authentication\n\nSome helper `connect` functions allow you to pass on authentication credentials.\n\n -->\n\nFor authentication workflows not supported by the helper functions, you can pass on authentication credentials directly when instantiating the `WeaviateClient` object.\n\nFor example, you can pass on OIDC username and password like this:\n\n\n\n -->\n\nThe client also supports OIDC authentication with Client Credentials flow and Refresh Token flow. They are available through the `AuthClientCredentials` and `AuthBearerToken` classes respectively.\n\n## Key ideas\n\nThe `v4` client is also called the `collections` client, because the main interactions is with a collection (also called `Class` in Weaviate). (From here, we will use `collections` instead of `Class`.)\n\nThis client also includes custom Python classes to provide IDE assistance and typing help. You can import them individually, like so:\n\n```\nfrom weaviate.classes import Property, ConfigFactory, DataObject\n```\n\nBut it may be convenient to import the whole set of classes like this.\n\n```\nimport weaviate.classes as wvc\n```\n\n## Collection methods\n\nOperations in the `v4` client are grouped into submodules. The key submodules for interacting with objects are:\n\n- `data`: CUD operations (read operations are in `query`)\n- `query`: Search operations\n- `aggregate`: Aggregation operations\n- `generate`: Retrieval augmented generation operations\n- `query_group_by`: Object-level group by operations\n- `aggregate_group_by`: Aggregation-level group by operations\n\n### Collection iterator (`cursor` API)\n\nThe `v4` client adds a Pythonic iterator method for each collection. This wraps the `cursor` API and allows you to iterate over all objects in a collection.\n\nThis will fetch all objects in the `articles` collection, including most of its properties and metadata.\n\n\n\nYou can specify what properties to retrieve. This will only fetch the `title` property. Doing so will switch off default metadata retrieval.\n\n\n\nYou can also specify what metadata to retrieve. This will only fetch the `uuid` metadata. Doing so will switch off default property retrieval.\n\n\n\nNote that as the `cursor` API inherently requires the object UUID for indexing, the `uuid` metadata is always retrieved.\n\n### Data model / generics\n\nYou can choose to provide a generic type to a query or data operation. This can be beneficial as the generic class is used to extract the return properties and statically type the response.\n\n\n\n## Best practices and notes\n\n### Thread-safety\n\nWhile the Python client is fundamentally designed to be thread-safe, it's important to note that due to its dependency on the `requests` library, complete thread safety isn't guaranteed.\n\nThis is an area that we are looking to improve in the future.\n\nPlease be particularly aware that the batching algorithm within our client is not thread-safe. Keeping this in mind will help ensure smoother, more predictable operations when using our Python client in multi-threaded environments.\n\nIf you are performing batching in a multi-threaded scenario, ensure that only one of the threads is performing the batching workflow at any given time. No two threads can use the same `client.batch` object at one time.\n\n### Print formatting\n\nThe collections object returns a lot of additional information when you query the collections object. Consider this simple query. \n\n```python\njeopardy = client.collections.get(\"JeopardyQuestion\")\n\nresponse = jeopardy.query.fetch_objects( limit=1 )\n\nprint(response)\n```\n\nThe response includes a lot of extra information you may not always want.\n\n```\n_QueryReturn(objects=[_Object(properties={'points': 100.0, 'answer': 'Jonah', 'air_date': '2001-01-10T00:00:00Z', 'round': 'Jeopardy!', 'question': 'This prophet passed the time he spent inside a fish offering up prayers'}, metadata=_MetadataReturn(uuid=UUID('0002bf92-80c8-5d94-af34-0d6c5fea1aaf'), vector=None, creation_time_unix=1699540272055, last_update_time_unix=1699540273460, distance=None, certainty=None, score=0.0, explain_score='', is_consistent=False))])\n```\n\nTo limit the response and format it as JSON, use `json.dump()s` to print the response `properties` field.\n\n```python\nresponse = jeopardy.query.fetch_objects( limit=1 )\n\n# print result objects \nfor o in response.objects:\n    print(json.dumps(o.properties, indent=2))\n```\n\nThis is the formatted output.\n\n```\n{\n  \"points\": 100.0,\n  \"answer\": \"Jonah\",\n  \"air_date\": \"2001-01-10T00:00:00Z\",\n  \"round\": \"Jeopardy!\",\n  \"question\": \"This prophet passed the time he spent inside a fish offering up prayers\"\n}\n```\n\n### Tab completion in Jupyter notebooks\n\nIf you use a browser to run the Python client with a Jupyter notebook, press `Tab` for code completion while you edit. If you use VSCode to run your Jupyter notebook, press  `control` + `space` for code completion. \n\n### Object properties and metadata\n\nThe new client uses the `return_properties` and `return_metadata` query parameters to examine objects in the database. These parameters work differently. \n\n- `return_properties` takes a list of strings.\n- `return_metadata` is a data class. To work with the class, import the `weaviate.classes` package. You can pass boolean values to select the fields you want.\n\nConsider this example.\n\n```python\nimport weaviate.classes as wvc\n\njeopardy = client.collections.get(\"JeopardyQuestion\")\nresponse = jeopardy.query.fetch_objects(\n    return_metadata=wvc.MetadataQuery(uuid=True),\n    return_properties=[\"question\", \"answer\", \"points\"], \n    limit=3\n)\n\nfor r in response.objects:\n   print( r.metadata.uuid )\n   print( r.properties['points'] )\n   print()\n``` \n\nThis is the output.\n\n```none\n0002bf92-80c8-5d94-af34-0d6c5fea1aaf\n100.0\n\n00031ce9-ef72-5447-a02a-851f221d7359\n400.0\n\n0003b234-14d3-5ea6-b4b5-0fb0a6dcc43c\n800.0\n```\n### Vectors and metadata\n\nBy default `return_metadata` does not return the object vector. To return the vector, set\n`vector=True` when you use the `return_metadata` parameter. \n\nIf you import the `weaviate.classes` helper package, the call looks like this.\n\n```python\nimport weaviate.classes as wvc\n\njeopardy = client.collections.get(\"JeopardyQuestion\")\nresponse = jeopardy.query.fetch_objects(\n    return_metadata=wvc.MetadataQuery(vector=True),\n    limit=1\n)\n``` \n\n\n\n## Client releases\n\n\n\n\n## Change logs\n\nFor more detailed information on client updates, check the change logs. The logs\nare hosted here:\n\n- GitHub\n- Read the Docs\n\n\n\n\n", "type": "Documentation", "name": "client-libraries-python", "path": "developers/weaviate/client-libraries/python.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/python", "timestamp": "2023-11-13 10:40:23", "reader": "JSON", "meta": {}, "chunks": []}