{"text": "\n\n\nThis page illustrates various use cases for vector databases by way of open-source demo projects. You can fork and modify any of them.\n\nIf you would like to contribute your own project to this page, please let us know by creating an issue on GitHub.\n\nDuring October 1-31, 2023, we are hosting a community sprint to onboard engineers and machine learning practitioners to their first open source contribution.\n\nDemos that are marked with a pumpkin \ud83c\udf83 sign are looking for contributions. For more info, checkout the Hacktoberfest 2023 blog post.\n\n## Similarity search\n\nA vector databases enables fast, efficient similarity searches on and across any modalities, such as text or images, as well as their combinations. Vector database' similarity search capabilities can be used for other complex use cases, such as recommendation systems in classical machine learning applications.\n\n|Title | Description | Modality | Code |\n| --- | --- | --- | --- |\n| \ud83c\udf83 Plant search | Semantic search over plants.  | Text | Javascript |\n| \ud83c\udf83 Wine search | Semantic search over wines. | Text | Python |\n| Book recommender system (Video, Demo) | Find book recommendations based on search query. | Text | TypeScript |\n| Movie recommender system | Find similar movies. | Text | \ud83d\udee0\ufe0f |\n| Multilingual Wikipedia Search | Search through Wikipedia in multiple languages. | Text | TypeScript |\n| \ud83c\udf83 Podcast search | Semantic search over podcast episodes. | Text | Python |\n| \ud83c\udf83 Video Caption Search| Find the timestamp of the answer to your question in a video. | Text | Python |\n| \ud83c\udf83 Facial Recognition | Identify people in images | Image | Python |\n| \ud83c\udf83 Image Search over dogs (Blog) | Find images of similar dog breeds based on uploaded image. | Image | Python |\n| \ud83c\udf83 Text to image search | Find images most similar to a text query. | Multimodal | Javascript |\n| \ud83c\udf83 Text to image and image to image search | Find images most similar to a text or image query. | Multimodal | Python |\n\n## LLMs and search\n\nVector databases and LLMs go together like cookies and milk!\n\nVector databases help to address some of large language models (LLMs) limitations, such as hallucinations, by helping to retrieve the relevant information to provide to the LLM as a part of its input.\n\n|Title | Description | Modality | Code |\n| --- | --- | --- | --- |\n| Verba, the golden RAGtriever (Video, Demo) | Retrieval-Augmented Generation (RAG) system to chat with Weaviate documentation and blog posts. | Text | Python |\n| HealthSearch (Blog, Demo) | Recommendation system of health products based on symptoms. | Text  | Python |\n| Magic Chat | Search through Magic The Gathering cards | Text | Python |\n| AirBnB Listings (Blog) | Generation of customized advertisements for AirBnB listings with Generative Feedback Loops | Text | Python |\n| Distyll | Summarize text or video content. | Text | Python |\n\n\nLearn more in our LLMs and Search blog post.\n\n## Classification\n\nWeaviate can leverage its vectorization capabilities to enable automatic, real-time classification of unseen, new concepts based on its semantic understanding.\n\n|Title | Description | Modality | Code |\n| --- | --- | --- | --- |\n| \ud83c\udf83 Toxic Comment Classification | Clasify whether a comment is toxic or non-toxic. | Text | Python |\n| \ud83c\udf83 Audio Genre Classification | Classify the music genre of an audio file. | Image | Python |\n\n## Other use cases\n\nWeaviate's modular ecosystem unlocks many other use cases of the Weaviate vector database, such as Named Entity Recognition or spell checking.\n\n|Title | Description | Code |\n| --- | --- | --- |\n| Named Entity Recognition (NER)| tbd |  Python |\n\n\n\n\n", "type": "Documentation", "name": "more-resources-example-use-cases", "path": "developers/weaviate/more-resources/example-use-cases.md", "link": "https://weaviate.io/developers/weaviate/more-resources/example-use-cases", "timestamp": "2023-11-02 10:53:36", "reader": "JSON", "meta": {}, "chunks": []}