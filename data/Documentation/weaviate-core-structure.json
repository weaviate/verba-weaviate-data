{"text": "\n## Package structure\n\nWeaviate's package structure is modelled after [Clean\nArchitecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html).\n\n### Why Clean Architecture?\n\nWe believe Clean Architecture is a good fit for Weaviate. Besides the benefits\nlisted on the Clean Architecture page, we think it's a great fit for the\nfollowing reasons:\n\n* It works well with Go. Concentrating \"business-wide\" structures in an inner\n  \"entity\" package which does not depend on any outside package fits well with\n  Go. It helps avoid cyclical import issues.\n* The Go philosophy of \"Consumer owns the interface\" and implicit interfaces\n  fits very well with this model. A use case (inner layer) defines what it\n  needs from an adapter (e.g. handler, database) of an outer layer. It\n  therefore does not need to know which outer layers exist\n* The general goal of pluggability is important to Weaviate: Over the history of\n  Weaviate the persistence layer has changed considerably. Originally it\n  depended on Janusgraph, which was later migrated to Elasticsearch. As of\n  `v1.0.0` the persistence is done \"in-house\", but the same abstraction\n  principles apply. While we now no longer switch vendors, we might still\n  switch implementations.\n\n### How we use Clean Architecture\n\n* The most central \"entities\" are found in the `./entities` subpackages.\n  `entities/models` are auto-generated from go-swagger, whereas the remaining\n  entities are custom-built. Note that allowing framework-generated packages to\n  be entities is not in line with Clean Architecture. This is mostly due to\n  historic reasons. Entities are mostly structures with properties. Methods on\n  those structures are mainly accessor methods.\n* The usecases are located in the `./usecase` folder. This is where most of the\n  application-specific business logic sits. For example CRUD logic and its\n  validation sits in the `usecases/kinds` package and methods to traverse the\n  graph are in the `usecases/traverser` package. All of these packages are\n  agnostic of the API-types (GraphQL, REST, etc) as well as agnostic of the\n  persistence layer (legacy-Elasticsearch, Standalone, etc.)\n* Interface adapters are located in `./adapters`. The `adapters/handlers`\n  folder contains subpackages for the GraphQL (`adapters/handlers/graphql`) and\n  REST (`adapters/handlers/rest`) packages. Note that since GraphQL is served\n  via REST it is not truly independent from the REST api package, but is\n  actually served through this package by the same webserver.\n\n  The `adapters/repos` package is where most of the database-logic resides.\n  Traditionally these contained subpackages for all the supported third-party\n  backends, (e.g. `adapters/repos/esvector` for the Vector-Enabled\n  Elasticsearch instance or `adapters/repos/etcd` for the consistent\n  configurations storage in etcd). With the move to Weaviate Standalone, the\n  custom database logic is located in `adapters/repos/db`.\n\n## Code Style\n\nThe following guidelines help us write clean and maintainable code:\n\n* Use the principles outlined in \"Clean Code\" by Robert C. Martin\n  pragmatically. This means they should act as a guide, but do not need to be\n  followed religiously.\n* Write code that is idiomatic for the respective language. For Weaviate, which\n  is a Golang-application, adhere to the principles outlined in [Effective\n  Go](https://golang.org/doc/effective_go.html)\n* Use linters and other tools as helpers. If a linter can prevent us from\n  writing bad code, it's a good linter. If it annoys us, it's not.\n* Format all code using gofumports.\n  `gofumports` is the `goimports`-enabled version of `gofumpt`. `Gofumpt`\n  itself is a stricter version of `golint`. Stricter in this case does not mean\n  that it should restrict us more. Since it is fully auto-format compatible it\n  takes boring decisions away from us and makes sure code looks consistent\n  regardless of who wrote it.\n* Use golangci-lint to combine\n  various meta linters. The current config can be found in `.golangci.yml`. It\n  is inspired by the settings on [Go Report\n  Card](https://goreportcard.com/report/github.com/weaviate/weaviate)\n  where Weaviate holds an A+ rating.\n* Keep methods short.\n* Don't comment obvious things, comment intent on decisions you took that might\n  not be 100% obvious. It's better to have a few 100-line comments, than to\n  have 100s of 1-line comments which don't add any value.\n\n## More Resources\n\n\n\n", "type": "Documentation", "name": "weaviate-core-structure", "path": "developers/contributor-guide/weaviate-core/structure.md", "link": "https://weaviate.io/developers/contributor-guide/weaviate-core/structure", "timestamp": "2024-02-08 20:21:49", "reader": "JSON", "meta": {}, "chunks": []}