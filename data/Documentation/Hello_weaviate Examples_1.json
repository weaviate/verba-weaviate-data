{"text": "\n##  Vectors in action\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\nLet's take a look at a few more examples of what you can do with Weaviate.\n\nFirst, we will try vector searches by searching through our demo database. You will learn how to use Weaviate to retrieve objects based on their similarity, using various query types such as an input text, vector, or object.\n\nYou will also compare vector search with keyword search to compare and contrast the two techniques, before learning how to combine the two techniques through the use of filters.\n\n###  Vector search demo\n\nFor our first example, let's search our demo dataset. It contains a small sample of questions from the quiz show *Jeopardy!*.\n\nImagine that you're running a quiz night, and you want to get some questions about \"animals in movies\". In a traditional database you could look for word matches, perhaps something like:\n\n```sql\nSELECT question, answer\nFROM jeopardy_questions\nWHERE (\n         question LIKE '%animal%'\n         OR question LIKE '%creature%'\n         OR question LIKE '%beast%'\n      )\nAND (\n       question LIKE '%movie%'\n       OR question LIKE '%film%'\n       OR question LIKE '%picture%'\n       OR question LIKE '%cinema%'\n    )\n\n```\n\nThis is a difficult query to write. Even worse, you would probably have to add the names of specific animals to the query as well.\n\nThe Weaviate query is much more intuitive. See what happens when we run the following query:\n\nanimals in movies\n\nWeaviate retrieved these as the top answers:\n\n- **meerkats**: Group of mammals seen here like Timon in *The Lion King*\n- **dogs**: Scooby-Doo, Goofy & Pluto are cartoon versions\n- **The Call of the Wild Thornberrys**: Jack London story about the dog Buck who joins a Nick cartoon about Eliza, who can talk to animals\n\nNote how relevant the results are, despite none of them including the word \"animal\" or the word \"movie\", let alone both!\n\nThis is exactly why vector searches are so useful. They can identify related objects without the need to match exact text.\n\n###  Vector similarities\n\nIn vector searches, you can retrieve the actual quantified similarity between the query and the returned objects. This is called the `distance`.\n\nA `distance` is indicative of the degree of similarity between the returned object and the query.\n\nIf you're wondering exactly what that means, and who decides how similar any two objects or concepts are, those are great questions! We will cover those in more detail later.\n\nFor now, just keep in mind that smaller distances mean two objects are more similar to each other.\n\n##  Review\n\n -->\n\n Review exercise\n\nCan you describe, in your own sentence, XXX?\n\nInput box for user to put answer in and get back a similarity score & our definition?\n??\n\n###  Key takeaways\n\n- Vector searches can identify related objects without the need for exact text matches.\n- In vector searches, distance values indicate the degree of similarity between the returned object and the query.\n- Smaller distances indicate greater similarity.\n- Vector searches can be combined with keyword searches and filtering techniques for more refined search results.\n\n\n", "type": "Documentation", "name": "Hello_weaviate Examples_1", "path": "developers/academy/theory/101_hello_weaviate/20_examples_1.mdx", "link": "https://weaviate.io/developers/academy/theory/hello_weaviate/examples_1", "timestamp": "2024-05-08 10:48:58", "reader": "JSON", "meta": {}, "chunks": []}