{"text": "\n[Batch imports](../tutorials/import.md#to-batch-or-not-to-batch) are an efficient way to add multiple data objects and cross-references.\n\n\n\n  Additional information\n\nTo create a bulk import job, follow these steps:\n\n1. Initialize a batch object.\n1. Add items to the batch object.\n1. Ensure that the last batch is sent (flushed).\n\n\n\n## Basic import\n\nThe following example adds objects to the `YourName` collection.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Specify an ID value\n\nWeaviate generates an UUID for each object. Object IDs must be unique. If you set object IDs, use one of these [deterministic UUID](#generate-a-deterministic-id) methods to prevent duplicate IDs:\n\n- [`generate_uuid5`](https://weaviate-python-client.readthedocs.io/en/stable/weaviate.util.html#weaviate.util.generate_uuid5) (Python)\n- `generateUuid5` (TypeScript)\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Specify a vector\n\nUse the `vector` property to specify a vector for each object.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Specify named vectors\n\n\nWhen you create an object, you can specify named vectors (if [configured in your collection](./collections.mdx#define-multiple-named-vectors)).\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Import with references\n\nYou can batch create links from an object to another other object through cross-references.\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n## Python-specific batching\n\nThe Python clients have built-in batching methods to help you optimize your import speed. Please see the relevant documentation for more information.\n\n- [Batching: Python client `v4`](../client-libraries/python/index.md#batching)\n- [Batching: Python client `v3`](../client-libraries/python/python_v3.md#batching)\n\n## Stream data from large files\n\nIf your dataset is large, consider streaming the import to avoid out-of-memory issues.\n\n\n\n\n  \n\n  \n\n  \n  \n\n  \n\n  \n  \n\n  \n\n  \n  \n\n  \n\n  \n  \n\n  \n\n  \n  \n\n  \n\n  \n\n\n## Additional considerations\n\n\nTo maximize import speed, enable [asynchronous indexing](/developers/weaviate/config-refs/schema/vector-index#asynchronous-indexing) and use gRPC batch imports.\n\nAsynchronous indexing is an experimental feature in `1.22`, and may not be suitable for production use. The [Python client `v4`](../client-libraries/python/index.md) uses gRPC. If you cannot use the new client, access the [gRPC API directly](../api/grpc.md).\n\nTo enable asynchronous indexing, set the `ASYNC_INDEXING` environment variable to `true` in your Weaviate configuration file.\n\n```yaml\nweaviate:\n  image: cr.weaviate.io/semitechnologies/weaviate:||site.weaviate_version||\n  ...\n  environment:\n    ASYNC_INDEXING: 'true'\n  ...\n```\n\n## Related pages\n\n- [Connect to Weaviate](/developers/weaviate/starter-guides/connect.mdx)\n- [How-to: Create objects](./create.mdx)\n- [References: REST - /v1/batch](/developers/weaviate/api/rest#tag/batch)\n- [Configuration: Indexes](/developers/weaviate/config-refs/schema/vector-index#asynchronous-indexing)\n\n\n", "type": "Documentation", "name": "Manage-data Import", "path": "developers/weaviate/manage-data/import.mdx", "link": "https://weaviate.io/developers/weaviate/manage-data/import", "timestamp": "2024-05-08 10:50:11", "reader": "JSON", "meta": {}, "chunks": []}