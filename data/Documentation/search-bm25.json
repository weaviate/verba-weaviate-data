{"text": "\n\n\n\n## Overview\n\nThis page shows you how to perform keyword searches.\n\nA keyword search looks for objects that contain the search terms in their properties according to the selected tokenization. The results are scored according to the BM25F function, and thus a keyword search is also called the `bm25` search in Weaviate. It is also called a sparse vector search.\n\nStarting in `v1.19.0`, BM25 search has improved accuracy for schemas with a large number of properties and for zero-length properties. If you are using an earlier version, please upgrade.\n\n## Basic BM25 search\n\nTo use BM25 search, you must provide a search string as a minimum.\n\nThis example uses default settings to look for objects containing the keyword `food` anywhere in the object.\n\nIt ranks the results using BM25F, and returns the top 3.\n\n\n\n  \n  \n\n  \n\n\n  \n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\nFor additional details, see the BM25 API Reference\n\n### Score\n\nThe `score` sub-property is the BM25F score used to rank the outputs. It can be retrieved under the `_additional` property.\n\nThis example adds the `score` property to the list of retrieved properties.\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Limit the results\n\nYou can limit the number of results returned by a `bm25` search,\n- to a fixed number, using the `limit: ` operator\n- to the first N \"drops\" in `score`, using the `autocut` operator\n\n`autocut` can be combined with `limit: N`, which would limit autocut's input to the first `N` objects.\n\n### Limiting the number of results\n\nUse the `limit` argument to specify the maximum number of results that should be returned:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Autocut\n\nAnother way to limit the results returned by a similarity search is to use the `autocut` filter. Autocut takes a positive integer parameter `N`, looks at the score of each result, and stops returning results after the `N`th \"drop\" in score. For example, if the distances for six objects returned by a `bm25` query were `[2.676, 2.021, 2.022, 1.854, 1.856, 1.713]` then `autocut: 1` would return the first object, `autocut: 2` would return the first 3 objects, and `autocut: 3` would return all objects.\n\nAutocut can be used as follows:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Selected properties only\n\nStarting in v1.19.0, you can specify the object `properties` to search in.\n\nThis example searches for objects that have the keyword `food`, but only when `food` is in the `question` property. The query use the BM25F scores of the searched property to rank the objects it finds, and it returns the top 3.\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Weight (boost) searched properties\n\nYou can specify weighting of object `properties` in how they affect the BM25F score.\n\nThis example searches for objects that contain the keyword `food` in the `question` property and the `answer` property. Weaviate boosts the `question` property's weighting by 2, scores the results, and returns the top 3.\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Tokenization\n\nThe BM25 query string is tokenized before it is used to search for objects using the inverted index. Due to the nature of BM25 scoring, Weaviate will return any object that matched at least one of the tokens.\n\nThis example returns objects that contain either `food` or `wine` in the `question` property, and ranks them using BM25F scores.\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  Example response\n\nThe query should produce a response like the one below:\n\n\n\n\n\n\n## Add a conditional (`where`) filter\n\nYou can add a conditional filter to any BM25 search query, which will filter the outputs but not impact the ranking.\n\nThis example searches for objects have the keyword `food` in any field and that have the `round` property set to `Double Jeopardy!`. It ranks them using BM25F and returns the top 3.\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Related pages\n\n- API References: Search operators # BM25\n\n\n\n\n", "type": "Documentation", "name": "search-bm25", "path": "developers/weaviate/search/bm25.md", "link": "https://weaviate.io/developers/weaviate/search/bm25", "timestamp": "2023-11-02 10:53:44", "reader": "JSON", "meta": {}, "chunks": []}