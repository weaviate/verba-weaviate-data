{"text": "\n\n\n\n## Overview\n\nThis page shows you how to rerank a result set returned by a search.\n\nA reranker algorithm is applied after a search on the retrieved results. Thus a reranker algorithm can apply a different set of criteria, or simply use a different algorithm.\n\nFor example, a more computationally expensive (and accurate) algorithm can be used for reranking, as it is only applied to a subset of the data.\n\n- API References: GraphQL - Additional properties\n- Concepts: Reranking\n- References: Modules: reranker-cohere\n- References: Modules: reranker-transformers\n\n\n## Requirements\n\nTo rerank search results, you'll need set the class with an enabled reranker module.\n\nYou can rerank results using:\n- The same query as the initial search, or\n- A different reranking query.\n\n\n  How do I set the reranker module in the target class?\n\n\n\nIf there is only one `reranker` module enabled, you don't need to do anything. The `reranker` module will be used by default.\n\n\nWhere multiple `reranker` modules are enabled, you must specify the reranker module to be used in the `moduleConfig` section of the schema. For example, this configures the `Article` class to use the `reranker-cohere` module:\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Article\",\n      ...,\n      \"moduleConfig\": {\n        \"reranker-cohere\": {},  // This will configure the 'Article' class to use the 'reranker-cohere' module\n      }\n    }\n  ]\n}\n```\n\nYou may be able to set additional module parameters here. Please refer to the \"Schema configuration\" section in the relevant module page.\n\n\n\n\n\n## Reranking vector search results\n\nUsing the JeopardyQuestions dataset, let's say we want to find Q&As about flying, and further sort towards the top those about floating. We can start with a `nearText` search for `flying`, limited to 10 results:\n\n\n  \n    \n  \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe response should look like this:\n\n  \n\n\n\nWe can see that results pertaining to floating aircraft (balloons/blimps/dirigibles) are mixed in with other results (animals, mail). To sort floating results to the top, we can apply the `rerank` operator:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe response should look like this:\n\n  \n\n\n\nWe can see in the `rerank`ed result set, that answers are sorted descending by the `_additional.rerank[0].score` field, and those involving balloons/dirigibles/blimps are sorted towards the top.\n\n\n## Reranking bm25 search results\n\nThe example below uses `rerank` in a `bm25` query to sort the top results for the query `\"paper\"` towards `\"publication\"` to disambiguate from those related to other meanings, such as the material \"paper\".\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe response should look like this:\n\n  \n\n\n\n\n\n\n\n", "type": "Documentation", "name": "search-rerank", "path": "developers/weaviate/search/rerank.md", "link": "https://weaviate.io/developers/weaviate/search/rerank", "timestamp": "2023-11-13 10:41:34", "reader": "JSON", "meta": {}, "chunks": []}