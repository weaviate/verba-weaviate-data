{"text": "\n\n## Overview\n\nTo ensure security in a production environment, Weaviate instances on Weaviate Cloud Services (WCS) come pre-configured with authentication enabled (except for sandbox instances, where it is optional).\n\n### Authentication options\n\nYou have two options for authenticating into a WCS instance.\n- Using an **API key** (recommended method), or\n- Using the account owner's **WCS username and password**.\n\nGenerally, we recommend authenticating with the API key, using a Weaviate client (e.g. Python client).\n\n### API key permissions\n\nAll Weaviate instances with authentication will generate API keys with full admin (read and write) access.\n\nEach paid WCS instance will also come with a read-only API key in addition to the full admin API key.\n\n### Manage API keys\n\nYou can create and delete individual API keys for your (non-sandbox) instances, as well as get their details.\n\nTo do so, first click Details button for your cluster, followed by the API keys  button.\n\nThis will show a list of your available keys as a table, as well as their permissions (scope).\n\n- To create a key, click the Add key button and follow the instructions.\n- To delete a key, click on the trash can icon  next to the relevant key.\n- To copy a key, click on the copy can icon  next to the relevant key.\n\nPlease ensure that your API key is kept secret for security. The above image is for demonstration purposes only.\n\n## Steps for authentication\n\n### An API key\n\nTo authenticate against Weaviate with an API key, each request needs to include the key in its header. The easiest way to do this is with a Weaviate client at instantiation, as shown in the code examples below:\n\n\n\n\nThis way, every request made using the client will include the API key.\n\n\n  Manually adding the key to the header.\n\nIf using a Weaviate client is not possible, you can manually include the API key in the request header as below:\n\n```json\nAuthorization: Bearer YOUR-WEAVIATE-API-KEY\n```\n\nReplacing `YOUR-WEAVIATE-API-KEY` with your API key.\n\n\n\n### WCS username and password\n\nTo authenticate against Weaviate with your WCS username and password, each request needs to include the an OpenID Connect (OIDC) token in its header. As with the API key-based authentication, the easiest way to do this is with a Weaviate client at instantiation, by providing your WCS username and password as shown below:\n\n\n\n\nThis way, every request made using the client will include an OIDC token.\n\n\n  Manually adding the key to the header.\n\nIf using a Weaviate client is not possible, you can manually include an OIDC token in the request header as below.\n\n```json\nAuthorization: Bearer TOKEN\n```\n\nReplacing `TOKEN` with your OIDC token.\n\nPlease note that OIDC tokens will periodically expire, so new tokens must be obtained and used. This can be done using the \"refresh token\", however this is outside the scope of the documentation.\n\nTo automate this workflow, we strongly recommend that you use your preferred Weaviate client library for username and password-based authentication.\n\n\n\nThis is the \"Resource Owner Password Flow\" method.\n\n### Weaviate console\n\nIf you are using the GraphQL console to query WCS instances under the same account, the console will automatically include the relevant credentials for you. In other words, your queries will be automatically authenticated.\n\nIf you are querying an external Weaviate instance through the WCS console, you can pass authentication credentials (e.g. your API key) in this format:\n\n```json title=\"Headers tab\"\n{ \"Authorization\": \"Bearer YOUR_API_KEY\" }\n```\n\nPass the credentials as an additional header via the `Header` tab located towards the bottom of the console:\n\n\n\nThis will authenticate your requests against the Weaviate instance.\n\n## Resetting credentials\n\nIf you would like to reset your credentials, you can do so as follows:\n\n- To revoke your API key, navigate to the Details button as described here.\n- To reset your WCS password, you can do so from WCS (click \"Sign In\" and then \"Forgot Password\").\n\n## Read more\n\nIf you are interested, you can read more about authentication below:\n\n- Authentication with Weaviate clients:\n    - Python\n    - TypeScript/JavaScript\n    - Go\n    - Java\n- About OIDC.\n- About KeyCloak, the OIDC token issuer server used with WCS.\n\n## More resources\n\n\n\n", "type": "Documentation", "name": "guides-authentication", "path": "developers/wcs/guides/authentication.mdx", "link": "https://weaviate.io/developers/wcs/guides/authentication", "timestamp": "2023-11-13 10:39:53", "reader": "JSON", "meta": {}, "chunks": []}