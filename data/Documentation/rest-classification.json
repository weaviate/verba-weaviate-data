{"text": "\n\n## Start a classification\n\nWeaviate's classification features allows you to classify data objects based on their vector.\n\n- **kNN classification**: Uses the k-nearest neighbors algorithm to predict a property.\n  - This requires existing training data.\n  - The target property should be a reference property to another class.\n\nNote that `knn` classification requires the target property to be included in the schema before importing the data. If you want to add a property to the schema after importing data, you will need to re-import the data).\n\nIf `text2vec-contextionary` is enabled, contextual classification can also be used.\n\n- **Contextual classification**: Predicts cross-references based on the context.\n  - This does not require training data.\n  - This works best when there is a strong semantic relation in your data (e.g., `The Landmark Eiffel Tower` and `The City Paris`).\n\nClassification can triggered to run in the background with a `POST` request, and the `GET` method can be used to view its status.\n\n\n\n\nThe endpoint will return information about the started classification. The response will include the classification `id`.\n\n## Clients and async classification\n\nClassification jobs can take some time to complete. With the Weaviate clients, you can:\n  - Wait for the classification function to finish before continuing with the rest of the script.\n    - `Python`: add `with_wait_for_completion()` to the builder pattern.\n    - `Go`: add `.WithWaitForCompletion()` to the builder pattern.\n    - `JavaScript`: add `.withWaitForCompletion()` to the builder pattern.\n  - Don't wait for the classification to be finished and return directly.\n    - You can check the classification task status using the classification endpoint with the task `id`. The field `status` in the return body will either be `running` or `completed`. See here how to query this information.\n\n## Classification status, results and metadata\n\nA `GET` request can return the status, results and metadata of a previously created classification:\n\n### Method\n\n```js\nGET /v1/classifications/{id}\n```\n\n### Parameters\n\nThe classification `id` should be passed to the request. This `id` is obtained from the result of starting the classification.\n\n### Response\n\nIt returns the following fields for all classification types:\n```json\n{\n  \"id\": \"string\", // classification id\n  \"class\": \"string\", // class name of the classified data objects\n  \"classifyProperties\": [ \"string\" ], // list of the class properties that are (to be) classified\n  \"basedOnProperties\": [ \"string\" ], // list of the class properties that the classification is based on\n  \"status\": \"string\", // status of the classification, can be \"running\" or \"completed\"\n  \"meta\": {\n    \"started\": \"timestamp\",\n    \"completed\": \"timestamp\",\n    \"count\": int, // total number of items to classify (only if \"status\" is completed)\n    \"countSucceeded\": int, // total number of items that succeeded (only if \"status\" is completed)\n    \"countFailed\": int // total number of items that failed (only if \"status\" is completed, only if >0)\n  },\n  \"type\": \"string\", // the type of classification, can be \"knn\" or a module specific classification\n  \"settings\": {}, // additional settings specific to the classification type\n  \"filters\": { // additional filters specific to the data objects to include in the classification, Where filters according to the GraphQL Where filter design\n    \"sourceWhere\": { \u2026 },\n    \"trainingSetWhere\": { \u2026 },\n    \"targetWhere\": { \u2026 },\n  }\n}\n```\n\nThe following fields additionally when the classification was based on kNN:\n```json\n{\n  \"settings\": {\n    \"k\": int, // the number of neighbors taken in the classification\n  }\n}\n```\n\n### Example\n\nA `knn` classification according to the example\nThe following command:\n\n\n\n\nreturns:\n\n```json\n{\n  \"basedOnProperties\": [\n    \"summary\"\n  ],\n  \"class\": \"Article\",\n  \"classifyProperties\": [\n    \"hasPopularity\"\n  ],\n  \"id\": \"ee722219-b8ec-4db1-8f8d-5150bb1a9e0c\",\n  \"meta\": {\n    \"completed\": \"0001-01-01T00:00:00.000Z\",\n    \"started\": \"2020-09-09T14:57:08.468Z\"\n  },\n  \"minimumUsableWords\": 3,\n  \"status\": \"running\",\n  \"tfidfCutoffPercentile\": 80,\n  \"type\": \"knn\",\n  \"settings\": {\n    \"k\": 3,\n  }\n}\n```\n\n\n## KNN classification\n\nWeaviate performs the `knn` classification based on vector similarity between data objects.,\n\nDue to the nature of the *k*-nearest neighbor algorithm, the quality of the classification will be a function of the quantity and quality of the pre-existing data.\n\n\n\n### Requirements\n\n- A schema with a class to be classified, and a class to store the classification.\n  - A cross-reference from the class to be classified to the class to store the classification.\n- Training data within the class to store the classification.\n- Vectors for the class to be classified.\n\n### Parameters\n\n**Required**:\n- `type: \"knn\"`: the type of the classification, which is \"knn\" here.\n- `class`: the class name of the data objects to be classified.\n- `classifyProperties`: an array containing the target, cross-reference, property name of the class to be classified.\n- `basedOnProperties`: an array containing a property name.\n\nThe current knn implementation uses the object vector, but requires the `basedOnProperties` to be an array with one valid text property name.\n\n**Optional, with default values:**\n- `settings {k: 3}`. The number of neighbors to base the classification on.\n- Parameters to add limitations (based on e.g. background business knowledge).\n  - `filters: {}` with the following possible properties:\n    - `sourceWhere: {}`. Parameter to determine which data objects to classify (i.e. to leave out some data objects).\n    - `targetWhere: {}`. Parameter to limit possible targets (i.e. to exclude possible target values).\n    - `trainingSetWhere: {}`. Parameter to limit possible data objects in the training set.\n    - All of `sourceWhere`, `targetWhere` and `trainingSetWhere` filters accept a `where` filter body.\n\n### Start a kNN classification\n\nA classification can be started through one of the clients, or with a direct `curl` request to the RESTful API.\n\n\n\n\nA classification is started, and will run in the background. The following response is given after starting the classification, and the status can be fetched via the `v1/classifications/{id}` endpoint.\n\n```json\n{\n  \"basedOnProperties\": [\n    \"summary\"\n  ],\n  \"class\": \"Article\",\n  \"classifyProperties\": [\n    \"hasPopularity\"\n  ],\n  \"id\": \"ee722219-b8ec-4db1-8f8d-5150bb1a9e0c\",\n  \"meta\": {\n    \"completed\": \"0001-01-01T00:00:00.000Z\",\n    \"started\": \"2020-09-09T14:57:08.468Z\"\n  },\n  \"minimumUsableWords\": 3,\n  \"status\": \"running\",\n  \"tfidfCutoffPercentile\": 80,\n  \"type\": \"knn\",\n  \"settings\": {\n    \"k\": 3,\n  }\n}\n```\n\n### Evaluation of single data object results\n\nThe classification task will update the target property in each data object.\n\nThe results of a classification can be requested for the individual data objects through the `v1/objects/{id}/?include=classification` RESTful endpoint or with the GraphQL `_additional {classification}` field.\n\n\n## Zero-Shot Classification\n\nZero-shot classification is an unsupervised classification method, meaning you don't need any training data.\n\n\n\nWeaviate's zero-shot classification measures how similar (how close) a data item is to a potential target item (a class or label).\n\nMore specifically, Weaviate uses `vector search and similarity` algorithms to classify data objects with other data objects. Internally, Weaviate performs a `nearVector` search (which you can also perform manually with GraphQL), and takes the closes result out of a given set of options (data objects) to classify.\n\nZero-shot classification works with all (text/image/..) vectorizers (or no vectorizer, as long as you have vectors stored in Weaviate).\n\n### Parameters\n\n**Required**:\n- `type: \"zeroshot\"`: the type of the classification.\n- `class`: the class name of the data objects to be classified.\n- `classifyProperties`: a list of properties to classify. They should be reference properties to other classes, each only referring to one class.\n\n**Optional, with default values**:\n- Parameters to add limitations (based on e.g. background business knowledge).\n  - `filters: {}` with the following possible properties:\n    - `sourceWhere: {}`. Parameter to determine which data objects to classify (i.e. to leave out some data objects).\n    - `targetWhere: {}`. Parameter to limit possible targets (i.e. to exclude possible target values).\n    - `trainingSetWhere: {}`. Parameter to limit possible data objects in the training set.\n    - All of `sourceWhere`, `targetWhere` and `trainingSetWhere` filters accept a `where` filter body.\n\n\n### Start a zeroshot classification\n\nA classification can be started through one of the clients, or with a direct `curl` request to the RESTful API.\n\n\n\n\nA classification is started, and will run in the background. The following response is given after starting the classification, and the status can be fetched via the `v1/classifications/{id}` endpoint.\n\n```json\n{\n  \"class\": \"Article\",\n  \"classifyProperties\": [\n    \"ofCategory\"\n  ],\n  \"id\": \"973e3b4c-4c1d-4b51-87d8-4d0343beb7ad\",\n  \"meta\": {\n    \"completed\": \"0001-01-01T00:00:00.000Z\",\n    \"started\": \"2020-09-09T14:57:08.468Z\"\n  },\n  \"status\": \"running\",\n  \"type\": \"zeroshot\"\n}\n```\n\n### Evaluation of single data object results\n\nThe classification task will update the target property in each data object.\n\nThe results of a classification can be requested for the individual data objects through the `v1/objects/{id}/?include=classification` RESTful endpoint or with the GraphQL `_additional {classification}` field.\n\n\n\n\n", "type": "Documentation", "name": "rest-classification", "path": "developers/weaviate/api/rest/classification.md", "link": "https://weaviate.io/developers/weaviate/api/rest/classification", "timestamp": "2024-02-08 20:22:17", "reader": "JSON", "meta": {}, "chunks": []}