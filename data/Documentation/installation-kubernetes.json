{"text": "\n\nMake sure to set your desired Weaviate version.\n\nThis can be done through either explicitly setting it as part of the `values.yaml` or through overwriting the default as outlined in the deployment step below.\n\n## Requirements\n\n* A recent Kubernetes Cluster (at least version 1.23).\n  * If you are in a development environment, consider using the kubernetes cluster that is built into Docker desktop. For more information, see the Docker documentation.\n* The cluster needs to be able to provision `PersistentVolumes` through\n  `PersistentVolumeClaims`.\n* No special file systems are required. Any file system that has a `ReadWriteOnce` access mode is sufficient.\n* Helm. To use Helm chart version `\"v||site.helm_version||\"`, you must have Helm v3 or higher.\n\n## Weaviate Helm chart\n\nTo obtain and install the Weaviate chart on your Kubernetes cluster, take the following steps:\n\n### Verify tool setup and cluster access\n\n```bash\n# Check if helm is installed\nhelm version\n# Make sure `kubectl` is configured correctly and you can access the cluster.\n# For example, try listing the pods in the currently configured namespace.\nkubectl get pods\n```\n\n### Obtain the Helm Chart\n\nAdd the Weaviate helm repo that contains the Weaviate helm chart\n\n```bash\nhelm repo add weaviate https://weaviate.github.io/weaviate-helm\n```\n\nGet the default `values.yaml` configuration file from the Weaviate helm chart:\n```bash\nhelm show values weaviate/weaviate > values.yaml\n```\n\n### Modify values.yaml (as necessary)\n\nYou can skip this step and run with all default values.\n\nBut, if you do not modify the defaults in `values.yaml`, make sure to set the appropriate Weaviate version at the deployment step.\n\nIn the `values.yaml`\nfile you can tweak the configuration to align it with your\nsetup. The yaml file is extensively documented to help you align the\nconfiguration with your setup.\n\nOut of the box, the configuration file is setup for:\n\n- 1 Weaviate replica.\n- The `text2vec-contextionary` module is enabled and running with 1 replica.\n  (This can be adjusted based on the expected load).\n- Other modules, such as `text2vec-transformers`, `qna-transformers` or\n  `img2vec-neural` are disabled by default. They can be enabled by setting the\n  respective `enabled` flag to `true`.\n\nSee the resource requests and limits in the example `values.yaml`. You can\nadjust them based on your expected load and the resources available on the\ncluster.\n\n#### Authentication and authorization\n\nAn example configuration for authentication is shown below.\n\n```yaml\nauthentication:\n  apikey:\n    enabled: true\n    allowed_keys:\n      - readonly-key\n      - secr3tk3y\n    users:\n      - readonly@example.com\n      - admin@example.com\n  anonymous_access:\n    enabled: false\n  oidc:\n    enabled: true\n    issuer: https://auth.wcs.api.weaviate.io/auth/realms/SeMI\n    username_claim: email\n    groups_claim: groups\n    client_id: wcs\nauthorization:\n  admin_list:\n    enabled: true\n    users:\n      - someuser@weaviate.io\n      - admin@example.com\n    readonly_users:\n      - readonly@example.com\n```\n\nIn this example, the key `readonly-key` will authenticate a user as the `readonly@example.com` identity, and `secr3tk3y` will authenticate a user as `admin@example.com`.\n\nOIDC authentication is also enabled, with WCS as the token issuer/identity provider. Thus, users with WCS accounts could be authenticated. This configuration sets `someuser@weaviate.io` as an admin user, so if `someuser@weaviate.io` were to authenticate, they will be given full (read and write) privileges.\n\nFor further, general documentation on authentication and authorization configuration, see:\n- Authentication\n- Authorization\n\n### Deploy (install the Helm chart)\n\nYou can deploy the helm charts as follows:\n\n```bash\n# Create a Weaviate namespace\nkubectl create namespace weaviate\n\n# Deploy\nhelm upgrade --install \\\n  \"weaviate\" \\\n  weaviate/weaviate \\\n  --namespace \"weaviate\" \\\n  --values ./values.yaml\n```\n\nThe above assumes that you have permissions to create a new namespace. If you\nhave only namespace-level permissions, you can skip creating a new\nnamespace and adjust the namespace argument on `helm upgrade` according to the\nname of your pre-configured namespace.\n\nOptionally, you can provide the `--create-namespace` parameter which will create the namespace if not present.\n\n### Updating the installation after the initial deployment\n\nThe above command (`helm upgrade...`) is idempotent, you can run it again, for\nexample after adjusting your desired configuration.\n\n## Additional Configuration Help\n\n- Cannot list resource \"configmaps\" in API group when deploying Weaviate k8s setup on GCP\n- Error: UPGRADE FAILED: configmaps is forbidden\n\n### Using EFS with Weaviate\n\nIn some circumstances, you may wish, or need, to use EFS (Amazon Elastic File System) with Weaviate. And we note in the case of AWS Fargate, you must create the PV (persistent volume) manually, as the PVC will NOT create a PV for you.\n\nTo use EFS with Weaviate, you need to:\n\n- Create an EFS file system.\n- Create an EFS access point for every Weaviate replica.\n    - All of the Access Points must have a different root-directory so that Pods do not share the data, otherwise it will fail.\n- Create EFS mount targets for each subnet of the VPC where Weaviate is deployed.\n- Create StorageClass in Kubernetes using EFS.\n- Create Weaviate Volumes, where each volume has a different AccessPoint for VolumeHandle(as mentioned above).\n- Deploy Weaviate.\n\nThis code is an example of a PV for `weaviate-0` Pod:\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: weaviate-0\nspec:\n  capacity:\n    storage: 8Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: \"efs-sc\"\n  csi:\n    driver: efs.csi.aws.com\n    volumeHandle: ::\n  claimRef:\n    namespace: \n    name: weaviate-data-weaviate-0\n```\n\nFor more, general information on running EFS with Fargate, we recommend reading this AWS blog.\n\n## Troubleshooting\n\n- If you see `No private IP address found, and explicit IP not provided`, set the pod subnet to be in an valid ip address range of the following:\n\n    ```\n    10.0.0.0/8\n    100.64.0.0/10\n    172.16.0.0/12\n    192.168.0.0/16\n    198.19.0.0/16\n    ```\n\n\n\n\n", "type": "Documentation", "name": "installation-kubernetes", "path": "developers/weaviate/installation/kubernetes.md", "link": "https://weaviate.io/developers/weaviate/installation/kubernetes", "timestamp": "2024-02-08 20:22:54", "reader": "JSON", "meta": {}, "chunks": []}