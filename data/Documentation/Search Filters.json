{"text": "\nFilters let you include, or exclude, particular objects from your result set based on provided conditions.\nFor a list of filter operators, see the [API reference page](../api/graphql/filters.md#filter-structure).\n\n## Filter with one condition\n\nAdd a `filter` to your query, to limit the result set.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Filter with multiple conditions\n\nTo filter with two or more conditions, use `And` or `Or` to define the relationship between the conditions.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## Nested filters\n\nYou can group and nest filters.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n\n  \n    Additional information\n  \n\nTo create a nested filter, follow these steps.\n\n- Set the outer `operator` equal to `And` or `Or`.\n- Add `operands`.\n- Inside an `operand` expression, set `operator` equal to `And` or `Or` to add the nested group.\n- Add `operands` to the nested group as needed.\n\n\n\n## Combine filters and search operators\n\nFilters work with search operators like `nearXXX`, `hybrid`, and `bm25`.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## `ContainsAny` Filter\n\nThe `ContainsAny` operator works on text properties and take an array of values as input. It will match objects where the property **contains any (i.e. one or more)** of the values in the array.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## `ContainsAll` Filter\n\nThe `ContainsAll` operator works on text properties and take an array of values as input. It will match objects where the property **contains all** of the values in the array.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## `ContainsAny` and `ContainsAll` with batch delete\n\nIf you want to do a batch delete, see [Delete objects](../manage-data/delete.mdx#containsany--containsall). `ContainsAny` and `ContainsAll` have different behavior in batch deletion operations than they do in queries.\n\n## Filter text on partial matches\n\nIf the object property is a `text`, or `text`-like data type such as object ID, use `Like` to filter on partial text matches.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n\n  \n    Additional information\n  \n\n  The `*` wildcard operator matches zero or more characters. The `?` operator matches exactly one character.\n  \n\n  Currently, the `Like` filter is not able to match wildcard characters (`?` and `*`) as literal characters ([read more](../api/graphql/filters.md#wildcard-literal-matches-with-like)).\n\n\n\n## Filter using cross-references\n\nTo filter on properties from a cross-referenced object, add the collection name to the filter.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nThe output is like this:\n\n\n\n\n\n## By geo-coordinates\n\n\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Filter by metadata\n\nFilters also work with metadata properties such as object id, property length, and timestamp.\n\nFor the full list, see [API references: Filters](../api/graphql/filters.md#special-cases).\n\n### Metadata filter - by object `id`\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n \n    \n  \n\n  \n    \n  \n\n\n### Metadata filter - by object timestamp\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n   \n    \n  \n\n  \n    \n  \n\n\n### Metadata filter - by object property length\n\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Filter considerations\n\n### Tokenization\n\nimport TokenizationNote from '/_includes/tokenization.mdx'\n\n\n\n### Improve filter performance\n\nIf you encounter slow filter performance, consider adding a `limit` parameter or additional `where` operators to restrict the size of your data set.\n\n## List of filter operators\n\nFor a list of filter operators, see [the reference page](../api/graphql/filters.md#filter-structure).\n\n## Related pages\n\n- [Connect to Weaviate](/developers/weaviate/starter-guides/connect.mdx)\n- [API References: Filters](../api/graphql/filters.md)\n\n\n", "type": "Documentation", "name": "Search Filters", "path": "developers/weaviate/search/filters.md", "link": "https://weaviate.io/developers/weaviate/search/filters", "timestamp": "2024-05-08 10:50:52", "reader": "JSON", "meta": {}, "chunks": []}