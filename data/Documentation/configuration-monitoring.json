{"text": "\n\n## Overview\n\nWeaviate can expose Prometheus-compatible metrics for monitoring. A standard\nPrometheus/Grafana setup can be used to visualize metrics on various\ndashboards.\n\nMetrics can be used to measure request latencies, import\nspeed, time spent on vector vs object storage, memory usage, application usage,\nand more.\n\n## Configure Monitoring\n\n### Enable within Weaviate\n\nTo tell Weaviate to collect metrics and expose them in a Prometheus-compatible\nformat, all that's required is to set the following environment variable:\n\n```sh\nPROMETHEUS_MONITORING_ENABLED=true\n```\n\nBy default, Weaviate will expose the metrics at `:2112/metrics`. You\ncan optionally change the port to a custom port using the following environment\nvariable:\n\n```sh\nPROMETHEUS_MONITORING_PORT=3456\n```\n\n### Scrape metrics from Weaviate\n\nMetrics are typically scraped into a time-series database, such as Prometheus.\nHow you consume metrics depends on your setup and environment.\n\nThe [Weaviate examples repo contains a fully pre-configured setup using\nPrometheus, Grafana and some example\ndashboards](https://github.com/weaviate/weaviate-examples/tree/main/monitoring-prometheus-grafana).\nYou can start up a full-setup including monitoring and dashboards with a single\ncommand. In this setup the following components are used:\n\n* Docker Compose is used to provide a fully-configured setup that can be\n  started with a single command.\n* Weaviate is configured to expose Prometheus metrics as outlined in the\n  section above.\n* A Prometheus instance is started with the setup and configured to scrape\n  metrics from Weaviate every 15s.\n* A Grafana instance is started with the setup and configured to use the\n  Prometheus instance as a metrics provider. Additionally, it runs a dashboard\n  provider that contains a few sample dashboards.\n\n### Multi-tenancy\n\nWhen using multi-tenancy, we suggest setting the `PROMETHEUS_MONITORING_GROUP` environment variable as `true` so that data across all tenants are grouped together for monitoring.\n\n## Obtainable Metrics\n\nThe list of metrics that are obtainable through Weaviate's metric system is\nconstantly being expanded. Here are some noteworthy metrics and what they can\nbe used for.\n\nTypically metrics are quite granular, as they can always be aggregated later\non. For example if the granularity is \"shard\", you could aggregate all \"shard\"\nmetrics of the same \"class\" to obtain a class metrics, or aggregate all metrics\nto obtain the metric for the entire Weaviate instance.\n\n| Metric | Description | Labels | Type |\n| --- | --- | --- | --- |\n| `batch_durations_ms` | Duration of a single batch operation in ms. The `operation` label further defines what operation as part of the batch (e.g. object, inverted, vector) is being used. Granularity is a shard of a class.  | `operation`, `class_name`, `shard_name` | Histogram |\n| `batch_delete_durations_ms` | Duration of a batch delete in ms. The `operation` label further defines what operation as part of the batch delete is being measured. Granularity is a shard of a class | `class_name`, `shard_name` | Histogram |\n| `objects_durations_ms` | Duration of an individual object operation, such as `put`, `delete`, etc. as indicated by the `operation` label, also as part of a batch. The `step` label adds additional precisions to each `operation`. Granularity is a shard of a class. | `class_name`, `shard_name` | Histogram |\n| `object_count` | Numbers of objects present. Granularity is a shard of a class | `class_name`, `shard_name` | Gauge |\n| `async_operations_running` | Number of currently running async operations. The operation itself is defined through the `operation` label. | `operation`, `class_name`, `shard_name`, `path` | Gauge |\n| `lsm_active_segments` | Number of currently present segments per shard. Granularity is shard of a class. Grouped by `strategy`.| `strategy`, `class_name`, `shard_name`, `path` | Gauge |\n| `lsm_bloom_filter_duration_ms` | Duration of a bloom filter operation per shard in ms. Granularity is shard of a class. Grouped by `strategy`. | `operation`, `strategy`, `class_name`, `shard_name` | Histogram |\n| `lsm_segment_objects` | Number of entries per LSM segment by level. Granularity is shard of a class. Grouped by `strategy` and `level`. | `operation`, `strategy`, `class_name`, `shard_name`, `path`, `level` | Gauge |\n| `lsm_segment_size` | Size of LSM segment by level and unit. | `strategy`, `class_name`, `shard_name`, `path`, `level`, `unit` | Gauge |\n| `lsm_segment_count` | Number of segments by level | `strategy`, `class_name`, `shard_name`, `path`, `level` | Gauge |\n| `vector_index_tombstones` | Number of currently active tombstones in the vector index. Will go up on each incoming delete and go down after a completed repair operation. | `class_name`, `shard_name`  | Gauge |\n| `vector_index_tombstone_cleanup_threads` | Number of currently active threads for repairing/cleaning up the vector index after deletes have occurred. | `class_name`, `shard_name`  | Gauge |\n| `vector_index_tombstone_cleaned` | Total number of deleted and removed vectors after repair operations. | `class_name`, `shard_name`  | Counter |\n| `vector_index_operations` | Total number of mutating operations on the vector index. The operation itself is defined by the `operation` label. | `operation`, `class_name`, `shard_name` | Gauge |\n| `vector_index_size` | The total capacity of the vector index. Typically larger than the number of vectors imported as it grows proactively. | `class_name`, `shard_name` | Gauge |\n| `vector_index_maintenance_durations_ms` | Duration of a sync or async vector index maintenance operation. The operation itself is defined through the `operation` label. | `opeartion`, `class_name`, `shard_name` | Histogram |\n| `vector_index_durations_ms` | Duration of regular vector index operation, such as insert or delete. The operation itself is defined through the `operation` label. The `step` label adds more granularity to each operation. | `operation`, `step`, `class_name`, `shard_name` | Histogram |\n| `startup_durations_ms` | Duration of individual startup operations in ms. The operation itself is defined through the `operation` label. | `operation`, `class_name`, `shard_name` | Histogram |\n| `startup_diskio_throughput` | Disk I/O throughput in bytes/s at startup operations, such as reading back the HNSW index or recovering LSM segments. The operation itself is defined by the `operation` label. | `operation`, `step`, `class_name`, `shard_name` | Histogram |\n| `requests_total` | Metric that tracks all user requests to determine if it was successful or failed. | `api`, `query_type`, `class_name` | `GaugeVec` |\n\nExtending Weaviate with new metrics is very easy and we'd be happy to receive\nyour contribution.\n\n### Versioning\n\nBe aware that metrics do not follow the semantic versioning guidelines of other Weaviate features. Weaviate's main APIs are stable and breaking changes are extremely rare. Metrics, however, have shorter feature lifecycles. It can sometimes be necessary to introduce an incompatible change or entirely remove a metric, for example, because the cost of observing a specific metric in production has grown too high. As a result, it is possible that a Weaviate minor release contains a breaking change for the Monitoring system. If so, it will be clearly highlighted in the release notes.\n\n## Sample Dashboards\n\nWeaviate does not ship with any dashboards by default, but here is a list of\ndashboards being used by the various Weaviate teams, both during development,\nand when helping users. These do not come with any support, but may still be\nhelpful. Treat them as inspiration to design your own dashboards which fit\nyour uses perfectly:\n\n| Dashboard | Purpose | Preview |\n| --- | --- | --- |\n| Importing Data Into Weaviate | Visualize speed of import operations (including its components, such as object store, inverted index, and vector index). | Importing Data into Weaviate |\n| Object Operations | Visualize speed of whole object operations, such as GET, PUT, etc. | Objects |\n| Vector Index | Visualize the current state, as well as operations on the HNSW vector index | Vector Index |\n| LSM Stores | Get insights into the internals (including segments) of the various LSM stores within Weaviate. | LSM Store |\n| Startup | Visualize the startup process, including recovery operations | Startup |\n| Usage | Obtain usage metrics, such as number of objects imported, etc.| Usage |\n\n\n\n\n", "type": "Documentation", "name": "configuration-monitoring", "path": "developers/weaviate/configuration/monitoring.md", "link": "https://weaviate.io/developers/weaviate/configuration/monitoring", "timestamp": "2023-11-02 10:52:59", "reader": "JSON", "meta": {}, "chunks": []}