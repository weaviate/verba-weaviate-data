{"text": "\n\n\n# Overview\n\nThis page covers aggregation queries. They are collectively referred to as `Aggregate` queries within.\n\nAn `Aggregate` query can aggregate over an entire collection, or the [results of a search](#aggregating-a-vector-search--faceted-vector-search).\n\n\n### Parameters\n\nAn `Aggregate` query requires the target collection to be specified. Each query can include any of the following types of arguments:\n\n| Argument | Description | Required |\n| -------- | ----------- | -------- |\n| Collection | Also called \"class\". The object collection to be retrieved from. | Yes |\n| Properties | Properties to be retrieved | Yes |\n| [Conditional filters](./filters.md) | Filter the objects to be retrieved | No |\n| [Search operators](./search-operators.md) | Specify the search strategy (e.g. near text, hybrid, bm25) | No |\n| [Additional operators](./additional-operators.md) | Specify additional operators (e.g. limit, offset, sort) | No |\n| [Tenant name](#multi-tenancy) | Specify the tenant name | Yes, if multi-tenancy enabled. ([Read more: what is multi-tenancy?](../../concepts/data.md#multi-tenancy)) |\n| [Consistency level](#consistency-levels) | Specify the consistency level | No |\n\n\n### Available properties\n\nEach data type has its own set of available aggregated properties. The following table shows the available properties for each data type.\n\n| Data type | Available properties |\n| --------- | -------------------- |\n| Text | `count`, `type`, `topOccurrences (value, occurs)` |\n| Number | `count`, `type`, `minimum`, `maximum`, `mean`, `median`, `mode`, `sum` |\n| Integer | `count`, `type`, `minimum`, `maximum`, `mean`, `median`, `mode`, `sum` |\n| Boolean | `count`, `type`, `totalTrue`, `totalFalse`, `percentageTrue`, `percentageFalse` |\n| Date | `count`, `type`, `minimum`, `maximum`, `mean`, `median`, `mode` |\n| UUID | `count`, `type`, `topOccurrences` |\n\n\n\n  See a GraphQL Aggregate format\n\n```graphql\n{\n  Aggregate {\n     (groupBy:[]) {\n      groupedBy { # requires `groupBy` filter\n          path\n          value\n      }\n      meta {\n        count\n      }\n       {\n          count\n          type\n          topOccurrences (limit: ) {\n              value\n              occurs\n          }\n      }\n       {\n          count\n          type\n          minimum\n          maximum\n          mean\n          median\n          mode\n          sum\n      }\n       {\n          count\n          type\n          totalTrue\n          totalFalse\n          percentageTrue\n          percentageFalse\n      }\n      \n        pointingTo\n        type\n    }\n  }\n}\n```\n\n\n\nBelow is an example query to obtain meta information about the `Article` collection. Note that the data is not grouped here, and results relate to all data objects in the `Article` collection.\n\n\n\nThe above query will result in something like the following:\n\n```json\n{\n  \"data\": {\n    \"Aggregate\": {\n      \"Article\": [\n        {\n          \"inPublication\": {\n            \"pointingTo\": [\n              \"Publication\"\n            ],\n            \"type\": \"cref\"\n          },\n          \"meta\": {\n            \"count\": 4403\n          },\n          \"wordCount\": {\n            \"count\": 4403,\n            \"maximum\": 16852,\n            \"mean\": 966.0113558937088,\n            \"median\": 680,\n            \"minimum\": 109,\n            \"mode\": 575,\n            \"sum\": 4253348,\n            \"type\": \"int\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nAs such, this `Aggregate` query will retrieve the total object count in a class.\n\n\n\n### groupBy argument\n\nYou can use a groupBy argument to get meta information about groups of data objects.\n\n\n\nThe `groupBy` argument is structured as follows for the `Aggregate` function:\n\n```graphql\n{\n  Aggregate {\n     ( groupBy: [\"\"] ) {\n      groupedBy {\n          path\n          value\n      }\n      meta {\n        count\n      }\n       {\n        count\n      }\n    }\n  }\n}\n```\n\nIn the following example, the articles are grouped by the property `inPublication`, referring to the article's publisher.\n\n\n\n\n  Expected response\n\n```json\n{\n  \"data\": {\n    \"Aggregate\": {\n      \"Article\": [\n        {\n          \"groupedBy\": {\n            \"path\": [\n              \"inPublication\"\n            ],\n            \"value\": \"weaviate://localhost/Publication/16476dca-59ce-395e-b896-050080120cd4\"\n          },\n          \"meta\": {\n            \"count\": 829\n          },\n          \"wordCount\": {\n            \"mean\": 604.6537997587454\n          }\n        },\n        {\n          \"groupedBy\": {\n            \"path\": [\n              \"inPublication\"\n            ],\n            \"value\": \"weaviate://localhost/Publication/c9a0e53b-93fe-38df-a6ea-4c8ff4501783\"\n          },\n          \"meta\": {\n            \"count\": 618\n          },\n          \"wordCount\": {\n            \"mean\": 917.1860841423949\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n\n\n### Additional filters\n\n`Aggregate` functions can be extended with conditional filters [read more](filters.md).\n\n### `topOccurrences` property\n\nAggregating data makes the `topOccurrences` property available. Note that the counts are not dependent on tokenization. The `topOccurrences` count is based on occurrences of the entire property, or one of the values if the property is an array.\n\nYou can optionally specify a `limit` parameter as a minimum count for the top occurrences. For example, `limit: 5` will filter the top occurrences to those with a count of 5 or higher.\n\n### Consistency levels\n\n`Aggregate` queries are currently not available with different consistency levels.\n\n### Multi-tenancy\n\n\nWhere multi-tenancy is configured, the `Aggregate` function can be configured to aggregate results from a specific tenant.\n\nYou can do so by specifying the `tenant` parameter in the query as shown below, or in the client.\n\n```graphql\n{\n  Aggregate {\n    Article (\n      tenant: \"tenantA\"\n    ) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```\n\nFor more information on using multi-tenancy, see the [Multi-tenancy operations guide](../../manage-data/multi-tenancy.md).\n\n## Aggregating a Vector Search / Faceted Vector Search\n\nThis feature was added in `v1.13.0`\n\nYou can combine a vector search (e.g. `nearObject`, `nearVector`, `nearText`, `nearImage`, etc.) with an aggregation. Internally, this is a two-step process where the vector search first finds the desired objects, then the results are aggregated.\n\n### Limiting the search space\n\nVector searches compare objects by similarity. Thus they do not exclude any objects.\n\nAs a result, for a search operator to have an impact on an aggregation, you must limit the search space with an `objectLimit` or `certainty`.\n\nYou can achieve such a restriction of the search space in two different ways:\n\n* `objectLimit`, e.g. `objectLimit: 100` specifies Weaviate to retrieve the top 100 objects related to a vector search query, then aggregate them. *This is useful when you know up front how many results you want to serve, for example in a recommendation scenario, where you want to produce 100 recommendations.*\n\n* `certainty`, e.g. `certainty: 0.7` specifies Weaviate to retrieve all possible matches that have a certainty of 0.7 or higher. This list has no fixed length, it depends on how many objects were good matches. *This is useful in user-facing search scenarios, such as e-commerce. The user might be interested in all search results semantically similar to \"apple iphone\" and then generate facets.*\n\nIf neither an `objectLimit`, nor a `certainty` is set the query will error.\n\n### Examples\n\nBelow are examples for `nearObject`, `nearVector`, and `nearText`.\nAny `near` will work.\n\n#### nearObject\n\n\n\n#### nearVector\n\nTo run this query, replace the placeholder vector with a real vector from the same vectorizer that used to generate object vectors.\n\n\n\n#### nearText\n\nFor `nearText` to be available, a `text2vec-*` module must be installed with Weaviate.\n\n\n\n\n\n", "type": "Documentation", "name": "Graphql Aggregate", "path": "developers/weaviate/api/graphql/aggregate.md", "link": "https://weaviate.io/developers/weaviate/api/graphql/aggregate", "timestamp": "2024-05-08 10:49:19", "reader": "JSON", "meta": {}, "chunks": []}