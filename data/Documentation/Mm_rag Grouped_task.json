{"text": "\nA 'grouped task' generation wil perform RAG queries on the set of retrieved objects. This is useful when you want to transform the set of objects as a whole, with one prompt.\n\n###  Code\n\nThis example finds entries in \"MovieMM\" based on their similarity to [this image of the International Space Station](https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/International_Space_Station_after_undocking_of_STS-132.jpg/440px-International_Space_Station_after_undocking_of_STS-132.jpg). Then, instructs the large language model to find commonalities between them.\n\nEach of the results are then printed out to the console.\n\n\n\n##  Explain the code\n\nFor `grouped_task` queries, you simply pass on the prompt to the `grouped_task` parameter. This will instruct Weaviate to pass on the:\n- text properties from all retrieved objects, and\n- the prompt\n\nto the large language model.\n\n\n  Example results\n\n```text\nInterstellar\nGravity\nArrival\nArmageddon\nGodzilla\nThese movies all involve space exploration, extraterrestrial beings, or catastrophic events threatening Earth. They all deal with themes of survival, human ingenuity, and the unknown mysteries of the universe.\n```\n\n\n\n###  Optional parameters\n\nYou can also pass on a list of properties to be used, as the `grouped_properties` parameter. This can be useful to reduce the amount of data passed on to the large language model and omit irrelevant properties.\n\n###  Response object\n\nA RAG query with the `grouped_task` parameter will return a response with an additional `generated` attribute. This attribute will contain the generated output for the set of objects.\n\n\n", "type": "Documentation", "name": "Mm_rag Grouped_task", "path": "developers/academy/py/starter_multimodal_data/104_mm_rag/30_grouped_task.mdx", "link": "https://weaviate.io/developers/academy/py/starter_multimodal_data/mm_rag/grouped_task", "timestamp": "2024-05-08 10:48:10", "reader": "JSON", "meta": {}, "chunks": []}