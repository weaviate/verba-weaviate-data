{"text": "\n## Introduction\n\n- The `reranker-cohere` module enables reranking search results using Cohere reranking.\n- This module uses a third-party API and may incur costs. Make sure to check the Cohere pricing page before applying reranking to large amounts of data.\n- You will need a Cohere API key. You can request one here.\n\n- How-to search: Rerank\n\n## How to enable\n\n### Weaviate Cloud Services\n\nThis module is enabled by default on the WCS.\n\n### Weaviate open source\n\nAdd `reranker-cohere` to the `ENABLE_MODULES` environment variable.\n\nBelow is an example Docker Compose file, which will spin up Weaviate with the `reranker-cohere` module (as well as `text2vec-cohere`).\n\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    command:\n    - --host\n    - 0.0.0.0\n    - --port\n    - '8080'\n    - --scheme\n    - http\n    image: semitechnologies/weaviate:||site.weaviate_version||\n    restart: on-failure:0\n    ports:\n     - 8080:8080\n     - 50051:50051\n    environment:\n      QUERY_DEFAULTS_LIMIT: 20\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'\n      PERSISTENCE_DATA_PATH: \"./data\"\n      DEFAULT_VECTORIZER_MODULE: text2vec-cohere\n      ENABLE_MODULES: text2vec-cohere,reranker-cohere\n      COHERE_APIKEY: $COHERE_APIKEY\n      CLUSTER_HOSTNAME: 'node1'\n...\n```\n\n\n\n\n\n## Schema configuration\n\nThe `reranker-cohere` module can be configured for any class in the schema. You can also specify options such as the `model` to use.\n\nThis example configures the `Document` class to use the `reranker-cohere` module, with the `rerank-multilingual-v2.0` model, and to return the documents in the response.\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Document\",\n      ...,\n      \"moduleConfig\": {\n        \"reranker-cohere\": {\n            \"model\": \"rerank-multilingual-v2.0\",\n        },\n      }\n    }\n  ]\n}\n```\n\n\n### Reranker selection\n\nIf there is only one `reranker` module enabled, you don't need to do anything. The `reranker` module will be used by default.\n\nWhere multiple `reranker` modules are enabled, you must specify the reranker module to be used for each class. You can do this by adding the desired reranker in the `moduleConfig` section of the schema, even without any further settings.\n\n\n  Set reranker for a class\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Document\",\n      ...,\n      \"moduleConfig\": {\n        \"reranker-cohere\": {},  // This will configure the 'Document' class to use the 'reranker-cohere' module\n      }\n    }\n  ]\n}\n```\n\n\n\n### Model selection\n\nThe `reranker-cohere` module supports the following models:\n\n- `rerank-english-v2.0`\n- `rerank-multilingual-v2.0`\n\n\n## Usage\n\n### API key\n\n* If the `COHERE_APIKEY` environment variable is not set, clients can set the API key at query time by adding this HTTP header: `X-Cohere-Api-Key: YOUR-COHERE-API-KEY`.\n\n### Queries\n\n* Using this module will enable the `rerank` GraphQL _additional property.\n* For usage examples, see the Howto: Search - Reranking page.\n\n\n\n\n\n", "type": "Documentation", "name": "retriever-vectorizer-modules-reranker-cohere", "path": "developers/weaviate/modules/retriever-vectorizer-modules/reranker-cohere.md", "link": "https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/reranker-cohere", "timestamp": "2024-02-08 20:23:17", "reader": "JSON", "meta": {}, "chunks": []}