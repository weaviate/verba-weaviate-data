{"text": "\nRAG, or retrieval augmented generation, is a powerful feature that combines the strengths of both vector search and language generation.Named vectors can be used in RAG queries to improve workflow and results.\n\nIn this section, we'll explore a few examples of how named vectors allow different users to search and generate results based on their specific needs, using the same collection.\n\n##  Design agency: evaluating a poster design\n\nImagine a design agency (*Aesthetico*) that is contracted to work on the poster design for a new movie.\n\nAesthetico's designers have arrived on [this film poster design](https://upload.wikimedia.org/wikipedia/commons/7/78/1927_Boris_Bilinski_%281900-1948%29_Plakat_f%C3%BCr_den_Film_Metropolis%2C_Staatliche_Museen_zu_Berlin.jpg). They would now like to see how their poster compares to other movie posters in existence, and what types of movies these posters are for.\n\n\n\nLuckily for them, the `MovieNVDemo` collection has `poster_title` named vectors which is primarily based on the poster design. So Aesthetico's designers can search `poster_title` named vector and find movies that are similar to their poster design. And, they can then perform RAG to summarize the movies which are found from them.\n\n###  Code\n\nThis query will find similar movies to the input image, and then provide insights using RAG.\n\n\n\n###  Output\n\nThis is an example output of the RAG query:\n\n> These movies can be categorized as action, science fiction, thriller, and drama. The audience for these movies would likely be fans of action-packed films with elements of suspense, mystery, and fantastical creatures or scenarios. These movies may appeal to a wide range of viewers, including fans of superhero movies, science fiction enthusiasts, and those who enjoy intense and thrilling storylines.\n\nThe designers at Aesthetico could use this to understand the types of movies that are similar to their poster design, and further inform their own design choices.\n\n\n  Search results\n\nPredator 2\nInception\nMission: Impossible\nThe Dark Knight\nLost in Translation\nIndependence Day\nGodzilla vs. Kong\nFargo\nThe Amazing Spider-Man\nGodzilla\n\n\n\n##  Film writers: evaluating ideas\n\nNow, in another project, a set of writers at *ScriptManiacs* are working on a movie script for a science fiction film. They are working a few ideas for the movie title, and they want to see what kinds of imagery and themes are associated with each title.\n\nThey could also use the same collection to do what they want to do. In fact, they could run multiple queries against the same collection, each with a different `target_vector` parameter.\n\nThe ScriptManiacs writers can:\n- Search `title` named vector to find movies with *similar titles*;\n- Search `overview` named vector to find movies whose *plots are similar* to their title idea; and\n\nLet's see how they could do it for a title - \"Chrono Tides: The Anomaly Rift\".\n\n###  Code\n\nThis example finds entries in \"MovieNVDemo\" based on their similarity to \"Chrono Tides: The Anomaly Rift\", then, instructs the large language model to find commonalities between them.\n\nBut note the presence of a for-loop, which allows the writers to run the same query against different named vectors.\n\n\n\n###  Output\n\nThe two queries produced quite different outputs to each other. When we search for titles most similar to \"Chrono Tides: The Anomaly Rift\", the results skew towards action/adventure films, while searching for an overview most similar to \"Chrono Tides: The Anomaly Rift\" include science fiction and adventure films.\n\nGiven the different results, the writers at ScriptManiacs could use this to understand the different themes and genres that are associated with their title idea, and further inform their own writing choices.\n\nFor example, if \"Chrono Tides: The Anomaly Rift\" is intended to be a science fiction film with an action/adventure skew, the title may be a good one. On the other hand, if the writers are looking for a more dramatic or romantic theme, they may need to reconsider the title.\n\nThe results of the overview search include multiple science-fiction and adventure films, indicating that the writes are on the right path of naming a science fiction movie as such.\n\n#### Similar titles\n\nAccording to our RAG query, movies with similar titles to \"Chrono Tides: The Anomaly Rift\" have the following commonalities:\n\n> These movies are **action/adventure films** that are likely aimed at a wide audience, including fans of fantasy, adventure, and romance genres. The Pirates of the Caribbean and Lara Croft movies are targeted towards fans of swashbuckling adventures and treasure hunting, while The Croods appeals to families and fans of animated films. The Twilight Saga targets fans of supernatural romance, and Meg 2: The Trench is aimed at fans of underwater thrillers and action movies. Overall, these movies cater to audiences who enjoy high-stakes adventures, fantastical elements, and dramatic storylines.\n\n\n  Search results\n\nPirates of the Caribbean: On Stranger Tides\nLara Croft: Tomb Raider\nThe Croods: A New Age\nThe Twilight Saga: Breaking Dawn - Part 1\nMeg 2: The Trench\n\n\n\n#### Similar overviews\n\nWhile movies with overviews that are most similar to the search \"Chrono Tides: The Anomaly Rift\" have the following commonalities:\n\n> These movies can be categorized as **science fiction and adventure films**. They are aimed at audiences who enjoy stories about space exploration, ancient civilizations, dinosaurs, natural disasters, and mythical adventures. The target audience may include fans of action-packed and visually stunning movies with elements of fantasy and suspense.\n\n\n  Search results\n\nStargate\nInterstellar\nJurassic Park III\n2012\nMoana\n\n\n\n\n", "type": "Documentation", "name": "Nv_queries Use_cases", "path": "developers/academy/py/named_vectors/103_nv_queries/20_use_cases.mdx", "link": "https://weaviate.io/developers/academy/py/named_vectors/nv_queries/use_cases", "timestamp": "2024-05-08 10:47:40", "reader": "JSON", "meta": {}, "chunks": []}