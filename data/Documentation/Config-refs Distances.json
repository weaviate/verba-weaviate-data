{"text": "\n\n- [Configuration: Schema](../manage-data/collections.mdx)\n- [References: REST API: Schema](/developers/weaviate/api/rest#tag/schema)\n- [Concepts: Data Structure](../concepts/data.md)\n\n## Available distance metrics\n\nIf not specified explicitly, the default distance metric in Weaviate is\n`cosine`. It can be [set in the vectorIndexConfig](/developers/weaviate/config-refs/schema/vector-index.md#how-to-configure-hnsw) field as part of the schema ([example](../manage-data/collections.mdx#specify-a-distance-metric)) to any of the following types:\n\nIn all cases, larger distance values indicate lower similarity. Conversely, smaller distance values indicate higher similarity.\n\n\n| Name | Description | Definition | Range | Examples |\n| --- | --- | --- | --- | --- |\n| `cosine` | Cosine (angular) distance. [See note 1 below] | `1 - cosine_sim(a,b)` | `0  | `0`: identical vectors `2`: Opposing vectors. |\n| `dot` | A dot product-based indication of distance. More precisely, the negative dot product. [See note 2 below] | `-dot(a,b)` | `-\u221e  | `-3`: more similar than `-2` `2`: more similar than `5` |\n| `l2-squared` | The squared euclidean distance between two vectors. | `sum((a_i - b_i)^2)` | `0  | `0`: identical vectors |\n| `hamming` | Number of differences between vectors at each dimensions. | sum(&#124;a_i != b_i&#124;) | `0  | `0`: identical vectors |\n| `manhattan` | The distance between two vector dimensions measured along axes at right angles.  | sum(&#124;a_i - b_i&#124;) | `0  | `0`: identical vectors |\n\n\n\nIf you're missing your favorite distance type and would like to contribute it to Weaviate, we'd be happy to review your [PR](https://github.com/weaviate/weaviate).\n\n\n1. If `cosine` is chosen, all vectors are normalized to length 1 at import/read time and dot product is used to calculate the distance for computational efficiency.\n2. Dot Product on its own is a similarity metric, not a distance metric. As a result, Weaviate returns the negative dot product to stick with the intuition that a smaller value of a distance indicates a more similar result and a higher distance value indicates a less similar result.\n\n\n### Distance implementations and optimizations\n\nOn a typical Weaviate use case the largest portion of CPU time is spent calculating vector distances. Even with an approximate nearest neighbor index - which leads to far fewer calculations - the efficiency of distance calculations has a major impact on [overall performance](/developers/weaviate/benchmarks/ann.md).\n\nYou can use the following overview to find the best possible combination of distance metric and CPU architecture / instruction set.\n\n| Distance | `linux/amd64 AVX2` | `darwin/amd64 AVX2` | `linux/amd64 AVX512` | `linux/arm64` | `darwin/arm64` |\n| --- | --- | --- | --- | --- | --- |\n| `cosine` | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_amd64.s) | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_amd64.s) | no SIMD | no SIMD | no SIMD |\n| `dot` | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_amd64.s) | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_amd64.s) | no SIMD | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_arm64.s)From `v1.21` | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/dot_arm64.s)From `v1.21` |\n| `l2-squared` | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/l2_amd64.s) | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/l2_amd64.s) | no SIMD | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/l2_arm64.s)From `v1.21` | [optimized](https://github.com/weaviate/weaviate/blob/master/adapters/repos/db/vector/hnsw/distancer/asm/l2_arm64.s)From `v1.21` |\n| `hamming` | no SIMD | no SIMD | no SIMD | no SIMD | no SIMD |\n| `manhattan` | no SIMD | no SIMD | no SIMD | no SIMD | no SIMD |\n\nIf you like dealing with Assembly programming, SIMD, and vector instruction sets we would love to receive your contribution for one of the combinations that have not yet received an SIMD-specific optimization.\n\n### Distance fields in the APIs\n\nThe `distance` is exposed in the APIs in two ways:\n\n* Whenever a vector search is involved, the distance can be displayed as part of the results, for example using `_additional { distance }`\n* Whenever a vector search is involved, the distance can be specified as a limiting criterion, for example using `nearVector({distance: 1.5, vector: ... })`\n\nNote: The `distance` field was introduced in `v1.14.0`. In previous versions, only `certainty` (see below) was available.\n\n### Distance vs Certainty\n\nPrior to version `v1.14` only `certainty` was available in the APIs. The\noriginal ideas behind certainty was to normalize the distance score into a\nvalue between `0 \n", "type": "Documentation", "name": "Config-refs Distances", "path": "developers/weaviate/config-refs/distances.md", "link": "https://weaviate.io/developers/weaviate/config-refs/distances", "timestamp": "2024-05-08 10:49:52", "reader": "JSON", "meta": {}, "chunks": []}