{"text": "\n\n\n\n## Overview\n\nThis section shows how to retrieve aggregate data from a results set using the `Aggregate` function.\n\nGenerally, the usage of `Aggregate` is similar to that of searches using the `Get` function. The main difference is that `Aggregate` returns aggregated data, rather than objects. As `Aggregate` deals with aggregated data, it enables additional (meta) properties such as object counts, as well as aggregated properties such as sums and averages.\n\n- API References: GraphQL: Aggregate\n\n## `Aggregate` function requirements\n\nTo use `Aggregate`, you must specify at least:\n- The target `class` to search, and\n- One or more aggregated properties. The aggregated properties can include:\n    - The `meta` property,\n    - An object property, OR\n    - The `groupedBy` property (if using `groupBy`).\n\nYou must then select at least one sub-property for each selected property.\n\nSee the `Aggregate` function syntax page for details.\n\n## Retrieve a `meta` property\n\nThe `meta` property has only one sub-property (`count`) available. This returns the count of objects matched by the query.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n## Retrieve aggregated object `properties`\n\nYou can retrieve aggregations of `text`, `number`, `int`, or `boolean` data types.\n\nThe available sub-types vary for each data type, except for `type` which is available to all, and `count` which is available to all but cross-references.\n\n### Example with `text`\n\nThe following example retrieves information about the most commonly occurring examples in the `question` property:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n### Example with `int`\n\nThe following example retrieves the sum of the `points` property values:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n## Retrieve `groupedBy` properties\n\nYou can use the `groupBy` variable to group the results set into subsets. Then, you can retrieve the grouped aggregate data for each group through the `groupedBy` properties.\n\nFor example, to list all distinct values of a property, and the counts for each:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n\n\n\n## With `nearXXX`\n\nWhen using a similarity search operator (i.e. `nearXXX`) with `Aggregate`, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - _all_ objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the `Aggregate` output, you **must** set a limit on:\n- The number of results returned (with `limit`), or\n- How similar the results are to the query (with `distance`).\n\n### Set an object limit\n\nYou can set the `objectLimit` argument to specify the maximum number of results to be aggregated.\n\nThe query below retrieves the 10 `question` objects that have the vectors that are closest to the vector for `\"animals in space\"`. The query also returns the sum total of the `point` property.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n\n### Set a maximum `distance`\n\nYou can set the `distance` operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe query below retrieves the 10 `question` objects that have vectors that are within a distance of `0.19` to the vector for `\"animals in space\"`. It also returns the sum total of the `point` property.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n\n## Add a conditional (`where`) filter\n\nYou can add a conditional filter to any aggregate search query to filter the results set.\n\nThis example searches for objects where the `round` property equals `Double Jeopardy!` and returns the object count.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\n  The query should produce a response like the one below:\n\n  \n\n\n\n\n\n\n\n\n", "type": "Documentation", "name": "search-aggregate", "path": "developers/weaviate/search/aggregate.md", "link": "https://weaviate.io/developers/weaviate/search/aggregate", "timestamp": "2023-11-13 10:41:28", "reader": "JSON", "meta": {}, "chunks": []}