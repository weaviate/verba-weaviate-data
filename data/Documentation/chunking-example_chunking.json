{"text": "\n\n -->\n\nimport PreviewUnit from '../../_snippets/preview.mdx'\n\n\n\n## &nbsp;&nbsp;Overview\n\nIn the preceding sections, you've learned about chunking, and how to do it, using fixed size chunks or variable size chunks.\n\nIn this section and next, we'll show you holistic examples of chunking in action. We'll ingest multiple sections of a book using different chunking methods before comparing how search performs.\n\n## &nbsp;&nbsp;Chunking real data\n\nYou've already seen examples of chunking with a section of the Pro Git book*. In this section, we'll use multiple entire chapters of the book, in total containing 14 sections.\n\n### &nbsp;&nbsp;Source data\n\nHere, we retrieve the source data from the Pro Git book, using the `requests` library. We will save each section as a separate object, containing some metadata (chapter title and filename) as well as the text.\n\nThe details here aren't important, as the source could be anything, such as a database, PDFs, or even videos. The important thing is to obtain a set of texts for us to try various chunking strategies.\n\n\n\n\n\n\n\nThis process yields 14 text objects - one for each section. Each one contains a chapter title, filename, and the text of the section.\n\n\n  Take a look at some sample sections\n\n```\n{\n  \"body\": \"=== About Version Control\\n\\n(((version control)))\\nWhat is \\\"`version control`\\\", and why should you care?\\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later.\\nFor the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.\\n\\nIf you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.\\nIt allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.\\nUsing a VCS also generally means that if you screw things up or lose files, you can easily recover.\\nIn addition, you get all this for very little overhead.\\n\\n==== Local Version Control Systems\\n\\n(((version control,local)))\\nMany people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).\\nThis approach is very common because it is so simple, but it is also incredibly error prone.\\nIt is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.\\n\\nTo deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.\\n\\n.Local version control diagram\\nimage::images/local.png[Local version control diagram]\\n\\nOne of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.\\nhttps://www.gnu.org/software/rcs/[RCS^] works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.\\n\\n==== Centralized Version Control Systems\\n\\n(((version control,centralized)))\\nThe next major issue that people encounter is that they need to collaborate with developers on other systems.\\nTo deal with this problem, Centralized Version Control Systems (CVCSs) were developed.\\nThese systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place.(((CVS)))(((Subversion)))(((Perforce)))\\nFor many years, this has been the standard for version control.\\n\\n.Centralized version control diagram\\nimage::images/centralized.png[Centralized version control diagram]\\n\\nThis setup offers many advantages, especially over local VCSs.\\nFor example, everyone knows to a certain degree what everyone else on the project is doing.\\nAdministrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.\\n\\nHowever, this setup also has some serious downsides.\\nThe most obvious is the single point of failure that the centralized server represents.\\nIf that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.\\nIf the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.\\nLocal VCSs suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.\\n\\n==== Distributed Version Control Systems\\n\\n(((version control,distributed)))\\nThis is where Distributed Version Control Systems (DVCSs) step in.\\nIn a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.\\nThus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.\\nEvery clone is really a full backup of all the data.\\n\\n.Distributed version control diagram\\nimage::images/distributed.png[Distributed version control diagram]\\n\\nFurthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.\\nThis allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.\\n\",\n  \"chapter_title\": \"01-introduction\",\n  \"filename\": \"about-version-control.asc\"\n}\n```\n\n\n\n### &nbsp;&nbsp;Chunking\n\nNow, let's apply the following chunking methods on each section:\n\n- Fixed-length chunks (and 20% overlap)\n    - With 25 words per chunk, and\n    - With 100 words per chunk\n- Variable-length chunks, using paragraph markers, and\n- Mixed-strategy chunks, using paragraph markers and a minimum chunk length of 25 words.\n\nWe'll also add metadata to the chunk, such as the filename and the chapter name, as well as the chunk number.\n\nOne implementation is shown below:\n\n\n  Helper functions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe now have four sets of chunks, according to the four chunking methods we used. Take a look:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### &nbsp;&nbsp;Import\n\nWe can now import the chunks into Weaviate. To allow for easy comparisons, we'll import each set of chunks into the same collection, while adding a `chunking_method` property to each chunk for easy filtering.\n\n\n\n\n\n\n\n### &nbsp;&nbsp;Inspection\n\nBefore we move on, let's check that the chunks were imported correctly. We'll retrieve the total count of objects, as well as object counts according to each chunking strategy.\n\n\n\n\n\n\n\nThis should produce an output like this:\n\n\n\nThese counts match the number of chunks we created, so we can be confident that the import was successful.\n\nIn the next section, we'll try out some searches on these chunks.\n\n## &nbsp;&nbsp;Notes\n\n\n*Available through the Creative Commons Attribution-Non Commercial-Share Alike 3.0 license.\n\n\n&nbsp;&nbsp;Review\n\n\n\nAny quiz questions\n\n### &nbsp;&nbsp;Review exercise\n\nTry out ...\n\n### &nbsp;&nbsp;Key takeaways\n\nAdd summary\n\n\n\n\n", "type": "Documentation", "name": "chunking-example_chunking", "path": "developers/academy/standalone/chunking/30_example_chunking.mdx", "link": "https://weaviate.io/developers/academy/standalone/chunking/example_chunking", "timestamp": "2024-02-08 21:19:41", "reader": "JSON", "meta": {}, "chunks": []}