{"text": "\n## Overview\n\nAs a vector database, Weaviate make use of vector representations, also known as \"embeddings\", of data objects.\n\nOne way to generate these vectors is to use a \"vectorizer\" module, which will generate a vector at import and query time. This can be a convenient method if you are using a publicly available model and want to simplify your pipeline.\n\nAlternatively, you can supply your own, \"custom\", vector embeddings at import time as well as for any vector-based queries. This is useful if you have a custom model, or if you want to use a model that is not available through a Weaviate module.\n\nThis tutorial will guide you through the process of using Weaviate with your own vectors. We will:\n\n1. Create a Weaviate instance\n2. Connect to the Weaviate instance\n3. Import your data, specifying your own vectors\n4. Perform a vector search with Weaviate\n\n\n## Data\n\nWe'll use as an example a tiny dataset consisting of 10 questions from the popular quiz show \"Jeopardy!\". Each object has an associated vector embedding.\n\nIn this example, these vectors were obtained through an OpenAI API, using the `text-embedding-ada-002` model. But your vectors can come from any source, such as another inference service provider (e.g Cohere or Hugging Face) or your own fine-tuned model.\n\n\n  Take a look at the dataset\n\n  |    | Category   | Question                                                                                                          | Answer                  | Vector                                             |\n  |---:|:-----------|:------------------------------------------------------------------------------------------------------------------|:------------------------| ---------------------------------------------------|\n  |  0 | SCIENCE    | This organ removes excess glucose from the blood & stores it as glycogen                                          | Liver                   | [ -0.006632288, -0.0042016874, ..., -0.020163147 ] |\n  |  1 | ANIMALS    | It's the only living mammal in the order Proboseidea                                                              | Elephant                | [ -0.0166891, -0.00092290324, ..., -0.032253385 ]  |\n  |  2 | ANIMALS    | The gavial looks very much like a crocodile except for this bodily feature                                        | the nose or snout       | [ -0.015592773, 0.019883318, ..., 0.0033349802 ]   |\n  |  3 | ANIMALS    | Weighing around a ton, the eland is the largest species of this animal in Africa                                  | Antelope                | [ 0.014535263, -0.016103541, ..., -0.025882969 ]   |\n  |  4 | ANIMALS    | Heaviest of all poisonous snakes is this North American rattlesnake                                               | the diamondback rattler | [ -0.0030859283, 0.015239313, ..., -0.021798335 ]  |\n  |  5 | SCIENCE    | 2000 news: the Gunnison sage grouse isn't just another northern sage grouse, but a new one of this classification | species                 | [ -0.0090561025, 0.011155112, ..., -0.023036297 ]  |\n  |  6 | SCIENCE    | A metal that is \"ductile\" can be pulled into this while cold & under pressure                                     | wire                    | [ -0.02735741, 0.01199829, ..., 0.010396339 ]      |\n  |  7 | SCIENCE    | In 1953 Watson & Crick built a model of the molecular structure of this, the gene-carrying substance              | DNA                     | [ -0.014227471, 0.020493254, ..., -0.0027445166 ]  |\n  |  8 | SCIENCE    | Changes in the tropospheric layer of this are what gives us weather                                               | the atmosphere          | [ 0.009625228, 0.027518686, ..., -0.0068922946 ]   |\n  |  9 | SCIENCE    | In 70-degree air, a plane traveling at about 1,130 feet per second breaks it                                      | Sound barrier           | [ -0.0013459147, 0.0018580769, ..., -0.033439033 ] |\n\n\n\n\n## Installation\n\nWeaviate is open source and you can easily run the binary on Linux or run a local instance from a Docker image on any OS, or even easier - you can create a free sandbox instance with the Weaviate Cloud Services (WCS).\n\nFor this example, we will assume that you are using a WCS instance with authentication enabled.\n\n\n## Client library\n\nFor the best experience with Weaviate, we recommend installing a Weaviate client library for one of these languages:\n\n\n\n\nFor JavaScript/TypeScript, we'll also need the `node-fetch` library to download the dataset, so make sure to `npm install node-fetch`.\n\n## Connect to Weaviate\n\nTo connect to your Weaviate instance, you need the following information:\n\n- The Weaviate **URL** (get it from WCS `Details` tab),\n- The Weaviate **API key** (if enabled - get it from WCS `Details` tab), and\n\nRun the following example code to connect to Weaviate. You can re-use the resulting `client` object in the following steps.\n\nimport ConnectToWeaviate from '/_includes/code/quickstart/connect.noheader.mdx'\n\n\n\n## Collection definition\n\nWeaviate stores data objects in collections, each of which is called a `class`. Each object has a set of properties, and a vector representation generated automatically by a vectorizer, or specified at import time.\n\nWeaviate lets you define vectorizers at the class level, with further control (e.g. specific model, or vectorization behavior) at the property level. Since you're bringing your own vectors, a vectorizer is not needed, so we will set the vectorizer to `none` here.\n\nIf you're using \"custom\" vectors that utilize the same model available through a Weaviate module, you have the option to **designate that specific model and module** as the class vectorizer.\n\nIn this tutorial, the vectors were produced using the OpenAI model `ada-002`. As this model is also available through the `text2vec-openai` module, it may be set as the class vectorizer. Doing so will enable Weaviate to generate vectors if any objects are upserted without a vector, and enable the `nearText` operator.\n\nNote that if a class has a specified vectorizer but you provide a vector at the time of import, Weaviate will use your supplied vector.\n\nimport CreateSchema from '/_includes/code/quickstart.byov.schema.mdx'\n\n\n\n\n## Import data with vectors\n\nHere is the set of 10 pre-vectorized Jeopardy questions in JSON format.\n\nThe following will load the question objects with vectors, and import them to Weaviate.\n\nNote that we use a batch import process, so that each request to the inference API contains multiple objects. You should use batch imports unless you have a good reason not to, as it will significantly improve the speed of data ingestion.\n\nimport ImportQuestionsWithVectors from '/_includes/code/quickstart.import.questions+vectors.mdx'\n\n\n\nDo *not* specify object vectors as an object property. This will cause Weaviate to treat it as a regular property, rather than as a vector embedding.\n\n## Query\n\nLet's say you want to find questions related to biology. We can do that by obtaining a vector embedding for \"biology\", and finding objects nearest to it.\nIn this example, we've used the OpenAI API to generate it, with the same `text-embedding-ada-002` model. Then, in the following query, we pass that vector to the `nearVector` operator:\n\n\n\n\nYou should see something like this:\n\n\n\n\n## Recap\n\nIf you made it here - well done. We have covered a lot, and you've successfully built a fully functioning vector database! \ud83e\udd73\n\nYou have:\n- Populated your Weaviate instance with your own vectors, and\n- Performed text similarity searches.\n\nOf course, there is a lot more to Weaviate that we have not yet covered, and probably a lot that you wish to know about. So we include a few links below that might help you to get started in your journey with us.\n\nAlso, please feel free to reach out to us on our community Slack. We love to hear from our users.\n\n\n", "type": "Documentation", "name": "starter-guides-custom-vectors", "path": "developers/weaviate/starter-guides/custom-vectors.mdx", "link": "https://weaviate.io/developers/weaviate/starter-guides/custom-vectors", "timestamp": "2024-02-08 21:22:02", "reader": "JSON", "meta": {}, "chunks": []}