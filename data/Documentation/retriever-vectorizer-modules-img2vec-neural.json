{"text": "\n\n## Overview\n\nThe `img2vec-neural` module enables Weaviate to obtain vectors locally images using a `resnet50` model.\n\n`img2vec-neural` encapsulates the model in a Docker container, which allows independent scaling on GPU-enabled hardware while keeping Weaviate on CPU-only hardware, as Weaviate is CPU-optimized.\n\nKey notes:\n\n- This module is not available on Weaviate Cloud Services (WCS).\n- Enabling this module will enable the `nearImage` search operator.\n- Model encapsulated in a Docker container.\n- This module is not compatible with Auto-schema. You must define your classes manually as shown below.\n\n\n## Weaviate instance configuration\n\nThis module is not available on Weaviate Cloud Services.\n\n### Docker Compose file\n\nTo use `multi2vec-clip`, you must enable it in your Docker Compose file (e.g. `docker-compose.yml`).\n\nWhile you can do so manually, we recommend using the Weaviate configuration tool to generate the `Docker Compose` file.\n\n#### Parameters\n\nWeaviate:\n\n- `ENABLE_MODULES` (Required): The modules to enable. Include `img2vec-neural` to enable the module.\n- `DEFAULT_VECTORIZER_MODULE` (Optional): The default vectorizer module. You can set this to `img2vec-neural` to make it the default for all classes.\n- `IMAGE_INFERENCE_API` (Required): The URL of the inference container.\n\nInference container:\n\n- `image` (Required): The image name of the inference container. (e.g. `semitechnologies/img2vec-pytorch:resnet50` or `semitechnologies/img2vec-keras:resnet50`)\n\n#### Example\n\nThis configuration enables `img2vec-neural`, sets it as the default vectorizer, and sets the parameters for the Docker container, including setting it to use `img2vec-pytorch:resnet50` image.\n\n```yaml\nversion: '3.4'\nservices:\n  weaviate:\n    image: semitechnologies/weaviate:||site.weaviate_version||\n    restart: on-failure:0\n    ports:\n     - \"8080:8080\"\n    environment:\n      QUERY_DEFAULTS_LIMIT: 20\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'\n      PERSISTENCE_DATA_PATH: \"./data\"\n      # highlight-start\n      ENABLE_MODULES: 'img2vec-neural'\n      DEFAULT_VECTORIZER_MODULE: 'img2vec-neural'\n      IMAGE_INFERENCE_API: \"http://i2v-neural:8080\"\n      # highlight-end\n      CLUSTER_HOSTNAME: 'node1'\n# highlight-start\n  i2v-neural:\n    image: semitechnologies/img2vec-pytorch:resnet50\n# highlight-end\n...\n```\n\n### Alternative: Run a separate container\n\nAs an alternative, you can run the inference container independently from Weaviate. To do so, you can:\n\n- Enable `img2vec-neural` in your Docker Compose file,\n- Omit `img2vec-neural` parameters,\n- Run the inference container separately, e.g. using Docker, and\n- Set `IMAGE_INFERENCE_API` to the URL of the inference container.\n\nThen, for example if Weaviate is running outside of Docker, set `IMAGE_INFERENCE_API=\"http://localhost:8000\"`. Alternatively if Weaviate is part of the same Docker network, e.g. because they are part of the same `docker-compose.yml` file, you can use Docker networking/DNS, such as `IMAGE_INFERENCE_API=http://i2v-clip:8080`.\n\nFor example, can spin up an inference container with the following command:\n\n```shell\ndocker run -itp \"8000:8080\" semitechnologies/img2vec-neural:resnet50-61dcbf8\n```\n\n\n## Class configuration\n\nYou can configure how the module will behave in each class through the Weaviate schema.\n\n### Vectorization settings\n\nYou can set vectorizer behavior using the `moduleConfig` section under each class and property:\n\n#### Class-level\n\n- `vectorizer` - what module to use to vectorize the data.\n- `imageFields` - property names for images to be vectorized\n\n#### Property-level\n\n- `dataType` - the data type of the property. For use in `imageFields`, must be set to `blob`.\n\n#### Example\n\nThe following example class definition sets the `img2vec-neural` module as the `vectorizer` for the class `FashionItem`. It also sets:\n\n- `image` property as a `blob` datatype and as the image field,\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"FashionItem\",\n      \"description\": \"Each example is a 28x28 grayscale image, associated with a label from 10 classes.\",\n      // highlight-start\n      \"vectorizer\": \"img2vec-neural\",\n      \"moduleConfig\": {\n        \"img2vec-neural\": {\n          \"imageFields\": [\n            \"image\"\n          ]\n        }\n      },\n      // highlight-end\n      \"properties\": [\n        // highlight-start\n        {\n          \"dataType\": [\n            \"blob\"\n          ],\n          \"description\": \"Grayscale image\",\n          \"name\": \"image\"\n        },\n        // highlight-end\n        {\n          \"dataType\": [\n            \"number\"\n          ],\n          \"description\": \"Label number for the given image.\",\n          \"name\": \"labelNumber\"\n        },\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"description\": \"label name (description) of the given image.\",\n          \"name\": \"labelName\"\n        }\n      ],\n    }\n  ]\n}\n```\n\n\n\n### Adding `blob` data objects\n\nAny `blob` property type data must be base64 encoded. To obtain the base64-encoded value of an image for example, you can use the helper methods in the Weaviate clients or run the following command:\n\n```bash\ncat my_image.png | base64\n```\n\n## Additional search operator\n\nThe `img2vec-neural` vectorizer module will enable the `nearImage` search operator.\n\n## Usage example\n\n### NearImage\n\n\n\n\n## About the model\n\n`resnet50` is a residual convolutional neural network with 25.5 million parameters trained on more than a million images from the ImageNet database. As the name suggests, it has a total of 50 layers: 48 convolution layers, 1 MaxPool layer and 1 Average Pool layer.\n\n### Available img2vec-neural models\n\nThere are two different inference models you can choose from. Depending on your machine (`arm64` or other) and whether you prefer to use multi-threading to extract feature vectors or not, you can choose between `keras` and `pytorch`. There are no other differences between the two models.\n- `resnet50` (`keras`):\n  - Supports `amd64`, but not `arm64`.\n  - Does not currently support `CUDA`\n  - Supports multi-threaded inference\n- `resnet50` (`pytorch`):\n  - Supports both `amd64` and `arm64`.\n  - Supports `CUDA`\n  - Does not support multi-threaded inference\n\n## Model license(s)\n\nThe `img2vec-neural` module uses the `resnet50` model.\n\nIt is your responsibility to evaluate whether the terms of its license(s), if any, are appropriate for your intended use.\n\n\n\n\n", "type": "Documentation", "name": "retriever-vectorizer-modules-img2vec-neural", "path": "developers/weaviate/modules/retriever-vectorizer-modules/img2vec-neural.md", "link": "https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/img2vec-neural", "timestamp": "2023-11-13 10:41:05", "reader": "JSON", "meta": {}, "chunks": []}