{"text": "\nWeaviate stores data in \"collections\". A collection is a set of objects that share the same data structure. In our movie database, we might have a collection of movies, a collection of actors, and a collection of reviews.\n\nHere we will create a collection of movies.\n\n##  Code\n\nThis example creates a collection for the movie data:\n\n\n\nEach collection definition must have a name. Then, you can define additional parameters like we've done in this example.\n\n##  Explain the code\n\n###  Properties\n\nProperties are the object attributes that you want to store in the collection. Each property has a name and a data type.\n\nIn our movie database, we have properties like `title`, `release_date` and `genre_ids`, with data types like `TEXT` (string), `DATE` (date), or `INT` (integer). It's also possible to have arrays of integers, like we have with `genre_ids`.\n\nAs a multimodal object, we also have the `poster` property which is the image data, which is saved as a `BLOB` (binary large object) data type.\n\n#### Auto-schema\n\nWeaviate can automatically [infer the schema](/developers/weaviate/config-refs/schema/index.md#auto-schema) from the data. However, it's a good practice to define the properties explicitly, for better control and to avoid surprises.\n\n###  Vectorizer configuration\n\nIf you do not specify the vector yourself, Weaviate will use a specified vectorizer to generate vector embeddings from your data.\n\nIn this code example, we specify the `multi2vec-clip` module. This module uses the CLIP model to generate vector embeddings from the text and image data.\n\nYou can specify any number of text and image properties to be used for vectorization, and weight them differently. The weights are used to determine the relative importance of each property in the vector embedding generation process. In this example, we vectorize the `poster` property (an image) with a 90% weight and the `title` property (a string) with a 10% weight.\n\n\n\n###  Generative configuration\n\nIf you wish to use your collection with a generative model (e.g. a large language model), you must specify the generative module.\n\nIn this code example, we specify the `openai` module (`generative-openai` is the full name) with default options.\n\n\n\n###  Python classes\n\nThe code example makes use of classes such as `Property`, `DataType` and `Configure`. They are defined in the `weaviate.classes.config` submodule and are used to define the collection.\n\nFor convenience, we import the submodule as `wc` and use classes from it.\n\n\n\n\n", "type": "Documentation", "name": "Mm_collections Create_collection", "path": "developers/academy/py/starter_multimodal_data/102_mm_collections/20_create_collection.mdx", "link": "https://weaviate.io/developers/academy/py/starter_multimodal_data/mm_collections/create_collection", "timestamp": "2024-05-08 10:48:05", "reader": "JSON", "meta": {}, "chunks": []}