{"text": "\n\n## &nbsp;&nbsp;Overview\n\nWeaviate offers three primary search types - namely **vector**, **keyword**, and **hybrid** searches. Let's briefly recap what they are, and how they work.\n\n### &nbsp;&nbsp;Code examples\n\nThese code examples are runnable, with the `v4` Weaviate Python client. Connect to the pre-configured demo instance of Weaviate with the following code, and try the examples below.\n\n\n\n \n    \n  \n\n\n\n## &nbsp;&nbsp;Vector search\n\nA vector search finds objects with the most similar vectors to the query vector.\n\nBecause each vector is a numerical representation of the underlying object, a vector similarity can be thought of as a similarity in meaning. Therefore a vector search is also called \"semantic search\".\n\nIn Weaviate, you can search for objects with similar vectors in any of the following ways:\n\nWith a source medium (e.g. text or image):\n\n\n\n \n    \n  \n\n\n\nWith a vector:\n\n\n\n \n    \n  \n\n\n\nWith an existing Weaviate object:\n\n\n\n \n    \n  \n\n\n\n## &nbsp;&nbsp;Keyword search\n\nA keyword search finds objects whose keywords (i.e. tokens) are the most relevant to the keywords (i.e. tokens) of the query. The relevance is determined by the BM25F algorithm.\n\nIntuitively, the BM25F algorithm determines \"relevance\" by considering how often a keyword appears in each field of the object, relative to how commonly the keyword appears in the entire dataset.\n\n\n\n \n    \n  \n\n\n\n## &nbsp;&nbsp;Hybrid search\n\nA hybrid search combines the results of a vector search and a keyword search. This is done by performing both searches, and them combining the two search results with a \"fusion\" algorithm.\n\n\n\n \n    \n  \n\n\n", "type": "Documentation", "name": "which_search-review", "path": "developers/academy/building_with_weaviate/201_which_search/05_review.mdx", "link": "https://weaviate.io/developers/academy/building_with_weaviate/which_search/review", "timestamp": "2024-02-08 20:20:55", "reader": "JSON", "meta": {}, "chunks": []}