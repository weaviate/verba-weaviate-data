{"text": "\n\n\n\n# How to configure a collection schema\n\n## Overview\n\nThis page describes collection schemas in Weaviate.\n\n\n\n\n### Auto-schema\n\nWe recommend that you define your schema manually to ensure that it aligns with your specific requirements. However, Weaviate also provides an auto-schema feature.\n\nWhen a collection definition is missing, or when the schema is inadequate for data import, the auto-schema feature generates a schema. The automatically generated schema is based on the Weaviate system defaults and the properties of the imported objects. For more information, see (Auto-schema).\n\n\n## Create a collection\n\nA schema describes the data objects that make up a collection. To create a collection, follow the example below in your preferred language.\n\n### Minimal example\n\nAt a minimum, you must specify the `class` parameter for the collection name.\n\nimport initialCaps from '/_includes/schemas/initial-capitalization.md'\n\n\n\n\n  \n    \n  \n\n  \n    \n  \n\n\n\n### Property definition\n\nYou can use the `properties` field to specify properties for the collection. A collection definition can include any number of properties.\n\n\n  \n    \n  \n\n  \n    \n  \n\n\n\nIn addition to the property name, you can use properties to configure parameters such as the data type, inverted index tokenization and more.\n\n- Property object configuration references\n- Available data types\n\n\n### Specify a vectorizer\n\nYou can set an optional `vectorizer` for each collection. If you specify a vectorizer for a collection, the specification overrides any default values that are present in the general configuration such as environment variables.\n\nThe following code sets the `text2vec-openai` module as the vectorizer for the `Article` collection.\n\n\n  \n    \n  \n\n  \n    \n  \n\n\n- Available vectorizers\n- Vectorizer configuration references\n\n### Collection level module settings\n\nConfigure the `moduleConfig` parameter at the collection-level to set collection-wide settings for module behavior. For example, you can configure the vectorizer to use a particular model (`model`), or to vectorize the collection name (`vectorizeClassName`).\n\n\n  \n    \n  \n\n  \n    \n  \n\n\nThe available parameters vary according to the module. (Learn more).\n\n\n### Property-level module settings\n\nConfigure the `moduleConfig` parameter at the property-level to set property-level settings for module behavior. For example, you can vectorize the property name (`vectorizePropertyName`), or ignore the property altogether (`skip`).\n\n\n  \n    \n  \n\n  \n    \n  \n\n\nThe available parameters vary according to the module. (Learn more).\n\n\n### Indexing, sharding and replication settings\n\nYou can also set indexing, sharding and replication settings through the schema. For example, you can set a vector index distance metric or a replication factor for a collection.\n\nThis code sets the replication factor.\n\nYou need a multi-node setup to test replication factors greater than 1.\n\n\n\n  \n    \n  \n\n  \n    \n  \n\n\n\nFor details on the configuration parameters, see the following configuration references:\n\n- Vector indexes\n- Inverted indexes\n- Sharding\n- Replication\n\n### Multi-tenancy\n\n\nTo enable multi-tenancy, set `multiTenancyConfig` to `{\"enabled\": true}` in the collection definition.\n\n```json\n{\n  \"class\": \"MultiTenancyClass\",\n  // highlight-start\n  \"multiTenancyConfig\": {\"enabled\": true}\n  // highlight-end\n}\n```\n\nFor more details on multi-tenancy operations, see Multi-tenancy operations.\n\n## Delete a collection\n\nimport CautionSchemaDeleteClass from '/_includes/schema-delete-class.mdx'\n\n\n\n## Update a collection definition\n\nSome parts of a collection definition are immutable, but you can modify other parts.\n\nThe following sections describe how to add a property to a collection and how to modify collection parameters.\n\n### Add a property\n\nYou can add a new property to an existing collection.\n\n\n  \n    \n  \n\n  \n    \n  \n\n\nYou cannot remove or rename a property that is part of a collection definition. This is due to the high compute cost associated with reindexing the data.\n\n### Modify a parameter\n\nYou can modify some parameters of a schema as shown below. However, many parameters are immutable and cannot be changed once set.\n\n\n  \n    \n  \n\n  \n\n  >  Coming soon. (Vote for the feature request.)\n\n  \n\n\n\n## Get the schema\n\nIf you want to review the schema, you can retrieve it as shown below.\n\n\n  \n    \n  \n\n  \n    \n  \n\n\nThe response is a JSON object like the one in this example.\n\n\n  Sample schema\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"Article\",\n      \"invertedIndexConfig\": {\n        \"bm25\": {\n          \"b\": 0.75,\n          \"k1\": 1.2\n        },\n        \"cleanupIntervalSeconds\": 60,\n        \"stopwords\": {\n          \"additions\": null,\n          \"preset\": \"en\",\n          \"removals\": null\n        }\n      },\n      \"moduleConfig\": {\n        \"text2vec-openai\": {\n          \"model\": \"ada\",\n          \"modelVersion\": \"002\",\n          \"type\": \"text\",\n          \"vectorizeClassName\": true\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"moduleConfig\": {\n            \"text2vec-openai\": {\n              \"skip\": false,\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"title\",\n          \"tokenization\": \"word\"\n        },\n        {\n          \"dataType\": [\n            \"text\"\n          ],\n          \"moduleConfig\": {\n            \"text2vec-openai\": {\n              \"skip\": false,\n              \"vectorizePropertyName\": false\n            }\n          },\n          \"name\": \"body\",\n          \"tokenization\": \"word\"\n        }\n      ],\n      \"replicationConfig\": {\n        \"factor\": 1\n      },\n      \"shardingConfig\": {\n        \"virtualPerPhysical\": 128,\n        \"desiredCount\": 1,\n        \"actualCount\": 1,\n        \"desiredVirtualCount\": 128,\n        \"actualVirtualCount\": 128,\n        \"key\": \"_id\",\n        \"strategy\": \"hash\",\n        \"function\": \"murmur3\"\n      },\n      \"vectorIndexConfig\": {\n        \"skip\": false,\n        \"cleanupIntervalSeconds\": 300,\n        \"maxConnections\": 64,\n        \"efConstruction\": 128,\n        \"ef\": -1,\n        \"dynamicEfMin\": 100,\n        \"dynamicEfMax\": 500,\n        \"dynamicEfFactor\": 8,\n        \"vectorCacheMaxObjects\": 1000000000000,\n        \"flatSearchCutoff\": 40000,\n        \"distance\": \"cosine\",\n        \"pq\": {\n          \"enabled\": false,\n          \"bitCompression\": false,\n          \"segments\": 0,\n          \"centroids\": 256,\n          \"encoder\": {\n            \"type\": \"kmeans\",\n            \"distribution\": \"log-normal\"\n          }\n        }\n      },\n      \"vectorIndexType\": \"hnsw\",\n      \"vectorizer\": \"text2vec-openai\"\n    }\n  ]\n}\n```\n\n\n\n## Related pages\n- Tutorial: Schema\n- References: Schema\n- References: REST API: Schema\n- Concepts: Data Structure\n\n\n\n", "type": "Documentation", "name": "configuration-schema-configuration", "path": "developers/weaviate/configuration/schema-configuration.md", "link": "https://weaviate.io/developers/weaviate/configuration/schema-configuration", "timestamp": "2023-11-02 10:53:01", "reader": "JSON", "meta": {}, "chunks": []}