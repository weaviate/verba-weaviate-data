{"text": "\n\n\n\n\nIf you are migrating a project from the Weaviate TypeScript client v2 to the v3 client, see the [migration page](/developers/weaviate/client-libraries/typescript/v2_v3_migration) for additional details.\n\n## Client configuration\n\nThis section details how install and configure the v3 TypeScript client.\n\n### Install the package\n\nThe v3 client package has a new name, `weaviate-client`. Use [npm](https://www.npmjs.com/) to install the TypeScript client library package:\n\n```bash\nnpm install weaviate-client --tag next\n```\n\n### Import the Client\n\nThe v3 client uses `ES Modules`. Most of the sample code in the documentation also uses the `ES Module` style.\n\nIf your code requires `CommonJS` compatibility, use the `CommonJS` import style:\n\n\n\n\n```ts\nimport weaviate from 'weaviate-client'\n```\n\n\n\n\n```ts\nconst weaviate = require('weaviate-client').default;\n```\n\n\n\n\n### TypeScript setup\n\nEdit your project's configuration files to make these changes:\n\n- Add `\"type\": \"module\"` to `package.json` \n- Add the following code to [`tsconfig.json`](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html)\n\n\n    tsconfig.json file\n\n```json\n{\n    \"compilerOptions\": {\n      \"target\": \"esnext\",\n      \"module\": \"esnext\", \n      \"moduleResolution\": \"Node16\",\n      \"esModuleInterop\": true,\n      \"lib\": [ \"es2018\" ],\n  }\n}\n```\n   \n\n\n## Connect a client\n\nThe v3 client provides helper functions to connect your application to your Weaviate instance.\n\n[Embedded Weaviate](/developers/weaviate/installation/embedded) is not supported in the v3 client. The v2 client supports embedded Weaviate.\n\n### Connect to Weaviate\n\n\n\n\n```ts\nimport weaviate from 'weaviate-client'\n\nconst client = await weaviate.connectToWCS(\n  'WEAVIATE_INSTANCE_URL', { // Replace WEAVIATE_INSTANCE_URL with your instance URL\n    authCredentials: new weaviate.ApiKey('WEAVIATE_INSTANCE_API_KEY'), \n    headers: {\n      'X-OpenAI-Api-Key': process.env.OPENAI_API_KEY || '',  // Replace with your inference API key\n    }\n  } \n)\n\nconsole.log(client)\n```\n\n\n\n\n```ts\nimport weaviate from 'weaviate-client'\n\nconst client = await weaviate.connectToLocal({\n    httpHost: 'localhost',\n    httpPort: 8080,\n    grpcHost: 'localhost',\n    grpcPort: 50051,\n    headers: {\n      'X-OpenAI-Api-Key': process.env.OPENAI_API_KEY || ''\n    }\n  }\n)\n \nconsole.log(client)\n```\n\n\n\n\n```ts\nimport weaviate from 'weaviate-client'\n\nconst client = await weaviate.client({\n    rest: {\n      host: 'WEAVIATE_INSTANCE_HOST_NAME',\n      port: 8080,\n      secure: true\n    },\n    grpc: {\n      host: 'WEAVIATE_INSTANCE_HOST_NAME',\n      port: 50051,\n      secure: true\n    },\n    auth: {\n      apiKey: process.env.WEAVIATE_API_KEY || ''\n    },\n    headers: {\n      'X-OpenAI-Api-Key': process.env.OPENAI_API_KEY || ''\n    }\n  }\n)\n \nconsole.log(client)\n```\n\n\n\n\n### Close client method \n\n\n\n### Authentication\n\nimport ClientAuthApiKey from '/developers/weaviate/client-libraries/_components/client.auth.api.key.mdx'\n\n\n\n```ts\n// Instantiate the client with the auth config\nconst client: WeaviateClient = await weaviate.connectToWCS(\n  'WEAVIATE_INSTANCE_URL', // Replace WEAVIATE_INSTANCE_URL with your instance URL\n  {\n    authCredentials: new weaviate.ApiKey('WEAVIATE_INSTANCE_API_KEY'), // Add your WCS API KEY here\n  } \n)\n\nconsole.log(client)\n```\n\nTo include custom headers, such as API keys for third party services, add the custom headers to the `headers` section when you initialize the client:\n\n```ts\nconst client: WeaviateClient = await weaviate.connectToWCS(\n  'WEAVIATE_INSTANCE_URL', // Replace WEAVIATE_INSTANCE_URL with your instance URL\n  {\n    authCredentials: new weaviate.ApiKey('WEAVIATE_INSTANCE_API_KEY'), // Add your WCS API KEY here\n    headers: {\n      someHeaderName: 'header-value', \n    }\n  } \n)\n```\n\nThe client sends the headers every it makes a request to the Weaviate instance.\n\n## Changes in v3\n\nThis section highlights some features of the v3 TypeScript client.\n\n### Design philosophy\n\nThe v3 client interacts with collections as the primary way to work with objects in your Weaviate database.\n\nYour application code creates an object that represents a collection. This object enables search and CRUD operations to be performed against it.\n\nThis example returns objects from the `JeopardyQuestion` collection.\n\n```js\nconst myCollection = client.collections.get('JeopardyQuestion');\n\nconst result = await myCollection.query.fetchObjects()\n\nconsole.log(JSON.stringify(result, null, 2));\n```\n\n### Node support only \n\nThe gRPC protocol is fast and provides other internal benefits. Unfortunately, gRPC does not support browser-based client development.\n\nThe v3 client uses gRPC to connect to your Weaviate instance. The client supports Node.js, server-based development. It does not support browser-based web client development.\n\nTo develop a browser-based application, use the [v2 client](/developers/weaviate/client-libraries/typescript/typescript-v2).\n\n### Batch Inserts\n\nThe `insertMany()` method makes it easier to bulk insert a large number of objects.\n\nFor inserts of over 5000 objects, use `insertMany()` as part of a batch process:\n\n```js\nconst questions = client.collections.get(\"CollectionName\")\n\nconst batchSize = 1000; // define your batch size\n\nasync function insertBatch() {\n  try {\n    await questions.data.insertMany(dataBatch);\n    console.log('Batch inserted successfully');\n  } catch (error) {\n    console.error('Error inserting batch:', error);\n  }\n}\n\nasync function batchInsert() {\n  for (let i = 0; i ('Article');\nawait collection.insert({ // compiler error since 'body' field is missing in '.insert'\n  title: 'TS is awesome!',\n  wordcount: 9001\n})\n```\n\n### Async operations\n\nAll client v3 methods, with the exception of `collection.use()`, use ES6 Promises with asynchronous code. This means you have to use `.then()` after function calls, or wrap your code `async/await` blocks.\n\nWhen there is an asynchronous code error, a promise returns the specific error message. If you use `async` and `await`, a rejected promises acts like a thrown exception\n\n### Type Safety\n\nThe v3 client enables strong typing with custom TypeScript types and user-defined generics.\n\nYou can find the type definitions in the folder that stores your Weaviate client package. The package is stored in a folder under the `node/` directory. Custom type definitions are stored in sub-folder for each bundle. \n\nFor example, the `index.d.ts` file stores type definitions for the `cjs` bundle:\n\n```bash \nnode/cjs/index.d.ts\n```\n\nThe v3 client also adds internal features that make JavaScript development more type-safe.\n\n## Example code\n\nHere are some resources to help you get started using the client.\n\n### Recipes\n\nThe [recipes repository](https://github.com/weaviate/recipes-ts) on Github has sample code for common use cases.\n\n### Demo applications\n\nThere are demo applications written in TypeScript and JavaScript here:\n\n- [QuoteFinder](https://github.com/weaviate/quote-finder/tree/main)\n- [NuxtVectorSearch](https://github.com/malgamves/nuxt-typescript-vector-search)\n\n## Client releases\n\n\n\n## Client change logs\n\nSee the client [change logs on GitHub](https://github.com/weaviate/typescript-client/releases).\n\n", "type": "Documentation", "name": "Typescript Typescript-v3", "path": "developers/weaviate/client-libraries/typescript/typescript-v3.md", "link": "https://weaviate.io/developers/weaviate/client-libraries/typescript/typescript-v3", "timestamp": "2024-05-08 10:49:40", "reader": "JSON", "meta": {}, "chunks": []}