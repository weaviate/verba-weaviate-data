{"text": "\n\n## &nbsp;&nbsp;Overview\n\nimport ReactPlayer from 'react-player/lazy'\n\n\n\n\nA `schema` in Weaviate is the blueprint that defines its data structure for each `class` of objects. A class is a collection of objects of the same type.\n\nIn this section, you will learn how to define a schema and gain insight into some key considerations while doing so.\n\n## &nbsp;&nbsp;How to define a schema\n\nAs you learned earlier, a schema definition includes a great deal of information. Let's cover a few of those properties in this section, starting with:\n- The metadata such as its name (`class`),\n- Its data `properties`,\n- The `vectorizer`, and\n- Module configurations (`moduleConfig`).\n\n### &nbsp;&nbsp;Metadata definition\n\nYou can define for each class and property a name and description.\n\nFor classes, these are called:\n- `class` (required), and\n- `description` (optional).\n\nFor properties, these are called:\n- `name` (required), and\n- `description` (optional).\n\nIn defining a class, the only required parameter is `class`, as the rest can be inferred by Weaviate. However, it is recommended to include a description for each class and property, as this will help you and others understand the data structure.\n\nTo define a class, you can use this syntax.\n\n\n\n\n\n\n\n### &nbsp;&nbsp;Properties with data types\n\nEach `class` definition will include one or more properties, which must have a data type. If you do not specify a data type, Weaviate will automatically assign one based on your data. But for more predictable results, we recommend that you manually specify them in the schema if possible.\n\nCurrently, Weaviate data type support includes the following types:\n\n\n\n  Available data types in Weaviate\n  \n\n\nNote that most data types can include one such instance, or an array of instances, such as `text` or `text[]`.\n\n\n\n\n\n\n\nIf you ran the first class creation command shown, and this command, Weaviate will throw an error as the class `Article` already exists. For the purposes of this section, delete the class by running the following command.\n\n**Deleting a class should not be done lightly, as deleting a class will delete all of its objects.**\n\n\n\n\n\n\n\n\n### &nbsp;&nbsp;Setting the vectorizer\n\nThe `vectorizer` parameter for the class specifies the Weaviate module that will be used to generate vector embeddings for the class.\n\nFor text objects, you would typically select one of the `text2vec` modules - such as `text2vec-cohere`, `text2vec-huggingface`, `text2vec-openai`, or `text2vec-palm`.\n\nModules are enabled at the instance level through its configuration. You can see the list of available modules for your particular instance by running the following command.\n\n\n\n\n\n\n\n\n\nBy now, you've probably seen mentions of Weaviate `modules` here and there. Modules are optional Weaviate components used to enhance and customize its capabilities.\n\nWeaviate Academy units will generally assume WCS usage, which is pre-configured with a set of modules. We will cover how to enable modules for local instances in another unit, or you can see our Docker installation page.\n\nWCS instances come pre-configured with a number of modules. For example, the response below shows that the `text2vec-openai` module is available, so we can use it in our schema.\n\n\n   See the JSON response\n\n```json\n{\n  \"generative-openai\": {\n    \"documentationHref\": \"https://beta.openai.com/docs/api-reference/completions\",\n    \"name\": \"Generative Search - OpenAI\"\n  },\n  \"qna-openai\": {\n    \"documentationHref\": \"https://beta.openai.com/docs/api-reference/completions\",\n    \"name\": \"OpenAI Question & Answering Module\"\n  },\n  \"ref2vec-centroid\": {},\n  \"text2vec-cohere\": {\n    \"documentationHref\": \"https://docs.cohere.com/docs/embeddings\",\n    \"name\": \"Cohere Module\"\n  },\n  \"text2vec-huggingface\": {\n    \"documentationHref\": \"https://huggingface.co/docs/api-inference/detailed_parameters#feature-extraction-task\",\n    \"name\": \"Hugging Face Module\"\n  },\n  \"text2vec-openai\": {\n    \"documentationHref\": \"https://beta.openai.com/docs/guides/embeddings/what-are-embeddings\",\n    \"name\": \"OpenAI Module\"\n  }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\nNote that you can set the vectorizer to `None`, if you would prefer to only deal with your own vectors by providing them at import time.\n\nIn some cases, you can use a vectorizer while uploading them at import time. In this case, you will need to ensure that the vectorizer (e.g. `text2vec-cohere`) is using the same model as the one you used to generate the vectors, so that the vectors are compatible.\n\n### &nbsp;&nbsp;Class-level module configurations\n\nYou can set the `moduleConfig` parameter at the class-level to set class-wide settings for module behavior. For example, the vectorizer could be configured to set the model used (`model`), or whether to vectorize the class name (`vectorizeClassName`).\n\n\n\n\n\n\n\n\n\n### &nbsp;&nbsp;Property-level module configurations\n\nYou can also set the `moduleConfig` parameter at the property level to set module behavior for each property. For example, you could set whether to vectorize the property name (`vectorizePropertyName`), or whether to skip the property from vectorization altogether (`skip`).\n\nIn the following example, the `skip` parameter is set to `True` for the `url` property, so that the URL text will be skipped when producing a vector embedding for the object.\n\n\n\n\n\n\n\n\n\nThere are other settings that we haven't covered yet - such as the index settings, or cluster settings such as those relating to replication. We'll cover these in other units later on.\n\n## &nbsp;&nbsp;Why so many options?\n\nThis might all seem very complex, especially if you are new to Weaviate or databases. But these options will directly impact how your data is stored and how it will react to various queries.\n\nWe'll ingest some data in the next section, and then you'll see how these options impact the results of your queries.\n\n## &nbsp;&nbsp;Review\n\n### &nbsp;&nbsp;Review exercise\n\nDo you have a dataset that you are interested in adding to Weaviate?\n\nTry to construct a schema for that dataset based on what you've learned here.\n\n### &nbsp;&nbsp;Key takeaways\n\n- A schema in Weaviate serves as a blueprint defining the data structure for each class of objects.\n- A class represents a collection of objects of the same type.\n- Schema definition includes metadata, data properties, the vectorizer, and module configurations.\n- Data properties in a class need to be assigned a specific data type, such as `text` or `number`.\n- The vectorizer parameter determines which Weaviate module will be used to generate vector embeddings for a class.\n- Module configurations at the class and property levels allow customization of module behavior across the entire class or per property, respectively.\n\n\n\n", "type": "Documentation", "name": "schema_and_imports-schema", "path": "developers/academy/zero_to_mvp/103_schema_and_imports/20_schema.mdx", "link": "https://weaviate.io/developers/academy/zero_to_mvp/schema_and_imports/schema", "timestamp": "2024-02-08 20:21:27", "reader": "JSON", "meta": {}, "chunks": []}