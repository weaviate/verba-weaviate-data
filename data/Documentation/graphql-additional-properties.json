{"text": "\n\n\n\n\n## Overview\n\nVarious 'additional properties', also called 'metadata', can be retrieved in queries.\n\n### Available additional properties\n\nThe fields `id`, `vector`, `certainty`, `distance`, `featureProjection` and `classification` are available by default.\n\nFurther additional properties may be available for each query, depending on the query type as well as enabled Weaviate modules.\n\nNote that only the `id` is available from cross-referenced objects.\n\n### Requesting additional properties\n\nIn GraphQL queries, all additional properties to be retrieved can be set through the reserved `_additional{}` property.\n\nEach of the client libraries may handle this differently. See the examples below.\n\n### Usage example\n\nAn example query getting the UUID and the distance.\n\n\n\n\n\n  Expected response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"Article\": [\n        {\n          \"_additional\": {\n            \"distance\": 0.15422738,\n            \"id\": \"e76ec9ae-1b84-3995-939a-1365b2215312\"\n          },\n          \"title\": \"How to Dress Up For an Untraditional Holiday Season\"\n        },\n        {\n          \"_additional\": {\n            \"distance\": 0.15683109,\n            \"id\": \"a2d51619-dd22-337a-8950-e1a407dab3d2\"\n          },\n          \"title\": \"2020's biggest fashion trends reflect a world in crisis\"\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n\n\n## Additional properties\n\n### id\n\nUse the `id` field to fetch the object UUID.\n\n### vector\n\nUse the `vector` field to fetch the vector representation of the data object\n\n### generate\n\n\nThe `generate` field can be used to perform a generative search.\n\nA `generate` query will cause corresponding additional result fields to be available, such as `singleResult`, `groupedResult` and `error`.\n\nFor examples, see the related how-to page.\n\n\n### rerank\n\n\nThe `rerank` field can be used to reorder the search results. It accepts two parameters:\n\n| Parameter    | Required | Type       | Description  |\n|--------------|----------|------------|--------------|\n| `property`   | yes      | `string`   | Which property to pass to the reranker. For example, you may want to run a similarity search on a Products collection, then rerank specifically on the Name field. |\n| `query`      | no       | `string`    | Optionally specify a different query. |\n\nA `rerank` query will cause corresponding additional `score` field to be available.\n\nFor examples, see the related how-to page.\n\n\n### creationTimeUnix\n\nUse the `creationTimeUnix` field to fetch the data object creation timestamp.\n\n### lastUpdateTimeUnix\n\nUse the `lastUpdateTimeUnix` field to fetch the data object last updated timestamp.\n\n### Vector search metadata\n\nUse the `distance` or `certainty` field to fetch a vector similarity metric between the query vector and each result of a vector search.\n\n#### Distance\n\n\n`Distance` is the raw distance determined as part of the vector search, displayed in the same unit as the distance metric used.\n\nSee the full overview of distance metrics and the expected distance ranges.\n\nA lower value for a distance always means that two vectors are closer to one another than a higher value.\n\n#### Certainty (only for cosine distance)\n\n`Certainty` is an opinionated measure that always returns a number between 0 and 1. It is therefore only usable with fixed-range distance metrics, such as `cosine`.\n\n### Keyword search metadata\n\nUse the `score` and `explainScore` field to fetch the scores and explanations of each result of a keyword (BM25) search.\n\n#### Score\n\nThe `score` will be the BM25F score of the result. Note that this score is relative to the dataset and query.\n\n#### ExplainScore\n\nThe `explainScore` will explain the BM25F score of the result, broken down into its components. This can be used to understand why a result was scored the way it was.\n\n\n### Hybrid search metadata\n\nUse the `score` and `explainScore` field to fetch the scores and explanations of each result of a hybrid search.\n\n#### Score\n\nThe `score` will be the hybrid score of the result, based on the nominated fusion algorithm. Note that this score is relative to the dataset and query.\n\n#### ExplainScore\n\nThe `explainScore` will be the hybrid score of the result, broken down into its vector and keyword search components. This can be used to understand why a result was scored the way it was.\n\n\n### Classification\n\nWhen a data-object has been subjected to classification, you can get additional information about how the object was classified by running the following command:\n\n\n\n\n### Feature Projection\n\nUse feature projection to reduce the results' vectors to 2d or 3d for easy visualization. Currently t-SNE is used.\n\nTo tweak the feature projection optional parameters (currently GraphQL-only) can be provided. The values and their defaults are:\n\n| Parameter | Type | Default | Implication |\n|--|--|--|--|\n| `dimensions` | `int` | `2` | Target dimensionality, usually `2` or `3` |\n| `algorithm` | `string` | `tsne` | Algorithm to be used, currently supported: `tsne` |\n| `perplexity` | `int` | `min(5, len(results)-1)` | The `t-SNE` perplexity value, must be smaller than the `n-1` where `n` is the number of results to be visualized |\n| `learningRate` | `int` | `25` | The `t-SNE` learning rate |\n| `iterations` | `int` | `100` | The number of iterations the `t-SNE` algorithm runs. Higher values lead to more stable results at the cost of a larger response time |\n\nAn example with default settings:\n\n\n\n\n\n  Expected response\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"Article\": [\n        {\n          \"_additional\": {\n            \"featureProjection\": {\n              \"vector\": [\n                -115.17981,\n                -16.873344\n              ]\n            }\n          },\n          \"title\": \"Opinion | John Lennon Told Them \\u2018Girls Don\\u2019t Play Guitar.\\u2019 He Was So Wrong.\"\n        },\n        {\n          \"_additional\": {\n            \"featureProjection\": {\n              \"vector\": [\n                -117.78348,\n                -21.845968\n              ]\n            }\n          },\n          \"title\": \"Opinion | John Lennon Told Them \\u2018Girls Don\\u2019t Play Guitar.\\u2019 He Was So Wrong.\"\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n\n\nThe above result can be plotted as follows (where the result in red is the first result):\n\nWeaviate T-SNE example\n\n####  best practices and notes\n* Due to the O(n^2) complexity of the `t-SNE` algorithm, we recommend to keep the request size at or below 100 items.\n* `t-SNE` is non-deterministic and lossy, and happens in real-time per query. The dimensions returned have no meaning across queries.\n* Due to the relatively high cost of the underlying algorithm, we recommend to limit requests including a `featureProjection` in high-load situations where response time matters. Avoid parallel requests including a `featureProjection`, so that some threads stay available to serve other, time-critical requests.\n\n\n\n\n", "type": "Documentation", "name": "graphql-additional-properties", "path": "developers/weaviate/api/graphql/additional-properties.md", "link": "https://weaviate.io/developers/weaviate/api/graphql/additional-properties", "timestamp": "2024-02-08 21:20:43", "reader": "JSON", "meta": {}, "chunks": []}