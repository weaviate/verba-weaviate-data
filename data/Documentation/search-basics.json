{"text": "\n\n## Overview\n\nThis page shows the core concepts on how to perform searches and retrieve objects.\n\n\n \n\n## Basic requirements\n\nTo retrieve objects from Weaviate, you must use the `Get` function and specify at least:\n- The target `class` to search, and\n- One or more `properties` to retrieve.\n\n## Simple `Get` example\n\n\n\n \n    \n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\nThe `objects` endpoint in Weaviate is designed for CRUD operations and is not capable of performing searches.\n\n## `limit` returned objects\n\nOften, you only a few objects instead of the full result set. To restrict the results, set a `limit`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n\n\n## Paginate with `limit` and `offset`\n\n`limit` returns the first `n` objects. Sometimes you want to see later results. To return a limited number of results from the middle of your result set, define an `offset` and then `limit` the result set to the objects following your offset. For example, if your offset is 5 and your limit is 3, the query returns objects 6, 7, and 8 in your result set.\n\nBe aware that this operation can be expensive. Although you only see a small set of results, Weaviate must fetch `offset` + `limit` results.\n\nTo list and retrieve all of the objects from a `class`, use the cursor API with the `after` operator. For more information, read this guide.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Specify the fetched properties\n\nYou must specify the properties you want to be fetch. The set of available properties includes object properties and object metadata.\n\n### Object `properties`\n\nYou can specify object properties as below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like this:\n\n\n\n\n\n### Retrieve the object `vector`\n\nTo retrieve the object vector with one of the legacy clients, request the `_additional` property and `vector` sub-property. The new Python client uses the `return_metadata` property.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### Retrieve the object `id`\n\nTo retrieve the object ID with one of the legacy clients, request the `_additional` property and `id` sub-property. The new Python client uses the `return_metadata` property.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n### Retrieve cross-referenced properties\n\nTo retrieve properties from cross-referenced objects, specify the following items.\n\n- The cross-reference property,\n- The target cross-referenced object class.\n- The properties you want to retrieve from the cross-referenced objects.\n\nThe legacy clients use the inline fragment GraphQL syntax.\n\nThe following examples retrieve the `title` property from `JeopardyCategory` objects that are cross-referenced with `JeopardyQuestion` objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### Retrieve any other metadata\n\nTo retrieve other kinds of metadata with one of the legacy clients, request the `_additional` property and specify the sub-property. The new Python client uses the `return_metadata` property.\n\nfor a comprehensive list of metadata fields, see References: GraphQL: Additional properties.\n\n## `groupBy`\n\nTo maintain granularity while viewing the broader context of the objects (e.g. documents as a whole), a `groupBy` search may be appropriate.\n\nTo use `groupBy`:\n- Provide the property by which the the results will be grouped,\n- The maximum number of groups, and\n- The maximum number of objects per group.\n\n\n  groupBy example\n\n\n\nIn this example, you have a collection of `Passage` objects with, each object belonging to a `Document`.\n\n\n\nYou could group the results of a `Passage` search by any of its property, including the cross-reference property linking `Passage` to a parent `Document` with a search as below.\n\n```graphql\n{\n  Get{\n    Passage(\n      limit: 100\n      nearObject: {\n        id: \"00000000-0000-0000-0000-000000000001\"\n      }\n      groupBy: {\n        path: [\"content\"]\n        groups: 2\n        objectsPerGroup: 2\n      }\n    ){\n      _additional {\n        id\n        group {\n          id\n          count\n          groupedBy { value path }\n          maxDistance\n          minDistance\n          hits{\n            content\n            ofDocument {\n              ... on Document {\n                _additional {\n                  id\n                }\n              }\n            }\n            _additional {\n              id\n              distance\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nHere, the `groups` and `objectsPerGroup` limits are customizable.\n\n\n\nThis example:\n\n1. retrieves the top 100 objects\n2. groups them to identify the up to 2 most relevant `Document` objects,\n3. based on the up to top 2 `Passage` objects from each `Document`.\n\n\n\nThis will result in the following response:\n\n```json\n{\n  \"data\": {\n    \"Get\": {\n      \"Passage\": [\n        {\n          \"_additional\": {\n            \"group\": {\n              \"count\": 1,\n              \"groupedBy\": {\n                \"path\": [\n                  \"content\"\n                ],\n                \"value\": \"Content of passage 1\"\n              },\n              \"hits\": [\n                {\n                  \"_additional\": {\n                    \"distance\": 0,\n                    \"id\": \"00000000-0000-0000-0000-000000000001\"\n                  },\n                  \"content\": \"Content of passage 1\",\n                  \"ofDocument\": [\n                    {\n                      \"_additional\": {\n                        \"id\": \"00000000-0000-0000-0000-000000000011\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"id\": 0,\n              \"maxDistance\": 0,\n              \"minDistance\": 0\n            },\n            \"id\": \"00000000-0000-0000-0000-000000000001\"\n          }\n        },\n        {\n          \"_additional\": {\n            \"group\": {\n              \"count\": 1,\n              \"groupedBy\": {\n                \"path\": [\n                  \"content\"\n                ],\n                \"value\": \"Content of passage 2\"\n              },\n              \"hits\": [\n                {\n                  \"_additional\": {\n                    \"distance\": 0.00078231096,\n                    \"id\": \"00000000-0000-0000-0000-000000000002\"\n                  },\n                  \"content\": \"Content of passage 2\",\n                  \"ofDocument\": [\n                    {\n                      \"_additional\": {\n                        \"id\": \"00000000-0000-0000-0000-000000000011\"\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"id\": 1,\n              \"maxDistance\": 0.00078231096,\n              \"minDistance\": 0.00078231096\n            },\n            \"id\": \"00000000-0000-0000-0000-000000000002\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n\n## Multi-tenancy\n\nFor classes where multi-tenancy is enabled, you must specify the tenant parameter in each query.\n\nThis example shows how to fetch one object in the `MultiTenancyClass` class from the tenant `tenantA`:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Related pages\n\n- API References: GraphQL: Get\n\n\n\n", "type": "Documentation", "name": "search-basics", "path": "developers/weaviate/search/basics.md", "link": "https://weaviate.io/developers/weaviate/search/basics", "timestamp": "2023-11-13 10:41:29", "reader": "JSON", "meta": {}, "chunks": []}