{"text": "\n\n\n\n## Overview\n\nEach Weaviate object belongs to one (and only one) class. This page covers the essential topics in relation to managing Weaviate classes.\n\n- API References: REST: Schema\n- References: Configuration: Schema\n- Concepts: Data structure\n\nUnder the hood, these are carried out through the `schema` REST endpoint. For raw REST commands, or a full list of parameters, please refer to the reference page.\n\n## Create a class\n\nYou can create a class either:\n- Manually, or\n- Automatically. Weaviate can create classes as needed, such as at import time. The `Auto-schema` feature must be enabled for this to occur.\n\nWe recommend you create classes manually, as:\n- You will gain greater control over your data model, and\n- Many of the settings in the class definition are immutable.\n\n### Manual creation\n\nTo create a class, you must specify the class name with the `class` parameter.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\nTypically, you would specify additional configurations. We include examples in the following sections.\n\n\n#### Define Properties\n\nThe class definition can include properties, which are the data fields to be stored in Weaviate. Each property must have a name and a data type. The `Auto-schema` feature can create properties at import time and infer the data type from the data, but we recommend you specify the data type manually.\n\n### Sample configuration\n\nA class configuration is shown below, which defines:\n- The class name (`Article`)\n- The vectorizer module (`text2vec-cohere`)\n- The generative module to use (`generative-openai`)\n- A set of properties (`title`, `body` and `url`), with data types set accordingly.\n    - Note that the `body` property is an array of objects.\n    - The `object` and `object[]` data types are available from `1.22`.\n- Tokenization option for the `url` property.\n\n```json\n{\n    \"class\": \"Article\",\n    \"vectorizer\": \"text2vec-cohere\",\n    \"moduleConfig\": {\n        \"generative-openai\": {}\n    },\n    \"properties\": [\n        {\n            \"name\": \"title\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"chunk\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"chunk_no\",\n            \"dataType\": [\"int\"]\n        },\n        {\n            \"name\": \"body\",\n            \"dataType\": [\"object[]\"],  // Array of objects. `object` and `object[]` are available from `1.22`.\n            \"nestedProperties\": [\n                {\n                    \"name\": \"chunk\",\n                    \"dataType\": [\"text\"],\n                },\n                {\n                    \"name\": \"chunk_no\",\n                    \"dataType\": [\"int\"],\n                },\n            ]\n        },\n        {\n            \"name\": \"url\",\n            \"dataType\": [\"text\"],\n            \"tokenization\": \"field\"\n        },\n    ],\n}\n```\n\nYou can specify as many of the available options in the class definition as you would like.\n\nSee:\n- References: Configuration: Schema\n- API References: REST: Schema\n\n\n### Auto-schema\n\nIf you add objects to a class that does not yet exist, or if you create objects with properties that do not yet exist, Weaviate can automatically create the missing class or the missing properties. This is known as the `Auto-schema` feature.\n\nFor most cases, we recommend you create classes and properties manually, as you will gain greater control over your data model.\n\nSee this page\n\n\n## Example class configurations\n\nWe include a few sample class configurations below as starting points.\n\n\n  For simple text objects\n\nThe following code defines:\n\n- The class name (`Article`)\n- The vectorizer module (`text2vec-cohere`) and model (`embed-multilingual-v2.0`)\n- A set of properties (`title`, `body`) with `text` data types.\n\n```json\n{\n    \"class\": \"Article\",\n    \"vectorizer\": \"text2vec-cohere\",\n    \"moduleConfig\": {\n        \"text2vec-cohere\": {\n            \"model\": \"embed-multilingual-v2.0\",\n        },\n    },\n    \"properties\": [\n        {\n            \"name\": \"title\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"body\",\n            \"dataType\": [\"text\"]\n        },\n    ],\n}\n```\n\n- Similarity search\n\n\n\n\n  With nested objects\n\nWeaviate `1.22` adds support for nested objects. This can be very useful for storing structured data such as an address containing a street, city and country.\n\n\nThe following code defines:\n\n- The class name (`Person`)\n- The vectorizer module (`text2vec-huggingface`)\n- A set of properties (`last_name`, `address`), with `last_name` having a `text` data type and `address` having `object` data type.\n- The `address` property has two nested properties (`street` and `city`), with `text` data types.\n\n```json\n{\n    \"class\": \"Person\",\n    \"vectorizer\": \"text2vec-huggingface\",\n    \"properties\": [\n        {\n            \"dataType\": [\"text\"],\n            \"name\": \"last_name\",\n        },\n        {\n            \"dataType\": [\"object\"],\n            \"name\": \"address\",\n            \"nestedProperties\": [\n                {\"dataType\": [\"text\"], \"name\": \"street\"},\n                {\"dataType\": [\"text\"], \"name\": \"city\"}\n            ],\n        }\n    ],\n}\n```\n\n\n\n\n  For text objects and generative search\n\nThe following code defines:\n\n- The class name (`Article`)\n- The vectorizer module (`text2vec-openai`) and default model\n- Which generative module to use (`generative-openai`)\n- A set of properties (`title`, `chunk`, `chunk_no` and `url`), with data types set accordingly.\n- Tokenization option for the `url` property.\n- Vectorization option (`skip` vectorization) for the `url` property.\n\n```json\n{\n    \"class\": \"Article\",\n    \"vectorizer\": \"text2vec-openai\",\n    \"vectorIndexConfig\": {\n        \"distance\": \"cosine\",\n    },\n    \"moduleConfig\": {\n        \"generative-openai\": {}\n    },\n    \"properties\": [\n        {\n            \"name\": \"title\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"chunk\",\n            \"dataType\": [\"text\"]\n        },\n        {\n            \"name\": \"chunk_no\",\n            \"dataType\": [\"int\"]\n        },\n        {\n            \"name\": \"url\",\n            \"dataType\": [\"text\"],\n            \"tokenization\": \"field\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {\n                    \"skip\": true\n                },\n            }\n        },\n    ],\n}\n```\n\n- Similarity search\n- Generative search\n\n\n\n\n  For image objects\n\nThe following code defines:\n\n- The class name (`Image`)\n- The vectorizer module (`img2vec-neural`), with the `image` property set as the store of image data.\n- The vector index distance metric (`cosine`)\n- A set of properties (`image`), with the `image` property set as `blob`.\n\n```json\n{\n    \"class\": \"Image\",\n    \"vectorizer\": \"img2vec-neural\",\n    \"vectorIndexConfig\": {\n        \"distance\": \"cosine\",\n    },\n    \"moduleConfig\": {\n        \"img2vec-neural\": {\n            \"imageFields\": [\n                \"image\"\n            ]\n        }\n    },\n    \"properties\": [\n        {\n            \"name\": \"image\",\n            \"dataType\": [\"blob\"]\n        },\n    ],\n}\n```\n\n- Image search\n\n\n\n## Read a class definition\n\nYou can retrieve a class definition from the schema using the class name.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Read all class definitions\n\nYou can also retrieve all class definitions by fetching the entire schema.\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n## Update a class definition\n\nYou can update class definitions as follows.\n\n\n  Are all settings mutable?\n\nNot all settings are mutable.\n\nA typical use case for this functionality is to update configuration, such as the vectorIndexConfig. Note that even in mutable sections, such as vectorIndexConfig, some fields may be immutable.\n\n\n\n\n  \n    \n  \n\n  \n\n```ts\n// This feature is under development\n```\n\n  \n\n  \n\n```java\n// This feature is under development\n```\n\n  \n\n  \n\n```go\n// This feature is under development\n```\n\n  \n\n\n\n  How do I change immutable settings then?\n\nIn this case, you must delete the class recreate it. If possible, we recommend using the cursor API to retrieve all objects and re-populate it.\n\n\n\n## Delete a class\n\nimport CautionSchemaDeleteClass from '/_includes/schema-delete-class.mdx'\n\n\n\n\n\n\n", "type": "Documentation", "name": "manage-data-classes", "path": "developers/weaviate/manage-data/classes.mdx", "link": "https://weaviate.io/developers/weaviate/manage-data/classes", "timestamp": "2023-11-02 10:53:06", "reader": "JSON", "meta": {}, "chunks": []}