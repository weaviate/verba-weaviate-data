{"text": "\n[//]: # ()\n\n##  Overview\n\nA question and answering (QnA) module does exactly what its name suggests. It will answer a question from you, based on the data present in the search results.\n\nThis is a more specific type of data transformation than one performed by a generative module. A QnA module looks to extract an answer to the question from the search data.\n\nTo this end, a QnA module may not provide an answer at all.\n\n##  Configuration\n\n###  Enable modules\n\nTo use QnA functionality, a `qna-xxx` module must be enabled in the Weaviate instance.\n\nIf you are using WCS, a `qna` module is enabled by default ([see the documentation](/developers/wcs#configuration)). Otherwise, you must configure your Weaviate instance to make sure that a `qna-xxx` module is enabled.\n\nThis is outside the scope of this unit, but you can refer to the [module configuration](/developers/weaviate/modules/reader-generator-modules/index.md) for information on how to configure each module.\n\n###  Configure classes\n\nIf only one qna module is enabled for the Weaviate instance, Weaviate will automatically use that module for all qna tasks.\n\nOn the other hand, if multiple qna modules are configured, you must define for each class which qna model to use, such as shown below.\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"JeopardyQuestion\",\n      \"moduleConfig\": {\n        \"qna-openai\": {\n          \"model\": \"text-davinci-002\"\n        }\n      }\n    }\n  ]\n}\n```\n\nUse of QnA functionality also requires that the target class be configured with a vectorizer (`text2vec`) module.\n\n##  About QnA queries\n\n###  How it works\n\nSimilarly to generative modules, a QnA search involves two steps, which are to:\n1. Perform a search; and then\n1. Attempt to extract an answer using the search results and the question.\n\nDepending on whether a suitable answer was found, the `answer` sub-property under `_additional` properties may contain the answer. Some models will also return the position of the answer in the text.\n\nIf an answer is not found, the `answer` sub-property will indicate so.\n\n###  QnA syntax\n\nIn a generative search, the same question text is used to both:\n- Perform the search, and\n- Extract the answer.\n\nSo, in the example below, the query `\"How many championships does Lewis Hamilton have?\"` is used to find the nearest object, from which Weaviate attempts to extract an answer to the question.\n\n\n\n\n\n\n\nIn this query, the article includes an answer, and you can see that it has been extracted by the model.\n\n\n   See the JSON response\n\n\n\n\n\n###  How to specify properties\n\nYou can specify the object properties in which the QnA module is to search through for the answer. Similarly to the case of a generative query, this may be useful if you want to reduce the length of the input, or be very specific about where the information should come from.\n\nSpecifying properties to search only affects the answer extraction part of the query, as the underlying object vectors do not change.\n\n\n\n\n\n\n\nAnd in this query, Weaviate is not able to answer the question as the required information is not available in the `title` field.\n\n\n   See the JSON response\n\n\n\n\n\n###  Object limits\n\nAs this is also a two-step search, you can specify the number of objects for Weaviate to initially retrieve before attempting to extract the answer.\n\nBy setting the number of objects, you may increase the chance of retrieving the object that contains the answer to the specific question.\n\n##  Review\n\n###  Key takeaways\n\n- Question and Answer (QnA) search is another two-step search, which attempts to extract an answer to a specific question from the retrieved data before delivery.\n- To perform a QnA search, a `qna-xxx` module must be enabled in the Weaviate instance. The `qna-openai` module is enabled by default in WCS.\n- The QnA module will look for an answer in each retrieved object, returning the answer as an additional property.\n- If the QnA module does not identify an answer, it will indicate so in the response.\n\n\n", "type": "Documentation", "name": "Queries_2 Qna", "path": "developers/academy/py/zero_to_mvp/104_queries_2/40_qna.mdx", "link": "https://weaviate.io/developers/academy/py/zero_to_mvp/queries_2/qna", "timestamp": "2024-05-08 10:48:49", "reader": "JSON", "meta": {}, "chunks": []}