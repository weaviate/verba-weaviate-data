{"text": "\n\n\nBinary quantization (BQ) is a technique that reduces the size of a vector index. BQ is available for the `flat` index type.\n\nTo use BQ, enable it as shown below and add data to the collection.\n\n\n  Additional information\n\n- How to set the index type\n\n\n\n\n## Simple BQ configuration\n\nEach collection can be configured to use BQ compression. BQ must be enabled at collection creation time, before data is added to it.\n\nThis can be done by setting the `vector index config` of the collection to enable BQ compression.\n\n\n  \n      \n  \n\n  \n      \n  \n\n  \n      \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## BQ with custom settings\n\nThe following parameters are available for BQ compression, under `vectorIndexConfig`:\n\n| Parameter | Type | Default | Details |\n| :-- | :-- | :-- | :-- |\n| `bq` : `enabled` | boolean | `false` | Enable BQ. Weaviate uses binary quantization (BQ) compression when `true`.   The Python client v4 does not use the `enabled` parameter. To enable BQ with the v4 client, set a `quantizer` in the collection definition. |\n| `bq` : `rescoreLimit` | integer | -1 | The minimum number of candidates to fetch before rescoring. |\n| `bq` : `cache` | boolean | `false` | Whether to use the vector cache. |\n| `vectorCacheMaxObjects` | integer | `1e12` | Maximum number of objects in the memory cache. By default, this limit is set to one trillion (`1e12`) objects when a new collection is created. For sizing recommendations, see Vector cache considerations. |\n\n\nFor example:\n\n\n  \n      \n  \n\n  \n      \n  \n\n  \n      \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n## Related pages\n\n- Configuration: Vector index\n- Concepts: Vector index\n- Tutorial: Schema\n\n\n\n", "type": "Documentation", "name": "configuration-bq-compression", "path": "developers/weaviate/configuration/bq-compression.md", "link": "https://weaviate.io/developers/weaviate/configuration/bq-compression", "timestamp": "2024-02-08 20:22:47", "reader": "JSON", "meta": {}, "chunks": []}