{"text": "\n\n## Write great bug reports!\n\nThis page outlines what an ideal bug report would look like. We know that it is\nnot always possible to write a perfect bug report, and we don't want to\ndiscourage you from reporting a bug just because you might not be able to\nprovide all the info needed to make the report great. At the same time we want\nto provide you with the information to make the lives of our engineers a bit\neasier. Sometimes we also need to prioritize and decide about which bug ticket\nto pick up first. If a bug report is well-prepared, it has a greater chance of\nbeing picked up first.\n\n### What makes a great bug report stand out?\n\nHere are some points that make a bug report great:\n\n- **Providing Context**\n  When you have been working on a specific use-case or fighting against a\n  specific bug for ages there is probably a lot of context in your or your\n  teams' head(s). Sometimes this context gets lost when handing over a bug\n  report to one of our engineers. Since they have probably been working on\n  something completely different before, it may be difficult for them to\n  understand all your goals and assumptions that are like second-nature to you.\n  A great bug reports sets that context and makes sure that any engineer -\n  whether an inside our outside contributor - can get started on this ticket\n  easily.\n\n- **Right level of information**\n  Depending on the kind of bug, there is a different need for information.\n  Let's consider two different possible bugs: For the first one an image when\n  using the `img2vec` module was not vectorized correctly and your results are\n  off because of it. For the second one, consider a scenario where you a\n  performing a lookup by id and it is much slower than you think it should be.\n  Those are both valid bugs, but we need different kind of information for\n  each. For example, for the image-vectorization bug we need to know a lot of\n  the details about the `img2vec` module: What versions were used? Which\n  inference container was running? Was there a GPU involved? What file format\n  did the image have? But looking at the performance bug, we probably need more\n  info regarding your hardware. How was the machine sized? What kind of disks\n  were used? What were the vitals (CPU usage, Memory usage, Disk pressure)\n  during the slow query, etc.? We do not expect you to know all the internals\n  of Weaviate, but we ask you to think about what details may be helpful in\n  reproducing the bug and which are most likely superfluous.\n\n- **Quick to reproduce**\n  Every bug is important and we are happy about every single report. However,\n  we must still prioritize. A bug report that is easier for us to reproduce is\n  a bug report we might prefer. A great bug report contains a reproducing\n  example that makes no assumptions about prior state and reproduces be bug in\n  its entirety. Below are some examples for a great reproducing example in a\n  bug report.\n\n\n- **Narrowed down to a particular area**\n  Weaviate is more than just the Weaviate server, it's an entire ecosystem that\n  often contains the Weaviate Server, a language-specific Weaviate client and\n  any number of optional modules. Those modules may bring their own inference\n  containers if they make use of a Machine-Learning model. A great bug report\n  tries to narrow down where the problem goes wrong. There are some helpful\n  tips below to see how you can find out where the bug occurs.\n\nNow that we have established *what* makes a great bug report, let's look at\nsome of the individual areas and see *how* we can write better reports.\n\n## What is the minimal information and context that should always be provided?\n\n- Make sure that all the versions used are explicitly listed. This includes at\n  the minimum the version of the Weaviate server and the client.\n- Is there a chance that the bug was introduced in a recent version? In this\n  case please specify the last version that did not have the specified issue.\n- Is there module involved that is vital to reproducing the bug? If so, please\n  specify the module. If the module makes use of different models, please also\n  specify the model name if you believe it to be relevant to the bug.\n\n## How do I provide a good reproducing example?\n\n- A great reproducing example makes zero assumptions about state. This means\n  that the example always starts with an empty Weaviate instance and imports\n  any object that is required to reproduce the bug. Please do not assume that\n  our engineers can predict what kind of objects should be imported based on\n  only providing a read/search query.\n- Anything that is required to reproduce the error is part of the reproducing\n  example. Our engineers should be able to copy/paste the example and\n  immediately see that something is wrong.\n- The reproducing example is expressed as code. This could be one of Weaviate's\n  language clients or a series of `curl` commands.\n- The reproducing example tells us what you expected to happen. In some cases\n  it might not be obvious why the actual behavior is not the desired behavior.\n  Please let us know what you expected to happen instead. This can be either in\n  the form of code, a code comment, or text accompanying your example?\n\n## How do I know if a problem occurs within Weaviate or one of the clients or somewhere different?\n\n- If you have a suspicion that a problem doesn't actually occur in the Weaviate\n  server, but possibly in one of the clients, you can verify sending a similar\n  request using a different language client or no language client. The latter\n  case is the best as it rules out client problems altogether. If you can\n  still reproduce the error by sending a request using pure HTTP (e.g. via\n  `curl`, Postman, etc.), you can be sure that the error occurs on the Weaviate\n  server-side.\n- If you see a stack trace from your language-client you can make an educated\n  guess about where the error occurred. If the stack trace contains a network\n  request, a non-2xx HTTP status code or an error message containing\n  information about shards and indices, there is a good chance the bug occurred\n  inside the Weaviate server. If you see something that is very specific to the\n  client's language however, it may be an indication that the error occurred in\n  the client.\n- If you are using any other tools from the Weaviate eco-system, for example\n  the `weaviate-helm` repository to run on Kubernetes, there is also a chance\n  that something goes wrong there. If you think that the bug might be specific\n  to the runtime and its manifests, it might make sense to also try the setup\n  on a different runtime. Please indicate what you have already tried.\n\n## What if it's not feasible to provide the information mentioned above?\n\nDon't worry about it. We know that sometimes bugs are tricky and not so easy to\nreproduce. If it is simply not feasible to write a perfect bug report, please\nstill write the bug report. We are very happy when we see that you made an\neffort to write a good report.\n\n## Thank you\n\nA bug report is a contribution to Weaviate. We are really thankful for you\ntaking the time to report the issue and helping us improve Weaviate. Thank you!\n", "type": "Documentation", "name": "more-resources-write-great-bug-reports", "path": "developers/weaviate/more-resources/write-great-bug-reports.md", "link": "https://weaviate.io/developers/weaviate/more-resources/write-great-bug-reports", "timestamp": "2023-11-02 10:53:39", "reader": "JSON", "meta": {}, "chunks": []}