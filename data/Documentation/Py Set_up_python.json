{"text": "\nFollow this short guide to make sure that you are set up to use Weaviate with the Python client.\n\n\n\n##  Install Python\n\n###  Is Python installed?\n\nOpen a terminal window (e.g. bash, zsh, Windows PowerShell, Windows Terminal), and run:\n\n```shell\npython --version\n```\n\nIf that did not work, you may need to use `python3` instead of `python`:\n\n```shell\npython3 --version\n```\n\nIf you have Python installed, you should see a response like `Python 3.11.8`. If you Python 3.8 or higher installed, you can skip the remainder of this section.\n\n###  Install Python\n\nTo install, follow the instructions for your system on [Python.org](https://www.python.org/downloads/).\n\nOnce you have Python installed, check the version again to confirm that you have a recommended version installed.\n\nAnother good way to install Python is to install `pyenv`. This will allow you to manage multiple versions of Python on your system. You can find instructions on how to install `pyenv` [here](https://github.com/pyenv/pyenv?tab=readme-ov-file#installation).\n\n##  Set up a virtual environment\n\nA virtual environment allows you to isolate various Python projects from each other. This is useful because it allows you to install dependencies for each project without affecting the others.\n\n###  Create a virtual environment\n\nWe recommend using `venv` to create a virtual environment. Navigate to your project directory (e.g. `cd PATH/TO/PROJECT`), and run:\n\n```shell\npython -m venv .venv\n```\n\nOr, if `python3` is your Python command:\n\n```shell\npython3 -m venv .venv\n```\n\nThis will create a virtual environment in a directory called `.venv` in your project directory.\n\n###  Activate the virtual environment\n\nEach virtual environment can be 'activated' and 'deactivated'. When activated, the Python commands you run will use the Python version and libraries installed in the virtual environment.\n\nTo activate the virtual environment, go to your project directory and run:\n\n```shell\nsource .venv/bin/activate\n```\n\nOr, if you are using Windows:\n\n\n\n\n```shell\n.venv\\Scripts\\activate.bat\n```\n\n\n\n\n```shell\n.venv\\Scripts\\Activate.ps1\n```\n\n\n\n\nYou can check if the virtual environment is activated by running:\n\n```shell\nwhich python\n```\n\nOr, if you are using Windows, run `Get-Command python` (PowerShell) or `where python` (Command Prompt).\n\nIf the virtual environment is activated, you should see a path that points to the `.venv` directory.\n\nVirtual environments are very useful. If you would like to learn more, try this tutorial on [FreeCodeCamp](https://www.freecodecamp.org/news/how-to-setup-virtual-environments-in-python/) or this article on [RealPython](https://realpython.com/python-virtual-environments-a-primer/), which goes a little more in-depth.\n\n\nAdditionally, there are many other environment management tools available, such as `conda`, `pipenv`, and `poetry`. If you are already using one of these tools, you can use them instead of `venv`.\n\n##  Install the Weaviate client\n\nNow, you can install the [Weaviate client library](../../weaviate/client-libraries/index.md), which will make it much easier to interact with Weaviate using Python.\n\n[Activate your virtual environment](#activate-the-virtual-environment), then install the Weaviate client with:\n\n```shell\npip install weaviate-client\n```\n\n###  Confirm the installation\n\nTo confirm that the Weaviate client is installed, run the following Python code:\n\n\n\nYou should see an output like:\n\n```text\nYour Weaviate client library version is: 4.5.4.\n```\n\nCongratulations, you are now set up to use Weaviate with Python and the Weaviate Python client library!\n\n\n", "type": "Documentation", "name": "Py Set_up_python", "path": "developers/academy/py/10_set_up_python.mdx", "link": "https://weaviate.io/developers/academy/py/set_up_python", "timestamp": "2024-05-08 10:47:34", "reader": "JSON", "meta": {}, "chunks": []}