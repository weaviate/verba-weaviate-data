{"text": "\n\n## Overview\n\nThis page shows you how to perform `hybrid` searches.\n\n\n \n\n## Basic hybrid search\n\nTo use hybrid search, you must provide a search string.\n\nThis example uses default settings to search. It matches objects in multiple ways.\n\n- If the object contains the keyword `food` anywhere\n- If the object's vector is similar to the vector for `food`\n\nHybrid search ranks the results using a combination of the `bm25` search ranking and the vector search ranking. The query returns the top three results.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n### Explain the search results\n\nTo understand why particular objects are returned, use the object sub-properties to explain the results. \n\nTo retrieve the sub-properties with one of the legacy clients, use the `_additional` property to specify `score` and `explainScore`. The new Python client returns the information as metadata.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Limit the results\n\nYou can limit the number of results returned by a `hybrid` search,\n- to a fixed number, using the `limit: ` operator\n- to the first N \"drops\" in `score`, using the `autocut` operator\n\n`autocut` can be combined with `limit: N`, which would limit autocut's input to the first `N` objects.\n\n### Limiting results with `limit`\n\nUse the `limit` argument to specify the maximum number of results that should be returned:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Limiting results with `autocut` and `auto_limit`\n\nWeaviate can also limit results based on discontinuities in the result set. In the legacy client, this filter is called `autocut`. The filter is called `auto_limit` in the new client. \n\nThe filter looks for discontinuities, or jumps, in the result score. In your query, you specify how many jumps there should be. The query stops returning results after the specified number of jumps. \n\n`hybrid` search combines a vector search and a keyword (BM25F) search. The scores are different for each type of search so they cannot be compared directly. This means the cut points the filter chooses may not be intuitive.\n\n\n\nAutocut can be used as follows:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Weight the keyword and vector results\n\nYou can use the `alpha` argument to add weight to the keyword or vector search results.\n\n- An `alpha` of `1` is a pure vector search.\n- An `alpha` of `0` is a pure keyword search. \n\nIn the legacy clients, the default value for `alpha` is `0.75`. The new client uses a default value of `0.5`.\n\nThe following example uses an alpha of `0.25` to increase the importance of the keyword search results.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Fusion (ranking) method\n\n\nYou can select how the BM25 and vector search results are combined to determine the ranking using the `fusionType` argument.\n\nThe default is `rankedFusion`. `rankedFusion` adds inverted ranks of the BM25 and vector search methods. Alternatively, you can use `relativeScoreFusion` which adds normalized (between 0-1) scores of the BM25 and vector search methods.\n\nThe following examples specify `relativeScoreFusion`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Selected properties only\n\nStarting in v1.19.0, you can specify the object `properties` for the `bm25` portion of the search.\n\nThe next example performs a `bm25` search for the keyword `food` in the `question` property only. It combines the results of the keyword search with the vector search results for `food`.\n\nThis is not possible as doing so will require the entire database to be re-vectorized and re-indexed with the new vectorization options.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### Weight (boost) searched properties\n\nYou can specify weighting of object `properties` in how they affect the BM25F component of hybrid searches.\n\nThis example searches for objects containing the keyword `food`. The BM25 search is done in the `question` property and the `answer` property, with the `question` property's weighting boosted by 2, and returns the top 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## With a custom vector\n\nYou can provide your own `vector` input to the hybrid query. In this scenario, Weaviate will use the query string for the `bm25` search and the input vector for the vector search.\n\nThis example supplies the vector for \"italian food\", while using \"food\" as the query text. Note how the results are skewed towards Italian food.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Add a conditional (`where`) filter\n\nYou can add a conditional filter to any hybrid search query. The filter parses the outputs but does not impact the ranking.\n\nThese examples perform a hybrid search for `food` in any field. The search filters on objects that have the `round` property set to `Double Jeopardy!`. \n\nTo filter with one of the legacy clients, use `with_where`. The new Python client uses the `Filter` class from `weaviate.classes`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Related pages\n\n- API References: Search operators # Hybrid\n\n\n\n", "type": "Documentation", "name": "search-hybrid", "path": "developers/weaviate/search/hybrid.md", "link": "https://weaviate.io/developers/weaviate/search/hybrid", "timestamp": "2023-11-13 10:41:32", "reader": "JSON", "meta": {}, "chunks": []}