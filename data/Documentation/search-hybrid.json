{"text": "\n\n\n\n## Overview\n\nThis page shows you how to perform `hybrid` searches.\n\nThe `hybrid` operator produces results based on a weighted combination of results from a keyword (`bm25`) search and a vector (`nearXXX`) search.\n\n- API References: Search operators # Hybrid\n\n## Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThis example uses default settings to look for:\n- Objects containing the keyword `food` anywhere in the object, and\n- Objects most similar to the vector of `food`.\n\nIt ranks the results using a combination of the `bm25` and vector search rankings, and returns the top 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n### Score / explainScore\n\nThe `score` and `explainScore` sub-properties aim to explain the outputs. They can be retrieved under the `_additional` property.\n\nThis example adds the two properties to the list of retrieved properties.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Limit the results\n\nYou can limit the number of results returned by a `hybrid` search,\n- to a fixed number, using the `limit: ` operator\n- to the first N \"drops\" in `score`, using the `autocut` operator\n\n`autocut` can be combined with `limit: N`, which would limit autocut's input to the first `N` objects.\n\n### Limiting the number of results\n\nUse the `limit` argument to specify the maximum number of results that should be returned:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n### Autocut\n\nAnother way to limit the results returned by a hybrid search is to use the `autocut` filter. Autocut takes a positive integer parameter `N`, looks at the score of each result, and stops returning results after the `N`th \"drop\" in score. Because `hybrid` combines a vector search with a keyword (BM25F) search, their scores/distances cannot be directly compared, so the cut points may not be intuitive. \n\nAutocut can be used as follows:\n\n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Weight keyword vs vector results\n\nYou can use the `alpha` argument to weight the keyword (`bm25`) or vector search results. An `alpha` of `1` is for a pure vector search and `0` is for a pure keyword search. The default is `0.75`.\n\nThe following example uses an alpha of `0.25`, favoring keyword search results.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Fusion (ranking) method\n\n\nYou can select how the BM25 and vector search results are combined to determine the ranking using the `fusionType` argument.\n\nThe default is `rankedFusion`, which adds inverted ranks of the BM25 and vector search methods. Alternatively, you can  use `relativeScoreFusion` which adds normalized (between 0-1) scores of the BM25 and vector search methods.\n\nThe following example specifies the fusion type of `relativeScoreFusion`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## Selected properties only\n\nStarting in v1.19.0, you can specify the object `properties` for the `bm25` portion of the search.\n\nThe next example performs a `bm25` search for the keyword `food` in the `question` property only. It combines the results of the keyword search with the vector search results for `food`.\n\nThis is not possible as doing so will require the entire database to be re-vectorized and re-indexed with the new vectorization options.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n### Weight (boost) searched properties\n\nYou can specify weighting of object `properties` in how they affect the BM25F component of hybrid searches.\n\nThis example searches for objects containing the keyword `food`. The BM25 search is done in the `question` property and the `answer` property, with the `question` property's weighting boosted by 2, and returns the top 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n## With a custom vector\n\nYou can provide your own `vector` input to the hybrid query. In this scenario, Weaviate will use the query string for the `bm25` search and the input vector for the vector search.\n\nThis example supplies the vector for \"italian food\", while using \"food\" as the query text. Note how the results have now skewed towards Italian food.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n## Add a conditional (`where`) filter\n\nYou can add a conditional filter to any hybrid search query, which will filter the outputs but not impact the ranking.\n\nThis example performs a hybrid search for `food` in any field on objects that have the `round` property of `Double Jeopardy!`. It returns the top 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Example response\n\nIt should produce a response like the one below:\n\n\n\n\n\n\n\n\n", "type": "Documentation", "name": "search-hybrid", "path": "developers/weaviate/search/hybrid.md", "link": "https://weaviate.io/developers/weaviate/search/hybrid", "timestamp": "2023-11-02 10:53:46", "reader": "JSON", "meta": {}, "chunks": []}