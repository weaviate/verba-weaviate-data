{"text": "\nSnowflake provides a hosted solution, Snowpark Container Services (SPCS), that runs containers inside the Snowflake ecosystem. To configure a Weaviate instance that runs in SPCS, follow the steps on this page.\n\nThe code in this guide configures a sample SPCS instance. The sample instance demonstrates how to run Weaviate in Snowpark. To configure your own SPCS instance, change the database name, warehouse name, image repository name, and other example values to match your deployment.\n\n## Configure your instance\n### 1. Log into Snowflake\n\nDownload the SnowSQL client. Use the SnowSQL client to connect to Snowflake.\n\n```bash  \nsnowsql -a \"YOURINSTANCE\" -u \"YOURUSER\"\n```\n\n### 2. Setup the user environment\n\nConfigure roles and services.\n\n#### Configure OAUTH\n\nSet up OAUTH integration. Snowflake uses OAUTH to authenticate users to your service.\n\n```sql\nUSE ROLE ACCOUNTADMIN;\nCREATE SECURITY INTEGRATION SNOWSERVICES_INGRESS_OAUTH\n  TYPE=oauth\n  OAUTH_CLIENT=snowservices_ingress\n  ENABLED=true;\n```\n\n#### Grant SYSADMIN privileges\n\nThe SYSADMIN uses the BIND SERVICE ENDPOINT to create services.\n\n```sql\nUSE ROLE ACCOUNTADMIN;\nGRANT BIND SERVICE ENDPOINT ON ACCOUNT TO ROLE SYSADMIN;\n```\n\n#### Create Weaviate role and user\n\nCreate a role, and a user, for the Weaviate instance. The Jupyter server uses the Weaviate user.\n\n```sql\nUSE ROLE SECURITYADMIN;\nCREATE ROLE WEAVIATE_ROLE;\n\nUSE ROLE USERADMIN;\nCREATE USER weaviate_user\n  PASSWORD='weaviate123'\n  DEFAULT_ROLE = WEAVIATE_ROLE\n  DEFAULT_SECONDARY_ROLES = ('ALL')\n  MUST_CHANGE_PASSWORD = FALSE;\n  \nUSE ROLE SECURITYADMIN;\nGRANT ROLE WEAVIATE_ROLE TO USER weaviate_user;\n```\n\n### 3. Configure data storage\n\nCreate a database, an image repository, and stages. The image repository holds container images. The stages hold service specification files and files that the service creates.\n\n#### Create a warehouse\n\nCreate a warehouse to use with Weaviate.\n\n```sql\nUSE ROLE SYSADMIN;\nCREATE OR REPLACE WAREHOUSE WEAVIATE_WAREHOUSE WITH\n  WAREHOUSE_SIZE='X-SMALL'\n  AUTO_SUSPEND = 180\n  AUTO_RESUME = true\n  INITIALLY_SUSPENDED=false;\n```\n\n#### Create a database\n\nCreate a Weaviate database and stages.\n\n```sql  \nUSE ROLE SYSADMIN;\nCREATE DATABASE IF NOT EXISTS WEAVIATE_DEMO;\nUSE DATABASE WEAVIATE_DEMO;\nCREATE IMAGE REPOSITORY WEAVIATE_DEMO.PUBLIC.WEAVIATE_REPO;\nCREATE OR REPLACE STAGE YAML_STAGE;\nCREATE OR REPLACE STAGE DATA ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE');\nCREATE OR REPLACE STAGE FILES ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE');\n```\n\n#### Grant privileges\n\nGrant privileges to the WEAVIATE_ROLE:\n\n```sql\nUSE ROLE SECURITYADMIN;\nGRANT ALL PRIVILEGES ON DATABASE WEAVIATE_DEMO TO WEAVIATE_ROLE;\nGRANT ALL PRIVILEGES ON SCHEMA WEAVIATE_DEMO.PUBLIC TO WEAVIATE_ROLE;\nGRANT ALL PRIVILEGES ON WAREHOUSE WEAVIATE_WAREHOUSE TO WEAVIATE_ROLE;\nGRANT ALL PRIVILEGES ON STAGE WEAVIATE_DEMO.PUBLIC.FILES TO WEAVIATE_ROLE;\n```\n\n#### Allow external access\n\nThe user credentials on this page are for demonstration purposes only. Change the user credentials and password before you connect to the open internet.\n  \n```sql\nUSE ROLE ACCOUNTADMIN;\nUSE DATABASE WEAVIATE_DEMO;\nUSE SCHEMA PUBLIC;\nCREATE NETWORK RULE allow_all_rule\n  TYPE = 'HOST_PORT'\n  MODE= 'EGRESS'\n  VALUE_LIST = ('0.0.0.0:443','0.0.0.0:80');\n\nCREATE EXTERNAL ACCESS INTEGRATION allow_all_eai\n  ALLOWED_NETWORK_RULES=(allow_all_rule)\n  ENABLED=TRUE;\n\nGRANT USAGE ON INTEGRATION allow_all_eai TO ROLE SYSADMIN;\n```\n\n### 4. Setup compute pools\n\nCreate compute pools. The compute pools run the application services. \n\n```sql\nUSE ROLE SYSADMIN;\nCREATE COMPUTE POOL IF NOT EXISTS WEAVIATE_COMPUTE_POOL\n  MIN_NODES = 1\n  MAX_NODES = 1\n  INSTANCE_FAMILY = CPU_X64_S\n  AUTO_RESUME = true;\nCREATE COMPUTE POOL IF NOT EXISTS TEXT2VEC_COMPUTE_POOL\n  MIN_NODES = 1\n  MAX_NODES = 1\n  INSTANCE_FAMILY = GPU_NV_S\n  AUTO_RESUME = true;\nCREATE COMPUTE POOL IF NOT EXISTS JUPYTER_COMPUTE_POOL\n  MIN_NODES = 1\n  MAX_NODES = 1\n  INSTANCE_FAMILY = CPU_X64_S\n  AUTO_RESUME = true;\n```\n\nTo configure your own instance, edit the pool names and pool sizes to support your application.\n\nTo check if the compute pools are active, run `DESCRIBE COMPUTE POOL `.\n\n```sql\nDESCRIBE COMPUTE POOL WEAVIATE_COMPUTE_POOL;\nDESCRIBE COMPUTE POOL TEXT2VEC_COMPUTE_POOL;\nDESCRIBE COMPUTE POOL JUPYTER_COMPUTE_POOL;\n```\n\nThe compute pools take a few minutes to initialize. The pools are ready for use when they reach the `ACTIVE` or `IDLE` state.\n\n### 5. Build the Docker images\n\nBuild the Docker images in your local shell. There are three images.\n\n- The Weaviate image runs the database.\n- The `text2vec` image lets you process data without leaving Snowpark.\n- The Jupyter image serves notebooks.\n\nThe Docker files are in this repo. Clone the repo, and go to the top level directory. \n\nYou don't need to modify the Dockerfiles to run this sample instance. However, if you need to use non-standard ports, or make other changes for your deployment, edit the Dockerfiles before you create the containers.\n\n```bash\ndocker build --rm --no-cache --platform linux/amd64 -t weaviate ./images/weaviate\ndocker build --rm --no-cache --platform linux/amd64 -t jupyter ./images/jupyter\ndocker build --rm --no-cache --platform linux/amd64 -t text2vec ./images/text2vec\n```\n\nLog in to your Docker repository. The Snowpark account name, username, and password are the same as your `snowsql` credentials.\n\n```bash\ndocker login -.registry.snowflakecomputing.com  -u YOUR_SNOWFLAKE_USERNAME\n```\n\nAfter you login to the Docker repository, tag the images and push them to the repository.\n\nThe `docker tag` commands look like this:\n\n```bash\ndocker tag weaviate -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/weaviate\ndocker tag jupyter -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/jupyter\ndocker tag text2vec -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/text2vec\n```\n\nThe `docker push` commands look like this:\n\n```bash\ndocker push -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/weaviate\ndocker push -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/jupyter\ndocker push -.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/text2vec\n```\n\n### 6. Setup services\n\nSPCS uses `spec files` to configure services. The configuration spec files are also in the repo you cloned earlier. \n\nEdit the `spec files` to specify an image repository for each service. For example, update `weaviate.yaml` to reference the `weaviate`\nimage. \n\n```bash\nimage: \"-.registry.snowflakecomputing.com/weaviate_demo/public/weaviate_repo/weaviate\"\n```\n\nWhen you edit the `jupyter.yaml` spec file, update the `SNOW_ACCOUNT` field with your Snowflake account name. \n\n```bash\nSNOW_ACCOUNT: -\n```\n\nAfter the spec files are updated, use the `snowsql` client to upload them. \n\n```sql\nPUT file:///path/to/jupyter.yaml @yaml_stage overwrite=true auto_compress=false;\nPUT file:///path/to/text2vec.yaml @yaml_stage overwrite=true auto_compress=false;\nPUT file:///path/to/weaviate.yaml @yaml_stage overwrite=true auto_compress=false;\n```\n\n### 7. Create the services\n\nUse the `snowsql` client to create a service for each component.\n\n```sql\nUSE ROLE SYSADMIN;\nUSE DATABASE WEAVIATE_DEMO;\nUSE SCHEMA PUBLIC;\n\nCREATE SERVICE WEAVIATE\n  IN COMPUTE POOL WEAVIATE_COMPUTE_POOL \n  FROM @YAML_STAGE\n  SPEC='weaviate.yaml'\n  MIN_INSTANCES=1\n  MAX_INSTANCES=1;\n\nCREATE SERVICE JUPYTER\n  IN COMPUTE POOL JUPYTER_COMPUTE_POOL \n  FROM @YAML_STAGE\n  SPEC='jupyter.yaml'\n  MIN_INSTANCES=1\n  MAX_INSTANCES=1;\n\nCREATE SERVICE TEXT2VEC\n  IN COMPUTE POOL TEXT2VEC_COMPUTE_POOL \n  FROM @YAML_STAGE\n  SPEC='text2vec.yaml'\n  MIN_INSTANCES=1\n  MAX_INSTANCES=1;\n\n```  \n\n### 8. Grant user permissions\n\nGrant permission for the services to the `weaviate_role`. \n\n```sql\nUSE ROLE SECURITYADMIN;\nGRANT USAGE ON SERVICE WEAVIATE_DEMO.PUBLIC.JUPYTER TO ROLE WEAVIATE_ROLE;\n```\n\n### 9. Log in to the Jupyter Notebook server\n\nGet the `ingress_url` URL that you use to access the Jupyter notebook server.\n\n```sql\nUSE ROLE SYSADMIN;\nSHOW ENDPOINTS IN SERVICE WEAVIATE_DEMO.PUBLIC.JUPYTER;\n```\n\nOpen the `ingress_url` in a browser. Use the `weaviate_user` credentials to log in. \n\n### 10. Load data into your Weaviate instance\n\nFollow these steps to create a schema, and load some sample data into your Weaviate instance.\n\n1. Download a set of sample Jeopardy Questions.\n1. Rename the file `SampleJSON.json`, and save it to your desktop.\n1. Upload the file. Drag the file into the Jupyter tree view in your browser or use the 'Upload' button at the upper-right corner.\n1. Copy the data into Weaviate. Use the `TestWeaviate.ipynb` notebook to copy the data from `SampleJSON.json` into Weaviate.\n\n## Query your data\n\nTo query your data, run these queries in the a Jupyter notebook.\n\n```python\nimport weaviate\nimport json\nimport os\n\nclient = weaviate.connect_to_custom(\n    http_host=\"weaviate\",\n    http_port=\"8080\",\n    http_secure=False,\n    grpc_host=\"weaviate\",\n    grpc_port=\"50051\",\n    grpc_secure=False\n)\n\ncollection = client.collections.get(\"Questions\")\n\n# Simple search\nresponse = collection.query.near_text(query=\"animal\",limit=2, include_vector=True)\n#confirm vectors exist\nfor o in response.objects:\n    print(o.vector)\n\n# Hybrid search\tclient.close()\nresponse = collection.query.hybrid(\t\n    query=\"animals\",\t\n    limit=5\t\n)\t\n\nclient.close()\n```\n\n## Suspend and resume services\n\nTo suspend and resume services, run the following code in to the `snowsql` client.\n\n### Suspend services\n```sql\nalter service WEAVIATE suspend;\nalter service TEXT2VEC suspend;\nalter service JUPYTER suspend;\n```\n\n### Resume services:\n```sql\nalter service WEAVIATE resume;\nalter service TEXT2VEC resume;\nalter service JUPYTER resume;\n```\n\n## Cleanup and Removal\n\nTo remove the services, run the following code in to the `snowsql` client.\n\n```sql\nUSE ROLE ACCOUNTADMIN;\nDROP USER weaviate_user;\n\nUSE ROLE SYSADMIN;\nDROP SERVICE WEAVIATE;\nDROP SERVICE JUPYTER;\nDROP SERVICE TEXT2VEC;\nDROP COMPUTE POOL TEXT2VEC_COMPUTE_POOL;\nDROP COMPUTE POOL WEAVIATE_COMPUTE_POOL;\nDROP COMPUTE POOL JUPYTER_COMPUTE_POOL;\nDROP STAGE DATA;\nDROP STAGE FILES;\nDROP IMAGE REPOSITORY WEAVIATE_DEMO.PUBLIC.WEAVIATE_REPO;\nDROP DATABASE WEAVIATE_DEMO;\nDROP WAREHOUSE WEAVIATE_WAREHOUSE;\n\nUSE ROLE ACCOUNTADMIN;\nDROP ROLE WEAVIATE_ROLE;\nDROP SECURITY INTEGRATION SNOWSERVICES_INGRESS_OAUTH;\n```\n", "type": "Documentation", "name": "installation-spcs-integration", "path": "developers/weaviate/installation/spcs-integration.mdx", "link": "https://weaviate.io/developers/weaviate/installation/spcs-integration", "timestamp": "2024-02-08 20:22:55", "reader": "JSON", "meta": {}, "chunks": []}