{"text": "\n\n## Overview\n\n\nThe `multi2vec-bind` module enables Weaviate to use the ImageBind model to vectorize data at import time.\n\nKey notes:\n\n- This module is not available on Weaviate Cloud Services (WCS).\n- Enabling this module will enable multiple `near` search operators.\n- Model encapsulated in Docker container.\n- This module is not compatible with Auto-schema. You must define your classes manually as shown below.\n\n`multi2vec-bind` allows Weaviate to generate vectors data containing any number of the following modalities:\n- text\n- images\n- videos\n- audio\n- inertial measurement unit (IMU, i.e. accelerometer and gyroscope data)\n- single channel depth images, and\n- single channel thermal images.\n\n## Weaviate instance configuration\n\nThis module is not available on Weaviate Cloud Services.\n\n### Docker Compose file\n\nTo use `multi2vec-bind`, you must enable it in your Docker Compose file (e.g. `docker-compose.yml`).\n\nWhile you can do so manually, we recommend using the Weaviate configuration tool to generate the `Docker Compose` file.\n\n#### Parameters\n\nWeaviate:\n\n- `ENABLE_MODULES` (Required): The modules to enable. Include `multi2vec-bind` to enable the module.\n- `DEFAULT_VECTORIZER_MODULE` (Optional): The default vectorizer module. You can set this to `multi2vec-bind` to make it the default for all classes.\n- `BIND_INFERENCE_API` (Required): The URL of the inference container.\n\nInference container:\n\n- `image` (Required): The image name of the inference container.\n- `ENABLE_CUDA` (Optional): Set to `1` to enable GPU usage. Default is `0` (CPU only).\n\n\n```yaml\n---\nversion: '3.4'\nservices:\n  weaviate:\n    command:\n    - --host\n    - 0.0.0.0\n    - --port\n    - '8080'\n    - --scheme\n    - http\n    image: semitechnologies/weaviate:||site.weaviate_version||\n    ports:\n    - 8080:8080\n    restart: on-failure:0\n    environment:\n      QUERY_DEFAULTS_LIMIT: 25\n      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'\n      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'\n      # highlight-start\n      DEFAULT_VECTORIZER_MODULE: 'multi2vec-bind'\n      ENABLE_MODULES: 'multi2vec-bind'\n      BIND_INFERENCE_API: 'http://multi2vec-bind:8080'\n      # highlight-end\n      CLUSTER_HOSTNAME: 'node1'\n# highlight-start\n  multi2vec-bind:\n    image: semitechnologies/multi2vec-bind:imagebind\n    environment:\n      ENABLE_CUDA: '0'\n# highlight-end\n...\n```\n\nThis module will benefit greatly from GPU usage. Make sure to enable CUDA if you have a compatible GPU available (`ENABLE_CUDA=1`).\n\n## Class configuration\n\nYou can configure how the module will behave in each class through the Weaviate schema.\n\n### Vectorization settings\n\nYou can set vectorizer behavior using the `moduleConfig` section under each class and property:\n\n#### Class-level\n\n- `vectorizer` - what module to use to vectorize the data.\n- `vectorizeClassName` \u2013 whether to vectorize the class name. Default: `true`.\n- `Fields` - property names to map for different modalities (under `moduleConfig.multi2vec-bind`).\n    - i.e. one or more of [`textFields`, `imageFields`, `audioFields`, `videoFields`, `depthFields`, `thermalFields`, `IMUFields`]\n- `weights` - optional parameter to weigh the different modalities in producing the final vector.\n\n#### Property-level\n\n- `skip` \u2013 whether to skip vectorizing the property altogether. Default: `false`\n- `vectorizePropertyName` \u2013 whether to vectorize the property name. Default: `false`\n- `dataType` - the data type of the property. For use in the appropriate `Fields`, must be set to `text` or `blob` as appropriate.\n\n#### Example\n\nThe following example class definition sets the `multi2vec-bind` module as the `vectorizer` for the class `BindExample`. It also sets:\n\n- `name` property as a `text` datatype and as the text field,\n- `image` property as a `blob` datatype and as the image field,\n- `audio` property as a `blob` datatype and as the audio field, and\n- `video` property as a `blob` datatype and as the video field.\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"BindExample\",\n      // highlight-start\n      \"vectorizer\": \"multi2vec-bind\",\n      \"moduleConfig\": {\n        \"multi2vec-bind\": {\n          \"textFields\": [\"name\"],\n          \"imageFields\": [\"image\"],\n          \"audioFields\": [\"audio\"],\n          \"videoFields\": [\"video\"],\n        }\n      },\n      \"properties\": [\n        {\n          \"dataType\": [\"text\"],\n          \"name\": \"name\"\n        },\n        {\n          \"dataType\": [\"blob\"],\n          \"name\": \"image\"\n        },\n        {\n          \"dataType\": [\"blob\"],\n          \"name\": \"audio\"\n        },\n        {\n          \"dataType\": [\"blob\"],\n          \"name\": \"video\"\n        }\n      ]\n      // highlight-end\n    }\n  ]\n}\n```\n\n#### Example with weights\n\nThe following example adds weights for various properties, with the `textFields` at 0.4, and the `imageFields`, `audioFields`, and `videoFields` at 0.2 each.\n\n```json\n{\n  \"classes\": [\n    {\n      \"class\": \"BindExample\",\n      \"moduleConfig\": {\n        \"multi2vec-bind\": {\n          ...\n          // highlight-start\n          \"weights\": {\n            \"textFields\": [0.4],\n            \"imageFields\": [0.2],\n            \"audioFields\": [0.2],\n            \"videoFields\": [0.2],\n          }\n          // highlight-end\n        }\n      }\n    }\n  ]\n}\n```\n\n\n### Adding `blob` data objects\n\nAny `blob` property type data must be base64 encoded. To obtain the base64-encoded value of an image for example, you can use the helper methods in the Weaviate clients or run the following command:\n\n```bash\ncat my_image.png | base64\n```\n\n## Additional search operators\n\nThe `multi2vec-bind` vectorizer module will enable the following search operators: `nearText`, `nearImage`, `nearAudio`, `nearVideo`, `nearDepth`, `nearThermal`,  and `nearIMU`.\n\nThese operators can be used to perform cross-modal search and retrieval.\n\nThis means that when using the `multi2vec-bind` module any query using one modality (e.g. text) will include results in all available modalities, as all objects will be encoded into a single vector space.\n\n## Model license(s)\n\nThe `multi2vec-bind` module uses the ImageBind model. ImageBind code and model weights are released under the CC-BY-NC 4.0 license. See the LICENSE for additional details.\n\nIt is your responsibility to evaluate whether the terms of its license(s), if any, are appropriate for your intended use.\n\n\n\n\n", "type": "Documentation", "name": "retriever-vectorizer-modules-multi2vec-bind", "path": "developers/weaviate/modules/retriever-vectorizer-modules/multi2vec-bind.md", "link": "https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/multi2vec-bind", "timestamp": "2023-11-13 10:41:06", "reader": "JSON", "meta": {}, "chunks": []}