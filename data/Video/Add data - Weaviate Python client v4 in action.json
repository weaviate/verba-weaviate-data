{"text": "Accompanying code: https://github.com/weaviate-tutorials/DEMO-pyv4-release-videos v4 of the Weaviate Python client has just ... \nhey there my name is JP and I'm an educator for wave8 in a previous video you saw how to create a collection using the new V4 python client in this video let's build on that and have a look at how we can import data into we8 using the new client as well let's start simple by building our script from the ground up we'll start by importing wave8 and we'll connect to the embedded client that we're using same as before and since we'll be ingesting data I'm going to pass on my API key as well and that's on the headers since we defined coh here as our vectorizer I'll use my coher key [Music] and I have it saved as an environment variable so I'll load that up here as well great what I'll do is we had a collection called reviews so let's load that up by calling client collections. getet and review uh the collection name which is review what that'll do is create a object in Python that we can interact with and let's do the same thing with movies now let's show a BAS import so the way to do that if you want to do single inserts is to use our object collection object and have a look in the data sub module or namespace and you'll see this method called insert and insert many as the name kind of suggests insert is for single inserts and if you uh load up the method and have a look at the tool tip it tells you that there are these attributes like or the parameters like properties references uuid and so on the only thing you have to provide as you can see here is property so let's do that and see what an example looks like we had a um a property called I think um username so if I provide that let's make up a username the main name and this is all you would need to do to create a row of data or an object so as long as you've got the right properties inserted and it matches your schema and you've inserting it to the right object we a will take care of the rest for you and you can SP and as I said before you can specify other objects or other properties like the ID vectors and so on um and then let's have a look at inserts of movies uh let's say let's say want to insert a movie called modern times and let's say I want to create a cross reference so I can look in the references um parameter and the way to do that would be to use our reference property name which was has review and I want to t uh provide a Target uu ID I don't have that just yet so where could I get that well uh let's just come up with a property name first or the a variable name first what actually I can do is because this insert method returns my uu ID so I can just assign that to my variable and that uu ID can be used again to create a reference now obviously this isn't a real real example um as my properties or my review doesn't have any content in it but if you do create a review first or the target um object first you can capture it to U ID and use it when you're creating a reference so that's an simple example of a single object creation let's have a look at an another method called insert many it kind of works very similarly but first let's create some uh let's create a list of object to use first so I'll call that review props and I'll just use this uh list comprehension so let's say what was my column name username and that would be let's use an F string user some index oops for I in range let's just create five of them so that's just going to create uh five of the these users with different indices and now what I can do is say reviews data insert manyu to add uh review props and this will create now all of the objects that are specified in this list so that's another big quality of life Improvement for me is being able to pass a list like this into uh reviews and if I do want to create um if I do want to to pass multiple objects with additional metadata like references additional properties excuse me like reference Properties or even things like uid or vectors I can use this handy object or handy class called Data object but of course I have to import it first so I'll say import data object oops it's from weate classes data because that's the um operation I'm setting uh I'm using so I can look in the data sub module import data object so that's what I want so what I would do then is to create a set of data objects so let's just create one first let's start with that and I can instantiate it with say properties would be something like title is let's be quite boring and call it movie I let's call that um let's just call it one for now oops and references would be in a similar format as before so I'm just going to copy and paste that actually so that's what a single data object looks like now I want to create a whole set of them or list of them excuse me I'm so it look something like this for I in range five and let's just replace that F string with an actual index so what this will give me is a list of five data objects of movies so let's call that movie objects and I can leverage that to add these to the movies movies data insert many movie objects and that will now insert five objects Each of which will have a property and some references of and of course as I mentioned before I can add things like uid here um and create the custom uids so that's insert and insert manyu these are really kind of Handy functions um obviously especially insert manyu because it lets you deal with the list directly um if you have just one list that you want to upload to weate this is the method I go to but quite often you might be dealing with large data sets and of course for that we still have our trusty batch functions so let's have a quick look at those now now the batch functions in the V4 client come in two flavors so what you'll find is that in the client uh object you can see there's a batch and now you'll see a number of different methods like Dynamic fixed size rate limit for example so Dynamic is probably what you're most used to so the way to use that is to use a context manager like we've done before so what you would do is with that as batch you can start to do all your batching things so batch do add object and your properties would be um let's say let's add a movie so title would be Avatar and since I'm dealing with a client it doesn't know what um collection that object would go to so I have to specify that so that'll be Collection movie and that's all you would need to do um and again you can optionally provide things like your uuid and your vector as well now the other functions or the other methods that are available for batching include fix size and what that does is to allow you to set the batch size specifically so um batch size if I set that as say 50 they'll send 50 objects per batch to we8 a new method here that's really cool is this rate limit method and what that does is to limit the rate at which you send the data to weate why is that useful well that's when you're using API inference apis for example like H here like I'm using um and if you have a particular rate limit that's linked to your account using this you can avoid hitting those rate limits because it's set at that number for you um typically I probably recommend setting that number to be slightly below your actual rate limit of course because these things you know might vary so you don't want the exact you don't want to be at the exact limit um so I would recommend setting a number slightly below that the other thing you can do that's really cool is to start batching but with the collection object so if I want to look at my movies object batch Dynamic and again use a context manager as batch now I can use the batch object to say um let's add an object or reference or so on and I can add the object and all I have do now is to provide the properties So This Time title is when oh my goodness so here's my title and that's all I would need to do there you can see if I look at the list of parameters there's no collection parameter and of course that's because that information is included as part of my movies object which is based on of course our collection so that's really handy now there's one more thing I'd like to do before we go which is talk about error handling as you know there are things or there are things that can go wrong at the object level even if the batch insertion as a whole has been successful so the object might malformed you might get API errors temporarily and so on so there are a couple of ways to deal with it and again this is really cool so you can do things like batch and then number errors and this number will update as you use the batch within the context manager so you can do things like if number errors is or more than whatever say 100 break and then you can for example have a look at um what's happening um and of course this is assuming um that there's this is in a loop so for in range 100,000 or whatever so we can do something like that and another thing you can do is have a look at the batch at the end of the batch run so what you can do then is to go now movies. batch and let say have a look at the failed object or the failed references individually so at the end of it I can do things like if length of this is greater than zero my goodness zero or I can just say all length of movies batch failed references is greater than zero I can do something um I'll just say pass for now but that allows me to have a look at the overall results of my batch run and see what's happened now a note of course is that of course as you're using these context managers if you do run this process again with different say subset of data um these attributes like the failed objects and the failed references will be overwritten so just make sure that you do your error handling in between batch runs so that's it that's our little introduction to our object import process with the V4 client we think there's a lot of quality of life improvements and I haven't even mentioned this before but the import process you'll find is much much faster due to the use of GPC under the hood so we hope you enjoy it as much as we had enjoyed it developing it so thanks a lot see you soon ", "type": "Video", "name": "Add data - Weaviate Python client v4 in action", "path": "", "link": "https://www.youtube.com/watch?v=WXObi7XTixQ", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}