{"text": "Hey everyone! Thank you so much for checking out the 1st episode of our Weaviate Gorilla project! We trained LlaMA 7B to write ... \nhey everyone thank you so much for \nwatching movie it on YouTube I'm super \nexcited to present the weeviate gorilla \nproject we fine-tuned the open source \nllama 7 billion parameter large language \nmodel to translate from natural language \ncommands into the weeviate graphql \nsearch apis so we're better equipping \nthe large language models to use \nweeviate by interfacing them with our \ngorillas and gorillas are these smaller \nlanguage models that are specialized on \na particular set of API through the use \nof retrieval aware fine tuning so this \nproject also has a nice side effect of \nmaking it easier for humans to use \nweeviate because by translating from \nnatural language commands into levia's \ngraphql apis it lightens the learning \ncurve a little bit from learning how to \ndo you know compositional queries and \njust knowing all the queries that you're \nable to execute which is another kind of \nnice side effect of this project is it \nserves as a query router there's a lot \nof interesting discussion about \ncombining SQL queries with Vector search \nand the gorilla has a nice kind of \noff-the-shelf effective it takes the \nnatural command and it out to whether \nthe alleviate aggregate query which is \nhow we do symbolic aggregations like SQL \nstyle or the gate query as well as these \nnice trick shots where you can do a \nvector search and then do symbolic \naggregations on the results of the \nvector search so all sorts of \ninteresting things there I would say \nwith this project if you're curious \nabout the future of llms and Tool use I \nwould kind of say software broadly if \nyou have a set of apis and you want to \nsee how we did it how we use \nself-instruct prompting to generate a \ntraining data set how we fine-tuned \nllama 7B using hugging faces amazing \npath library and then substratus \norchestrating kubernetes and k-8's \ntraining as well as you know visualizing \nthe results and how we're thinking about \nevaluating this kind of thing so really \nquick one more thing that we'll get into \nin the discussion but I want to quickly \npresent in the introduction is the \nimpact that this might have on software \nIntegrations \nwe can imagine a natural language \ncommand build a question answering \nsystem using llama index and weviate \nvisualized and streamlit and similarly \nto how you know code interpreter on open \nAI is able to just you give it a file \nand say make me a graph of this we're \npretty we're getting pretty close to LMS \nthat write code and use specific \nlibraries like we V8 and all these kind \nof things so I think this is such an \nexciting project I had so much fun \nworking on this let's dive into it this \nvideo explained the weevier gorilla \nproject continuing on the introduction \nwith a bit more of a visual Flair the \nhigh level idea is LOM tool use \nconnecting large language models with \nexternal tools that allow them to \nsupercharge their capabilities and be \nmore productive generally so for example \nif we want to answer the question what's \nthe weather like in Boston right now \nthere's no way that we can rely on \nlanguage modeling the internet or even \nreinforcing learning from Human feedback \nto answer a question like this the \nemerging solution to questions like this \nis to connect large language models with \nthird-party apis so we have our large \nlanguage model and then we have some \nkind of weather API in order for the \nlarge language model to talk to the \nweather API it needs to format its \nrequest in the API compatible way so \nthis API may have input arguments like \nCity where it expects a string like \nBoston Massachusetts maybe it expects a \nzip code and so you would have the zip \ncode and needs to learn to format the \nrequest in this particular syntax so if \nit expects the string Boston \nMassachusetts for example and instead \nthe large language model says zero two \ntwo one zero the API may be unable to \nrespond as well as processing say the \ndate argument so apis have a particular \nkind of syntax that they expect and we \nneed to get our large language models to \nfollow this syntax the API example may \nbe how the weather example might be a \nlittle simple but you can imagine with \nweba we have more complex apis than that \nso the general idea is connecting large \nlanguage models to all these external \ntools to supercharge it keep its \nknowledge up to date as well as to let \nit execute computation so we connect LMS \nto calculators or code executors search \nengines or databases as well as things \nlike weather apis or say your personal \ncalendar as LMS are becoming our \nco-pilots and assistants in our lives so \nlet's dive into weeviate as a tool for \nlarge language models in this project we \nalready assume that we have alleviate \ninstance running with the data schema \nand data loaded into it and we're \nlearning how to format API requests \nsearch requests to this running database \nlater in the discussion we'll discuss \nthe more open-ended idea of letting \nlarge language models create new classes \npopulate new data and all those exciting \ndirections so let's say we have some \nkind of natural language command with a \npretty complex weviate query what is the \naverage complexity level of yoga poses \nthat are similar to warrior pose with a \nmaximum distance of 0.15 we translate \nthis into the weva query where we use \naggregate our yoga pose class we use \nVector search and then we use a symbolic \naggregation to get the average \ncomplexity of the results from our \nVector search so this is a bit of a \nconfusing query that I don't think a lot \nof new leviate users know you can do \nthis as well as other things like this \nso the general idea is to let you \ntranslate from natural commands into \nthese queries so we need to generate a \ntraining data set that takes in these \nnatural commands the API reference for \nthis composition of aggregate Vector \nSurge and then calculating the mean of \nthe results of a particular property in \nthe wevia class we returned as well as \nthe custom schema for yoga pose which \nhas properties such as this complexity \nlevel as well as some vectorized \nproperty that's letting us Vector search \nwarrior pose so as this may be already \nevident making it easier for large \nlanguage models to use tools also makes \nit easier for humans to use them so this \nis a proposal for the auto API where we \ntake a natural language query like show \nme the full name and email of contacts \nthat contain John and their full name \nand then under the hood the wev8 graphql \ngorilla will translate this into the \nproper graphql query using your schema \nas well as the API reference and then \nexecute the query also giving you the \noption to visualize the generated query \nusing the following syntax so we'll talk \nabout the auto API proposal a bit later \nin the video in addition I think this \nvideo will be interesting to anyone out \nthere who's wondering how do I fine-tune \nan llm for my API so whether you have a \nset of apis and you want to also \nfacilitate this natural language command \nto using your software I think you'll be \ninterested in this project so let's dive \ninto the overview of everything we did \nto create this model here's everything \nwe did to train the wevigate graphql \ngorilla in a two minute overview we \nbegin with four data sets we have a \nknowledge base where we have synthetic \ndatabase schemas we give gbt4 a prompt \non what a levia database schema looks \nlike as well as asking it to write at \nleast two text properties at least one \ninteger or number property as well as at \nleast one Boolean property and at least \none cross reference from this class to \nanother class we create 50 such toy \nschemas from Cars to instruments to all \nsorts of things so then we have our \nknowledge base of API references this \ncontains all of the apis and we V8 how \nhybrid search wear Auto cut re-ranking \n46 such apis some of which are Atomic \nfor example bm25 only describing bm25 as \nwell as some compositional API \nreferences like how to use bm25 in \ntandem with the wear filter then we have \ntask examples these are manually written \nexamples of how to translate from an API \nreference and a a custom schema into a \nnew query as well as how to translate \nfrom a custom schema API reference and \nquery into a natural language command \nbecause we're going to be generating \nsynthetic examples to then train with so \nthe first thing we do is we take the \nknowledge base of synthetic database \nschemas and API references as well as \nthe example of how to do this task and \nwe create new queries by looping through \nall of the database schemas and all of \nthe apis so now we've created 2300 new \nqueries for these synthetic schemas we \nthen use this to create natural language \ncommands for when someone would want to \nexecute these queries so now we have \nthis is the entirety of the \nself-instruct algorithm now we have \nthese two data sets of queries as well \nas the natural commands for when we \nwould want to execute these queries we \nalso can use these uh this natural \nlanguage command set to evaluate \nretrieval we'll put the natural language \ncommand as our query and we'll see if \nit's able to return the API reference \nthat was used to produce the synthetic \nnatural language command and synthetic \nquery we then take the new queries in \nthe natural language commands and we \ntemplate this into our fine-tuning data \nso in the fine-tuning data \nthe input will be the synthetic database \nschema the retrieved API reference as \nwell as the synthetic natural language \ncommand and will predict the synthetic \nquery we use this in substratus \norchestrating kubernetes and k8's \ntraining also using the hug and face pef \nlibrary to train our Guerrilla large \nlanguage model we then evaluate our \ngorilla large language model by firstly \nsimply asking does it execute and we V8 \nby looping through the schemas \ninstantiating them in Wii V8 and then \neven if you don't have any data in \nweviate if you execute a query if you \ngive it a incorrectly formatted query it \nwill give you an error message otherwise \nit will just you know give you an empty \nlist of results so we can test quickly \nif the query executed we also use llm \nevaluation which is where you give an \ninstruction response paired to gbt4 \nand you ask it did this response follow \nthe instruction you could similarly try \nto maybe correct the response by using \nthings like reflection prompting but \nthis is another way to get evaluation \nmetric off the shelf we can also use the \nperplexity metric where we see uh you \nknow we force the language model to \ngenerate the ground truth queries there \nis a bit of variance in the queries for \nfor some of them that might make this \ndifficult as well as the engram mesh so \nwe'll talk more about evaluation later \nin the presentation really quickly \nbefore we dive further into the details \nof self-instruct prompting and how we \ntrain these models and evaluated them \nhere is the proposal for the auto API so \nif you have a second I'd really \nappreciate if you could check out this \nAPI let us know if firstly you like the \nway that this looks if this is something \nthat would be useful to you as well as \nsome of the details of particularly how \nwe would package this if if that makes \nsense so overall this is the idea of \nhaving an auto API where you could just \ngive a natural language query and then \nyou could see the generated query as \nwell as under the hood Auto would \ntranslate and then execute the query so \nthere's all sorts of details in this \nabout how exactly we would serve the \nWi-Fi Guerrilla model how exactly we \nwill do the retrieval aware inference so \nif you have a second please leave a \nthumbs up if you think this would be \ninteresting it really helps us \nprioritize what to work on so thank you \nso much for checking this out so diving \nfurther into how we train the Eva \ngraphql gorilla we're going to cover \nfour main parts self-instruct data \ngeneration fine-tuning llama 7B \nevaluating the model and then discussion \nand next steps for the gorilla project \nso beginning with self-instruct data \ngeneration so we start off by creating \nsynthetic schemas for all sorts of \nfictional webia use cases we do this by \nprompting gbt4 here is an example of a \nweeva database schema and then we give \nit an example of the Json for a manually \nwritten schema then we give it \ninformation about weva classes and \nproperties just describing how classes \nare the atomic abstraction for some kind \nof object and then it has these \nAssociated properties and then some \ninformation about properties like how \nthey can be text you specify one text \nproperty to vectorize the object as well \nas you know in properties Boolean and \nthen cross references from classes to \nother classes such his book has author \nauthor being another class so then we \nprompted could you please design five \nmore fictional schemas for each could \nyou please include at least two text \nproperties at least one inner number \nproperty at least one billion property \nand at least one cross reference for the \ncross-reference class can you please \ncreate that class as well with at least \none text property and at least one in \nproperty so this lets us then generate \nsynthetic cross-reference classes where \nsay we we search through books then we \nget the author and then we want to see \nuh let's say the average let's say you \nwant to do a symbolic query on the \nauthor that you've linked this way and \nyou want to say the average number of \nbooks they've written or something like \nthat so we can do this kind of thing by \nadding these properties and making sure \nthat each of these synthetic schemas are \nable to cover an exhaustive set of then \nsynthetic queries so for this step I \ncurrently did it by just manually \nlooking through the schemas to make sure \neach one was correct because an error \nhere would Cascade severely into the \nrest of the data the result of prompting \ngbg4 like this is that we end up with 50 \nsynthetic schemas so for example here we \nhave a book class a description a book \nfrom the library configuring the hsw \nvector index the model that we want to \nuse in this case the hugging phase \nTransformers to vectorize each book \nobject in our class as well as the \nproperties we have title the text \nproperty summary text property page \ncount in is available Boolean and then \nauthor the cross reference to the author \nclass so we generate 50 such synthetic \nuse cases of weviate across all sorts of \ndifferent applications of leviate from \nmusic to video games to say clothing \ntravel destinations or even AI models \nthemselves we generate all sorts of \nsynthetic use cases that we can then use \nto create these synthetic queries and \nthen have training data for our gorilla \nmodel so overall it takes about two \nhours to generate 2 300 queries and this \ncosts about 12 using the um in this case \nwe're sorry we're using gbt4 and and the \nthe GUI to generate the synthetic \nschemas and then we plug the synthetic \nschemas into a prompt template with the \nAPI references and an example of how to \nwrite a query for a custom schema into \nthe prompt so there I'd say the \ninteresting thing here is that there are \ntwo knowledge sources the API reference \nand the custom schema as well as a task \nexample task examples a few shot \nexamples kind of got swept under the rug \na little bit with the whole rohf thing \nbut I would say it is Paramount to the \nsuccess of this project is using \nexamples of tasks can supercharge this \nkind of prompting so I highly recommend \nyou know whatever you're doing with \nlarge language model prompting to add \nexamples of the task you're trying to \ncomplete so so then this takes two hours \nto Loop through the 50 synthetic schemas \nthe 46 apis and generate 2 300 queries \ncosting about 12 using the openai gbt \n3.5 16k API so here are some future \ndirections for the data creation so \nfirstly validating the queries so we can \nyou know Loop through each of the \nschemas load in the Json create the \nweeviate schema and then execute the \nquery but I think you want to have a way \nof doing this asynchronously doing this \nin the background where you generate the \nqueries on one thread and then you are \nvalidating the queries somewhere else so \nit doesn't block the program and slow \nthis down because uh two hours isn't \nsuper fast and you don't want to be \nadding that extra layer in there that \ncould you know blow it up so another way \nto get more data would be to add the \nprevious example again so you'd say you \nknow here's the previous example of a \nquery generated and also if that did \nvalidate that would be a really great \nquery and what that would result in is \ndiversity in the kind of query sent the \nkind of filters used if you're prompting \nit to write a custom wear filter as well \nas which properties it then accesses \nfrom the query so another interesting \nthing is thinking about Atomic and \ncompositional apis so this is quite a \ndeep topic where with weaviate for \nexample you can combine bm25 with wear \nas well as other features like using \nunderscore additional to get the vector \nof the object so thinking about whether \nso we have 46 apis but it's not exactly \nthat's not the combinator works of all \nthe compositional apis that you could do \nfrom the set of the atomic apis so we \ncould probably create even more \ndocumentation synthetically through \ngenerative feedback loops by combining \nour Atomic apis where appropriate and \nthen creating more documentation on how \nyou might combine all sorts of apis \nparticularly from this perspective of uh \ngorilla so now that we have our training \ndata set created by self-instruct \nprompting using the API references \nsynthetic database schemas and task \nexamples we can now fine-tune the Llama \n7 billion parameter large language model \nso to do this we teamed up with \nsubstratus AI and particularly Sam \nstalinga really LED all this I'm going \nto do my best to kind of explain his \nwork on this so we begin by loading the \nparameters for hugging faces a language \nmodel fine tuner we'll see this later \nthen we load in the model we we already \nhave this model saved in our directory \nwhere we've saved you do the Dot from \npretrain and you have the Llama 7 \nbillion which is pretty straightforward \nto figure out how you do that on on \nhugging face so this is one interesting \ndetail I'm not sure if I have this \ncompletely correct but I think what you \ndo is you load the model in 8-bit \nprecision and then I think once it gets \ninto memory then you convert it back to \nfloat16 I'm not sure exactly how that if \nthat's correct but so then we load our \ndata set and again our I don't know if \nsome this in the video yet but our this \ndata set is open sourced on WE V8 \nhugging face so then here's the prompt \nthat we use we put in the instruction \nand then the response is the completion \nand this is what you use to pass to \nhugging faces fine tuner so then we have \nour model we have the config for our \nmodel things like the position \nembeddings the max length from the model \nthen we add the special padding token \nwith the you know the open square \nbrackets capital letters pad then we \ntokenize the data set with the max \nlength and then the padding truncating \nsequences that are too long okay so then \nwe have our data set now we're going to \nuse this incredible PFT Library so one \nof the most interesting things that are \nhappening in deep learning is sparse \nfine tuning when we fine-tune something \nlike Lama 7B we don't need to update 7 \nbillion parameters rather we can up \nupdate a subset of the parameters and \nthere are quite a few algorithms for \nwhat how exactly you update the few \nparameters Laura low rank adaptation is \none way where you do a matrix \nfactorization and you only need to \nupdate the eigenvalues of this Matrix \nfactorization so it's a bit tricky but \nit is one of the most interesting ways \nof having this you know Vector that's \nsparse relative to all the parameters as \nyou see we have uh 6.7 billion \nparameters in Lama and we only need to \ntrain 8 million of the parameters by \nusing this sparse fine-tuning thing with \nLaura which it is interface with hugging \nface and you know I say this a lot on \nthe podcast and stuff I feel like \nhugging face has created such an \nincredible Library also Mosaic ml \nthey've made it so much like they've \nabstracted so much of this and it works \npretty well that I personally don't find \nmyself feeling like I need to invest \ninto unpacking the details of these kind \nof things but unless that's your thing \nobviously then then dive into it but \nanyway so \nso now that we have our model set up and \nthe training data set now we use the \ndata collator for language modeling so \nright now with leviate Gorilla we're \njust language modeling by using that um \nyou when you give it this prompt \ntemplate uh sorry this prompt template \nshown here it will only language model \nthe completion part instead of the \ninstruction as well which is kind of a \nnice effect of this and it'll also do \nthings like um you know back in the day \nwith hugging face language modeling you \nwould just basically concatenate all the \ntext you had into one gigantic text file \nand it would just randomly sample from \nthat but this is doing it has more stuff \nnow on uh separating each input output \nexample from each other so so then once \nwe train the model you can see our loss \ncurves that we'll visualize in a second \nokay so as shown in the notebook now I \ngrab that uh the training loss and steps \ndrop that into a text file and give it \nto open ai's code interpreter which I \nfeel like is a neighbor to our gorilla \nproject here and asked it to visualize \nthis data so we see this learning curve \nyou always have some variants in \nlearning curves but generally we see \nthis decreasing law us and this is quite \nlazy you know we only have the training \nloss for now it would be good to show \nthat overfitting curve where you also \nhave the test loss and you see if the \ntest loss is decreasing with the \ntraining loss but for now we just wanted \nto you know get running with having fit \na model but we do when we're showing you \nsome results at the end of the uh the \npresentation as well as the blog post \nthose are from held out schemas and API \nreferences and we have done some train \ntest splitting just but we've just \nmanually inspected it instead of having \nit in our quantitative evaluation Loop \nso with concluding here are some ideas I \nhave about fine-tuning these kind of \nmodels so firstly in a new podcast that \nwe're going to be releasing on Wednesday \nfarshad farabakshian describes this idea \nof skill versus knowledge and giving the \nexample of a lawyer for how to think \nabout for one class of thinking about \nfine tuning in this way of thinking you \nare a lawyer and you have the skill of \nhow to parse these legal documents you \nknow like me personally if you gave me \nif I had all these legal documents and I \nwas your lawyer you would be in trouble \nbut uh lawyer who's been to law school \nhas fine-tuned in a way to have the \nskill of reading the the knowledge so \nyou have the retrieval augmented \ngeneration to provide the knowledge as \nwell as learning the skill for how to \nparse the knowledge and I think that's \none really strong way of thinking about \nfine-tuning you've always had this kind \nof argument around domain-specific \nknowledge like the idea that you would \nneed to take the gbt3 language while on \nthe internet and then fine-tuning it on \nmedical information that idea has been \naround forever and I think that's very \nsimilar to the lawyer example but now \nwe're seeing this new one of tool use so \nthe exciting thing about tool use and I \nthink one of our interesting research \nquestions here is how much can we \ncompress this gorilla model because the \nLlama 7 billion parameter model is \ncheaper to serve than these you know \nmassive 200 billion plus parameter large \nlanguage models so how far can we \ncompress it to using the Translating \nnatural language commands into the \ngraphql apis and this would make it make \nthe whole thing cheaper more economical \nand let it do several Generations like \nunlocking all this kind of like tree of \nthoughts planning all that kind of stuff \nokay so now let's dive into some results \nof our wivier graphql gorilla so taken \nfrom the natural language command and \nagain we so we have a few training runs \nthere are a few models if you go to \nhugging face and you look at the models \non substratus a AI these are models that \nhave done the train test split and we're \nlooking at novel API references as well \nas schemas so what this means is that in \nthis case we have a contact you know \nlike this is like the contact schema and \nwe're generating a new query so in this \ncase just a single wear filter this is \nthe new query that's being shown but in \nthis case we still have we it still has \nprobably seen the wear filter in the \ntraining data set but in some kind of \ncompositional API or I think actually \nthere are two API references one for the \nlike operator particularly so that could \nbe the case as well but anyway so it \ntakes the query show me the full name \nand email of contacts that contain John \nand their full name and it formats the \nwevia query using the proper get syntax \nproper and so here's so there are a \ncouple things to this so firstly it \nknows the names of all the arguments you \nknow where is how you do the filter path \nfull name being the property the like \noperator and then it correctly does you \nknow John asterisks for how you would do \nthe full name John and their full name \nand then it's accessing these properties \nit's correctly closing the square \nbrackets the curly brackets and all \nthese kinds of details for how you send \nan API request that will execute on the \ndatabase here's another example of a \nmore complex query so get me instruments \nwith a hybrid search of piano so cutting \nresults off with the first steep drop in \nthe hybrid search score and showed the \nname description you're introduced and \nwhether it is a string instrument and \nthe name and genre of the players so now \nwe're doing the composition of hybrid \nwith auto cut so what autocut does as \nmentioned in the national language \ndescription it stops showing search \nresults once they're no longer good \naccording to the slope in Vector \ndistance so we see how it's able to \ncombine hybrid with autocut as well as \ndo this cross reference for the players \nof the instrument so you know played by \nname genre so this I think is a great \nexample of how it's combining all sorts \nof things about weeviate's graphql \ninterface to write these kind of queries \nfrom a natural description okay so now \nlet's dive into one of my favorite side \neffects of the gorilla and this training \ndata set is Gorilla as an off-the-shelf \nSQL versus Vector search query router so \nfor example when we ask it the natural \nlanguage command show me the number of \ncourses the gorilla is able to translate \nit to aggregate course meta count \ninstead of just doing some kind of your \nsearch query so it's able to \ndifferentiate between Aggregate and get \nand let you plug in these two different \nkinds of categories now here is \nsomething that I really like is \ncombining Vector search with aggregate \nqueries what is the average complexity \nlevel of yoga poses that are similar to \nwarrior pose with a maximum distance of \n0.15 what this lets you do is search for \nthe nearest neighbors to warrior pose in \nthe vector space and then do a symbolic \naggregation on the data points in that \nVector space so I presented this at odsc \nLondon in 2022 I love using this for say \nTwitter analytics it's just something \nthat I use in my life where you have all \nthese tweets and you want to know things \nlike you know what is the average link \nclicks do people like these kind of \ntweets and rather than having to \ncategorize your tweets you can just give \nit a natural language query like tweets \nabout new papers or maybe tweets about \nnew llm papers and it can filter it and \nthen you can do these symbolic queries \nso I love seeing that gorilla is able to \nto do this kind of thing from a natural \ncommand I'm so so excited about this SQL \nVector query router provided from \nnatural language commands Okay so \nalthough you've seen some good examples \nwhat do bad examples look like now this \nis a query from gorilla that will not \nexecute because it's missing a comma \nbetween bm25 and where so it's the \nlittle details like this maybe \nhallucinating an operator or giving an \nincorrect say giving a string for Value \nnumber or a property that doesn't exist \nthese are the kind of hallucinations \nthat would cause this to fail so let's \nstep a little more into how we plan to \ngraduate our evaluation of these models \nso firstly there's sort of the does it \nexecute thing that that this query would \nfail but you still could have cases \nwhere the query executes but it doesn't \nfollow the instructions so one \ninteresting strategy for doing this \nobviously there would be a lot of human \nannotation that went into projects like \nthis in the past but we could maybe use \nthe higher capacity gpc4 model and \nprompt it with does the response follow \nthe instructions another interesting \nidea is reflex collection prompting \nwhere you use that kind of reflection to \nmaybe correct the response so it did it \nfollow the instructions no how would you \nfix it and that might be another way to \nfix the queries then and get them back \ninto the trending data or something like \nthat or have some kind of sampling \nmechanism like that a couple other more \nquantitative metrics we can do ground \ntruth perplexity that's one of the most \ncommon metrics you see and I think that \nworks pretty well where you for sorry \nthe language model to Output the ground \ntruth synthetic query and there's also \nan engram match where \nthis is an interesting idea where for \nexample if we're doing this kind of bm25 \nwear thing we would see how many of the \nkeywords it matches with get job listing \nbm25 query so we could do something like \nthis also to see how well it followed \nthe particular API reference so here are \nsome of the research questions we have \nabout our wevia graphql gorilla as well \nas the future of this project so firstly \nthe most important practical question \ndoes weviate graphql gorilla generalize \nto new schemas as we plug this model \ninto the auto API trained on our data \nset of fictional schemas is it going to \ngeneralize to your schema to measure \nthis where train test splitting our \nsynthetic schemas into train tests but \nthey're into 40 training 10 testing but \nthere are other kind of ideas we can do \nlike controlling the variance of how \nmany text properties whether there's an \nin-property things like this to add more \ncoverage to our data set to hopefully \nyou can put it in the training data and \nit corrects it that way but also at \nleast we have some kind of metric some \nkind of ability to see where it's \nfailing the next interesting question \nespecially with the maintenance of this \nmodel is does wva graphql gorilla \ngeneralize to new apis let's say the \nauto introducing the new auto API might \nbe a little too meta but let's say we \nintroduce a re-ranker that takes in \nsymbolic properties to do the \nre-rankings of something like XG boost \nlike some kind of new search API and we \nVA will do we need to retrain this model \nor by using retrieval aware training is \nit going to be able to just be able to \nread the new API reference and write the \nnew queries so I think it's quite \npromising this is one of the biggest \nappeals of retrieval aware training is \nby putting the API reference in the \ninput the model is learning to read the \nAPI reference and that might help with \nthe maintenance and continual learning \nof this model \nthe next big question is a bit more it's \na bit more academic but it's very \npractical in this setting is atomic and \ncompositional apis so the reason I say \nit's academic is this idea of \ncompositional generalization is one of \nthe most interesting things in deep \nlearning that avocado shaped armchair \nthe reason that's so popular is because \nyou're combining the concepts of avocado \nshape with armchair and then creating \nthis new image in the dolly model's case \nso in our case a compositional API would \nbe you know combining bm25 with wear \nwith say autocut as well and imagining \nwhether our data set should only be \nAtomic apis with some examples of the \ncompositionality and what kind of \ncompositionality does it generalize to \nthe next big question is retrieval \nevaluation this is one of the biggest \nfindings from the original gorilla paper \nfrom shashir Patel tianjinzang and \ncollaborators is showing that when they \ndon't have the Oracle context in their \nfine-tuned Guerrilla model the \nperformance degrades quite severely so \nhow do we get the best retrieval for our \nwev8 graphql gorilla this has actually \nbeen one of the most eye-opening lessons \nfor me in this project is in this case \nwe have 46 apis and I think it's better \nto classify which API you want to use \nrather than doing the embedding \nsimilarity now the interesting thing \nwith this is scale of course so you know \nwhen I only have 46 apis I can easily \nmanage this you know classification data \nset where I train the classifier to go \nfrom the natural language commands to \nthe API but if I scaled this and we \nimagine say 5000 apis then I imagine \nretrieval is going to be quite important \nbut it really shows the value of having \nthese symbolic wear filters and how that \ncan help improve relevance in retrieval \nso I think this is going to be one of \nthe most interesting questions with \nbuilding these models further the next \ninteresting question related to this is \nthe robustness of the wev8 graphql \ngorilla 2 noisy retrieval so you know \nsay we try to correct our retrieval by \nretrieving three results rather than \njust one is Gorilla still going to be \nable to parse that out and use the \ncorrect reference from the three search \nresults as we saw from the Lost in the \nmiddle paper it doesn't look like this \nis going to be super easy to just \ncorrect retrieval Errors By retrieving \nmore results the next big question is \nthe robust business of the Wega graphql \ngorilla to paraphrases of the net of the \nnatural language commands to then \ntrigger the generation of the graphql so \nfor example our gbt4 our gbt 3.5 sorry \nthat is being prompted to generate the \nnatural language commands it might have \na particular kind of style in tone like \nget me the show me the and then it \nfollows this particular thing of maybe \nit has the search parameters first \nfollowed by the properties it wants to \nsee how robust is this going to be to \nsuper casual natural language commands \nfor retrieving from your database or you \nknow increasingly formal requests so we \ncan similarly use self-instruct in gbt4 \nand so on these large language like the \nyou know the largest large language \nmodel 7 billion is also quite large but \nto have paraphrases of the natural \nlanguage commands see what happens by \neither adding that to our training data \nset or adding that to our testing \nevaluation so following the presentation \nof these research questions here's a \ndiscussion of how I see this space of \nev8 and gorilla generally the gorilla \nidea of fine-tuning llms to use \nparticular tools so the first thing I'm \nkeeping an eye on is the development of \nthe gorilla open source repository \ngorilla and API store for llms so I've \ndone a paper summary video diving into \nthe original exploration of gorilla that \nexplores this really interesting thing \nof formatting apis for deep learning \nmodels so in this case the natural \nlanguage command would be something that \nindicates whether you want to use an \nimage segmentation model say an image \ngeneration model or maybe a you know \nsentiment classification text model from \nthe hugging face model Hub torch Hub \ntensorflow Hub and routing this into \nformatting the correct API request so we \nV8 firstly is quite related to this \nwhere you know if you want to do cement \nembedding surge which is a deep learning \nmodel thing you also need this kind of \ninfrastructure of building up a vector \nindex which makes it a unique kind of \nmodel inference problem in this category \nso my big question with adding alleviate \nto the API zoo in the gorilla project is \nhow we want to interface the class and \nthe property so \na common thing you see in in like laying \nchain or llama index is you just call \nthe class like document and then you \nhave a text key content and so you just \nkind of interface those two and then you \njust interface the uh the vector search \nbut I'll be really interested to see \nwhat happens as different kinds of apis \nare added to this gorilla thing and more \non this shortly the next Super \ninteresting thing will be extending we \nV8 graphql gorilla to leviate python \ngorilla via JavaScript gorilla we via \nJava gorilla weba go gorilla so we V8 in \naddition to this graphql API also has \nprogramming language clients so for \nexample to do the same kind of wear \nfilter in Python you can do client.query \ndot with where and pass it in this \npython dictionary you can also do \nclient.query.raw and pass in the string \nof the graphql query is one way of doing \nthis in Python but the thing about \npython that opens you know opens the \nwhole gorilla project up to probably \nit's more exciting uh you know General \nscope is allowing it to create classes \nto import data to do things like adding \ncross references or maybe the cloud \nmanagement stuff like replication \nconfiguring multi-tenancy all this kind \nof stuff because once you open it up to \nalleviate python gorilla now it has all \nthe levers it needs to control the \nleviate vector database now here's what \nI think is the really exciting future of \ngorillas and I think seeing maybe the \npython gorilla and kind of the vision of \nwhat that could be how it handles \ncreating the schema connecting to the \nclient you know maybe if you're running \nweeviate embedded it can instantiate all \nof weaviate but importing data as well \nas the querying I think this really \nopens up what we can do with these apis \nand probably the most interesting thing \nto me at least is how this will change \nsoftware integration so imagine a \nnatural language command where you say \nbuild a llama index query Engine with \nweeviate from my notion workspace titled \nbiochemistry chapter four now it will \njust take that and do everything you \nneed to create this kind of technology \nfor you because the gorillas know how to \nuse the apis to achieve each of these \nparts now we can imagine level 2 adding \nto the level 1 prompt please chunk the \ntext with unstructured and vectorize the \nchunks with open AI embeddings please \nadd a cohere re-ranker and Mosaic ml's \nMPT 30 billion large language model \nplease create a visualization of the \nsystem and streamlit we can maybe \nimagine also saying please visualize the \nembeddings using arise AI or nomic AI so \nthere's there's so much we can imagine \nto adding all the software together \nthrough natural language commands so the \nquestion to me though of how how do we \nget there isn't quite clear yet I think \nthere are three General kind of Pathways \nwe have one weeviate maintains one \ngorilla where we generate all the \ntraining data manage the model for all \nthe Integrations that we've particularly \nyou know decided to include in our \ntrading data set so that would mean you \nknow like we have we have coding \nexamples of how to use wevia with llama \nindex and so we've created those \nsynthetic examples and trained our \ngorilla on it the second idea could be \nwe have interfaces such that deviates \nGuerrilla talks to llama indexes gorilla \nso we you know both models know their \napis and maybe they would also have to \nhave some kind of orchestrator that \nknows what goes to leviate and what goes \nto llama index and then maybe the third \nthing is Gorilla emerges as an \nindependent third party that manages all \nthe documentation of these uh software \ntools and the apis and how they connect \nwith each other so I think there \ndefinitely is going to need to be some \nkind of hierarchy some kind of \norchestration that knows how to connect \nthese things together as well as the \nformatting of the particular apis but as \nwe saw from obviate graphql's gorilla's \nability to do compositional queries it \nmight be able to just you generate a \nreference of combining like five \ndifferent things and it might be able to \njust do that from one query so I'm super \nexcited about working on the development \nof this I think this will have a massive \nimpact on how quickly we can test new \nideas and I really just think it's \ncontinuing this theme of llms that write \ncode and code interpreter but using \nparticular libraries I think that really \nopens up what this is able to accomplish \nso thinking about how we VA can control \nthe entire database through maybe the \npython clients creating classes creating \nnew schemas adding properties you know \nimporting data that might be a little \ntoo future looking I think the most \nimmediate thing in front of us is \ninterfacing this weeviate graphql \ngorilla to Eva users as well as llms \nthrough the auto API so if you have a \nsecond please check out the GitHub issue \nit really means a lot and let us know \nwhat you think about just thumbs up if \nthis would be useful to you or if you \nsee any holes in the design of it any \nideas on this presentation so to \nconclude with some high level directions \nfor this whole Space of llm tool use I \nthink we're really seeing the evolution \nof retrieval augmented generation from \nthe original conception from Lewis and \nothers where we have this kind of \nembedding based retrieval to take \ncontext and decompose the problem of \nlanguage modeling and to retrieve then \nread we're now seeing this use of search \ndatabases as a whole entire tool and I \nthink it's really interesting to read \nthis paper on self-driving database \nManagement Systems quoted a true \nself-driving database management system \nautomatically one decides what actions \nto use to optimize itself two decides \nwhen to deploy those actions and three \nlearns from those actions all without \nany human intervention so I think this \nis quite a bold Vision where we can \nimagine you know actions to optimize \nitself whether it's configuring at the \nlowest level the hnsw parameters like \nthe EF construction the number of \nneighbors or with product quantization \nhow big of segments to use maybe the \nPrecision for the centroid IDs all these \nkind of hyper parameters for tuning the \nsearch database as well as actions such \nas creating new classes creating new \nproperties in the case of the generative \nfeedback loops maybe taking your data \ntransforming it into new data by \nprompting llms and then saving that data \nback into your database by using these \nAPI is interfaced with things like the \ngorilla algorithm and I think generally \njust having these databases that are \nobserving the queries that you're seeing \nfrom I think the original conception of \nthis was say building index structures \nlike if you're seeing a particular kind \nof join in an SQL system or a particular \nkind of filter you might build up and \nyou know cache these kind of indexes \nthat you're seeing all the time but now \nwe're seeing I think a more open-ended \ninterpretation of that where you also \ncould do things like you know create a \nnew class that has a particular kind of \ndata in it and Route queries to that or \nsay if you go deep into hsw there is \nsome research on how you can improve the \nspeed of filtered Vector searches by \nincreasing the connectivity of the graph \nbut generally I think by exposing LMS to \nthese apis we're going to see this \nreally interesting evolution of llms and \nthese search databases thank you so much \nfor watching this presentation of the \nwevier graphql gorilla to connect with \nus at webva we have a slack Community \nwhere everyone on the team including \nmembers of the community are are trying \nto answer your questions about building \nsemantic search applications it's I \nreally vouch highly for this community I \nthink you'll enjoy joining it and asking \nany questions you have about Building \nSystems with wev8 next up is the Twitter \nLinkedIn weeviate.io if you want to keep \nup with the new developments of weviate \nnew releases of the software as well as \nblog posts and research projects like \nthis all these sources will be great for \nyou know keeping up with the information \nchannels of weviate and finally I highly \nhighly recommend checking out the new \nverba retrieval augmented generation \nwith weeviate this is a full stack demo \nusing you know a react front end as well \nas the ev8 back end and it's a really \nexciting new demo project from wev8 so \nplease check that out and thank you so \nmuch for watching the weeviate graphql \ngorilla project \n", "type": "Video", "name": "Weaviate Gorilla Part 1: GraphQL APIs!", "path": "", "link": "https://www.youtube.com/watch?v=Zqxd1BnoQQQ", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "hey everyone thank you so much for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "watching movie it on YouTube I'm super", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "excited to present the weeviate gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "project we fine-tuned the open source", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "llama 7 billion parameter large language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "model to translate from natural language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "commands into the weeviate graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "search apis so we're better equipping", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "the large language models to use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate by interfacing them with our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "gorillas and gorillas are these smaller", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "language models that are specialized on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "a particular set of API through the use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "of retrieval aware fine tuning so this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "project also has a nice side effect of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "making it easier for humans to use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate because by translating from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands into levia's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "graphql apis it lightens the learning", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "curve a little bit from learning how to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "do you know compositional queries and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "just knowing all the queries that you're", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "able to execute which is another kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "nice side effect of this project is it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "serves as a query router there's a lot", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "of interesting discussion about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "combining SQL queries with Vector search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "and the gorilla has a nice kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "off-the-shelf effective it takes the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "natural command and it out to whether", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "the alleviate aggregate query which is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "how we do symbolic aggregations like SQL", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "style or the gate query as well as these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "nice trick shots where you can do a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search and then do symbolic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregations on the results of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search so all sorts of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting things there I would say", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "with this project if you're curious", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "about the future of llms and Tool use I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "would kind of say software broadly if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "you have a set of apis and you want to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "see how we did it how we use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct prompting to generate a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "training data set how we fine-tuned", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "llama 7B using hugging faces amazing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "path library and then substratus", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "orchestrating kubernetes and k-8's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "training as well as you know visualizing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "the results and how we're thinking about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "evaluating this kind of thing so really", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "quick one more thing that we'll get into", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "in the discussion but I want to quickly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "present in the introduction is the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "impact that this might have on software", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "Integrations", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "we can imagine a natural language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "command build a question answering", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "system using llama index and weviate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "visualized and streamlit and similarly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "to how you know code interpreter on open", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "AI is able to just you give it a file", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "and say make me a graph of this we're", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "pretty we're getting pretty close to LMS", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "that write code and use specific", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "libraries like we V8 and all these kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "of things so I think this is such an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting project I had so much fun", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "working on this let's dive into it this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "video explained the weevier gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}, {"text": "project continuing on the introduction", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 70, "tokens": 0, "vector": null, "score": 0}, {"text": "with a bit more of a visual Flair the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 71, "tokens": 0, "vector": null, "score": 0}, {"text": "high level idea is LOM tool use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 72, "tokens": 0, "vector": null, "score": 0}, {"text": "connecting large language models with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 73, "tokens": 0, "vector": null, "score": 0}, {"text": "external tools that allow them to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 74, "tokens": 0, "vector": null, "score": 0}, {"text": "supercharge their capabilities and be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 75, "tokens": 0, "vector": null, "score": 0}, {"text": "more productive generally so for example", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 76, "tokens": 0, "vector": null, "score": 0}, {"text": "if we want to answer the question what's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 77, "tokens": 0, "vector": null, "score": 0}, {"text": "the weather like in Boston right now", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 78, "tokens": 0, "vector": null, "score": 0}, {"text": "there's no way that we can rely on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 79, "tokens": 0, "vector": null, "score": 0}, {"text": "language modeling the internet or even", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 80, "tokens": 0, "vector": null, "score": 0}, {"text": "reinforcing learning from Human feedback", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 81, "tokens": 0, "vector": null, "score": 0}, {"text": "to answer a question like this the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 82, "tokens": 0, "vector": null, "score": 0}, {"text": "emerging solution to questions like this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 83, "tokens": 0, "vector": null, "score": 0}, {"text": "is to connect large language models with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 84, "tokens": 0, "vector": null, "score": 0}, {"text": "third-party apis so we have our large", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 85, "tokens": 0, "vector": null, "score": 0}, {"text": "language model and then we have some", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 86, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of weather API in order for the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 87, "tokens": 0, "vector": null, "score": 0}, {"text": "large language model to talk to the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 88, "tokens": 0, "vector": null, "score": 0}, {"text": "weather API it needs to format its", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 89, "tokens": 0, "vector": null, "score": 0}, {"text": "request in the API compatible way so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 90, "tokens": 0, "vector": null, "score": 0}, {"text": "this API may have input arguments like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 91, "tokens": 0, "vector": null, "score": 0}, {"text": "City where it expects a string like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 92, "tokens": 0, "vector": null, "score": 0}, {"text": "Boston Massachusetts maybe it expects a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 93, "tokens": 0, "vector": null, "score": 0}, {"text": "zip code and so you would have the zip", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 94, "tokens": 0, "vector": null, "score": 0}, {"text": "code and needs to learn to format the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 95, "tokens": 0, "vector": null, "score": 0}, {"text": "request in this particular syntax so if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 96, "tokens": 0, "vector": null, "score": 0}, {"text": "it expects the string Boston", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 97, "tokens": 0, "vector": null, "score": 0}, {"text": "Massachusetts for example and instead", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 98, "tokens": 0, "vector": null, "score": 0}, {"text": "the large language model says zero two", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 99, "tokens": 0, "vector": null, "score": 0}, {"text": "two one zero the API may be unable to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 100, "tokens": 0, "vector": null, "score": 0}, {"text": "respond as well as processing say the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 101, "tokens": 0, "vector": null, "score": 0}, {"text": "date argument so apis have a particular", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 102, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of syntax that they expect and we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 103, "tokens": 0, "vector": null, "score": 0}, {"text": "need to get our large language models to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 104, "tokens": 0, "vector": null, "score": 0}, {"text": "follow this syntax the API example may", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 105, "tokens": 0, "vector": null, "score": 0}, {"text": "be how the weather example might be a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 106, "tokens": 0, "vector": null, "score": 0}, {"text": "little simple but you can imagine with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 107, "tokens": 0, "vector": null, "score": 0}, {"text": "weba we have more complex apis than that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 108, "tokens": 0, "vector": null, "score": 0}, {"text": "so the general idea is connecting large", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 109, "tokens": 0, "vector": null, "score": 0}, {"text": "language models to all these external", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 110, "tokens": 0, "vector": null, "score": 0}, {"text": "tools to supercharge it keep its", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 111, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge up to date as well as to let", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 112, "tokens": 0, "vector": null, "score": 0}, {"text": "it execute computation so we connect LMS", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 113, "tokens": 0, "vector": null, "score": 0}, {"text": "to calculators or code executors search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 114, "tokens": 0, "vector": null, "score": 0}, {"text": "engines or databases as well as things", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 115, "tokens": 0, "vector": null, "score": 0}, {"text": "like weather apis or say your personal", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 116, "tokens": 0, "vector": null, "score": 0}, {"text": "calendar as LMS are becoming our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 117, "tokens": 0, "vector": null, "score": 0}, {"text": "co-pilots and assistants in our lives so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 118, "tokens": 0, "vector": null, "score": 0}, {"text": "let's dive into weeviate as a tool for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 119, "tokens": 0, "vector": null, "score": 0}, {"text": "large language models in this project we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 120, "tokens": 0, "vector": null, "score": 0}, {"text": "already assume that we have alleviate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 121, "tokens": 0, "vector": null, "score": 0}, {"text": "instance running with the data schema", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 122, "tokens": 0, "vector": null, "score": 0}, {"text": "and data loaded into it and we're", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 123, "tokens": 0, "vector": null, "score": 0}, {"text": "learning how to format API requests", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 124, "tokens": 0, "vector": null, "score": 0}, {"text": "search requests to this running database", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 125, "tokens": 0, "vector": null, "score": 0}, {"text": "later in the discussion we'll discuss", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 126, "tokens": 0, "vector": null, "score": 0}, {"text": "the more open-ended idea of letting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 127, "tokens": 0, "vector": null, "score": 0}, {"text": "large language models create new classes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 128, "tokens": 0, "vector": null, "score": 0}, {"text": "populate new data and all those exciting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 129, "tokens": 0, "vector": null, "score": 0}, {"text": "directions so let's say we have some", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 130, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of natural language command with a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 131, "tokens": 0, "vector": null, "score": 0}, {"text": "pretty complex weviate query what is the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 132, "tokens": 0, "vector": null, "score": 0}, {"text": "average complexity level of yoga poses", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 133, "tokens": 0, "vector": null, "score": 0}, {"text": "that are similar to warrior pose with a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 134, "tokens": 0, "vector": null, "score": 0}, {"text": "maximum distance of 0.15 we translate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 135, "tokens": 0, "vector": null, "score": 0}, {"text": "this into the weva query where we use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 136, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate our yoga pose class we use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 137, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector search and then we use a symbolic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 138, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregation to get the average", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 139, "tokens": 0, "vector": null, "score": 0}, {"text": "complexity of the results from our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 140, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector search so this is a bit of a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 141, "tokens": 0, "vector": null, "score": 0}, {"text": "confusing query that I don't think a lot", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 142, "tokens": 0, "vector": null, "score": 0}, {"text": "of new leviate users know you can do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 143, "tokens": 0, "vector": null, "score": 0}, {"text": "this as well as other things like this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 144, "tokens": 0, "vector": null, "score": 0}, {"text": "so the general idea is to let you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 145, "tokens": 0, "vector": null, "score": 0}, {"text": "translate from natural commands into", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 146, "tokens": 0, "vector": null, "score": 0}, {"text": "these queries so we need to generate a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 147, "tokens": 0, "vector": null, "score": 0}, {"text": "training data set that takes in these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 148, "tokens": 0, "vector": null, "score": 0}, {"text": "natural commands the API reference for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 149, "tokens": 0, "vector": null, "score": 0}, {"text": "this composition of aggregate Vector", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 150, "tokens": 0, "vector": null, "score": 0}, {"text": "Surge and then calculating the mean of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 151, "tokens": 0, "vector": null, "score": 0}, {"text": "the results of a particular property in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 152, "tokens": 0, "vector": null, "score": 0}, {"text": "the wevia class we returned as well as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 153, "tokens": 0, "vector": null, "score": 0}, {"text": "the custom schema for yoga pose which", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 154, "tokens": 0, "vector": null, "score": 0}, {"text": "has properties such as this complexity", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 155, "tokens": 0, "vector": null, "score": 0}, {"text": "level as well as some vectorized", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 156, "tokens": 0, "vector": null, "score": 0}, {"text": "property that's letting us Vector search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 157, "tokens": 0, "vector": null, "score": 0}, {"text": "warrior pose so as this may be already", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 158, "tokens": 0, "vector": null, "score": 0}, {"text": "evident making it easier for large", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 159, "tokens": 0, "vector": null, "score": 0}, {"text": "language models to use tools also makes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 160, "tokens": 0, "vector": null, "score": 0}, {"text": "it easier for humans to use them so this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 161, "tokens": 0, "vector": null, "score": 0}, {"text": "is a proposal for the auto API where we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 162, "tokens": 0, "vector": null, "score": 0}, {"text": "take a natural language query like show", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 163, "tokens": 0, "vector": null, "score": 0}, {"text": "me the full name and email of contacts", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 164, "tokens": 0, "vector": null, "score": 0}, {"text": "that contain John and their full name", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 165, "tokens": 0, "vector": null, "score": 0}, {"text": "and then under the hood the wev8 graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 166, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla will translate this into the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 167, "tokens": 0, "vector": null, "score": 0}, {"text": "proper graphql query using your schema", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 168, "tokens": 0, "vector": null, "score": 0}, {"text": "as well as the API reference and then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 169, "tokens": 0, "vector": null, "score": 0}, {"text": "execute the query also giving you the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 170, "tokens": 0, "vector": null, "score": 0}, {"text": "option to visualize the generated query", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 171, "tokens": 0, "vector": null, "score": 0}, {"text": "using the following syntax so we'll talk", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 172, "tokens": 0, "vector": null, "score": 0}, {"text": "about the auto API proposal a bit later", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 173, "tokens": 0, "vector": null, "score": 0}, {"text": "in the video in addition I think this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 174, "tokens": 0, "vector": null, "score": 0}, {"text": "video will be interesting to anyone out", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 175, "tokens": 0, "vector": null, "score": 0}, {"text": "there who's wondering how do I fine-tune", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 176, "tokens": 0, "vector": null, "score": 0}, {"text": "an llm for my API so whether you have a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 177, "tokens": 0, "vector": null, "score": 0}, {"text": "set of apis and you want to also", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 178, "tokens": 0, "vector": null, "score": 0}, {"text": "facilitate this natural language command", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 179, "tokens": 0, "vector": null, "score": 0}, {"text": "to using your software I think you'll be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 180, "tokens": 0, "vector": null, "score": 0}, {"text": "interested in this project so let's dive", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 181, "tokens": 0, "vector": null, "score": 0}, {"text": "into the overview of everything we did", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 182, "tokens": 0, "vector": null, "score": 0}, {"text": "to create this model here's everything", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 183, "tokens": 0, "vector": null, "score": 0}, {"text": "we did to train the wevigate graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 184, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla in a two minute overview we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 185, "tokens": 0, "vector": null, "score": 0}, {"text": "begin with four data sets we have a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 186, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge base where we have synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 187, "tokens": 0, "vector": null, "score": 0}, {"text": "database schemas we give gbt4 a prompt", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 188, "tokens": 0, "vector": null, "score": 0}, {"text": "on what a levia database schema looks", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 189, "tokens": 0, "vector": null, "score": 0}, {"text": "like as well as asking it to write at", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 190, "tokens": 0, "vector": null, "score": 0}, {"text": "least two text properties at least one", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 191, "tokens": 0, "vector": null, "score": 0}, {"text": "integer or number property as well as at", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 192, "tokens": 0, "vector": null, "score": 0}, {"text": "least one Boolean property and at least", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 193, "tokens": 0, "vector": null, "score": 0}, {"text": "one cross reference from this class to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 194, "tokens": 0, "vector": null, "score": 0}, {"text": "another class we create 50 such toy", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 195, "tokens": 0, "vector": null, "score": 0}, {"text": "schemas from Cars to instruments to all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 196, "tokens": 0, "vector": null, "score": 0}, {"text": "sorts of things so then we have our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 197, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge base of API references this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 198, "tokens": 0, "vector": null, "score": 0}, {"text": "contains all of the apis and we V8 how", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 199, "tokens": 0, "vector": null, "score": 0}, {"text": "hybrid search wear Auto cut re-ranking", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 200, "tokens": 0, "vector": null, "score": 0}, {"text": "46 such apis some of which are Atomic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 201, "tokens": 0, "vector": null, "score": 0}, {"text": "for example bm25 only describing bm25 as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 202, "tokens": 0, "vector": null, "score": 0}, {"text": "well as some compositional API", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 203, "tokens": 0, "vector": null, "score": 0}, {"text": "references like how to use bm25 in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 204, "tokens": 0, "vector": null, "score": 0}, {"text": "tandem with the wear filter then we have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 205, "tokens": 0, "vector": null, "score": 0}, {"text": "task examples these are manually written", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 206, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of how to translate from an API", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 207, "tokens": 0, "vector": null, "score": 0}, {"text": "reference and a a custom schema into a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 208, "tokens": 0, "vector": null, "score": 0}, {"text": "new query as well as how to translate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 209, "tokens": 0, "vector": null, "score": 0}, {"text": "from a custom schema API reference and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 210, "tokens": 0, "vector": null, "score": 0}, {"text": "query into a natural language command", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 211, "tokens": 0, "vector": null, "score": 0}, {"text": "because we're going to be generating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 212, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic examples to then train with so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 213, "tokens": 0, "vector": null, "score": 0}, {"text": "the first thing we do is we take the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 214, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge base of synthetic database", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 215, "tokens": 0, "vector": null, "score": 0}, {"text": "schemas and API references as well as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 216, "tokens": 0, "vector": null, "score": 0}, {"text": "the example of how to do this task and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 217, "tokens": 0, "vector": null, "score": 0}, {"text": "we create new queries by looping through", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 218, "tokens": 0, "vector": null, "score": 0}, {"text": "all of the database schemas and all of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 219, "tokens": 0, "vector": null, "score": 0}, {"text": "the apis so now we've created 2300 new", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 220, "tokens": 0, "vector": null, "score": 0}, {"text": "queries for these synthetic schemas we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 221, "tokens": 0, "vector": null, "score": 0}, {"text": "then use this to create natural language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 222, "tokens": 0, "vector": null, "score": 0}, {"text": "commands for when someone would want to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 223, "tokens": 0, "vector": null, "score": 0}, {"text": "execute these queries so now we have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 224, "tokens": 0, "vector": null, "score": 0}, {"text": "this is the entirety of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 225, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct algorithm now we have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 226, "tokens": 0, "vector": null, "score": 0}, {"text": "these two data sets of queries as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 227, "tokens": 0, "vector": null, "score": 0}, {"text": "as the natural commands for when we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 228, "tokens": 0, "vector": null, "score": 0}, {"text": "would want to execute these queries we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 229, "tokens": 0, "vector": null, "score": 0}, {"text": "also can use these uh this natural", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 230, "tokens": 0, "vector": null, "score": 0}, {"text": "language command set to evaluate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 231, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval we'll put the natural language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 232, "tokens": 0, "vector": null, "score": 0}, {"text": "command as our query and we'll see if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 233, "tokens": 0, "vector": null, "score": 0}, {"text": "it's able to return the API reference", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 234, "tokens": 0, "vector": null, "score": 0}, {"text": "that was used to produce the synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 235, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language command and synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 236, "tokens": 0, "vector": null, "score": 0}, {"text": "query we then take the new queries in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 237, "tokens": 0, "vector": null, "score": 0}, {"text": "the natural language commands and we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 238, "tokens": 0, "vector": null, "score": 0}, {"text": "template this into our fine-tuning data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 239, "tokens": 0, "vector": null, "score": 0}, {"text": "so in the fine-tuning data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 240, "tokens": 0, "vector": null, "score": 0}, {"text": "the input will be the synthetic database", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 241, "tokens": 0, "vector": null, "score": 0}, {"text": "schema the retrieved API reference as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 242, "tokens": 0, "vector": null, "score": 0}, {"text": "well as the synthetic natural language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 243, "tokens": 0, "vector": null, "score": 0}, {"text": "command and will predict the synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 244, "tokens": 0, "vector": null, "score": 0}, {"text": "query we use this in substratus", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 245, "tokens": 0, "vector": null, "score": 0}, {"text": "orchestrating kubernetes and k8's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 246, "tokens": 0, "vector": null, "score": 0}, {"text": "training also using the hug and face pef", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 247, "tokens": 0, "vector": null, "score": 0}, {"text": "library to train our Guerrilla large", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 248, "tokens": 0, "vector": null, "score": 0}, {"text": "language model we then evaluate our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 249, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla large language model by firstly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 250, "tokens": 0, "vector": null, "score": 0}, {"text": "simply asking does it execute and we V8", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 251, "tokens": 0, "vector": null, "score": 0}, {"text": "by looping through the schemas", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 252, "tokens": 0, "vector": null, "score": 0}, {"text": "instantiating them in Wii V8 and then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 253, "tokens": 0, "vector": null, "score": 0}, {"text": "even if you don't have any data in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 254, "tokens": 0, "vector": null, "score": 0}, {"text": "weviate if you execute a query if you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 255, "tokens": 0, "vector": null, "score": 0}, {"text": "give it a incorrectly formatted query it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 256, "tokens": 0, "vector": null, "score": 0}, {"text": "will give you an error message otherwise", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 257, "tokens": 0, "vector": null, "score": 0}, {"text": "it will just you know give you an empty", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 258, "tokens": 0, "vector": null, "score": 0}, {"text": "list of results so we can test quickly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 259, "tokens": 0, "vector": null, "score": 0}, {"text": "if the query executed we also use llm", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 260, "tokens": 0, "vector": null, "score": 0}, {"text": "evaluation which is where you give an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 261, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction response paired to gbt4", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 262, "tokens": 0, "vector": null, "score": 0}, {"text": "and you ask it did this response follow", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 263, "tokens": 0, "vector": null, "score": 0}, {"text": "the instruction you could similarly try", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 264, "tokens": 0, "vector": null, "score": 0}, {"text": "to maybe correct the response by using", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 265, "tokens": 0, "vector": null, "score": 0}, {"text": "things like reflection prompting but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 266, "tokens": 0, "vector": null, "score": 0}, {"text": "this is another way to get evaluation", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 267, "tokens": 0, "vector": null, "score": 0}, {"text": "metric off the shelf we can also use the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 268, "tokens": 0, "vector": null, "score": 0}, {"text": "perplexity metric where we see uh you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 269, "tokens": 0, "vector": null, "score": 0}, {"text": "know we force the language model to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 270, "tokens": 0, "vector": null, "score": 0}, {"text": "generate the ground truth queries there", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 271, "tokens": 0, "vector": null, "score": 0}, {"text": "is a bit of variance in the queries for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 272, "tokens": 0, "vector": null, "score": 0}, {"text": "for some of them that might make this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 273, "tokens": 0, "vector": null, "score": 0}, {"text": "difficult as well as the engram mesh so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 274, "tokens": 0, "vector": null, "score": 0}, {"text": "we'll talk more about evaluation later", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 275, "tokens": 0, "vector": null, "score": 0}, {"text": "in the presentation really quickly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 276, "tokens": 0, "vector": null, "score": 0}, {"text": "before we dive further into the details", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 277, "tokens": 0, "vector": null, "score": 0}, {"text": "of self-instruct prompting and how we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 278, "tokens": 0, "vector": null, "score": 0}, {"text": "train these models and evaluated them", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 279, "tokens": 0, "vector": null, "score": 0}, {"text": "here is the proposal for the auto API so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 280, "tokens": 0, "vector": null, "score": 0}, {"text": "if you have a second I'd really", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 281, "tokens": 0, "vector": null, "score": 0}, {"text": "appreciate if you could check out this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 282, "tokens": 0, "vector": null, "score": 0}, {"text": "API let us know if firstly you like the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 283, "tokens": 0, "vector": null, "score": 0}, {"text": "way that this looks if this is something", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 284, "tokens": 0, "vector": null, "score": 0}, {"text": "that would be useful to you as well as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 285, "tokens": 0, "vector": null, "score": 0}, {"text": "some of the details of particularly how", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 286, "tokens": 0, "vector": null, "score": 0}, {"text": "we would package this if if that makes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 287, "tokens": 0, "vector": null, "score": 0}, {"text": "sense so overall this is the idea of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 288, "tokens": 0, "vector": null, "score": 0}, {"text": "having an auto API where you could just", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 289, "tokens": 0, "vector": null, "score": 0}, {"text": "give a natural language query and then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 290, "tokens": 0, "vector": null, "score": 0}, {"text": "you could see the generated query as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 291, "tokens": 0, "vector": null, "score": 0}, {"text": "well as under the hood Auto would", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 292, "tokens": 0, "vector": null, "score": 0}, {"text": "translate and then execute the query so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 293, "tokens": 0, "vector": null, "score": 0}, {"text": "there's all sorts of details in this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 294, "tokens": 0, "vector": null, "score": 0}, {"text": "about how exactly we would serve the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 295, "tokens": 0, "vector": null, "score": 0}, {"text": "Wi-Fi Guerrilla model how exactly we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 296, "tokens": 0, "vector": null, "score": 0}, {"text": "will do the retrieval aware inference so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 297, "tokens": 0, "vector": null, "score": 0}, {"text": "if you have a second please leave a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 298, "tokens": 0, "vector": null, "score": 0}, {"text": "thumbs up if you think this would be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 299, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting it really helps us", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 300, "tokens": 0, "vector": null, "score": 0}, {"text": "prioritize what to work on so thank you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 301, "tokens": 0, "vector": null, "score": 0}, {"text": "so much for checking this out so diving", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 302, "tokens": 0, "vector": null, "score": 0}, {"text": "further into how we train the Eva", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 303, "tokens": 0, "vector": null, "score": 0}, {"text": "graphql gorilla we're going to cover", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 304, "tokens": 0, "vector": null, "score": 0}, {"text": "four main parts self-instruct data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 305, "tokens": 0, "vector": null, "score": 0}, {"text": "generation fine-tuning llama 7B", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 306, "tokens": 0, "vector": null, "score": 0}, {"text": "evaluating the model and then discussion", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 307, "tokens": 0, "vector": null, "score": 0}, {"text": "and next steps for the gorilla project", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 308, "tokens": 0, "vector": null, "score": 0}, {"text": "so beginning with self-instruct data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 309, "tokens": 0, "vector": null, "score": 0}, {"text": "generation so we start off by creating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 310, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic schemas for all sorts of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 311, "tokens": 0, "vector": null, "score": 0}, {"text": "fictional webia use cases we do this by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 312, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting gbt4 here is an example of a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 313, "tokens": 0, "vector": null, "score": 0}, {"text": "weeva database schema and then we give", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 314, "tokens": 0, "vector": null, "score": 0}, {"text": "it an example of the Json for a manually", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 315, "tokens": 0, "vector": null, "score": 0}, {"text": "written schema then we give it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 316, "tokens": 0, "vector": null, "score": 0}, {"text": "information about weva classes and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 317, "tokens": 0, "vector": null, "score": 0}, {"text": "properties just describing how classes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 318, "tokens": 0, "vector": null, "score": 0}, {"text": "are the atomic abstraction for some kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 319, "tokens": 0, "vector": null, "score": 0}, {"text": "of object and then it has these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 320, "tokens": 0, "vector": null, "score": 0}, {"text": "Associated properties and then some", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 321, "tokens": 0, "vector": null, "score": 0}, {"text": "information about properties like how", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 322, "tokens": 0, "vector": null, "score": 0}, {"text": "they can be text you specify one text", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 323, "tokens": 0, "vector": null, "score": 0}, {"text": "property to vectorize the object as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 324, "tokens": 0, "vector": null, "score": 0}, {"text": "as you know in properties Boolean and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 325, "tokens": 0, "vector": null, "score": 0}, {"text": "then cross references from classes to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 326, "tokens": 0, "vector": null, "score": 0}, {"text": "other classes such his book has author", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 327, "tokens": 0, "vector": null, "score": 0}, {"text": "author being another class so then we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 328, "tokens": 0, "vector": null, "score": 0}, {"text": "prompted could you please design five", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 329, "tokens": 0, "vector": null, "score": 0}, {"text": "more fictional schemas for each could", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 330, "tokens": 0, "vector": null, "score": 0}, {"text": "you please include at least two text", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 331, "tokens": 0, "vector": null, "score": 0}, {"text": "properties at least one inner number", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 332, "tokens": 0, "vector": null, "score": 0}, {"text": "property at least one billion property", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 333, "tokens": 0, "vector": null, "score": 0}, {"text": "and at least one cross reference for the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 334, "tokens": 0, "vector": null, "score": 0}, {"text": "cross-reference class can you please", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 335, "tokens": 0, "vector": null, "score": 0}, {"text": "create that class as well with at least", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 336, "tokens": 0, "vector": null, "score": 0}, {"text": "one text property and at least one in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 337, "tokens": 0, "vector": null, "score": 0}, {"text": "property so this lets us then generate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 338, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic cross-reference classes where", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 339, "tokens": 0, "vector": null, "score": 0}, {"text": "say we we search through books then we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 340, "tokens": 0, "vector": null, "score": 0}, {"text": "get the author and then we want to see", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 341, "tokens": 0, "vector": null, "score": 0}, {"text": "uh let's say the average let's say you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 342, "tokens": 0, "vector": null, "score": 0}, {"text": "want to do a symbolic query on the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 343, "tokens": 0, "vector": null, "score": 0}, {"text": "author that you've linked this way and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 344, "tokens": 0, "vector": null, "score": 0}, {"text": "you want to say the average number of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 345, "tokens": 0, "vector": null, "score": 0}, {"text": "books they've written or something like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 346, "tokens": 0, "vector": null, "score": 0}, {"text": "that so we can do this kind of thing by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 347, "tokens": 0, "vector": null, "score": 0}, {"text": "adding these properties and making sure", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 348, "tokens": 0, "vector": null, "score": 0}, {"text": "that each of these synthetic schemas are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 349, "tokens": 0, "vector": null, "score": 0}, {"text": "able to cover an exhaustive set of then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 350, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic queries so for this step I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 351, "tokens": 0, "vector": null, "score": 0}, {"text": "currently did it by just manually", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 352, "tokens": 0, "vector": null, "score": 0}, {"text": "looking through the schemas to make sure", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 353, "tokens": 0, "vector": null, "score": 0}, {"text": "each one was correct because an error", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 354, "tokens": 0, "vector": null, "score": 0}, {"text": "here would Cascade severely into the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 355, "tokens": 0, "vector": null, "score": 0}, {"text": "rest of the data the result of prompting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 356, "tokens": 0, "vector": null, "score": 0}, {"text": "gbg4 like this is that we end up with 50", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 357, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic schemas so for example here we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 358, "tokens": 0, "vector": null, "score": 0}, {"text": "have a book class a description a book", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 359, "tokens": 0, "vector": null, "score": 0}, {"text": "from the library configuring the hsw", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 360, "tokens": 0, "vector": null, "score": 0}, {"text": "vector index the model that we want to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 361, "tokens": 0, "vector": null, "score": 0}, {"text": "use in this case the hugging phase", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 362, "tokens": 0, "vector": null, "score": 0}, {"text": "Transformers to vectorize each book", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 363, "tokens": 0, "vector": null, "score": 0}, {"text": "object in our class as well as the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 364, "tokens": 0, "vector": null, "score": 0}, {"text": "properties we have title the text", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 365, "tokens": 0, "vector": null, "score": 0}, {"text": "property summary text property page", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 366, "tokens": 0, "vector": null, "score": 0}, {"text": "count in is available Boolean and then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 367, "tokens": 0, "vector": null, "score": 0}, {"text": "author the cross reference to the author", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 368, "tokens": 0, "vector": null, "score": 0}, {"text": "class so we generate 50 such synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 369, "tokens": 0, "vector": null, "score": 0}, {"text": "use cases of weviate across all sorts of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 370, "tokens": 0, "vector": null, "score": 0}, {"text": "different applications of leviate from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 371, "tokens": 0, "vector": null, "score": 0}, {"text": "music to video games to say clothing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 372, "tokens": 0, "vector": null, "score": 0}, {"text": "travel destinations or even AI models", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 373, "tokens": 0, "vector": null, "score": 0}, {"text": "themselves we generate all sorts of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 374, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic use cases that we can then use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 375, "tokens": 0, "vector": null, "score": 0}, {"text": "to create these synthetic queries and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 376, "tokens": 0, "vector": null, "score": 0}, {"text": "then have training data for our gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 377, "tokens": 0, "vector": null, "score": 0}, {"text": "model so overall it takes about two", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 378, "tokens": 0, "vector": null, "score": 0}, {"text": "hours to generate 2 300 queries and this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 379, "tokens": 0, "vector": null, "score": 0}, {"text": "costs about 12 using the um in this case", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 380, "tokens": 0, "vector": null, "score": 0}, {"text": "we're sorry we're using gbt4 and and the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 381, "tokens": 0, "vector": null, "score": 0}, {"text": "the GUI to generate the synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 382, "tokens": 0, "vector": null, "score": 0}, {"text": "schemas and then we plug the synthetic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 383, "tokens": 0, "vector": null, "score": 0}, {"text": "schemas into a prompt template with the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 384, "tokens": 0, "vector": null, "score": 0}, {"text": "API references and an example of how to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 385, "tokens": 0, "vector": null, "score": 0}, {"text": "write a query for a custom schema into", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 386, "tokens": 0, "vector": null, "score": 0}, {"text": "the prompt so there I'd say the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 387, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting thing here is that there are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 388, "tokens": 0, "vector": null, "score": 0}, {"text": "two knowledge sources the API reference", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 389, "tokens": 0, "vector": null, "score": 0}, {"text": "and the custom schema as well as a task", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 390, "tokens": 0, "vector": null, "score": 0}, {"text": "example task examples a few shot", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 391, "tokens": 0, "vector": null, "score": 0}, {"text": "examples kind of got swept under the rug", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 392, "tokens": 0, "vector": null, "score": 0}, {"text": "a little bit with the whole rohf thing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 393, "tokens": 0, "vector": null, "score": 0}, {"text": "but I would say it is Paramount to the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 394, "tokens": 0, "vector": null, "score": 0}, {"text": "success of this project is using", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 395, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of tasks can supercharge this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 396, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of prompting so I highly recommend", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 397, "tokens": 0, "vector": null, "score": 0}, {"text": "you know whatever you're doing with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 398, "tokens": 0, "vector": null, "score": 0}, {"text": "large language model prompting to add", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 399, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of the task you're trying to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 400, "tokens": 0, "vector": null, "score": 0}, {"text": "complete so so then this takes two hours", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 401, "tokens": 0, "vector": null, "score": 0}, {"text": "to Loop through the 50 synthetic schemas", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 402, "tokens": 0, "vector": null, "score": 0}, {"text": "the 46 apis and generate 2 300 queries", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 403, "tokens": 0, "vector": null, "score": 0}, {"text": "costing about 12 using the openai gbt", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 404, "tokens": 0, "vector": null, "score": 0}, {"text": "3.5 16k API so here are some future", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 405, "tokens": 0, "vector": null, "score": 0}, {"text": "directions for the data creation so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 406, "tokens": 0, "vector": null, "score": 0}, {"text": "firstly validating the queries so we can", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 407, "tokens": 0, "vector": null, "score": 0}, {"text": "you know Loop through each of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 408, "tokens": 0, "vector": null, "score": 0}, {"text": "schemas load in the Json create the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 409, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate schema and then execute the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 410, "tokens": 0, "vector": null, "score": 0}, {"text": "query but I think you want to have a way", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 411, "tokens": 0, "vector": null, "score": 0}, {"text": "of doing this asynchronously doing this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 412, "tokens": 0, "vector": null, "score": 0}, {"text": "in the background where you generate the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 413, "tokens": 0, "vector": null, "score": 0}, {"text": "queries on one thread and then you are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 414, "tokens": 0, "vector": null, "score": 0}, {"text": "validating the queries somewhere else so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 415, "tokens": 0, "vector": null, "score": 0}, {"text": "it doesn't block the program and slow", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 416, "tokens": 0, "vector": null, "score": 0}, {"text": "this down because uh two hours isn't", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 417, "tokens": 0, "vector": null, "score": 0}, {"text": "super fast and you don't want to be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 418, "tokens": 0, "vector": null, "score": 0}, {"text": "adding that extra layer in there that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 419, "tokens": 0, "vector": null, "score": 0}, {"text": "could you know blow it up so another way", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 420, "tokens": 0, "vector": null, "score": 0}, {"text": "to get more data would be to add the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 421, "tokens": 0, "vector": null, "score": 0}, {"text": "previous example again so you'd say you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 422, "tokens": 0, "vector": null, "score": 0}, {"text": "know here's the previous example of a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 423, "tokens": 0, "vector": null, "score": 0}, {"text": "query generated and also if that did", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 424, "tokens": 0, "vector": null, "score": 0}, {"text": "validate that would be a really great", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 425, "tokens": 0, "vector": null, "score": 0}, {"text": "query and what that would result in is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 426, "tokens": 0, "vector": null, "score": 0}, {"text": "diversity in the kind of query sent the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 427, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of filters used if you're prompting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 428, "tokens": 0, "vector": null, "score": 0}, {"text": "it to write a custom wear filter as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 429, "tokens": 0, "vector": null, "score": 0}, {"text": "as which properties it then accesses", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 430, "tokens": 0, "vector": null, "score": 0}, {"text": "from the query so another interesting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 431, "tokens": 0, "vector": null, "score": 0}, {"text": "thing is thinking about Atomic and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 432, "tokens": 0, "vector": null, "score": 0}, {"text": "compositional apis so this is quite a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 433, "tokens": 0, "vector": null, "score": 0}, {"text": "deep topic where with weaviate for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 434, "tokens": 0, "vector": null, "score": 0}, {"text": "example you can combine bm25 with wear", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 435, "tokens": 0, "vector": null, "score": 0}, {"text": "as well as other features like using", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 436, "tokens": 0, "vector": null, "score": 0}, {"text": "underscore additional to get the vector", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 437, "tokens": 0, "vector": null, "score": 0}, {"text": "of the object so thinking about whether", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 438, "tokens": 0, "vector": null, "score": 0}, {"text": "so we have 46 apis but it's not exactly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 439, "tokens": 0, "vector": null, "score": 0}, {"text": "that's not the combinator works of all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 440, "tokens": 0, "vector": null, "score": 0}, {"text": "the compositional apis that you could do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 441, "tokens": 0, "vector": null, "score": 0}, {"text": "from the set of the atomic apis so we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 442, "tokens": 0, "vector": null, "score": 0}, {"text": "could probably create even more", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 443, "tokens": 0, "vector": null, "score": 0}, {"text": "documentation synthetically through", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 444, "tokens": 0, "vector": null, "score": 0}, {"text": "generative feedback loops by combining", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 445, "tokens": 0, "vector": null, "score": 0}, {"text": "our Atomic apis where appropriate and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 446, "tokens": 0, "vector": null, "score": 0}, {"text": "then creating more documentation on how", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 447, "tokens": 0, "vector": null, "score": 0}, {"text": "you might combine all sorts of apis", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 448, "tokens": 0, "vector": null, "score": 0}, {"text": "particularly from this perspective of uh", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 449, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla so now that we have our training", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 450, "tokens": 0, "vector": null, "score": 0}, {"text": "data set created by self-instruct", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 451, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting using the API references", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 452, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic database schemas and task", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 453, "tokens": 0, "vector": null, "score": 0}, {"text": "examples we can now fine-tune the Llama", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 454, "tokens": 0, "vector": null, "score": 0}, {"text": "7 billion parameter large language model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 455, "tokens": 0, "vector": null, "score": 0}, {"text": "so to do this we teamed up with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 456, "tokens": 0, "vector": null, "score": 0}, {"text": "substratus AI and particularly Sam", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 457, "tokens": 0, "vector": null, "score": 0}, {"text": "stalinga really LED all this I'm going", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 458, "tokens": 0, "vector": null, "score": 0}, {"text": "to do my best to kind of explain his", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 459, "tokens": 0, "vector": null, "score": 0}, {"text": "work on this so we begin by loading the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 460, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters for hugging faces a language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 461, "tokens": 0, "vector": null, "score": 0}, {"text": "model fine tuner we'll see this later", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 462, "tokens": 0, "vector": null, "score": 0}, {"text": "then we load in the model we we already", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 463, "tokens": 0, "vector": null, "score": 0}, {"text": "have this model saved in our directory", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 464, "tokens": 0, "vector": null, "score": 0}, {"text": "where we've saved you do the Dot from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 465, "tokens": 0, "vector": null, "score": 0}, {"text": "pretrain and you have the Llama 7", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 466, "tokens": 0, "vector": null, "score": 0}, {"text": "billion which is pretty straightforward", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 467, "tokens": 0, "vector": null, "score": 0}, {"text": "to figure out how you do that on on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 468, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face so this is one interesting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 469, "tokens": 0, "vector": null, "score": 0}, {"text": "detail I'm not sure if I have this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 470, "tokens": 0, "vector": null, "score": 0}, {"text": "completely correct but I think what you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 471, "tokens": 0, "vector": null, "score": 0}, {"text": "do is you load the model in 8-bit", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 472, "tokens": 0, "vector": null, "score": 0}, {"text": "precision and then I think once it gets", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 473, "tokens": 0, "vector": null, "score": 0}, {"text": "into memory then you convert it back to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 474, "tokens": 0, "vector": null, "score": 0}, {"text": "float16 I'm not sure exactly how that if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 475, "tokens": 0, "vector": null, "score": 0}, {"text": "that's correct but so then we load our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 476, "tokens": 0, "vector": null, "score": 0}, {"text": "data set and again our I don't know if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 477, "tokens": 0, "vector": null, "score": 0}, {"text": "some this in the video yet but our this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 478, "tokens": 0, "vector": null, "score": 0}, {"text": "data set is open sourced on WE V8", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 479, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face so then here's the prompt", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 480, "tokens": 0, "vector": null, "score": 0}, {"text": "that we use we put in the instruction", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 481, "tokens": 0, "vector": null, "score": 0}, {"text": "and then the response is the completion", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 482, "tokens": 0, "vector": null, "score": 0}, {"text": "and this is what you use to pass to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 483, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging faces fine tuner so then we have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 484, "tokens": 0, "vector": null, "score": 0}, {"text": "our model we have the config for our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 485, "tokens": 0, "vector": null, "score": 0}, {"text": "model things like the position", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 486, "tokens": 0, "vector": null, "score": 0}, {"text": "embeddings the max length from the model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 487, "tokens": 0, "vector": null, "score": 0}, {"text": "then we add the special padding token", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 488, "tokens": 0, "vector": null, "score": 0}, {"text": "with the you know the open square", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 489, "tokens": 0, "vector": null, "score": 0}, {"text": "brackets capital letters pad then we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 490, "tokens": 0, "vector": null, "score": 0}, {"text": "tokenize the data set with the max", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 491, "tokens": 0, "vector": null, "score": 0}, {"text": "length and then the padding truncating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 492, "tokens": 0, "vector": null, "score": 0}, {"text": "sequences that are too long okay so then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 493, "tokens": 0, "vector": null, "score": 0}, {"text": "we have our data set now we're going to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 494, "tokens": 0, "vector": null, "score": 0}, {"text": "use this incredible PFT Library so one", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 495, "tokens": 0, "vector": null, "score": 0}, {"text": "of the most interesting things that are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 496, "tokens": 0, "vector": null, "score": 0}, {"text": "happening in deep learning is sparse", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 497, "tokens": 0, "vector": null, "score": 0}, {"text": "fine tuning when we fine-tune something", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 498, "tokens": 0, "vector": null, "score": 0}, {"text": "like Lama 7B we don't need to update 7", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 499, "tokens": 0, "vector": null, "score": 0}, {"text": "billion parameters rather we can up", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 500, "tokens": 0, "vector": null, "score": 0}, {"text": "update a subset of the parameters and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 501, "tokens": 0, "vector": null, "score": 0}, {"text": "there are quite a few algorithms for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 502, "tokens": 0, "vector": null, "score": 0}, {"text": "what how exactly you update the few", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 503, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters Laura low rank adaptation is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 504, "tokens": 0, "vector": null, "score": 0}, {"text": "one way where you do a matrix", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 505, "tokens": 0, "vector": null, "score": 0}, {"text": "factorization and you only need to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 506, "tokens": 0, "vector": null, "score": 0}, {"text": "update the eigenvalues of this Matrix", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 507, "tokens": 0, "vector": null, "score": 0}, {"text": "factorization so it's a bit tricky but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 508, "tokens": 0, "vector": null, "score": 0}, {"text": "it is one of the most interesting ways", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 509, "tokens": 0, "vector": null, "score": 0}, {"text": "of having this you know Vector that's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 510, "tokens": 0, "vector": null, "score": 0}, {"text": "sparse relative to all the parameters as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 511, "tokens": 0, "vector": null, "score": 0}, {"text": "you see we have uh 6.7 billion", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 512, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters in Lama and we only need to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 513, "tokens": 0, "vector": null, "score": 0}, {"text": "train 8 million of the parameters by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 514, "tokens": 0, "vector": null, "score": 0}, {"text": "using this sparse fine-tuning thing with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 515, "tokens": 0, "vector": null, "score": 0}, {"text": "Laura which it is interface with hugging", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 516, "tokens": 0, "vector": null, "score": 0}, {"text": "face and you know I say this a lot on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 517, "tokens": 0, "vector": null, "score": 0}, {"text": "the podcast and stuff I feel like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 518, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face has created such an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 519, "tokens": 0, "vector": null, "score": 0}, {"text": "incredible Library also Mosaic ml", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 520, "tokens": 0, "vector": null, "score": 0}, {"text": "they've made it so much like they've", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 521, "tokens": 0, "vector": null, "score": 0}, {"text": "abstracted so much of this and it works", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 522, "tokens": 0, "vector": null, "score": 0}, {"text": "pretty well that I personally don't find", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 523, "tokens": 0, "vector": null, "score": 0}, {"text": "myself feeling like I need to invest", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 524, "tokens": 0, "vector": null, "score": 0}, {"text": "into unpacking the details of these kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 525, "tokens": 0, "vector": null, "score": 0}, {"text": "of things but unless that's your thing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 526, "tokens": 0, "vector": null, "score": 0}, {"text": "obviously then then dive into it but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 527, "tokens": 0, "vector": null, "score": 0}, {"text": "anyway so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 528, "tokens": 0, "vector": null, "score": 0}, {"text": "so now that we have our model set up and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 529, "tokens": 0, "vector": null, "score": 0}, {"text": "the training data set now we use the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 530, "tokens": 0, "vector": null, "score": 0}, {"text": "data collator for language modeling so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 531, "tokens": 0, "vector": null, "score": 0}, {"text": "right now with leviate Gorilla we're", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 532, "tokens": 0, "vector": null, "score": 0}, {"text": "just language modeling by using that um", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 533, "tokens": 0, "vector": null, "score": 0}, {"text": "you when you give it this prompt", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 534, "tokens": 0, "vector": null, "score": 0}, {"text": "template uh sorry this prompt template", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 535, "tokens": 0, "vector": null, "score": 0}, {"text": "shown here it will only language model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 536, "tokens": 0, "vector": null, "score": 0}, {"text": "the completion part instead of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 537, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction as well which is kind of a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 538, "tokens": 0, "vector": null, "score": 0}, {"text": "nice effect of this and it'll also do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 539, "tokens": 0, "vector": null, "score": 0}, {"text": "things like um you know back in the day", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 540, "tokens": 0, "vector": null, "score": 0}, {"text": "with hugging face language modeling you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 541, "tokens": 0, "vector": null, "score": 0}, {"text": "would just basically concatenate all the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 542, "tokens": 0, "vector": null, "score": 0}, {"text": "text you had into one gigantic text file", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 543, "tokens": 0, "vector": null, "score": 0}, {"text": "and it would just randomly sample from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 544, "tokens": 0, "vector": null, "score": 0}, {"text": "that but this is doing it has more stuff", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 545, "tokens": 0, "vector": null, "score": 0}, {"text": "now on uh separating each input output", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 546, "tokens": 0, "vector": null, "score": 0}, {"text": "example from each other so so then once", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 547, "tokens": 0, "vector": null, "score": 0}, {"text": "we train the model you can see our loss", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 548, "tokens": 0, "vector": null, "score": 0}, {"text": "curves that we'll visualize in a second", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 549, "tokens": 0, "vector": null, "score": 0}, {"text": "okay so as shown in the notebook now I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 550, "tokens": 0, "vector": null, "score": 0}, {"text": "grab that uh the training loss and steps", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 551, "tokens": 0, "vector": null, "score": 0}, {"text": "drop that into a text file and give it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 552, "tokens": 0, "vector": null, "score": 0}, {"text": "to open ai's code interpreter which I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 553, "tokens": 0, "vector": null, "score": 0}, {"text": "feel like is a neighbor to our gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 554, "tokens": 0, "vector": null, "score": 0}, {"text": "project here and asked it to visualize", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 555, "tokens": 0, "vector": null, "score": 0}, {"text": "this data so we see this learning curve", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 556, "tokens": 0, "vector": null, "score": 0}, {"text": "you always have some variants in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 557, "tokens": 0, "vector": null, "score": 0}, {"text": "learning curves but generally we see", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 558, "tokens": 0, "vector": null, "score": 0}, {"text": "this decreasing law us and this is quite", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 559, "tokens": 0, "vector": null, "score": 0}, {"text": "lazy you know we only have the training", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 560, "tokens": 0, "vector": null, "score": 0}, {"text": "loss for now it would be good to show", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 561, "tokens": 0, "vector": null, "score": 0}, {"text": "that overfitting curve where you also", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 562, "tokens": 0, "vector": null, "score": 0}, {"text": "have the test loss and you see if the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 563, "tokens": 0, "vector": null, "score": 0}, {"text": "test loss is decreasing with the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 564, "tokens": 0, "vector": null, "score": 0}, {"text": "training loss but for now we just wanted", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 565, "tokens": 0, "vector": null, "score": 0}, {"text": "to you know get running with having fit", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 566, "tokens": 0, "vector": null, "score": 0}, {"text": "a model but we do when we're showing you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 567, "tokens": 0, "vector": null, "score": 0}, {"text": "some results at the end of the uh the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 568, "tokens": 0, "vector": null, "score": 0}, {"text": "presentation as well as the blog post", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 569, "tokens": 0, "vector": null, "score": 0}, {"text": "those are from held out schemas and API", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 570, "tokens": 0, "vector": null, "score": 0}, {"text": "references and we have done some train", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 571, "tokens": 0, "vector": null, "score": 0}, {"text": "test splitting just but we've just", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 572, "tokens": 0, "vector": null, "score": 0}, {"text": "manually inspected it instead of having", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 573, "tokens": 0, "vector": null, "score": 0}, {"text": "it in our quantitative evaluation Loop", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 574, "tokens": 0, "vector": null, "score": 0}, {"text": "so with concluding here are some ideas I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 575, "tokens": 0, "vector": null, "score": 0}, {"text": "have about fine-tuning these kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 576, "tokens": 0, "vector": null, "score": 0}, {"text": "models so firstly in a new podcast that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 577, "tokens": 0, "vector": null, "score": 0}, {"text": "we're going to be releasing on Wednesday", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 578, "tokens": 0, "vector": null, "score": 0}, {"text": "farshad farabakshian describes this idea", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 579, "tokens": 0, "vector": null, "score": 0}, {"text": "of skill versus knowledge and giving the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 580, "tokens": 0, "vector": null, "score": 0}, {"text": "example of a lawyer for how to think", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 581, "tokens": 0, "vector": null, "score": 0}, {"text": "about for one class of thinking about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 582, "tokens": 0, "vector": null, "score": 0}, {"text": "fine tuning in this way of thinking you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 583, "tokens": 0, "vector": null, "score": 0}, {"text": "are a lawyer and you have the skill of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 584, "tokens": 0, "vector": null, "score": 0}, {"text": "how to parse these legal documents you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 585, "tokens": 0, "vector": null, "score": 0}, {"text": "know like me personally if you gave me", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 586, "tokens": 0, "vector": null, "score": 0}, {"text": "if I had all these legal documents and I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 587, "tokens": 0, "vector": null, "score": 0}, {"text": "was your lawyer you would be in trouble", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 588, "tokens": 0, "vector": null, "score": 0}, {"text": "but uh lawyer who's been to law school", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 589, "tokens": 0, "vector": null, "score": 0}, {"text": "has fine-tuned in a way to have the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 590, "tokens": 0, "vector": null, "score": 0}, {"text": "skill of reading the the knowledge so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 591, "tokens": 0, "vector": null, "score": 0}, {"text": "you have the retrieval augmented", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 592, "tokens": 0, "vector": null, "score": 0}, {"text": "generation to provide the knowledge as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 593, "tokens": 0, "vector": null, "score": 0}, {"text": "well as learning the skill for how to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 594, "tokens": 0, "vector": null, "score": 0}, {"text": "parse the knowledge and I think that's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 595, "tokens": 0, "vector": null, "score": 0}, {"text": "one really strong way of thinking about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 596, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuning you've always had this kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 597, "tokens": 0, "vector": null, "score": 0}, {"text": "of argument around domain-specific", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 598, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge like the idea that you would", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 599, "tokens": 0, "vector": null, "score": 0}, {"text": "need to take the gbt3 language while on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 600, "tokens": 0, "vector": null, "score": 0}, {"text": "the internet and then fine-tuning it on", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 601, "tokens": 0, "vector": null, "score": 0}, {"text": "medical information that idea has been", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 602, "tokens": 0, "vector": null, "score": 0}, {"text": "around forever and I think that's very", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 603, "tokens": 0, "vector": null, "score": 0}, {"text": "similar to the lawyer example but now", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 604, "tokens": 0, "vector": null, "score": 0}, {"text": "we're seeing this new one of tool use so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 605, "tokens": 0, "vector": null, "score": 0}, {"text": "the exciting thing about tool use and I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 606, "tokens": 0, "vector": null, "score": 0}, {"text": "think one of our interesting research", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 607, "tokens": 0, "vector": null, "score": 0}, {"text": "questions here is how much can we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 608, "tokens": 0, "vector": null, "score": 0}, {"text": "compress this gorilla model because the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 609, "tokens": 0, "vector": null, "score": 0}, {"text": "Llama 7 billion parameter model is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 610, "tokens": 0, "vector": null, "score": 0}, {"text": "cheaper to serve than these you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 611, "tokens": 0, "vector": null, "score": 0}, {"text": "massive 200 billion plus parameter large", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 612, "tokens": 0, "vector": null, "score": 0}, {"text": "language models so how far can we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 613, "tokens": 0, "vector": null, "score": 0}, {"text": "compress it to using the Translating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 614, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands into the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 615, "tokens": 0, "vector": null, "score": 0}, {"text": "graphql apis and this would make it make", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 616, "tokens": 0, "vector": null, "score": 0}, {"text": "the whole thing cheaper more economical", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 617, "tokens": 0, "vector": null, "score": 0}, {"text": "and let it do several Generations like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 618, "tokens": 0, "vector": null, "score": 0}, {"text": "unlocking all this kind of like tree of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 619, "tokens": 0, "vector": null, "score": 0}, {"text": "thoughts planning all that kind of stuff", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 620, "tokens": 0, "vector": null, "score": 0}, {"text": "okay so now let's dive into some results", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 621, "tokens": 0, "vector": null, "score": 0}, {"text": "of our wivier graphql gorilla so taken", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 622, "tokens": 0, "vector": null, "score": 0}, {"text": "from the natural language command and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 623, "tokens": 0, "vector": null, "score": 0}, {"text": "again we so we have a few training runs", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 624, "tokens": 0, "vector": null, "score": 0}, {"text": "there are a few models if you go to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 625, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face and you look at the models", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 626, "tokens": 0, "vector": null, "score": 0}, {"text": "on substratus a AI these are models that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 627, "tokens": 0, "vector": null, "score": 0}, {"text": "have done the train test split and we're", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 628, "tokens": 0, "vector": null, "score": 0}, {"text": "looking at novel API references as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 629, "tokens": 0, "vector": null, "score": 0}, {"text": "as schemas so what this means is that in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 630, "tokens": 0, "vector": null, "score": 0}, {"text": "this case we have a contact you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 631, "tokens": 0, "vector": null, "score": 0}, {"text": "like this is like the contact schema and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 632, "tokens": 0, "vector": null, "score": 0}, {"text": "we're generating a new query so in this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 633, "tokens": 0, "vector": null, "score": 0}, {"text": "case just a single wear filter this is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 634, "tokens": 0, "vector": null, "score": 0}, {"text": "the new query that's being shown but in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 635, "tokens": 0, "vector": null, "score": 0}, {"text": "this case we still have we it still has", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 636, "tokens": 0, "vector": null, "score": 0}, {"text": "probably seen the wear filter in the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 637, "tokens": 0, "vector": null, "score": 0}, {"text": "training data set but in some kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 638, "tokens": 0, "vector": null, "score": 0}, {"text": "compositional API or I think actually", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 639, "tokens": 0, "vector": null, "score": 0}, {"text": "there are two API references one for the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 640, "tokens": 0, "vector": null, "score": 0}, {"text": "like operator particularly so that could", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 641, "tokens": 0, "vector": null, "score": 0}, {"text": "be the case as well but anyway so it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 642, "tokens": 0, "vector": null, "score": 0}, {"text": "takes the query show me the full name", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 643, "tokens": 0, "vector": null, "score": 0}, {"text": "and email of contacts that contain John", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 644, "tokens": 0, "vector": null, "score": 0}, {"text": "and their full name and it formats the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 645, "tokens": 0, "vector": null, "score": 0}, {"text": "wevia query using the proper get syntax", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 646, "tokens": 0, "vector": null, "score": 0}, {"text": "proper and so here's so there are a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 647, "tokens": 0, "vector": null, "score": 0}, {"text": "couple things to this so firstly it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 648, "tokens": 0, "vector": null, "score": 0}, {"text": "knows the names of all the arguments you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 649, "tokens": 0, "vector": null, "score": 0}, {"text": "know where is how you do the filter path", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 650, "tokens": 0, "vector": null, "score": 0}, {"text": "full name being the property the like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 651, "tokens": 0, "vector": null, "score": 0}, {"text": "operator and then it correctly does you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 652, "tokens": 0, "vector": null, "score": 0}, {"text": "know John asterisks for how you would do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 653, "tokens": 0, "vector": null, "score": 0}, {"text": "the full name John and their full name", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 654, "tokens": 0, "vector": null, "score": 0}, {"text": "and then it's accessing these properties", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 655, "tokens": 0, "vector": null, "score": 0}, {"text": "it's correctly closing the square", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 656, "tokens": 0, "vector": null, "score": 0}, {"text": "brackets the curly brackets and all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 657, "tokens": 0, "vector": null, "score": 0}, {"text": "these kinds of details for how you send", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 658, "tokens": 0, "vector": null, "score": 0}, {"text": "an API request that will execute on the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 659, "tokens": 0, "vector": null, "score": 0}, {"text": "database here's another example of a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 660, "tokens": 0, "vector": null, "score": 0}, {"text": "more complex query so get me instruments", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 661, "tokens": 0, "vector": null, "score": 0}, {"text": "with a hybrid search of piano so cutting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 662, "tokens": 0, "vector": null, "score": 0}, {"text": "results off with the first steep drop in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 663, "tokens": 0, "vector": null, "score": 0}, {"text": "the hybrid search score and showed the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 664, "tokens": 0, "vector": null, "score": 0}, {"text": "name description you're introduced and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 665, "tokens": 0, "vector": null, "score": 0}, {"text": "whether it is a string instrument and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 666, "tokens": 0, "vector": null, "score": 0}, {"text": "the name and genre of the players so now", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 667, "tokens": 0, "vector": null, "score": 0}, {"text": "we're doing the composition of hybrid", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 668, "tokens": 0, "vector": null, "score": 0}, {"text": "with auto cut so what autocut does as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 669, "tokens": 0, "vector": null, "score": 0}, {"text": "mentioned in the national language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 670, "tokens": 0, "vector": null, "score": 0}, {"text": "description it stops showing search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 671, "tokens": 0, "vector": null, "score": 0}, {"text": "results once they're no longer good", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 672, "tokens": 0, "vector": null, "score": 0}, {"text": "according to the slope in Vector", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 673, "tokens": 0, "vector": null, "score": 0}, {"text": "distance so we see how it's able to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 674, "tokens": 0, "vector": null, "score": 0}, {"text": "combine hybrid with autocut as well as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 675, "tokens": 0, "vector": null, "score": 0}, {"text": "do this cross reference for the players", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 676, "tokens": 0, "vector": null, "score": 0}, {"text": "of the instrument so you know played by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 677, "tokens": 0, "vector": null, "score": 0}, {"text": "name genre so this I think is a great", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 678, "tokens": 0, "vector": null, "score": 0}, {"text": "example of how it's combining all sorts", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 679, "tokens": 0, "vector": null, "score": 0}, {"text": "of things about weeviate's graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 680, "tokens": 0, "vector": null, "score": 0}, {"text": "interface to write these kind of queries", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 681, "tokens": 0, "vector": null, "score": 0}, {"text": "from a natural description okay so now", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 682, "tokens": 0, "vector": null, "score": 0}, {"text": "let's dive into one of my favorite side", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 683, "tokens": 0, "vector": null, "score": 0}, {"text": "effects of the gorilla and this training", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 684, "tokens": 0, "vector": null, "score": 0}, {"text": "data set is Gorilla as an off-the-shelf", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 685, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL versus Vector search query router so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 686, "tokens": 0, "vector": null, "score": 0}, {"text": "for example when we ask it the natural", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 687, "tokens": 0, "vector": null, "score": 0}, {"text": "language command show me the number of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 688, "tokens": 0, "vector": null, "score": 0}, {"text": "courses the gorilla is able to translate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 689, "tokens": 0, "vector": null, "score": 0}, {"text": "it to aggregate course meta count", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 690, "tokens": 0, "vector": null, "score": 0}, {"text": "instead of just doing some kind of your", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 691, "tokens": 0, "vector": null, "score": 0}, {"text": "search query so it's able to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 692, "tokens": 0, "vector": null, "score": 0}, {"text": "differentiate between Aggregate and get", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 693, "tokens": 0, "vector": null, "score": 0}, {"text": "and let you plug in these two different", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 694, "tokens": 0, "vector": null, "score": 0}, {"text": "kinds of categories now here is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 695, "tokens": 0, "vector": null, "score": 0}, {"text": "something that I really like is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 696, "tokens": 0, "vector": null, "score": 0}, {"text": "combining Vector search with aggregate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 697, "tokens": 0, "vector": null, "score": 0}, {"text": "queries what is the average complexity", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 698, "tokens": 0, "vector": null, "score": 0}, {"text": "level of yoga poses that are similar to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 699, "tokens": 0, "vector": null, "score": 0}, {"text": "warrior pose with a maximum distance of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 700, "tokens": 0, "vector": null, "score": 0}, {"text": "0.15 what this lets you do is search for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 701, "tokens": 0, "vector": null, "score": 0}, {"text": "the nearest neighbors to warrior pose in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 702, "tokens": 0, "vector": null, "score": 0}, {"text": "the vector space and then do a symbolic", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 703, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregation on the data points in that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 704, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector space so I presented this at odsc", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 705, "tokens": 0, "vector": null, "score": 0}, {"text": "London in 2022 I love using this for say", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 706, "tokens": 0, "vector": null, "score": 0}, {"text": "Twitter analytics it's just something", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 707, "tokens": 0, "vector": null, "score": 0}, {"text": "that I use in my life where you have all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 708, "tokens": 0, "vector": null, "score": 0}, {"text": "these tweets and you want to know things", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 709, "tokens": 0, "vector": null, "score": 0}, {"text": "like you know what is the average link", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 710, "tokens": 0, "vector": null, "score": 0}, {"text": "clicks do people like these kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 711, "tokens": 0, "vector": null, "score": 0}, {"text": "tweets and rather than having to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 712, "tokens": 0, "vector": null, "score": 0}, {"text": "categorize your tweets you can just give", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 713, "tokens": 0, "vector": null, "score": 0}, {"text": "it a natural language query like tweets", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 714, "tokens": 0, "vector": null, "score": 0}, {"text": "about new papers or maybe tweets about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 715, "tokens": 0, "vector": null, "score": 0}, {"text": "new llm papers and it can filter it and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 716, "tokens": 0, "vector": null, "score": 0}, {"text": "then you can do these symbolic queries", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 717, "tokens": 0, "vector": null, "score": 0}, {"text": "so I love seeing that gorilla is able to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 718, "tokens": 0, "vector": null, "score": 0}, {"text": "to do this kind of thing from a natural", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 719, "tokens": 0, "vector": null, "score": 0}, {"text": "command I'm so so excited about this SQL", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 720, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector query router provided from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 721, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands Okay so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 722, "tokens": 0, "vector": null, "score": 0}, {"text": "although you've seen some good examples", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 723, "tokens": 0, "vector": null, "score": 0}, {"text": "what do bad examples look like now this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 724, "tokens": 0, "vector": null, "score": 0}, {"text": "is a query from gorilla that will not", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 725, "tokens": 0, "vector": null, "score": 0}, {"text": "execute because it's missing a comma", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 726, "tokens": 0, "vector": null, "score": 0}, {"text": "between bm25 and where so it's the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 727, "tokens": 0, "vector": null, "score": 0}, {"text": "little details like this maybe", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 728, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucinating an operator or giving an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 729, "tokens": 0, "vector": null, "score": 0}, {"text": "incorrect say giving a string for Value", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 730, "tokens": 0, "vector": null, "score": 0}, {"text": "number or a property that doesn't exist", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 731, "tokens": 0, "vector": null, "score": 0}, {"text": "these are the kind of hallucinations", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 732, "tokens": 0, "vector": null, "score": 0}, {"text": "that would cause this to fail so let's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 733, "tokens": 0, "vector": null, "score": 0}, {"text": "step a little more into how we plan to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 734, "tokens": 0, "vector": null, "score": 0}, {"text": "graduate our evaluation of these models", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 735, "tokens": 0, "vector": null, "score": 0}, {"text": "so firstly there's sort of the does it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 736, "tokens": 0, "vector": null, "score": 0}, {"text": "execute thing that that this query would", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 737, "tokens": 0, "vector": null, "score": 0}, {"text": "fail but you still could have cases", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 738, "tokens": 0, "vector": null, "score": 0}, {"text": "where the query executes but it doesn't", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 739, "tokens": 0, "vector": null, "score": 0}, {"text": "follow the instructions so one", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 740, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting strategy for doing this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 741, "tokens": 0, "vector": null, "score": 0}, {"text": "obviously there would be a lot of human", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 742, "tokens": 0, "vector": null, "score": 0}, {"text": "annotation that went into projects like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 743, "tokens": 0, "vector": null, "score": 0}, {"text": "this in the past but we could maybe use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 744, "tokens": 0, "vector": null, "score": 0}, {"text": "the higher capacity gpc4 model and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 745, "tokens": 0, "vector": null, "score": 0}, {"text": "prompt it with does the response follow", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 746, "tokens": 0, "vector": null, "score": 0}, {"text": "the instructions another interesting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 747, "tokens": 0, "vector": null, "score": 0}, {"text": "idea is reflex collection prompting", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 748, "tokens": 0, "vector": null, "score": 0}, {"text": "where you use that kind of reflection to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 749, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe correct the response so it did it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 750, "tokens": 0, "vector": null, "score": 0}, {"text": "follow the instructions no how would you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 751, "tokens": 0, "vector": null, "score": 0}, {"text": "fix it and that might be another way to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 752, "tokens": 0, "vector": null, "score": 0}, {"text": "fix the queries then and get them back", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 753, "tokens": 0, "vector": null, "score": 0}, {"text": "into the trending data or something like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 754, "tokens": 0, "vector": null, "score": 0}, {"text": "that or have some kind of sampling", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 755, "tokens": 0, "vector": null, "score": 0}, {"text": "mechanism like that a couple other more", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 756, "tokens": 0, "vector": null, "score": 0}, {"text": "quantitative metrics we can do ground", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 757, "tokens": 0, "vector": null, "score": 0}, {"text": "truth perplexity that's one of the most", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 758, "tokens": 0, "vector": null, "score": 0}, {"text": "common metrics you see and I think that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 759, "tokens": 0, "vector": null, "score": 0}, {"text": "works pretty well where you for sorry", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 760, "tokens": 0, "vector": null, "score": 0}, {"text": "the language model to Output the ground", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 761, "tokens": 0, "vector": null, "score": 0}, {"text": "truth synthetic query and there's also", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 762, "tokens": 0, "vector": null, "score": 0}, {"text": "an engram match where", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 763, "tokens": 0, "vector": null, "score": 0}, {"text": "this is an interesting idea where for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 764, "tokens": 0, "vector": null, "score": 0}, {"text": "example if we're doing this kind of bm25", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 765, "tokens": 0, "vector": null, "score": 0}, {"text": "wear thing we would see how many of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 766, "tokens": 0, "vector": null, "score": 0}, {"text": "keywords it matches with get job listing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 767, "tokens": 0, "vector": null, "score": 0}, {"text": "bm25 query so we could do something like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 768, "tokens": 0, "vector": null, "score": 0}, {"text": "this also to see how well it followed", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 769, "tokens": 0, "vector": null, "score": 0}, {"text": "the particular API reference so here are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 770, "tokens": 0, "vector": null, "score": 0}, {"text": "some of the research questions we have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 771, "tokens": 0, "vector": null, "score": 0}, {"text": "about our wevia graphql gorilla as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 772, "tokens": 0, "vector": null, "score": 0}, {"text": "as the future of this project so firstly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 773, "tokens": 0, "vector": null, "score": 0}, {"text": "the most important practical question", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 774, "tokens": 0, "vector": null, "score": 0}, {"text": "does weviate graphql gorilla generalize", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 775, "tokens": 0, "vector": null, "score": 0}, {"text": "to new schemas as we plug this model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 776, "tokens": 0, "vector": null, "score": 0}, {"text": "into the auto API trained on our data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 777, "tokens": 0, "vector": null, "score": 0}, {"text": "set of fictional schemas is it going to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 778, "tokens": 0, "vector": null, "score": 0}, {"text": "generalize to your schema to measure", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 779, "tokens": 0, "vector": null, "score": 0}, {"text": "this where train test splitting our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 780, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic schemas into train tests but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 781, "tokens": 0, "vector": null, "score": 0}, {"text": "they're into 40 training 10 testing but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 782, "tokens": 0, "vector": null, "score": 0}, {"text": "there are other kind of ideas we can do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 783, "tokens": 0, "vector": null, "score": 0}, {"text": "like controlling the variance of how", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 784, "tokens": 0, "vector": null, "score": 0}, {"text": "many text properties whether there's an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 785, "tokens": 0, "vector": null, "score": 0}, {"text": "in-property things like this to add more", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 786, "tokens": 0, "vector": null, "score": 0}, {"text": "coverage to our data set to hopefully", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 787, "tokens": 0, "vector": null, "score": 0}, {"text": "you can put it in the training data and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 788, "tokens": 0, "vector": null, "score": 0}, {"text": "it corrects it that way but also at", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 789, "tokens": 0, "vector": null, "score": 0}, {"text": "least we have some kind of metric some", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 790, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of ability to see where it's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 791, "tokens": 0, "vector": null, "score": 0}, {"text": "failing the next interesting question", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 792, "tokens": 0, "vector": null, "score": 0}, {"text": "especially with the maintenance of this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 793, "tokens": 0, "vector": null, "score": 0}, {"text": "model is does wva graphql gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 794, "tokens": 0, "vector": null, "score": 0}, {"text": "generalize to new apis let's say the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 795, "tokens": 0, "vector": null, "score": 0}, {"text": "auto introducing the new auto API might", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 796, "tokens": 0, "vector": null, "score": 0}, {"text": "be a little too meta but let's say we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 797, "tokens": 0, "vector": null, "score": 0}, {"text": "introduce a re-ranker that takes in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 798, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic properties to do the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 799, "tokens": 0, "vector": null, "score": 0}, {"text": "re-rankings of something like XG boost", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 800, "tokens": 0, "vector": null, "score": 0}, {"text": "like some kind of new search API and we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 801, "tokens": 0, "vector": null, "score": 0}, {"text": "VA will do we need to retrain this model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 802, "tokens": 0, "vector": null, "score": 0}, {"text": "or by using retrieval aware training is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 803, "tokens": 0, "vector": null, "score": 0}, {"text": "it going to be able to just be able to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 804, "tokens": 0, "vector": null, "score": 0}, {"text": "read the new API reference and write the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 805, "tokens": 0, "vector": null, "score": 0}, {"text": "new queries so I think it's quite", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 806, "tokens": 0, "vector": null, "score": 0}, {"text": "promising this is one of the biggest", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 807, "tokens": 0, "vector": null, "score": 0}, {"text": "appeals of retrieval aware training is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 808, "tokens": 0, "vector": null, "score": 0}, {"text": "by putting the API reference in the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 809, "tokens": 0, "vector": null, "score": 0}, {"text": "input the model is learning to read the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 810, "tokens": 0, "vector": null, "score": 0}, {"text": "API reference and that might help with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 811, "tokens": 0, "vector": null, "score": 0}, {"text": "the maintenance and continual learning", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 812, "tokens": 0, "vector": null, "score": 0}, {"text": "of this model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 813, "tokens": 0, "vector": null, "score": 0}, {"text": "the next big question is a bit more it's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 814, "tokens": 0, "vector": null, "score": 0}, {"text": "a bit more academic but it's very", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 815, "tokens": 0, "vector": null, "score": 0}, {"text": "practical in this setting is atomic and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 816, "tokens": 0, "vector": null, "score": 0}, {"text": "compositional apis so the reason I say", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 817, "tokens": 0, "vector": null, "score": 0}, {"text": "it's academic is this idea of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 818, "tokens": 0, "vector": null, "score": 0}, {"text": "compositional generalization is one of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 819, "tokens": 0, "vector": null, "score": 0}, {"text": "the most interesting things in deep", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 820, "tokens": 0, "vector": null, "score": 0}, {"text": "learning that avocado shaped armchair", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 821, "tokens": 0, "vector": null, "score": 0}, {"text": "the reason that's so popular is because", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 822, "tokens": 0, "vector": null, "score": 0}, {"text": "you're combining the concepts of avocado", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 823, "tokens": 0, "vector": null, "score": 0}, {"text": "shape with armchair and then creating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 824, "tokens": 0, "vector": null, "score": 0}, {"text": "this new image in the dolly model's case", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 825, "tokens": 0, "vector": null, "score": 0}, {"text": "so in our case a compositional API would", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 826, "tokens": 0, "vector": null, "score": 0}, {"text": "be you know combining bm25 with wear", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 827, "tokens": 0, "vector": null, "score": 0}, {"text": "with say autocut as well and imagining", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 828, "tokens": 0, "vector": null, "score": 0}, {"text": "whether our data set should only be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 829, "tokens": 0, "vector": null, "score": 0}, {"text": "Atomic apis with some examples of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 830, "tokens": 0, "vector": null, "score": 0}, {"text": "compositionality and what kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 831, "tokens": 0, "vector": null, "score": 0}, {"text": "compositionality does it generalize to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 832, "tokens": 0, "vector": null, "score": 0}, {"text": "the next big question is retrieval", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 833, "tokens": 0, "vector": null, "score": 0}, {"text": "evaluation this is one of the biggest", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 834, "tokens": 0, "vector": null, "score": 0}, {"text": "findings from the original gorilla paper", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 835, "tokens": 0, "vector": null, "score": 0}, {"text": "from shashir Patel tianjinzang and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 836, "tokens": 0, "vector": null, "score": 0}, {"text": "collaborators is showing that when they", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 837, "tokens": 0, "vector": null, "score": 0}, {"text": "don't have the Oracle context in their", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 838, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuned Guerrilla model the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 839, "tokens": 0, "vector": null, "score": 0}, {"text": "performance degrades quite severely so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 840, "tokens": 0, "vector": null, "score": 0}, {"text": "how do we get the best retrieval for our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 841, "tokens": 0, "vector": null, "score": 0}, {"text": "wev8 graphql gorilla this has actually", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 842, "tokens": 0, "vector": null, "score": 0}, {"text": "been one of the most eye-opening lessons", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 843, "tokens": 0, "vector": null, "score": 0}, {"text": "for me in this project is in this case", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 844, "tokens": 0, "vector": null, "score": 0}, {"text": "we have 46 apis and I think it's better", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 845, "tokens": 0, "vector": null, "score": 0}, {"text": "to classify which API you want to use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 846, "tokens": 0, "vector": null, "score": 0}, {"text": "rather than doing the embedding", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 847, "tokens": 0, "vector": null, "score": 0}, {"text": "similarity now the interesting thing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 848, "tokens": 0, "vector": null, "score": 0}, {"text": "with this is scale of course so you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 849, "tokens": 0, "vector": null, "score": 0}, {"text": "when I only have 46 apis I can easily", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 850, "tokens": 0, "vector": null, "score": 0}, {"text": "manage this you know classification data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 851, "tokens": 0, "vector": null, "score": 0}, {"text": "set where I train the classifier to go", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 852, "tokens": 0, "vector": null, "score": 0}, {"text": "from the natural language commands to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 853, "tokens": 0, "vector": null, "score": 0}, {"text": "the API but if I scaled this and we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 854, "tokens": 0, "vector": null, "score": 0}, {"text": "imagine say 5000 apis then I imagine", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 855, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval is going to be quite important", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 856, "tokens": 0, "vector": null, "score": 0}, {"text": "but it really shows the value of having", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 857, "tokens": 0, "vector": null, "score": 0}, {"text": "these symbolic wear filters and how that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 858, "tokens": 0, "vector": null, "score": 0}, {"text": "can help improve relevance in retrieval", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 859, "tokens": 0, "vector": null, "score": 0}, {"text": "so I think this is going to be one of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 860, "tokens": 0, "vector": null, "score": 0}, {"text": "the most interesting questions with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 861, "tokens": 0, "vector": null, "score": 0}, {"text": "building these models further the next", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 862, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting question related to this is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 863, "tokens": 0, "vector": null, "score": 0}, {"text": "the robustness of the wev8 graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 864, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla 2 noisy retrieval so you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 865, "tokens": 0, "vector": null, "score": 0}, {"text": "say we try to correct our retrieval by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 866, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieving three results rather than", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 867, "tokens": 0, "vector": null, "score": 0}, {"text": "just one is Gorilla still going to be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 868, "tokens": 0, "vector": null, "score": 0}, {"text": "able to parse that out and use the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 869, "tokens": 0, "vector": null, "score": 0}, {"text": "correct reference from the three search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 870, "tokens": 0, "vector": null, "score": 0}, {"text": "results as we saw from the Lost in the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 871, "tokens": 0, "vector": null, "score": 0}, {"text": "middle paper it doesn't look like this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 872, "tokens": 0, "vector": null, "score": 0}, {"text": "is going to be super easy to just", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 873, "tokens": 0, "vector": null, "score": 0}, {"text": "correct retrieval Errors By retrieving", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 874, "tokens": 0, "vector": null, "score": 0}, {"text": "more results the next big question is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 875, "tokens": 0, "vector": null, "score": 0}, {"text": "the robust business of the Wega graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 876, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla to paraphrases of the net of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 877, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands to then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 878, "tokens": 0, "vector": null, "score": 0}, {"text": "trigger the generation of the graphql so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 879, "tokens": 0, "vector": null, "score": 0}, {"text": "for example our gbt4 our gbt 3.5 sorry", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 880, "tokens": 0, "vector": null, "score": 0}, {"text": "that is being prompted to generate the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 881, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands it might have", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 882, "tokens": 0, "vector": null, "score": 0}, {"text": "a particular kind of style in tone like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 883, "tokens": 0, "vector": null, "score": 0}, {"text": "get me the show me the and then it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 884, "tokens": 0, "vector": null, "score": 0}, {"text": "follows this particular thing of maybe", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 885, "tokens": 0, "vector": null, "score": 0}, {"text": "it has the search parameters first", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 886, "tokens": 0, "vector": null, "score": 0}, {"text": "followed by the properties it wants to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 887, "tokens": 0, "vector": null, "score": 0}, {"text": "see how robust is this going to be to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 888, "tokens": 0, "vector": null, "score": 0}, {"text": "super casual natural language commands", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 889, "tokens": 0, "vector": null, "score": 0}, {"text": "for retrieving from your database or you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 890, "tokens": 0, "vector": null, "score": 0}, {"text": "know increasingly formal requests so we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 891, "tokens": 0, "vector": null, "score": 0}, {"text": "can similarly use self-instruct in gbt4", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 892, "tokens": 0, "vector": null, "score": 0}, {"text": "and so on these large language like the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 893, "tokens": 0, "vector": null, "score": 0}, {"text": "you know the largest large language", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 894, "tokens": 0, "vector": null, "score": 0}, {"text": "model 7 billion is also quite large but", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 895, "tokens": 0, "vector": null, "score": 0}, {"text": "to have paraphrases of the natural", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 896, "tokens": 0, "vector": null, "score": 0}, {"text": "language commands see what happens by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 897, "tokens": 0, "vector": null, "score": 0}, {"text": "either adding that to our training data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 898, "tokens": 0, "vector": null, "score": 0}, {"text": "set or adding that to our testing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 899, "tokens": 0, "vector": null, "score": 0}, {"text": "evaluation so following the presentation", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 900, "tokens": 0, "vector": null, "score": 0}, {"text": "of these research questions here's a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 901, "tokens": 0, "vector": null, "score": 0}, {"text": "discussion of how I see this space of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 902, "tokens": 0, "vector": null, "score": 0}, {"text": "ev8 and gorilla generally the gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 903, "tokens": 0, "vector": null, "score": 0}, {"text": "idea of fine-tuning llms to use", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 904, "tokens": 0, "vector": null, "score": 0}, {"text": "particular tools so the first thing I'm", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 905, "tokens": 0, "vector": null, "score": 0}, {"text": "keeping an eye on is the development of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 906, "tokens": 0, "vector": null, "score": 0}, {"text": "the gorilla open source repository", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 907, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla and API store for llms so I've", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 908, "tokens": 0, "vector": null, "score": 0}, {"text": "done a paper summary video diving into", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 909, "tokens": 0, "vector": null, "score": 0}, {"text": "the original exploration of gorilla that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 910, "tokens": 0, "vector": null, "score": 0}, {"text": "explores this really interesting thing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 911, "tokens": 0, "vector": null, "score": 0}, {"text": "of formatting apis for deep learning", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 912, "tokens": 0, "vector": null, "score": 0}, {"text": "models so in this case the natural", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 913, "tokens": 0, "vector": null, "score": 0}, {"text": "language command would be something that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 914, "tokens": 0, "vector": null, "score": 0}, {"text": "indicates whether you want to use an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 915, "tokens": 0, "vector": null, "score": 0}, {"text": "image segmentation model say an image", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 916, "tokens": 0, "vector": null, "score": 0}, {"text": "generation model or maybe a you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 917, "tokens": 0, "vector": null, "score": 0}, {"text": "sentiment classification text model from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 918, "tokens": 0, "vector": null, "score": 0}, {"text": "the hugging face model Hub torch Hub", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 919, "tokens": 0, "vector": null, "score": 0}, {"text": "tensorflow Hub and routing this into", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 920, "tokens": 0, "vector": null, "score": 0}, {"text": "formatting the correct API request so we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 921, "tokens": 0, "vector": null, "score": 0}, {"text": "V8 firstly is quite related to this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 922, "tokens": 0, "vector": null, "score": 0}, {"text": "where you know if you want to do cement", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 923, "tokens": 0, "vector": null, "score": 0}, {"text": "embedding surge which is a deep learning", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 924, "tokens": 0, "vector": null, "score": 0}, {"text": "model thing you also need this kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 925, "tokens": 0, "vector": null, "score": 0}, {"text": "infrastructure of building up a vector", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 926, "tokens": 0, "vector": null, "score": 0}, {"text": "index which makes it a unique kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 927, "tokens": 0, "vector": null, "score": 0}, {"text": "model inference problem in this category", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 928, "tokens": 0, "vector": null, "score": 0}, {"text": "so my big question with adding alleviate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 929, "tokens": 0, "vector": null, "score": 0}, {"text": "to the API zoo in the gorilla project is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 930, "tokens": 0, "vector": null, "score": 0}, {"text": "how we want to interface the class and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 931, "tokens": 0, "vector": null, "score": 0}, {"text": "the property so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 932, "tokens": 0, "vector": null, "score": 0}, {"text": "a common thing you see in in like laying", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 933, "tokens": 0, "vector": null, "score": 0}, {"text": "chain or llama index is you just call", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 934, "tokens": 0, "vector": null, "score": 0}, {"text": "the class like document and then you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 935, "tokens": 0, "vector": null, "score": 0}, {"text": "have a text key content and so you just", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 936, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of interface those two and then you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 937, "tokens": 0, "vector": null, "score": 0}, {"text": "just interface the uh the vector search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 938, "tokens": 0, "vector": null, "score": 0}, {"text": "but I'll be really interested to see", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 939, "tokens": 0, "vector": null, "score": 0}, {"text": "what happens as different kinds of apis", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 940, "tokens": 0, "vector": null, "score": 0}, {"text": "are added to this gorilla thing and more", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 941, "tokens": 0, "vector": null, "score": 0}, {"text": "on this shortly the next Super", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 942, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting thing will be extending we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 943, "tokens": 0, "vector": null, "score": 0}, {"text": "V8 graphql gorilla to leviate python", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 944, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla via JavaScript gorilla we via", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 945, "tokens": 0, "vector": null, "score": 0}, {"text": "Java gorilla weba go gorilla so we V8 in", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 946, "tokens": 0, "vector": null, "score": 0}, {"text": "addition to this graphql API also has", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 947, "tokens": 0, "vector": null, "score": 0}, {"text": "programming language clients so for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 948, "tokens": 0, "vector": null, "score": 0}, {"text": "example to do the same kind of wear", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 949, "tokens": 0, "vector": null, "score": 0}, {"text": "filter in Python you can do client.query", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 950, "tokens": 0, "vector": null, "score": 0}, {"text": "dot with where and pass it in this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 951, "tokens": 0, "vector": null, "score": 0}, {"text": "python dictionary you can also do", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 952, "tokens": 0, "vector": null, "score": 0}, {"text": "client.query.raw and pass in the string", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 953, "tokens": 0, "vector": null, "score": 0}, {"text": "of the graphql query is one way of doing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 954, "tokens": 0, "vector": null, "score": 0}, {"text": "this in Python but the thing about", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 955, "tokens": 0, "vector": null, "score": 0}, {"text": "python that opens you know opens the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 956, "tokens": 0, "vector": null, "score": 0}, {"text": "whole gorilla project up to probably", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 957, "tokens": 0, "vector": null, "score": 0}, {"text": "it's more exciting uh you know General", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 958, "tokens": 0, "vector": null, "score": 0}, {"text": "scope is allowing it to create classes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 959, "tokens": 0, "vector": null, "score": 0}, {"text": "to import data to do things like adding", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 960, "tokens": 0, "vector": null, "score": 0}, {"text": "cross references or maybe the cloud", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 961, "tokens": 0, "vector": null, "score": 0}, {"text": "management stuff like replication", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 962, "tokens": 0, "vector": null, "score": 0}, {"text": "configuring multi-tenancy all this kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 963, "tokens": 0, "vector": null, "score": 0}, {"text": "of stuff because once you open it up to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 964, "tokens": 0, "vector": null, "score": 0}, {"text": "alleviate python gorilla now it has all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 965, "tokens": 0, "vector": null, "score": 0}, {"text": "the levers it needs to control the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 966, "tokens": 0, "vector": null, "score": 0}, {"text": "leviate vector database now here's what", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 967, "tokens": 0, "vector": null, "score": 0}, {"text": "I think is the really exciting future of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 968, "tokens": 0, "vector": null, "score": 0}, {"text": "gorillas and I think seeing maybe the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 969, "tokens": 0, "vector": null, "score": 0}, {"text": "python gorilla and kind of the vision of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 970, "tokens": 0, "vector": null, "score": 0}, {"text": "what that could be how it handles", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 971, "tokens": 0, "vector": null, "score": 0}, {"text": "creating the schema connecting to the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 972, "tokens": 0, "vector": null, "score": 0}, {"text": "client you know maybe if you're running", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 973, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate embedded it can instantiate all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 974, "tokens": 0, "vector": null, "score": 0}, {"text": "of weaviate but importing data as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 975, "tokens": 0, "vector": null, "score": 0}, {"text": "as the querying I think this really", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 976, "tokens": 0, "vector": null, "score": 0}, {"text": "opens up what we can do with these apis", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 977, "tokens": 0, "vector": null, "score": 0}, {"text": "and probably the most interesting thing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 978, "tokens": 0, "vector": null, "score": 0}, {"text": "to me at least is how this will change", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 979, "tokens": 0, "vector": null, "score": 0}, {"text": "software integration so imagine a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 980, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language command where you say", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 981, "tokens": 0, "vector": null, "score": 0}, {"text": "build a llama index query Engine with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 982, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate from my notion workspace titled", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 983, "tokens": 0, "vector": null, "score": 0}, {"text": "biochemistry chapter four now it will", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 984, "tokens": 0, "vector": null, "score": 0}, {"text": "just take that and do everything you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 985, "tokens": 0, "vector": null, "score": 0}, {"text": "need to create this kind of technology", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 986, "tokens": 0, "vector": null, "score": 0}, {"text": "for you because the gorillas know how to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 987, "tokens": 0, "vector": null, "score": 0}, {"text": "use the apis to achieve each of these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 988, "tokens": 0, "vector": null, "score": 0}, {"text": "parts now we can imagine level 2 adding", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 989, "tokens": 0, "vector": null, "score": 0}, {"text": "to the level 1 prompt please chunk the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 990, "tokens": 0, "vector": null, "score": 0}, {"text": "text with unstructured and vectorize the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 991, "tokens": 0, "vector": null, "score": 0}, {"text": "chunks with open AI embeddings please", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 992, "tokens": 0, "vector": null, "score": 0}, {"text": "add a cohere re-ranker and Mosaic ml's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 993, "tokens": 0, "vector": null, "score": 0}, {"text": "MPT 30 billion large language model", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 994, "tokens": 0, "vector": null, "score": 0}, {"text": "please create a visualization of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 995, "tokens": 0, "vector": null, "score": 0}, {"text": "system and streamlit we can maybe", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 996, "tokens": 0, "vector": null, "score": 0}, {"text": "imagine also saying please visualize the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 997, "tokens": 0, "vector": null, "score": 0}, {"text": "embeddings using arise AI or nomic AI so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 998, "tokens": 0, "vector": null, "score": 0}, {"text": "there's there's so much we can imagine", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 999, "tokens": 0, "vector": null, "score": 0}, {"text": "to adding all the software together", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1000, "tokens": 0, "vector": null, "score": 0}, {"text": "through natural language commands so the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1001, "tokens": 0, "vector": null, "score": 0}, {"text": "question to me though of how how do we", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1002, "tokens": 0, "vector": null, "score": 0}, {"text": "get there isn't quite clear yet I think", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1003, "tokens": 0, "vector": null, "score": 0}, {"text": "there are three General kind of Pathways", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1004, "tokens": 0, "vector": null, "score": 0}, {"text": "we have one weeviate maintains one", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1005, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla where we generate all the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1006, "tokens": 0, "vector": null, "score": 0}, {"text": "training data manage the model for all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1007, "tokens": 0, "vector": null, "score": 0}, {"text": "the Integrations that we've particularly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1008, "tokens": 0, "vector": null, "score": 0}, {"text": "you know decided to include in our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1009, "tokens": 0, "vector": null, "score": 0}, {"text": "trading data set so that would mean you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1010, "tokens": 0, "vector": null, "score": 0}, {"text": "know like we have we have coding", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1011, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of how to use wevia with llama", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1012, "tokens": 0, "vector": null, "score": 0}, {"text": "index and so we've created those", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1013, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic examples and trained our", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1014, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla on it the second idea could be", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1015, "tokens": 0, "vector": null, "score": 0}, {"text": "we have interfaces such that deviates", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1016, "tokens": 0, "vector": null, "score": 0}, {"text": "Guerrilla talks to llama indexes gorilla", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1017, "tokens": 0, "vector": null, "score": 0}, {"text": "so we you know both models know their", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1018, "tokens": 0, "vector": null, "score": 0}, {"text": "apis and maybe they would also have to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1019, "tokens": 0, "vector": null, "score": 0}, {"text": "have some kind of orchestrator that", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1020, "tokens": 0, "vector": null, "score": 0}, {"text": "knows what goes to leviate and what goes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1021, "tokens": 0, "vector": null, "score": 0}, {"text": "to llama index and then maybe the third", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1022, "tokens": 0, "vector": null, "score": 0}, {"text": "thing is Gorilla emerges as an", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1023, "tokens": 0, "vector": null, "score": 0}, {"text": "independent third party that manages all", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1024, "tokens": 0, "vector": null, "score": 0}, {"text": "the documentation of these uh software", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1025, "tokens": 0, "vector": null, "score": 0}, {"text": "tools and the apis and how they connect", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1026, "tokens": 0, "vector": null, "score": 0}, {"text": "with each other so I think there", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1027, "tokens": 0, "vector": null, "score": 0}, {"text": "definitely is going to need to be some", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1028, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of hierarchy some kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1029, "tokens": 0, "vector": null, "score": 0}, {"text": "orchestration that knows how to connect", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1030, "tokens": 0, "vector": null, "score": 0}, {"text": "these things together as well as the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1031, "tokens": 0, "vector": null, "score": 0}, {"text": "formatting of the particular apis but as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1032, "tokens": 0, "vector": null, "score": 0}, {"text": "we saw from obviate graphql's gorilla's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1033, "tokens": 0, "vector": null, "score": 0}, {"text": "ability to do compositional queries it", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1034, "tokens": 0, "vector": null, "score": 0}, {"text": "might be able to just you generate a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1035, "tokens": 0, "vector": null, "score": 0}, {"text": "reference of combining like five", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1036, "tokens": 0, "vector": null, "score": 0}, {"text": "different things and it might be able to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1037, "tokens": 0, "vector": null, "score": 0}, {"text": "just do that from one query so I'm super", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1038, "tokens": 0, "vector": null, "score": 0}, {"text": "excited about working on the development", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1039, "tokens": 0, "vector": null, "score": 0}, {"text": "of this I think this will have a massive", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1040, "tokens": 0, "vector": null, "score": 0}, {"text": "impact on how quickly we can test new", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1041, "tokens": 0, "vector": null, "score": 0}, {"text": "ideas and I really just think it's", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1042, "tokens": 0, "vector": null, "score": 0}, {"text": "continuing this theme of llms that write", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1043, "tokens": 0, "vector": null, "score": 0}, {"text": "code and code interpreter but using", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1044, "tokens": 0, "vector": null, "score": 0}, {"text": "particular libraries I think that really", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1045, "tokens": 0, "vector": null, "score": 0}, {"text": "opens up what this is able to accomplish", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1046, "tokens": 0, "vector": null, "score": 0}, {"text": "so thinking about how we VA can control", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1047, "tokens": 0, "vector": null, "score": 0}, {"text": "the entire database through maybe the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1048, "tokens": 0, "vector": null, "score": 0}, {"text": "python clients creating classes creating", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1049, "tokens": 0, "vector": null, "score": 0}, {"text": "new schemas adding properties you know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1050, "tokens": 0, "vector": null, "score": 0}, {"text": "importing data that might be a little", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1051, "tokens": 0, "vector": null, "score": 0}, {"text": "too future looking I think the most", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1052, "tokens": 0, "vector": null, "score": 0}, {"text": "immediate thing in front of us is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1053, "tokens": 0, "vector": null, "score": 0}, {"text": "interfacing this weeviate graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1054, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla to Eva users as well as llms", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1055, "tokens": 0, "vector": null, "score": 0}, {"text": "through the auto API so if you have a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1056, "tokens": 0, "vector": null, "score": 0}, {"text": "second please check out the GitHub issue", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1057, "tokens": 0, "vector": null, "score": 0}, {"text": "it really means a lot and let us know", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1058, "tokens": 0, "vector": null, "score": 0}, {"text": "what you think about just thumbs up if", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1059, "tokens": 0, "vector": null, "score": 0}, {"text": "this would be useful to you or if you", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1060, "tokens": 0, "vector": null, "score": 0}, {"text": "see any holes in the design of it any", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1061, "tokens": 0, "vector": null, "score": 0}, {"text": "ideas on this presentation so to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1062, "tokens": 0, "vector": null, "score": 0}, {"text": "conclude with some high level directions", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1063, "tokens": 0, "vector": null, "score": 0}, {"text": "for this whole Space of llm tool use I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1064, "tokens": 0, "vector": null, "score": 0}, {"text": "think we're really seeing the evolution", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1065, "tokens": 0, "vector": null, "score": 0}, {"text": "of retrieval augmented generation from", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1066, "tokens": 0, "vector": null, "score": 0}, {"text": "the original conception from Lewis and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1067, "tokens": 0, "vector": null, "score": 0}, {"text": "others where we have this kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1068, "tokens": 0, "vector": null, "score": 0}, {"text": "embedding based retrieval to take", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1069, "tokens": 0, "vector": null, "score": 0}, {"text": "context and decompose the problem of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1070, "tokens": 0, "vector": null, "score": 0}, {"text": "language modeling and to retrieve then", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1071, "tokens": 0, "vector": null, "score": 0}, {"text": "read we're now seeing this use of search", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1072, "tokens": 0, "vector": null, "score": 0}, {"text": "databases as a whole entire tool and I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1073, "tokens": 0, "vector": null, "score": 0}, {"text": "think it's really interesting to read", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1074, "tokens": 0, "vector": null, "score": 0}, {"text": "this paper on self-driving database", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1075, "tokens": 0, "vector": null, "score": 0}, {"text": "Management Systems quoted a true", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1076, "tokens": 0, "vector": null, "score": 0}, {"text": "self-driving database management system", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1077, "tokens": 0, "vector": null, "score": 0}, {"text": "automatically one decides what actions", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1078, "tokens": 0, "vector": null, "score": 0}, {"text": "to use to optimize itself two decides", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1079, "tokens": 0, "vector": null, "score": 0}, {"text": "when to deploy those actions and three", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1080, "tokens": 0, "vector": null, "score": 0}, {"text": "learns from those actions all without", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1081, "tokens": 0, "vector": null, "score": 0}, {"text": "any human intervention so I think this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1082, "tokens": 0, "vector": null, "score": 0}, {"text": "is quite a bold Vision where we can", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1083, "tokens": 0, "vector": null, "score": 0}, {"text": "imagine you know actions to optimize", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1084, "tokens": 0, "vector": null, "score": 0}, {"text": "itself whether it's configuring at the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1085, "tokens": 0, "vector": null, "score": 0}, {"text": "lowest level the hnsw parameters like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1086, "tokens": 0, "vector": null, "score": 0}, {"text": "the EF construction the number of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1087, "tokens": 0, "vector": null, "score": 0}, {"text": "neighbors or with product quantization", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1088, "tokens": 0, "vector": null, "score": 0}, {"text": "how big of segments to use maybe the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1089, "tokens": 0, "vector": null, "score": 0}, {"text": "Precision for the centroid IDs all these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1090, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of hyper parameters for tuning the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1091, "tokens": 0, "vector": null, "score": 0}, {"text": "search database as well as actions such", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1092, "tokens": 0, "vector": null, "score": 0}, {"text": "as creating new classes creating new", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1093, "tokens": 0, "vector": null, "score": 0}, {"text": "properties in the case of the generative", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1094, "tokens": 0, "vector": null, "score": 0}, {"text": "feedback loops maybe taking your data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1095, "tokens": 0, "vector": null, "score": 0}, {"text": "transforming it into new data by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1096, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting llms and then saving that data", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1097, "tokens": 0, "vector": null, "score": 0}, {"text": "back into your database by using these", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1098, "tokens": 0, "vector": null, "score": 0}, {"text": "API is interfaced with things like the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1099, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla algorithm and I think generally", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1100, "tokens": 0, "vector": null, "score": 0}, {"text": "just having these databases that are", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1101, "tokens": 0, "vector": null, "score": 0}, {"text": "observing the queries that you're seeing", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1102, "tokens": 0, "vector": null, "score": 0}, {"text": "from I think the original conception of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1103, "tokens": 0, "vector": null, "score": 0}, {"text": "this was say building index structures", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1104, "tokens": 0, "vector": null, "score": 0}, {"text": "like if you're seeing a particular kind", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1105, "tokens": 0, "vector": null, "score": 0}, {"text": "of join in an SQL system or a particular", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1106, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of filter you might build up and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1107, "tokens": 0, "vector": null, "score": 0}, {"text": "you know cache these kind of indexes", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1108, "tokens": 0, "vector": null, "score": 0}, {"text": "that you're seeing all the time but now", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1109, "tokens": 0, "vector": null, "score": 0}, {"text": "we're seeing I think a more open-ended", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1110, "tokens": 0, "vector": null, "score": 0}, {"text": "interpretation of that where you also", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1111, "tokens": 0, "vector": null, "score": 0}, {"text": "could do things like you know create a", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1112, "tokens": 0, "vector": null, "score": 0}, {"text": "new class that has a particular kind of", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1113, "tokens": 0, "vector": null, "score": 0}, {"text": "data in it and Route queries to that or", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1114, "tokens": 0, "vector": null, "score": 0}, {"text": "say if you go deep into hsw there is", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1115, "tokens": 0, "vector": null, "score": 0}, {"text": "some research on how you can improve the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1116, "tokens": 0, "vector": null, "score": 0}, {"text": "speed of filtered Vector searches by", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1117, "tokens": 0, "vector": null, "score": 0}, {"text": "increasing the connectivity of the graph", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1118, "tokens": 0, "vector": null, "score": 0}, {"text": "but generally I think by exposing LMS to", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1119, "tokens": 0, "vector": null, "score": 0}, {"text": "these apis we're going to see this", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1120, "tokens": 0, "vector": null, "score": 0}, {"text": "really interesting evolution of llms and", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1121, "tokens": 0, "vector": null, "score": 0}, {"text": "these search databases thank you so much", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1122, "tokens": 0, "vector": null, "score": 0}, {"text": "for watching this presentation of the", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1123, "tokens": 0, "vector": null, "score": 0}, {"text": "wevier graphql gorilla to connect with", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1124, "tokens": 0, "vector": null, "score": 0}, {"text": "us at webva we have a slack Community", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1125, "tokens": 0, "vector": null, "score": 0}, {"text": "where everyone on the team including", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1126, "tokens": 0, "vector": null, "score": 0}, {"text": "members of the community are are trying", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1127, "tokens": 0, "vector": null, "score": 0}, {"text": "to answer your questions about building", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1128, "tokens": 0, "vector": null, "score": 0}, {"text": "semantic search applications it's I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1129, "tokens": 0, "vector": null, "score": 0}, {"text": "really vouch highly for this community I", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1130, "tokens": 0, "vector": null, "score": 0}, {"text": "think you'll enjoy joining it and asking", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1131, "tokens": 0, "vector": null, "score": 0}, {"text": "any questions you have about Building", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1132, "tokens": 0, "vector": null, "score": 0}, {"text": "Systems with wev8 next up is the Twitter", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1133, "tokens": 0, "vector": null, "score": 0}, {"text": "LinkedIn weeviate.io if you want to keep", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1134, "tokens": 0, "vector": null, "score": 0}, {"text": "up with the new developments of weviate", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1135, "tokens": 0, "vector": null, "score": 0}, {"text": "new releases of the software as well as", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1136, "tokens": 0, "vector": null, "score": 0}, {"text": "blog posts and research projects like", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1137, "tokens": 0, "vector": null, "score": 0}, {"text": "this all these sources will be great for", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1138, "tokens": 0, "vector": null, "score": 0}, {"text": "you know keeping up with the information", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1139, "tokens": 0, "vector": null, "score": 0}, {"text": "channels of weviate and finally I highly", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1140, "tokens": 0, "vector": null, "score": 0}, {"text": "highly recommend checking out the new", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1141, "tokens": 0, "vector": null, "score": 0}, {"text": "verba retrieval augmented generation", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1142, "tokens": 0, "vector": null, "score": 0}, {"text": "with weeviate this is a full stack demo", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1143, "tokens": 0, "vector": null, "score": 0}, {"text": "using you know a react front end as well", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1144, "tokens": 0, "vector": null, "score": 0}, {"text": "as the ev8 back end and it's a really", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1145, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting new demo project from wev8 so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1146, "tokens": 0, "vector": null, "score": 0}, {"text": "please check that out and thank you so", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1147, "tokens": 0, "vector": null, "score": 0}, {"text": "much for watching the weeviate graphql", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1148, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla project", "doc_name": "Weaviate Gorilla Part 1: GraphQL APIs!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1149, "tokens": 0, "vector": null, "score": 0}]}