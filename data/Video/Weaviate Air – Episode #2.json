{"text": " \n[Music]foreign[Music]air we have a whole crew with in hereI've got Zen JP Conor and Erica andmyself of course and this episode isgoing to be super exciting at least itis for us and hopefully you'll find itas exciting on your side and today it'sall about the the latest that we V8release but also will have somethingfrom Connor towards the end about likewhat's new in the AI just like we didlast week and I think this is superexciting so what we would like to dofirst is maybe a quick introduction fromeverybody on uh on on this stream and Iguess we can go in the order as we haveit on the screen like so then you wantto go first sounds good to me my name isAnne hessen I am a senior developeradvocate here at semi Technologies I'mbased out of a snowy and called TorontoCanada where getting into thatsnowy weather hopefully soon I enjoy ita lot of people don't enjoy it but it'sa little bit about me I'm an engineerdata scientist by training throwing itoff to you JP oh this way thanks thanksEdum yeah my name is JP I'm a technicalcurriculum developer at semi I've beenhere about a month now and it's beenreally really exciting obviously it's myfirst podcast or a live video sessionhere so I'm really excited to be a partof this and yeah I'll be kind of shapinga lot of the sort of educational Journeyfor the audience who's come using uhweaviate for various bits and pieces oftheir work so I'm really excited to beon board for the uh for the journeyawesome I'll go next hi everyone I'mErica Cardenas I'm a developer advocatehere at semium I'm based out of Boston I'm nervousfor my first winter but I'm also lookingforward to it and I'm excited for thisepisode we're going to Showcase a fewcool thingsand hey everyone I'm Connor also inBoston uh as they mentioned with theweather moved to Boston from Florida andwe're having our first snowy cold seasonand missing Florida a little bit but aresearch scientist says semi and uh beenworking on figuring out deep learningand search and it's been so much funperfect and I guess I'll go last uh sohi I'm Sebastian I am the head ofDeborah here at the semi uh leading thisamazing team in front of youum yeah and basically I'm all about likesharing everything that we are workingon and uh hopefully you all enjoy thatum so okay so what we're going to dotoday let me give you a quick overviewof the overall flow and and thestructure uh so the idea is and Ialready mentioned it a little bit butthe idea is like um yesterday we had arelease of vivid 116 and we thought thatthis is a great opportunity to prettymuch share what uh we we worked on whatwent into that but also like as a bit ofa background so as part of the whole uhrelease flow the team here that you seehere each of us had like a different uhpart of the the new features or changesthat that we were involved with sharinguh so we we created this release blogpost uh and and then we thought like heylike why not actually uh again go inwith air and then talk about thesegments that we're writing about andmaybe like get into more of aconversation or maybe demo some of thosefeatures uh so that's a part number oneand then the second part again like Imentioned earlier I will have Conor whowill go over the cool things that likethe cool papers that he was readingabout uh in October so Connor I can'twait uh to learn more from you uh andyeah that's pretty much the general ideaum okay so maybe uh instead of askingfor volunteers I'll volunteer myself uhto open with the first segment sosomething that we did that was differentaround this release or at least since uhv115 uh we changed the approach in termsof how we are releasing patch releasesso in the past we would be more like wealways had patch releases like thatstarting new but in the past we used tokind of think like okay in order torelease a patch release uh we would saylike okay let's get this and this andthis fix together and once that wasready then would kind of like cut thatpatch release and then then push it butthen we realized that as much as thiswas very convenient for us to kind of doeverything like well one touch goal orEtcum we realized that people had to waitor you had to wait basically for uhthese fixes or future improvements toarrive right so uh we kind of changedthe focus and the idea was to kind oflike let's go and as soon as we have afix let's publish it so that everybodyin the community everybody that usesVivid have it available uh and thenincidentally enough uh today uh Ericayou can probably talk about it a littlebitum but Erica was work you were workingon a demo right uh for for your latersegment and what happened yes um Inoticed it wasn't working I couldn'tperform the queries that um is writtenin the documentation I was kind of goinga little crazy I'm like maybe it's anerror on my side but we found a smallfix and first of all Aaron Dirk was ableto help and he submitted then hesubmitted the first patch release of B16so that's awesome yeah two so there yougo like there was like a quick bug thatwe we discovered we should havediscovered maybe a little bit earlierbut that that happens sometimes uh sothere was like a specific Edge case thatwas actually used in Erica's demoum but this was the really cool thingright like we talked to Derek in on theengineering side and was able to likeImplement uh the fix and we already arelike yesterday we published a 160.0today we published 16.1 so that everyonecan actually have a nice and workingversion of widget which is absolutelygreatum so yeah that's basically it from myside in terms of uh my update but Ithink uh since we already mentioned ituh from from Erica about Erica thenI think we can move to the next andmaybe one thing I should have doneprobably by the way like I'm I'm such arude person it's likethank you all for watching and takingtime uh because uh thanks Conor for uhfinding it out uh because I think it'sreally important that you take your taketake the time to to join us on thisstream uh and if you do have anyquestions uh FYI while uh you we arerunning this uh this is a live show uhso feel free to ask any questions andand we'll try to answer them as we go aswellum all right so I'm going to pass it onto Erica so Erica what do you have forus all right I have I will be coveringthe two new filter uh operatorsum that are part of the B16 releasewould you mind sharing my screen andI've created a demo out for you guys uhthe first one is the um is null soyou'll be able to seeum where the properties are missing orit was set to nullum and then also you're able to filterby array length um so I will share avisual of this just because it's alwaysbetter to demo things out and then thisis also how you find bugsum so a little bit like a backstory howI created this demo and kind of why I'mtalking about food allergies is becausewe are all going to Italy soon and Jessea wonderful head of people asked doesanyone have allergies I think maybe likefive times and I don't have anyallergies but I understand theimportance of it rightum so Bill Nancy and Samantha are like afew people on the top they do not workat semi I guess I should have used ournames our real name Sebastian thinks Ican I see like dead people like I canjust I have imagined friendsum is Bill not in the company and Nancyhuh I guess they're just in myimaginationum so yeah here we have a few people andtheir specific allergies so um for a fewpeople they have one but then if wescroll down we have Noah and Emma um soas you can see for Noah he is missingthe property completelyum but then for Emma it is set to nullum but this it will important to deviatethe exact same so I just want to make anote if you are importing a data setthat is ginormous and you just don'thave the time to go through datacleaningum this is a nice feature where youdon't have to make like um you don'thave to make sure that the property issectional it could just be completelymissing which is very nice and then ifwe scroll down we have George andVictoria who are the ones who we need topay uh give extra caution right becausethey have more than one allergy and wecan see this in the console in a fewminutes of how to take the right lengthum and kind of see the people who havemore than one hour energyumall right so this is a little bit aboutthe data set and what we're going to begetting into in this demoum quickly I will go over to thedid thatyou still see my screen okayuh we can steal your vs code yeslet me just get that okayare you Ken see it are you good okaysorry about that all right so here wehave our scheme on everything isstandardum except with uh V16 if you want toindex by the no state or also by theproperty length you have to go into theinverted index uh config and set thesetwoum parameters to true the default isfalse um but maybe if you anticipateyour data set having no values or thatyou want to filter by the propertylength then just set it to true itdoesn't hurt you rightum so that's a little bit of the schemaand how you have to configure that nextI will go over to theumjust click on it um uploading the datasetum or uploading the data to eviate thisis also standard but I will just scrolldown and highlight the key differencethat you'll need in order to performthese filters um so you have to tellviviate that if there are no propertiesthat is okay not to break don'tregurgitate like an error messageum so yeah just having the lg.get you'regoing to grab the allergy but if there'snone that is completely fine and thenalso here in the properties where we'vedefined it in our schema in the lastfilehey Erica I uh I have a questionum because early on when you wereshowing the dataum that we had like two different kindof examples I think where yeah Noah likeNoah doesn't have allergy but Emma doesbut it's set to know uh will how how howhow will we we respond to that whatwhat's going to happen to that when heImports it into a database well goodquestion the short answer is that itwill import the same but in a littlemore detail on movie Imports the objectsand it skips the note valuesum but then for the index it will setthe missing slational properties to nullit's kind of like back and forth um sokind of does it the same but do youwannabasically doesn't matter whether we justskip the property or set it to nullright exactly which is nice you knowyeahit's a good feature to happen because Idon't know if you have a large data setand you can't really go through it allit's convenientnice nice okayso let's jump into the consoledoes that sound goodyeah let's do it serious to see whatkind of thingyeah all right so since I started offwith the Israel property let me startoff with thatum so here we're gonna get the foodallergies which is our class um and hereI describe the nameum just so we can see that our data hasbeen properly uploadedum let's do the fun part of grabbing thewear filter of the isnalperfect wheresoand this is nota bit like thisall right and now we're going to takethe pathof allergy right because that's justwhereI have me missing propertiesum and then we have the Valley Brewingum so this you're going to set it totrue and then we can also see that ifyou want to set it toand then we obviously have our newoperator of the isnaland they shouldn't worryall right it's a Moment of Trutheveryone hold your breathum so here we have we're taking theallergyum property and setting it to if theproperty is missingum yeah it's just going to return thenames where it is missing and then thealternative is to set it to false tofind the people who do have the allergylocatedokay cool that's uh by the way I'mimpressed how you can write your graphqlunder pressure or live and everything souh that's that's pretty impressive butthat's really coolum so I guessum at least my take away from it is thatlike we could use it to like maybe findpeople that do or don't have allergiesbut maybe we could also use it to likeclean up our data right like say ifwe're missing like email fields and thenyou could kind of go like hey let's uhlet's make sure everybody in my in ourdatabase has emails so we could likevery quickly just find like heyum I said null is fine to the databasebut maybe not for the cleanliness of mydatabase right course and in Jesse'scase this would be useful just toconfirm that everyone won't have a foodallergy or need an EpiPen in Italy rightsodifferentlywell usually if you do have an allergylike you would be cautious and beprepared for the all possible casesright of courseand thenumfor the people that might have a littlebit ofa bit of um and we need to findum yeah just people who have more thanone allergy it's a little more severeum we're going to takeyou can measure these lengthshey uh could we also show the actualallergy property because I think youjust showing name for now oh yeah ofcourse let me go backit's included down here right because ifthe valuable line is set to false thenyou'll be able to seeum if it has the peanut allergy alongwith Samantha and then um for peoplethat have more than one it is alsolisted and then yeahgood so let me guess you'll be nowyou'll be able to look for those thathave more than onehow did you knowI don't knowall right and then I can all right so wewant to find people who have ummore than oneit's like the operator could be greaterthannow we have Victoria and George who needa little more cautious like a care tomake sure that they don't eat thesespecific thingsbut it's extremely easy and that's thewhole point of it right is toshowI guess yeah that's actually pretty coolum how quickly we can just find thatand it's nice um yeahthis is super awesomeI have a question so if we go back tothe um to the vs code how do I enablethis functionality do I just have towhen I set my architecture I have to letit know that I want this enabled ofcourse yeah um so this the default is toum for it to be falseum but if you anticipate that there willbe no values or you want to index it forthe property length you want to set itto true you can see you do that in thebeginning because if not you'll run intoerrors okay awesomeI had another thing I was thinkingearlier in our meeting we were talkingabout using K nearest neighborclassification webiate and I wasthinking watching there is no valuemaybe we could use the search with theunstructured data to fill in the missingvalues because I think a lot of times weuse like fill in the media and you canuse this nearest neighbor thing that'sfill in the missing values it's reallycool yeah that's super awesome you cando like 10 years neighbors imputationwith this right look for null values andthen look for the yeah that's it that'sactuallyyou'll hear more about that in the inthe next movie podcastexactly let's do that you already signedup for it right yeahyour name all over ityou know I agree it's good for datapre-processing if you just want to gostraight into using weavate rather thanusing pandas or python it's nice to havethis optionis there a way we could actually mixthose uh queries like uh mixing lengthand is nullI don't know we could maybe look forlike hey show me the results wherethere are some allergies but there'sless than something I don't knowI think we meet way too often becauseyou can read my mindum sothis is forfor people that havewhat did even work why maybe you'remissing a closing bracket again at theendat least three indentation seemsthere we go hey thank youand now that's how everybody knows thatthis is a live demo and not a fakeyeah so just people who have lost intoallergies and then also their propertiesand such and all um so this there is away to combine to teach operatorsand that is my demo thank you so muchhey uh and then documentation where inthe docs can we find it do you have alink to us for us let me track this overum so if you go to graphql referencesfiltersum if you scroll up here isdocumentation on filtering my propertylength and then also the it's not filterand then um there is a disclaimer thatyou do need to set your schema to handlethis um and this is where you will findthat informationperfect thank you awesomeexcellent so uhuh this was great um so maybe how aboutwe go next with Zen uh because then youare covering a couple of features in therelease blog post but uh I'm pretty sureeveryone will want to hear first aboutthe note status API what's all thatabout like uh why do we need ityeah so this is a really interestingfeatureum it's a convenient feature really uhis what it is it allows you to onceyou've got your cluster spun up you wantto get an idea of how it's going youwant to diagnose if there's problemsthis is a you can submit a get requestto this uh API endpoint and it tells youexactly how your data is stored on yourclusters and whether there's a problemwith your clusters or not and if thereis a problem it'll tell youum where the where the problem isum rather than me talk about it let meshow you a demo what I'll do is I'llI'll spin up a bunch of uh allevacluster with multiple nodes and thenwe'll try to see if we can breaksomethingall right so let's doso there's there's a bunch of terminalsthat you're seeing here I'll let youknow exactly this is the most importantterminal here on the right I'm going tocreate uh nodes in these two terminalson the left so what I'm going to do isI'm going to set up alleviate and I'mgoing to start it up in this clusterso let me kick that offokay so now there is can I allow thatokay so now in my local host under port8080 I've got uh I've got one node forvv8 up and runningand then I'm going tokick off another node here from thesecond terminal and this is going tooccupy Port 8081kick that offallow thatandokayso many notes yeah we're good to go andthis is only two nodes so now what Iwant to do islet me make sure I'm in the rightrepository I am okay let me clear thatnow what I want to do is I want to run arun this import file that is going tobasically send uh objects to these nodesand so I upload data to these and youcan see that the nodes are respondingthey're they'regobbling up that dataokay so we're good to go here now whatwe can do isum if we want to know if if these nodesare perfectly fine if they'recommunicating well togetheryou can go ahead and call this new APIand this is the main feature that thatwe're showing off rightwe can uh we can send a get request toour um to our Local Hostlocalhost here port 8080 that's wherethe uh the head node isV1 and the endpoint is nodesI'm going to take that andso this is what the response looks likeit's a bit hard to see so what I'm goingto do is I'm going to pipe that to my ummy Json prettifierand so now we can see thatwell first of all you see that this thenodes get the get the request over hereand you can see exactly theconfiguration that your nodes are init tells you how many nodes you have soyou have one node and then you have thesecond node over hereyou can also see how the data is storedin your nodeswhat the object count is for for eachone of the classes that you've got hereand the classes here are pretty genericso it's um I'm not going to go into howhow the schema looks or anything likethat but the main ideathe main idea here is the status of thenode right so you can tell that node oneis healthyand node 2 is also healthy rightso there's three values that this statusflag can take healthy is what you wantto see but now I want to show you whatuh what else will happen right so let'ssay we simulate a crash in the secondnode here so I just crash this nodeand for everyone at home don't try to doit at home it can be dangerousonly let it let it to prose like Zen todo ityeah simulating a data loss event overhere okay so now we're shutting downthis server and you can see that thefirst node uh realized that it it failedit sent the paint to node two it failedit's marking it as failed so node oneknows that the second node failed but doyou know that the second node failedright well now the answer is that youcan know you can call this API sameendpointand now you get another response whichis different from the response that wejust got and now it tells you that youhave node one and you can see here thatthe status is unhealthy because you nolonger have no two and if you look intoit further you can see that because yourclasses uh were you had object countsthat were being shared and stored onnode 2 and node one all of the objectcounts on node two are no longer thereand so you've uh pretty much if this ifthis node loss was permanent You've LostThat data and now you can tell uhtell whether the whether your cluster isin a healthy or an unhealthy statethere is also a intermediate step herewhere let's say you call this API in themoment that the second node is goingdown you'll get you'll get a statusupdate that says unavailableand so that is a transitionary statebetween healthy and unhealthybut I like to think of this feature asthe as the cluster doctor right you'reyou're basically taking your stethoscopeand you're assessing whether or not yourclusters are in good healthbut okay but is it like when it goesdown completely isn't it unavailableactuallyyeah so that's interesting so thetechnology that we're using behind thisum once the node is completely downuh it doesn't actually send any responseright so we can't tell what the objectcount on that node was so here you onlyget node one and the state of node oneis unhealthy not because Node 1 crashedbut because the cluster had Node 1 andnode two and now node 2 crashes right sothe status here is uh the status of youroverall clusteroh right that makes a lot of sense okaythat's pretty cool hey what was the thecommand and I'm gonna change the subjectslightly but what was the command thatyou use for predefying your Json oh thisis just a JQ so this is the um so I'mpiping the output into uh into this uhJson for the fire because I always useJson PP so that's kind of interestingokay and to seenice that that's pretty cool I wonderlike we'll be probably cool to see nextas well is like being able to subscribeto any of those events uh I'm prettysure Etienne has some ideas around it orsomeoneyeah I think it's pretty interestingthere's so right now this is just a moreof a passive monitoringum so the doctor can see what's going onthey can't do anything about it or theycan't fix it at this pointumthe engineering team has some prettyinteresting ideas on on next steps forthis to make this an active API whereyou can actually modify the state ofyour cluster through uh through asimilar API sosoon soon about that in an episode of uhWe've eaten here that's pretty cool andand also I guess that'll be cool ifthere was a way to I don't know back updata from multiple nodes let's say Idon't know ohstay tuned yeah we're getting to thatyeah stay tuned for another 15 minutesand what happens if you want to rerunthis simple you're being erroruh no so you can run this API as manytimes as you want right how how about ifyou um fix node twoum so that node one would be healthyyeah yeah so if we fix that node twohere so if I rerun itseeoh it doesn't run it's telling me thatthe the port is not availableit should be availableor it's permanently lost we can't run itagainstit and kids this is why you shouldn't betrying that at home you shouldn't becrashing your notesvoluntarily it's for science guys it'sfor scienceawesomelove it love it all right thanks uhthanks and this was a really cooloverview so for anyone that's usingclustered uh distribution for weviate uhdefinitely you should know about uh thisnew endpoint the V1 notesum all right then next person that wehave is Conor so Connor you've beenworking on this this is actually prettyuh personal release because not only youwere covering it in the blog post butyou you were working on the centroid uhmodule yourself right for quite a fewmonths and we spent some time working ona demo and everythingum tell us what's all what's this allaboutyeah and thanks to everyone who's beenhelping me you know in the creation ofthis learn how new features aredeveloped in weba and the research ofproduct flow has been so interesting umso ref to VEC it's named as such becauseit's reference to Vector we have crossreferences between classes and I thinkthis is a this relational structure thatwe V8 adds in addition to Vector searchas you vectorize unstructured data youhave a structured symbolic propertiesthat you can use to filter the hnswsearch and you know we have our invertedindexes of the categories there's allsorts of things we can do with theproperties and I think expanding intowhat we can do with the relations is anincredibly interesting direction forwev8 so I'm going to start off byshowing this example of ref divexapplication and recommendation and thenfrom there kind of expand on the futureof how we can do this and then I thinkthat also transitions well into thetopic of using ref to VEC to representlong documents that are longer than thesay 512 token input length to sentenceTransformers or uh and or complexobjects that say it's a you know a realestate listing it's got images of thehouses it's got graph structure dataabout the neighborhood it's got thesymbolic metadata it's got textdescriptions so how can we havereferences in our data and then combinethese vectors to represent massivethings so let's start withrecommendation so what we're seeing nowwe're probably all used to using weba toyou know search through our catalog wesay you know search green shorts andthen bang There are the green shortsand we're used to doing this kind ofthing so we usually would have it as aproducts is our classes product and thenit's a have text description and so allthe text descriptions of these items arevectorized the queries vectorize andthen boom approximate nearest neighborhere's your product that matches yourquery so now what we're doing is we'reintroducing a user class so user classliked item item so what we're seeingwith this image grid is an example ofhaving say a home fee or if you want tohave yeah like a home feed kind offeature into your apps that you canbuild with weviate now so if you have aBlog you could personalize some kind ofrecommended articles with this kind ofinterface by using the centroid from theuser so now let's start using it so I'mthe user I you know I'm here I'm lookingfor a backpack I'm not looking for anyof these clothing so so as you have thefirst backpack you see how you're nowdoing a nearest image search where thisbackpack is the queryand say you're particularly looking forthe strapless the strap backpackcompared to like this duffel backpack soyou click another strap and then itstarts to you know it will average thesetwo vectors to be the vector that you'researching through these with and so thatrepresents the user preference ofbackpack so we could you know have ourhome feed is loaded by showing backpacksbecause that's the only item that ouruser is interested in on our uh saye-commerce website it's another funexample of this I think is lookingthrough the watches is just an exampleof something that's has like aparticular difference so you see withthe watches how you you could have likea digital LED screen or you could havethe you know the classic kind of clockstyle so as we you know as we do this wesee we have the digital screen if weclick two of them it prior it canvisually tell to prioritize see howthese are ranked ahead of these onessimilarly if we you know click thisstyle unclick that style and you knowadd that one then it shows us this onealso with the same style so it's showingthat semantic visual features at thepre-trained resnet and the alleviateimage to VEC module can capture I thinkis a really fun example so it's kind oftransitioning a bit so right now it'scalled ref to Vex centroid we'reaveraging out these two vectors to formthe vector to represent the user anotherinteresting idea that we're exploring isrough Divac centroids where we say havewatches backpacks and we have these twoclusters in our Vector space so we wouldhave a centroid for each of the Clustersand so looking into whether we want tosay use k-means or hdb scan clusteringfor this kind of thing and a new Evapodcast is coming out is with Martingrudendorst who developed Bert topic andhe explained so many interestinginsights about the difference betweenk-means and hdb scan clusteringand how they preserve the semantics inthe centroid so we're looking into thatkind of hdb scan implementation andgolang and delivering multiple centroidsso you could have a blend betweenwatches and then a blend betweenbackpacks or whatever it is that you'rerecommending for the user so then let'stalk about this idea of how we'reaggregating vectors across the edges andthis transitions into just one of themost interesting topics in deep learningwhich is graph neural networks so graphneural networks message passing networksyou you only send messages in each layerof the deep neural network to theneighbors so you collect the neighborsthen you have several layers of doingthis with non-linear activationdifferentiable weight Matrix until youdo something like predict clicks at theend so to contrast it with the graphneural networks one thing we could do ishave like an XG boost machine learningalgorithm where you would search forthese watches and then you would have aclassifier that's trained on clicks tore-rank it based on the xgboostclassifier of whether you click this butanother thing we could do is propagatethese embeddings out with graph neuralnetworks that do that nodeclassification task and I think that'sreally interestingso then concluding you know again wehave this idea of if you'll look at thewevia Wikipedia demo we have a breakdownof Wikipedia articles are too long toput into Burr it's longer than 512tokens you can't just have a in forinspector for the entire Wikipediaarticle it was broken down into passagein article article and that's a you knowthat's a graph relation with thepassages so the question is how do weaggregate these vectors into singlesearchable vectors or say we have thecentroid idea so the central idea wouldgive us multiple vectors for the articleto search through so if we have theLeBron James Wikipedia articlewe'd have centroid to say describe hiscareer with the Lakers Cavaliers the youknow Akron Ohio these would be differentcentroid clusters but maybe with thegraph neural networks we could compressthat into a single Vector so I thinkthere are just so many interesting ideaswe can do adding this relationalstructure into our Vector search andthese kind of cool ideas I thinkstarting out with the recommendationdeveloping home feeds with we V8 is Ithink one of the most interesting waysto get started using ref to VECthis is this is cool because I wasimmediately thinking like uh this thiscould be like a really interesting wayto like provide recommendation ifsomeone let's say you're doing researchon a topic and then you're scouring likea huge database of papers and then ifyou saw like one paper on that on onetopic and then something else and thenimmediately could go like oh you look atto this uh two of those papers let's sayuh I don't know graph connections Etcyou're like hey here's another few andthen based on what you selected likecontinuously could provide you like moreand more refined recommendations so thatyou can kind of keep going and keeplooking foruh different articles and if at onepoint you pivot into certain area likethe centroid the average can keep movingrightyeah I love that you said that when wefirst wanted to explore this I was usingthere's this Twitter account called AKuh it would be like 4201 and he tweetsnew archive papers every night like sixevery night it's crazy and so you know II interacted this a lot and so weextracted all the people who like tweetsfrom AK and then we put all the AK andthen we rank them based on doing thisrestavec and I was able to see thedifference and say my recommendationscompared to I did the user dissimilaritybecause I can use myself as a query Ican also find my most least similarneighborsand so you know it was someone who likesthese audio papers like it's not that Ihave anything against audios just thatI've never looked into it and I justthought it was so cool to see it capturethat in kind of a real world examplelike exactly if you describednice nice yeah because like you meanlike also like one of the things that Iwas thinking about is just like uh whenI watch uh stuff on like Netflix or HBOEtc right like they always give you likethose recommendations based on like whatyou've been watching uh recently so thatthat sounds like something also thatcould workum but like how far can we go back in inwith with those uh searches like isthere like a recommendation like go forup to five or can we go with a hundredwhat what's the story around that I'mkind of curious yeah that's anotherreally interesting idea we're lookinginto is in the uh in the moduleconfiguration having an interactionwindow so say it only uses the lastthree interactions in the website toform the center as right now it's theaveraging in a single centroid so yeahwe could have that interaction windowand I think maybe another phrase I leftout is just session based recommendationonline recommendation how we how youcould you know open up say tick tock andyou don't have an account and you juststart interacting and boom alreadyyou're getting recommendations you don'tneed to have this train this machinelearning model on click prediction youcan just boom start running withrecommendationsnice nice another I think this ispretty interesting that this seems likea game changer for both content-basedand collaborative based recommendersystems rightum is is this more efficient than whatwhat is currently used in those fieldsorbecause ifum from what I know of the field rightnow they're they're essentially tryingto capture the meaning behind thecontent that's consumed right if I buyone type of watch then they'll recommendsimilar types of watches maybe they'llrecommend the same company's watches butwhat you're doing here is you're you'relearning that you're learning what'ssimilar about those watches and thenrecommending it okay so it's itgoes one level deeper rightoh yeah that's that's a good pointbecause I always hate when like I searchfor something like oh yeah I don't knowa new tripod for my camera and then likeevery art everywhere else it kind ofgoes like you've been looking for this Iwas like yeah I know there's no not muchhelp but if you gave me arecommendations like oh that's a cooltripod I didn't know what existed butyes I am looking for a cool driverhuh it really solves the cold startproblem like along with new users ifthey're most similar to some userspatterns before and even for thisexample when you clicked on the silverwatch that's a little more fancy thebackpack with the straps changed to thisnice duffel bag right so you can kind oflike put a whole outfit together withjust like kind of searching around forwhat you want so it's kind of coolyeah yeah that's kind of cool that theduffel bag goes well with the silverwatch it matchesyeah that's super interesting becausenow that you can break down a productinto its individual components on avector there's nothing that's stoppingyou from comparing a fancy watch to afancy backpack whereas before you werejust like maybe you're comparing likethe relative price of that watch versusthe relative price of the backpackumand I never thought about it that waythat's super interesting actuallyyeahI guess the cool thing is that it's likethere's so many ideas that even wedidn't think about and so I'm reallycurious how everyone else starts usingit and like what kind of use cases we'regoing to learn aboutas a call to action everyone if you'rewatching it you should definitely tryCentro it like you know uh try to comeby use case that we didn't think aboutand then surprise us and surprise Conormost of all he's so proud of his babycoolnice niceum is that all Connor that covers thecentroidsoh yeah I'd say uh we're also gonna havea blog post published soon and uh yeahwe're you know work at interactionwindow the ux for the collaborativefiltering as Zayn mentioned quicklywhere you add the rating thing and andyeah just rolling along with this Ithink recommendation is gonna be such acool use case for weviate as well asbecause it is kind of certain personalsearch yeahperfect perfect thanks a lot for uh thisdemoum all right so I guess we have a coupleof other session uh features that we'veadded to deviate and on my agenda I haveJP to go nextuh so JP what are you going to tell usabout sounds good sounds good thanksSebastian um could you put my slides upif you don't mindI don't mind at all where are you hereso yeah I'll be talking about it's goingto be a little bit of a change of paceso with 116 and we've added Azuresupport to the way we do authenticationwith oidcum let's talk a little bit about RDCthough because like I was writing theblog about it and I was like reading andI was like oh this is really cool and Iwas thinking about what kind of like isthe catchphrase or like the you knowfine line I want to go with and I waslike well let's talk about how much weall hate passwords because I don't knowabout you guys but I use a passwordmanager I'm trying to you know maintainsecurity practices and whatnot but it ispretty unwieldyand more and more AGP sorry to interruptas like how is that even a question likeif you're not doing that if you're notusing a password manager what's wrongwith you some people don't you'd besurprised you know working in it or inyou know Tech it's it's a bit differentbut yeah I promise I'm a nice personuh but yeah like if you don't like Ithink it's a good idea to use oneum but yeah like it is a problem untilwe have password managers that was sucha huge headachepeople are like oh I've got a systemwhat is it it's my dog's name plus likefour different numbers and it's like nothat's not a big boxchange my passwords nowso it wasn't meant to be a sub tweetkind of but um you knowum so we'll talk a little bit about oidcso it's really cool so more and morewe're seeing like these uh single signosright whether it's with through Googlethrough Microsoft or whatever and itreally tackles this one problem of likehow do we secure our resources andmaintain usabilityand I was really you know excited to seethat with um at alleviate or at semifincluded IDC features so it can doauthenticationum easily whilst maintaining securityright so that's kind of what my nextslide is it's really a combination ofthe two things that give you thosefeatures it's authentication that tellsthe end client or the app who you areand you can trust who people say who itis and based on that you can do yourauthorization you know whichever way youwant to so some people obviously do bothin the same uh you know using the sametools I suppose so authentication withoatc and maybe your authorization wouldgo offum but with weaviate we use oidc forauthentication so we can trust thatpeople are who they say they are notjust you know a text box typed into afield so they can I can pretend to be Idon't know Elon Musk or whoeverum and based on that we can use we canuse that identity to enabledifferentiated authorizationand for people who's not really familiarwith how IDC works this is kind of theworkflow I've skipped a couple of stepsbut basically the point is that you knowin the same way that a lot of peoplewould have seen you go to log insomewhere whether it's uh againMicrosoft or whatever and then you signon and you get a token back and ofcourse through the magic of public uhprivate care security you'll know thatyour token is secure and we passed thattoken to eviate and weavate it's like ohyeah you are you know this person Connorat semi dot whateverum or you know or you're not rightbecause your token is uh doesn't havethe right signature on it and you cansend them the right responseso the change with 116 is that we'veadded Azure support so even though oidcis an open protocol people do implementit slightly differently so that meansit's not like a one-size-fits-allsolutionum likely we're using the module systemwhich means that we can keep on addingthese functionalities as we go and oneof the benefits of course with Azure isthat a lot of people would already havesome sort of a you know employeedirectory or some sort of directory ofusers in Microsoftum Azure active directory so we canleverage that or they can leverage thatwith webiate so if you already have adatabase of users you can use that andget people to sign on through there gettheir identity tokens and go and do yourdo your thing in webaum so as an example of what that allowsyou to do is to have a one database wecan give tiered access to differentpeople right so instead of having likeoh here's like one instance of we V8which is for like Public Access you knowhere's like one instance of Eva for likeactually private use whatever what wecan do is to control who gets access towhy so you might say well actuallyeverybody regardless of who you arewhether you're authenticated even ifyou're an economist Anonymous user youcan read some part of your databaseright so maybe your demo data as a lotof data providers you know tend to dofor marketing reasons or just you knowuh just getting your getting your nameout there but then with these tokens youcan give one group of users read accessto the whole database as long as they'reauthenticatedand you can have another list and thisis where the authorization based on yourauthentication comes in so you can saywell actually these guys are in theadmin list so they can actually read andwrite whether it's you know deleting umcertain certain entities or entries andadding new objects right so you can doall of that and really um having theseIDC tokens means we can decouple thesecurity requirements because you knowthat's kind of not what we do right andpeople can trust that these things arehappening securely you don't have toremember yet another bloody passwordum and it's all kind of done securelyand safely while kind of notcompromising on the accessibility sideof things so yeah I kind of learned alot reading about it uh writing about itwas really cool and yeah it's it's goodthat I think you know all these um ofthis authentication and authorizationneeds are moving to these kind of openuh transparent and secure standards thatare evolving as well as you know easy touse so yeah that's really coolHey so uh because you you talked aboutoidc but like I also know about all likewhat's what's the difference like what'sHow do theyyeah that's a good question so they'reboth by the same um standard open IDstandard oidc is built on auth on top ofthat so the main difference is thatthere are two different types of tokensright so you can get the uh what'scalled an authorization token I'm gonnahave to make sure I don't mess this upoh that's action token which istypically used for providing access tocertain assets right based on thingsum but IDC is built on top of that sothey provide but it all uhauthentication sorry authorizationtokens doesn't tell the um doesn't tellyou anything about who it is it justsays Whoever has this token can usethese resources whereas open oidcum ads on top of that and adds what'scalled ID tokens right and the ID tokenwill basically have secure encryptedinformation about assigned as you sayinformation about who you are right soit'll say this person whoever is usingthis token is this personand we can kind of using uh we useencryption to prove that that is trueright so that's that's the differenceI see and how are the tokens validatedyeah um so it's like the um asymmetricalbut basically like it's all the magic ofa spectacle encryption right so there'sit's a public um private key encryptionthe same way that if you log on toGitHub using your keys you have yourprivate keys and GitHub has your publickey so they can see that yourinformation is encrypted and they candecrypt even though they can't encryptit themselves rightum because they can tell that it hasbeen encrypted by you and this is thesignature kind of works the other waywhere it the signature is signed by uhthe let's say Microsoft in this case byAzure because they've got their privatecase and if you have their public keyyou can verify that it has beenencrypted by them and has not beentampered with soum yeah I don't want to pretend to gotoo much into the maps but it's it's allone-way functions with very large primenumbersum and all that so I did take one coursein cyber security so it sounds familiarthank youbut yeah just as a huge nerd I rememberreading this book called crypto back inthe day it's like way off topic but umit's all about like the development ofRSAum uh standards and like who did it andall these like interesting stuff butlike export restrictions and they endedup like exporting all this stuff byprinting out new books because that waslike one way to get them get around theexport restrictions at the time it'slike really interesting stuff so ifyou're interested in that check it outI think this tiered access thing issuper cool so I've worked in uh in thedata related healthcare industry in thepast and any regulated industryum for example in in healthcare you haveHIPAA compliance only certain Healthcareprofessionals are allowed to seespecific patient dataum not only do they not they're notsupposed to have access to it but thiscomponent of oidc that you mentioned youneed to know who accesses somethingbecause if if somebodyum inadvertently or incorrectly accessthe wrong information all of that needsto leave a paper trail right soum but the question is the question Ihave is what happens if the uh theprovider servers go down in that caselet's say the service won't happen yeahthat's a good question obviously if thewavier loads are down you can't accessdata but one of the cool things abouttoken based systems is that once youhave that tokenum you don't really really you don'treally need to access the token issue orservers all that often right so you needto issue it every so and when you wantto first get the token or when you needto reissue the token because it is timelimited along the time right forsecurity but other than that and also atime when you want to pick up the publickey for verifying the signaturesum so other than those small Windows oftime you're kind of Fairly robust tothat which is which is really coolthat's coolnice niceI was kind of thinking it's like becausecan you invalidate that token like saylike hey I gave this token away beforebut now I don't want to accept itanymore yeah so um with auth I thinkthere's a few different ways of doingthat so a common situation is like youmight issue a token you know anauthorization oauth token especially toan employee and then what happens if youyou know terminate employment or youknow if they leave whatever right so youcan either umyeah there's ways of doing it so acommon ways like you get a token thatexpires fairly quickly like in an houror you know whatever number of hours andthen but you get a renewal key or arenewal um key so you can use that tokeep getting your token and the newrenewal key so again turn off the tab atthe server end to say that this renewalkey will no longer work because they nolonger work for us so that's one way todo itum but again it also means you know youonly need to access that server likeonce every you know frequency of everytime it expires so again okay if you canachieve both things yeahcool coolnice so I I guess yeah again I thinkthis is a pretty use uh useful feature Ithink one one example where weinternally at semi are using itum like the tiered access uh toum uh to to deviate it's actually how webuild some of our public facing demos uhso for example like everybody probablyknow about this Wikipedia demo uh so ifyou try to access that uh AP uh thatdate that instance a vb8 withoutauthentication you can actually runqueries but but you can't make any reador writeyou know commands which is really coolbecause on one side we we have thecontrol of what data goes there you knowlike some some people put like uh maybethey'll put some bad objects orsomething and we can avoid that we canmake sure that the demo always is in agood shape but then at the same timeanyone that wants to test it out and andsee like what sort of queries you canrun on Wikipediaum uh it they can access it so I thinkthat's also like one of the goodapproaches to do thatyeah so yeahnice all right so uh conscious of timeuh next uh we have uh well leaving thebest for last uh so we have Zen uh Zenyou like in the in the last one Ireleased blog post you were alsocovering an update to the backupfunctionality uh in in viviate so uhwhat's different what's new uh becauseyeah this is this is one of the mainFlagship updates um it was uh superawesome to learn about this and talk toall the engineers and the whole processof how the the inner guts were revampedto provide this new functionalityquickly stated basically what it allowsyou to do isum before you could back up your data aslong as it was stored on one node rightif all of your objects are stored on onenode that could be backed up okayum even if you had your objects or yourclasses multi-sharded and what thatmeans is instead of storing one tableyou take call your rows of your tableand now you create let's say you have aa table of four rowsyou can create two shards of it wherenow that data exists that's two tablesbut now both of two rows so you canmulti-sharg your data and as long as youare doing that physically on onecomputer you could still back it upright that was 1.15 the new addedfunctionality is that you can take thesemulti-shards that you can distributethem across hundreds of differentcomputers and you can still back it upas if it all existed in one computer andthat's a super cool feature becausethere's we can get into the manyadvantages of sharding if we want butone of the things that I want to showyou if you could share my screen herekind of just hidden into the first demowas this idea of multi-shorting what Idid in that first demo was I spun up uhtwo nodes and then I pushed data tothose nodes right and here I didn'tspecify how the data was supposed to bestored whether one class was supposed tobe stored only on exclusively node oneand then another class was exclusivelystored on the second node so this is abit moreum of the functionality of the node APIfeature but the data that you get backfrom that feature you can actually tellthat the data is multi-sharded so if youlook at your category class you can seethat nine of the objects that I pushedare stored on node one and the other 10uh for the yeah so if you look at thecategory class here or the other 10 arestored on node two so this is what itmeans to have multiple shards for thesame class right same column categorycolumn but you have 10 rows that arestored in node two and nine rows thatare stored in uh in node one and this iswhat a multi-shard multi-node uh clusterlooks likewith 1.16 you can now back this systemup entirely you could just call thebackup functionality on this uh on thiscluster and it would be able to preserveall of your data so in in the event lossthat we had where node two went down youcould back it up and retrieve all thedata immediatelythe additional the one other one lastthing that I'll add is that on the userinterface side nothing has changed rightso you could still call the exact sameuh apis to back up the data it's justthat now you have the ability to backupmulti-node multi-charted datanice so can I then if I have a backupcreated with version 115 can I restoreit into 116 instance as well exactlyexactly it's it's perfectly backwardscompatibleso that could be a cool way to migrateto a newer version of V8yeah for suredidn't think about it before that'sactually a fresh oneis it correctly understanding that likeyou know as we have like billion scaletests that you could have thismulti-node backup and then you couldjust restore it to instantly have like abillion scale Vector data set just likejust restore it and then you're runningwith it yeah exactly if you have well ifyou have the compute and the hardware tobe able to support it then you coulddefinitely back it up right and that'sthe whole the scalability uh componentof this thing you could have hundreds ofcomputers where your data data isdistributed across those hundreds ofcomputers and if let's say 20 of them godown you have a backup for the entirething and you could restore those rightas long as you restore the physicalHardware then you're good to gothat was going to be a good questionlike what happens if a few of thecomputers go down um like what happenswith the notes that were on there yeahso the the nodes that are present willstill be able to you'll still be able toback those up but until those uh soyou'll have a previous backup uh thatyou had when the nodes were up okay soif the hardware if you restore thehardware you can you can recreate those20 nodes but you could also actuallycreate a backup of the 80 computers thatare that are still remainingreally coolI think it's just amazing like the youknow like how long it would take you tosay vectorize like a billion passagesyou've scraped from the internet now youno longer would have to wait for theimport times you could just restart itand then you're running with it niceyeahI'm I'm connected yeah because likesince you explained like my mind isgoing like all possible scenariosbecause Connor you mentioned the billiondata scale and everything but like whatif you had a setup where let's say youwere perfectly fine like you got 200million objects your environment was setup just right but then you realize thatlike your data is growing really fastand then suddenly like maybe you needmore notes or maybe you need differentservers so I guess this could be prettycool because we could create a backupspin up more instances or more powerfulinstances and then kind of restore andthen now you could grow from let's say200 million to like the next level thatyou anticipate for right yeah exactlythe the great thing about distributed umDistributing your data across multiplecomputers is that it's super scalableright not only are the query scalablebecause you now per computer you haveless data you're not storing all of yourdata on one computer your Aquarius don'tneed to filter throughum as many data points to before I cancome up with an answer but um iftomorrow you get much more data you canalways expand go from 100 computers to200 computers and you have wellliterally infinite scalability rightnice that's coolall right um so you showed us the demobefore with like two notes uh I'm gonnabe trying like 20 now let's see whathappensbut I promise I won't kill any of them Iwon't harm them on purpose yeah that'smy job yeah that's your job yeah I'llcall you over for thatall right uh thanks and for uh for thisupdate this is actually super excitingisn't it cool that like you talk aboutbackups and many people would find itlike uh not so exciting and boring andthen Zen comes in and there's like thiswhole conversation coming up it's likeyou know then you have a special talentyou make even backups sound exciting sothat's pretty coolum all right uh so this is basicallythis concludes the part ofum the waviate features and updates uhso uh like like I mentioned at thebeginning of the stream uh we arealready onvivid116.1 so I definitely recommend youall to upgrade to it like especially ifyou want to take advantage of all thecool features uh that the team here justuh described uh it's definitely worth itwe are super excited really proud aboutit uh but if you have other ideas othersuggestions on what should go into evadeor if you have any feedback or if youjust want to share some love you know interms of because there's been a lot ofwork that's uh that went into it uhwe're more than happy uh you know joinus on slack or drop us a message eventhere uh we monitor the the messages onYouTube and we can see them as they comein so that's great and I want to uhbasically finish with a corner segmentwhere he will cover like what's new inin AI in October and and I know likeConor you read like uh so many papersevery month in research for cool thingsthat could go into alleviate uh so uhwhat do you have for usyeah cool well let me tell you aboutsome of the things that I thought werecalled uh this month and um so First thefull screen is good let's sharing it yeswe can see we'll be there to Connor sureso uh so with the ref the back thing Imight have been a little hand wavy withthe graph neural network thing so inthis slide I promise you we'llunderstand what a graph and all thatwork is uh and starting with this newpaper from Amazon science recommendingrelated products using graph neuralnetworks and directed graphs the corething with the directed graphs is thatthere's an asymmetry and recommendationyou buy an iPhone you need airpods youneed a phone case but usually when youbuy a phone case you don't also needairpods so they have two separate kindsof relations in the graph so in wva saywe have a phone case uh phone is onekind of cloth or it's all product westill have different named relationswithin the class so you could have youknow co-purchase relationship co-viewedwith cross reference relationship and weV8 and so they have this graph where youhave co-viewed which are thesebi-directional lines and you haveco-purchase which are directional linesso the way so and really what I want todo with this is explain to the graph andall that work is so the core idea of thegraph neural network is it has a messagepassage a message passing uh prior so uhso when you have and the core idea withthis new idea from Amazon science isthat you have two embeddings for eachnode so a has a source embedding and aTarget embedding and you know sourceslike from Network science or you know itflows from the source a to c and 2B buta doesn't flow 2D it's a Target to D sothe idea is you have two separateembeddings for each of these things solet's get the math and I promise youunderstand what a graph enrollment workis after this so graph neural networkssimilar to deep neural networks it hasyou know L layers so let's just 8 12whatever model layersso you initialize it with some featuresfor each node so usually say you have atext description of the product bangvectorize it with mini LM now you have a384 dimensional Vector at layer 0 of thenetwork that represents say this iPhonecase so now what we're doing is we havetwo Edge graphs this subscript CP andsubscript CV so what we do is we'regoing to do the message passing byaveraging out the vectors that thisSource node is connected to so againwith this example of a is connected itssource it goes to C and B so at eachlayer of the graph neural network weaverage the vector of C with the vectorof B and then we multiply it by thatlayer's weight Matrix so you know sayit's 384 the average will be 1 by 384times 384 by whatever hidden Dimensionwe want to do with that layer so let'ssay it's 512 and then you end up with a512 dimensional Vector you can like blowup and shrink the uh the kind of latentbottleneck that way however you want todo it so in the end you end up with youknow any this these weight this is alldifferentiable with the weight Matrix soyou learn this weight Matrix and in theend what you're doing is you'reproducing embeddings for for the notesand the embeddings for the nodes are howyou then do recommendations so you wantto recommend a target from The Sourceyou query with the source node and youlearn that node embedding through theseveral layers of these graph neuralnetworks and you do that with this lossfunction where you know the co-purchasethings you try to make these similar toyou know the iPhone Source going to theiPhone case the Target and make thatdissimilar from from a randomly sampledone so let's say there is also like a aset of dumbbells also as a sample Targetthat was also on this like Amazonproduct graph so then you also have youknow making Source representationssimilar to each other in the co-viewrelations if you know the subscript andso that's how it works so uh quicklybefore moving on because I think this isthe most important like technicalconcept does everyone feel good aboutwhat a graph neural network isare you stacking the um so you mentionedthat the uh you have multiple nodes andthen you're you're learning the weightare they stacked on top of each other isthat how the layers workexactly so layer zero you have theinitial sentence Transformer Vector forc and b and then so a will be theaverage of those two boom then youmultiply by the way Matrix and you didthat also for C with its E and FNeighbors from source and then now we'reon layer one and so on so just keepdoing that okay I seecool so awesome I hope you all thoughtthat was interesting and thanks forthanks guys and uh so some other thingsI thought were really cool and relatedto rest event was uh Pinterest postedthis blog about how they use that refxcentroids kind of idea for their uh homefeed and their recommended pins exampleso they start off by you know you sayyou have uh 80 of the time you're onPinterest you're looking at interiorkitchen designs 15 let's say birthdaycards and five percent pictures of dogspreviously what they had is then whenthey're doing the home feed they justsample 80 15 5 with the recommendationsso now they've added this uh Banditstyle feedback loop where what you clickon so you know you say you startclicking on the dogs it'll it'llincrease the sampling rate from thatrather than just the static sum ofactions because say you know you used tobe on Pinterest and you looked at likethe 2000 images of interior kitchens andthen now your recommendation is sobiased by your past Behavior so thisfeedback loop would be one way to updateit in addition to this kind ofinteraction window ideaso next I want to talk about re-rankingand I thought this paper was a supercool idea so to start off re-ranking isabout we retrieve some documents andvector vector index returns us a rankedlist by Vector indexes but then we'llhit it by like a pairwise classifier toget even better rankings for the resultsand so what the core Insight is theperformance of a re-ranking pipeline islimited by the recall of the candidatepool however this is because documentsthat were not found by the initialranking function have no chance of beingre-ranked and I think this one so theidea is you retrieve say 100 documentsre-rank and then you have the top 10 andI use the top 10 as query to get sayanother 10 and then blow it back up to100. so I think this is a littlecounterintuitive at first you mightthink like okay the newest neighbors tothe query aren't they the nearestneighbors to each other but they'reactually not because of this Highdimensional space so you know thenearest neighbors the query document onetwo three four five the nearestneighbors to document one might be likedocument seven document 13 and thendocuments not even in the list like 81or you know whatever so you expand thelist and then you have more candidatesto re-rank and it's a really neatheuristic that improves the results on alot of these techniques like the M25 Drquery Colbert and spladecool so the next idea is anotherre-ranking strategy that I thought wasreally interesting and different fromkind of just the binary classificationquery document uh put it to a binaryrelevance label this is the idea ofusing language models to score thelikelihood of the input questionconditioned on a retrieved passage soyou train your language model byconcatenating your data set of documentand query and you know language modelsjust predict the Mast out token but theway that a language model predicts themask down token is by assigning aprobability to each of the next words sosay the sequence we estimate log P of Qgiven Z sub I using a pre-trained maskit puts a 85 on language and then it hasthis massive distribution ofprobabilities on all sorts of otherwords so what you're doing is you'regoing to multiply out the probabilitiesof the query as you say have thedocument and then you go mask massive sand you're putting in the probability ofthe uh of the passages that you'veretrieved and you can use this tore-rank the passages based on theprobabilities of their likelihood comingout of the language model so I thoughtthat was another cool idea and the showhow that this improves over thecontributor the DPR model compared tothis idea with the re-ranking theRetriever with the language modelso another kind of cool idea like thisthis idea of you know maybe taking thepassages input and then outputting thequery and inverting the process is thispaper decoding a neural retrieverslatent space for query suggestion welearned a query decoder that given alatent representation generates thecorresponding query so you have somekind of gold paragraph like thisIllinois election 2018 the generalelection will be held whatever so youthen hit it with a sentence Transformerand now you have the vector and now youdecode from the vector the query thatwould match with that paragraph so it'snot an obvious thing that say in bm25search you have pseudo-relevancefeedback where you know how much weightyou could put on the keywords to havematched the paragraph but it's not soeasy to invert the space in the neuralspace where you have to generate it intoa natural language query like this soI'm not sure uh yet what this is usefulfor they have ideas like you Traversethe latent space from the original queryand try to have like an ensembling ofnearby queries that are similar to thislatent space but generally I think itcould just be an idea that helps you geta sense of what's going on with yourmodels as you upload documents and itsays queries that would match with itmaybe it gives you some insight into howto query itmaybe maybe we could use this for uhgenerating queries for Jeopardy right soif you have an answer it's like hey uhfind me the question that will go wellwith thatyeah so you could have like a vectorsearch engine Jeopardy you know like youcould have few instances of widget maybeZen can set them up on distributed nodesand then each of them can ask the rightquestionyeah exactly we're making the languagemodels play Jeopardy and answer what wasthe question rather thanhey what could go wrong right okaycool so what the next topic I want toget into is an update with Gina ai'sfine tuner so there's very interestingspace in model training software we havelike Keras tensorflow pie torch fortraining our models and it requires abit of knowing how to get the dataloader how to get the optimization LoopDefine the model architecture code andGina ai's fine tuner has created thisway of pipelining the document arraywhich is where you put your uh querydocument labeled examples particularlyfor multimodal image text captions andaccessing a lot of these features usethe train clip like uh the wiseftrobustness turret there's a lot ofthings that are built into the finetuner and so here's some results thatthey uh present in their share withtheir in their blog post about theupdates with this Flickr AK 8000 3200000 and bang massive improvement fromthe AK and retrieval so uh you knowyou're you have a text caption you'researching for an image and if you havesome some kind of really particular dataset I think this kind of domainadaptation achieved through fine tuningmodel training software that makes thiseasy I think it's incredibly exciting soand then we see more modest improvementson Flickr 30k and Ms Coco so you knowthis is building on the clip Baselinewhich is a pretty General model but Ithink this is super exciting for domainadaptation in generalso now we have a Conor if you jump tothe next one we actually have aninteresting question from the TienI it sounds like there's some plus onesalso on building the idea of Jeopardywith AI based engine so heyyou you maybe you spoke too soon thatyou didn't know how to use it we mighteven have just uh came up with you knowwhat to do yeah I got something I haveto do cool cool um awesome okay so uhgive it a roller now so now we're kindof pivoting into more things that aren'tas particular to search but in thisGeneral space of large language modelsso Google is back at it with anotheramazing language model uh they'vealready trained 540 billion parameterthis Palm model three times theparameter count of gbt3 and now whatthey're doing is they're training thismodel with instruction fine-tune tasksand I mean you plus 9.4 on averagemassive multitask just unreal abilityfor a large language model so let's kindof start about like what is instructionso this kind of is it's like this Chainof Thought thing uh well actually let mestart the story with T5 so before the T5Transformer people would use totallydifferent architectures for differentnatural language processing tasks likenatural language inference good questionanswering text specification they wouldall you know have a different way ofcompressing it into a classificationlayer then T5 said hey how about we justlanguage model this let's just as theprefix a question answering then give itthe input and then mask and then themask will be the answer or the maskwould be yes or no for binaryclassification and so on So You unifyall language tasks into languagemodeling and now they have all sorts ofways of of mapping tasks into thedescription of the task so you knowobviously with gpt3 in context few shotlearning you give it input outputexamples with some description of thetask as well now they and so instructionfine tuning is kind of similar they alsohave that with like give the rationalebefore answering so not only answer itbut explain yourself and then Chain ofThought fine tuning which is like thisis how you would explain yourself so ifit's something like you know I have 23apples I gave you 20. you say Okay 23minus 20. I have three stuff like thisso what they did is they have this justincredible diversity of tasks that theyfine tune this one model with and it'sobviously a massive modelso the next Super interesting thing inlet in large language models is largelanguage models can self-improveand this is the same idea as this Chainof Thought thing so again with Chain ofThought the question is Stefan goes to aroom with his family they order anappetizer that costs ten dollars andfour entrees that are twenty dollarseach if they tip twenty percent of thetotal what is the total amount of moneythat they spend so what you do withChain of Thought is you break up thatquestion you say okay the appetizercosts ten dollars the entrees cost tendollars each so four times twenty and soon so the way that language models workagain and then this comes back to thethe Jeopardy thing and say using this todo re-ranking is as it's doing thisoutput it has a probability for each ofthese words so you know the is like say75 appetizers like 60 of The Next Stepcost is like 90 and so you can dodifferent decoding paths through largelanguage language models in general sosay greedy to coding is you just takethe maximum probability of each step youcan have beam search all these kind ofthings for decoding pathways through theoutput so this idea of self-improvingmeans at the end the model might ittakes different paths to get there yousee how like 90 times 1.2 compared to 90plus 18 but in the end they have thesame answer so this consistency is usedto filter the output and then use thisas additional training data for thelanguage model so output 1 and output 3are then concatenated to this questionand then the language model does someadditional training by language modelingthatand other incredible idea for furtherimproving the performance of theselanguage modelsokay so then just another thing that Ifind this research in like iterativewriting to be extremely interesting so Iquickly want to present this idea aswell where instead of again just havinga language model say greedily decode astory you have this iterative plan draftrewrite and edit and I think it's reallyinteresting how you you know they breakthis down into plan it generates asetting giving a premise it generatescharacters they have this kind ofKnowledge Graph extraction for factualconsistency within the story you knowstart writing the story and then youhave the rewrite where you have thiscoherence and relevance ranking so thisis kind of a part where this wholeranking search pipeline thing comes into filtering the potential decodings ofthe language model ensuring factualconsistency and overall I just thinkit's an incredibly interesting idea forgenerating long stories of languagemodelsso then let's talk about the other wayof doing language modeling this is theso these these three ideas are likethese you know massive language modelsyou put like 100 billion parameters youjust compress all the data into theparameters and language model comparedto retrieval augmented language modelingwhere you retrieve you have the query uhyou have the input you use that as aquery to retrieve some information andthen you condition your generation onthat retrieved information so in thelast movie error episode we talked aboutFacebook ai's Atlas model andparticularly what they're doing isthey're saying can those can thoseretrieval augmented language models alsoachieve few shot learning where you giveit a few examples and it learns a taskbecause that's one of the core cells ofthese large language models uh now we'reexploring can they do common sensereasoning so the problem with commonsense reasoning is it's a different kindof retrieval task so the question isonly after learning you can gainknowledge true like these little CommonSense things and the question was reallylike can the retrieval generate relevantthings or whatthe next thing is using this kind ofretrieval augmented strategy formultimodal information I think this isalso extremely interesting so you havequestions like what shape is thepediment used by Capitol Hill in DC andso you need to kind of retrieve thisimage and then you look at it and you gotriangular shape pediment the way theydo this is they use the uh theembeddings of images and the embeddingsof text they put that into the samedocument index and then you know fusionand decoder style retrieve and readgenerate answers train it with uh withlike these vqa data setsokay then finally the last thing is themassive text embedding Benchmark andit's about having Universal textembeddings applicable to a wide varietyof tasks we love using it for retrievalwe think about this a lot you know yousay fact verification you have a claimcan you retrieve the evidence for thisclaim we can also use embeddings for sayuh summarization where you have thissimilarity score of the embeddingsbetween the long document and thepotential summaries you could have apair of uh of sequences that you comparethe embeddings to to do some kind ofclassification withand all sorts of things like bitexminings they say you use embeddings fortranslation by you say something inEnglish embed it in English nearestneighbor in the French index that'sgoing to be the translation so is acollection of a ton of different taskston of different data sets a ton ofdifferent languages as well so reallyinteresting way of seeing all the thingswe can do with embedding based modelsand then you know it puts a scale forcomparing GTR with mpnet with our miniLM with uh all that Specter not our likewe developed it at we did but this isjust a common sentence Transformerlightweight use it a lot uh Specter fora lot of these things on the same scaleuh so thank you so much for listening tothis uh please let us know anything youthought was interesting and I hope youcheck out webe to learn more about theweekday Adventist search engineexcellent thank you for this uh hugeoverview Connor uh that was really goodand basically just for everyone in theaudience to know uh how what howimportant this segment was uh to Conorhe literally has a taxi uh about toarrive in half an hour so uh uh you knowlike he was still in this he's still inthis and like yeah I can still make iton plane and fly overum to to Italy because like a bunch ofus like pretty much everyone in thecompany most of the people in thecompany going to meet in Italy soon uhso yeah thanks Connor for taking thetimeum I I know you're going to share someof the materials as well rightumoh sorry uh yes yeah uh Twitter threadthat has the links to each of the papersif that's what you're looking for andyeah I think we'll continue thinkingabout how we want to share this if wewant to write something or something buthopefully the just the links is enoughnow what's your Twitter handle ConnorC short and 30 I'll I'll put it in theYouTube chatlet's do that so yes if any of you wantsto actually get the you know the list ofeverything that Connor covered uh yeahyou should definitely follow him onTwitter and uh without a say you shouldfollow each of us as well uh but I woulddefinitely say like yeah follow semiTwitter handle and wavy8 as well so Ithink that's pretty much it from us thisis all we had to cover for today uhthank you all for listening uh thank youfor uh my co-host uh you all did anamazing jobum any final words anyonethanks for listening everybody thank youthank you thanks a lot so let's do acollective wave waving what I'm going todo thank you bye I'll see you next time[Laughter]bye everyone", "type": "Video", "name": "Weaviate Air \u2013 Episode #2", "path": "", "link": "https://www.youtube.com/watch?v=lTwB2blPwRs", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}