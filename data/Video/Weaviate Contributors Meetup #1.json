{"text": "This is the recording of Weaviate's first contributors meetup, presented by Laura Ham. More information: - Weaviate ... \nso let's get started uh so yeah again welcome um i'm uh lava solution engineer now at uh semi technologies and today i wanna uh introduce uh review to you and also a bit on how how you can contribute to this uh so first a little bit about uh vvate and yeah the problems that it solves so what what is it exactly and i will demonstrate this with uh some queries uh so you see how it works and what it can do uh i will get uh i will then explain you how viviet actually does this so a little bit uh more towards the technology um and then i will show you how to get started and how you can contribute and then in the end we can have uh some questions and maybe a discussion if you're open to that so first a little bit about revit itself so about the ai-based semantic search engine we identified that or we know from sources that around 80 of the data is unstructured text and this comes from forbes actually and the problem that comes with this is that it's difficult to search through and it's difficult to classify data so what exactly is unstructured text i have an example here of three product reviews of disputed products and we see that we have some [Music] rating in number of stars we have a date so that's kind of structured data but we also like most of the data is actually text itself and this text is difficult to to search through if you are not searching by exact matching keywords but also there's a lot of information hidden in these texts so words like fear and worry and that this person thinks it's absolutely amazing are all things that are hidden in this text and you can do search and classification for this so how is this problem solved right now search is uh for example already solved by enhancing the traditional search engines with machine learning capabilities or through manual effort and classification is uh already solved partly by data scientists who who make models and manual effort well what are the problems with this so search which is uh solved partly by machine learning capabilities what we see mostly is that there's just a machine learning wrapper around the results that traditional search engines return and so that partly solves the problem but it's just really difficult to scale mostly on large data sets then of course data scientists are able to make really nice classification models already but we see that data scientists are overqualified to do like most of the most of the work that they're actually doing like the pre-processing of data and of course they want to build models instead of just pre-processing and all that stuff and then of course manual effort that's that's really expensive and slow and mistakes can happen if you for example miss classified data here and this is where we fiat comes in and v8 is a vector search engine which means that it has built-in machine learning models to index data and yeah this automatic factor representation of data enables to search through it and this enables that you can find actually data without using exact matching keywords but just by providing context or semantics it is a it has a graph like data model so the database itself is not a graph database but it's built upon a graph structure and then next it's completely api based so it has a restful api but more importantly a graphql api which makes the user experience pretty good because you can exactly get what you're asking for and do semantic searches with this i'll show this later it's completely cloud native so you can run it anywhere it has a open source core which means well that's also why we're here for right so it it's all uh it's all run on um it's all all the code sorry it's on on github and you can you can see everything in here and then uh what we see right now is mostly used for automatic classification and semantic search but we also have use cases where vp8 is used as core infrastructure for a database so that's also possible so first i will i will show you how this uh works um i have a little demo here uh what you see here is the is what we call the vv8 console it's a graphical user interface what we built to to query alleviate and in this field i can make queries in this you will see the results in json format and for this demo i use the i use one of our two demo data sets which contains news publications and articles from the us and this contains about uh 3500 articles which is not that much but it's enough for for a demo of course so um yeah let's let's see how graphql works and how queries are built up and just to see what kind of data is in there so i always start like this and for now i want to see what kind of data is in there so i start with the get function and see what kind of things and then from here we can see what kind of classes we have defined so in this data set we can ask for articles authors categories and publications so let's see what kind of publications are in there and i just want to see their the name for now so i press enter and i see different um [Music] publications so i have around 20 publications in here financial times new yorkers folk etc and we could do the same with articles so if i do articles and the title then i see there there's many many articles and of all different kinds so this is about super bowl there's five reasons to live in cologne germany and so on but as you can see here this is there's no magic happening here i'm just requesting some data from my database this is not something really special um so now i would like to show how the semantic search then then actually works and this is where the power of rev8 is of course coming in so let's get back to the publications and if i want to do a semantic search i can add a filter to this class publication and we call we call this the explore function so we want to explore what kind of data is in there and then see the results and the concepts define your search term so let's say i'm looking for publications around the concept of fashion and i don't want to see everything returned but i want to be sure that we've had assured that 75 that the result is 75 certain that it's actually about fashion so what i'm doing now is i'm still getting things i'm getting publications and just their name but only those that are 75 percent uh sure that it's it's around the concept of fashion and now uh and this is where it gets interesting now only the publication focus returned and as you can see here it nowhere uses the concept or the word fashion and the fact that this publication is returned folk is just because there are articles for example linked to this publication that are about fashion that mention words like words like clothes and trends maybe but it has built this context around the publication that it knows it's about fashion so now if we change it to finance for example we see that folk disappears and we get back financial times and economies and of course we could we could do the same with uh with the articles so if i change publications to articles again ask for the title um maybe not about finance but now about traveling i get back all publications about traveling so the future of travel in 2020 uh cruises so here you see there's no word travel used but v8 knows that cruises uh is related to traveling and that's why it gets returned here and we can make these queries even more specific so let's say i'm not only interested in travel but specifically in in in sailing or traveling by boat or on the c then i can add a filter and it's called move to filter move to means i'm literally moving through uh the space of our data so i start with travel and i move i want to move to another concept and as i said let's move to sailing and we can move with a certain force let's apply it quite strong here and i press enter i see that only results around sailing or in this case cruising cruising rain is about rivers uh get return so that's how the semantic search works it you don't have uh to return only the data that has exact matching keywords but it's just about the semantics and the concepts um so now i just uh entered single words but this also works if you put a whole natural language sentence in there so let's say traveling in corona times and we see that if that we get an article back everything travelers need to know about the huan korana virus so it makes a search query around these concepts and i can quickly show you that we use a graph database or graph structure in the database so all the articles in this demo set are linked to certain publications so i can also ask for in which publications all the single articles appear i can do this like this and ask for the name so now i not only ask for the title but also for the publication and here i can see i have this was the first result so the everything travelers need to know about the coronavirus and is published in in cnn so this is where the graph structure comes in all right um so let's get back to the slides so how how does this actually work uh how how can it return things that don't have the exact matching keywords and this is uh because we built viviate in or we represent data in a large vector space and this is in contrast to like row column um there are traditional databases and also not in a graph structure but it's it's an effective space and a vector space in our case consists of 300 dimensions and in their words and concepts and data objects are placed using coordinates which are called factors and weaver learns the context of data objects and words by representing them in this 300 dimensional space and here i will use three dimensions for simplification because i mean who can imagine 300 dimensions so what you see here is actually an empty viviate and all the pink dots that you see that is that are concepts and words in the pre-trained language model as i explained earlier so if you use vvate it now comes with a pre-trained um language model which is used to index the data that you add later and how these dots are placed is about their meaning and their context so if i take an example here the coordinates are placed [Music] by means of their meaning so that also means that the distance between different points are uh yeah mean how how close and how far uh concepts in their meaning lie from each other and so in this example we have like fashion and sweater those are really related in their meaning but they are very far away from for example article and kovit 19. so as i said this is just an empty but pre-trained language model so there's there's no actual user data in there and so let's let's add a data object how does that work and i have an example of article here so let's say we want to add an article to our database with the name the impact of coronavirus on travel industry which has maybe a certain summary of more words it has links to authors and links to a publication what we they then does on import time is it takes all these concepts and makes yeah basically one large sentence or one large string of it and then it does some calculations namely uh it calculates how important each word is so you can imagine that for example the words coronavirus and travel and industry are more important they have more meaning than the words has and in and um it calculates distances and then comes with in the end one factor of 300 dimensions or three in our example and then it can be placed in the vector space so if we just add an article about corona virus and traveling maybe it will place in the middle of these three concepts and what then happens if you perform a search query is that the search query will also get indexed and placed in this vector space and then concepts and or data objects that will be close to your search vector will be returned first okay um i hope you're still with me after this this demo and explanation how it works so i will show you now how to get started uh with vv8 if you want to use it yourself um i'm not showing this with a demo because we don't have all the time of the world but i will quickly go through some documentation so if you are the documentation can be found at semi.technology documentation and then this is review so of course you can read all about review at first but then we have pages on getting started and on the quick start guide it basically explains everything you can do so i will place the links in the chat later yes thanks um sorry okay so um let's see here um so the quick start guide it explains you how to how to get started with docker compose and then make a first schema make you add your first data and uh do some first queries but this is all very basic so if you want to add for example more of your own data or want to have a real vp running in the cloud or in your own machine you can go to the installation page and we basically have four different setups so you can choose to use v8 with docker compose and you can then run it locally or on the cloud and we have a nice configuration tool also to to retrieve the the right configuration file for for docker compose and you can choose for example which language model language you want to have in there the second option is cloud deployment so vf8 is also available on google cloud marketplace and you can find the details there then thirdly we have a refit cluster service and this is if you want to have reviewed running in the cloud but you don't have your own cloud instances available then you can run it on our cloud services and you can try it out two weeks for free and it's all explained in the console so you need to make an account in the console and then you can create a cluster here and then the sandbox of two weeks is for free you can enable disable authentication you can even choose to have uh the demo data center that just showed you already in there and the language and then you can create it and it will take like five minutes to to start up this cluster before you can use it and then the last option is with kubernetes and that's really for large-scale production setups if you have really big data sets and so this is not if you want to get started i think but we have all the helm charts available if you're interested and then um since vp8 is all um yeah on api level let's say we have made already three client libraries in go python and javascript and i'll just show you python now really quickly it's available just via pip install and yeah you can use it really easily in your python scripts to do all the query operations and they are all explained in a restful api documentation and graphql documentation so for example in the graphql documentation this is one of the queries i just showed you so this is a simple query and then we also have it uh you can see how this is done in python javascript go or old fashioned with girl so yeah that's that's how you basically can get started using your own language as well and then we have different how-to guides if you want to have more details on how to get started with specific topics and then how to contribute so this is the main theme of this meetup of course um so we're currently working towards the standalone version vp8 is now still dependent on elasticsearch as a as a back-end graph sorry backhand database but in a bit more than a month we are moving to a standalone version so we're working hard on that but of course there are way more ways to contribute to the open source vba and i basically split this up into two areas so we have uh first of all you can of course contribute on code code on github um on one of our projects and second is uh also just providing feedback or ideas or testing in in words on one of our channels is of course also contributing on improving deviate and so on so first contribute in code or github so we have various open projects and um i'll just quickly show you where to find this and how to get started so first one is we have on github uh on vvcore we have a issues with the label good first issue so if you go to vivian's github i will share the link later also and go to issues then um you can filter with the label and you see um issues that are yeah good to start with that are like really easy and low level to start with currently we have one that will be more in the future for sure um second one is we want to have a review java client at some point so as i just showed you in the documentation we currently have three client libraries in gold python and javascript but since v8 um is yeah on api level and we have heard from our users that also they want to run vva from their java script or yeah like draft java codes then um yeah there's currently no like real client available and we want to make this available and like developing such a java client can be really like rather straightforward because they're like the three clients that we have are really good examples and in java it can be made with the same design in the same function structure basically and so in our documentation we also have contributors guide on the right side um where you can also find information on how to develop such a vivid client so we have certain guidelines for this um which functions it for example all needs to have before it can be fully used for vpa so so that's an option then we have are always looking for demo data sets so as i said we have two demo data sets available and running actually on cloud instances right now which you can directly use um but of course vv8 is a very generic solution to many many problems and many use cases so we're always looking for other data sets in other for example business use cases and i can show an example here so we have i've made a while ago a demo on archive scientific papers so that's like a data set of 1.7 million scientific papers and i made some scripts to pull the data from internet and then make a schema and then uh import it to deviate and make test queries and how i set it up also with like continuous integration and so on is all uh open on github as well of course so if you want to use viviate for your own project your own data set you can look at this example on how to get started with this and of course we are always open to collaborate with forming finding forming new data sets and running it on cloud instances for testing and so on then fourth is software testing so of course since it's a software project we do a lot of testing and this becomes even more important now that our like core v8 but also all the other github repositories are growing but also our user base is growing it's super important and then besides the usual uh like functional testing like unit testing and integration testing we also want to do uh usability testing or scalability testing for example and these are all cases that we uh do ourselves of course as well but if you want to test out on your own data set or with a diff with yourself as user with other users that's of course super great and super important to improve with y8 and then lastly we have quite extensive documentation and as most of you are new to to review and you will probably use the documentation a lot to to get started and and to use specific api functions and so on and any kind of feedback on this is really important for us um and for vvate because of course how the users start using it determines on how effie it will actually be used in their projects later uh so any kind of feedback is welcome not only um things that can be improved but maybe also things that you find really helpful so we can improve that and then yeah as i just showed you quickly already um we have a contributors guide on uh on the documentation so it's over here and in the contributors guide you can find all information on how we develop software and what the philosophy is behind vv8 and behind developing for vp8 um and also how to build run and test the code for example and as you can see here how to set up your local environment to get started developing for vva and then as i said some guidelines on making clients but also we have benchmarks on some tests that we do on the language model it can all be found here all right then uh secondly um you can contribute to improving vvate by uh just giving feedback in one of our channels so uh yeah as i said please just try out v8 uh uh see what what you can do with it and then you can bring your own use case on open or close data of course if it's open data that's super great because that means you can also share it with other community members um and also on one of our channels but of course you can use vva for for closed data as well um yeah as i said all ideas are welcome so you can think of uh also new features or features that you think are missing and and post a question on as an issue on github or on stack overflow or on slack or on one of our other social media channels because we read them all and we have active community community members on them all so that's great um yeah so that's what i wanted to share you about vv8 and how to contribute today ", "type": "Video", "name": "Weaviate Contributors Meetup #1", "path": "", "link": "https://www.youtube.com/watch?v=Gd5Fx0fOdfA", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}