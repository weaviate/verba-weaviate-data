{"text": "Weaviate Academy Unit 3: Imports. \nhey and welcome back in this video we'll talk about the specifics of how to import data into aviate so far you've learned that data in weba is represented by objects which belong to a class and have a set of properties in the previous section of the schema we learned how to create a framework for this structure in this section we'll discuss how to import data into aviate including our recommended best practices and some key considerations once you're done with this section you'll be ready to import a real data set into aviate by putting together what we've learned about the schema and imports to create a webiate object you must load your Source data build a data object by mapping your Source data to desired VPX object properties and add it to your desired class in waviate and optionally you can manually specify an object ID and the vector if an object ID is not specified maybe it will create one it's important to note that if you want to avoid duplicate objects being created you can use a deterministic object ID creation process if a vector is not specified webiate will check to see if a vectorizer is set for the class and if a vectorizer is set it will create a vector using the vectorizer to maximize import speed offers a batch import process this process reduces the impact of network latencies by processing multiple objects per request additionally clients like the python client perform the process in parallel further increasing the import speed you should use batch Imports to significantly improve the speed of data ingestion in doing so you can also set batch parameters such as batch size number of retries in case of failures and so on we strongly recommend that you use batch Imports for any bulk object creation unless you have a very compelling reason not to the batch import process is configured to handle errors at a batch level and at individual object level batch level errors are indicated by the HTTP Response Code for the batch request while object level errors are returned as a part of the response to the batch creation requests so it's important to note that even if a batch generates a successful 200 response there may have been individual errors at the object level we'll show you in the code examples below best practices on how to check by new errors through callback functions so to sum up to create a waviate object build a data object with properties and add it to a desired class we recommend that you use batch Imports unless you have a strong compelling reason not to because this can greatly impact your import speed error handling during import can be done at the batch level or at individual object level you can manually specify an object ID and Vector for each object in waviate okay that's it for now thanks for watching and we'll see you soon ", "type": "Video", "name": "schemas_import__imports", "path": "", "link": "https://www.youtube.com/watch?v=fpmjEN-93Og", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}