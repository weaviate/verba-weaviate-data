{"text": "This video dives into the new SQL-PaLM paper, exploring how well the PaLM LLM can be prompted to convert natural language ... \nhey everyone thank you so much for \nwatching weave it on YouTube today we're \ngoing to dive into SQL Palm improved \nlarge language model adaptation for text \ntestql so before diving into it maybe \nlet me give you three reasons why this \npaper is worth your time exploring so \nfirstly this could really reduce the \nbarrier of Entry to using databases if \nyou just have to write a natural \nlanguage question like you know what is \nthe average age of country music singers \ninstead of having to learn how to do the \nSQL syntax it makes more people able to \naccess databases and by people we also \nmean large language models in this whole \ntool use kind of thing so the second \nthing I think this is a really \ninteresting paper is just understanding \nfurther the zero shot few shot learning \nabilities of these large language models \nthey compare their fuse shot prompted \nPalm large language model with say these \nmodels that have been fine-tuned on the \nspider text SQL data set and they're \nfinding that basically they can prompt \nthis model to just instantly outperform \nthe previous models trained with \nsupervised learning and that brings me \nto the third thing is I think especially \nif you're interested in deep learning \nresearch this spider data set we're \nwhere they collect 7 000 queries across \n166 different database tables for \ntraining and then say like a thousand \nqueries on 22 databases for testing it's \na really interesting data set for how \ntext SQL is measured they also have \nthree variants of it spider synonym \nreplacement spider realistic and spider \ndomain knowledge that kind of tests this \nidea of you know how do we Benchmark how \nwell these models can write SQL queries \nI think this is super interesting for \nwevia weavate also has an aggregate API \nbuilt in as well so you can do these \nkind of queries with weave as well I've \ntested this kind of few shot prompt on \nwevia's aggregate syntax so we'll dive \ninto that and all sorts of fun details \nso thank you so much for tuning in and I \nhope you enjoy this paper summary this \nvideo will explain a super exciting new \npaper on text to SQL translation SQL \nPalm improved large language model \nadaptation for text to SQL really \nquickly before getting into the paper if \nyou like paper summary videos like this \nplease leave a like And subscribe to the \nchannel it really helps encourage us to \nmake more content like this so let's \ndive into it with a two minute tldr \noverview so the high level task of text \nto SQL is to translate natural language \nquestions into SQL structured query \nlanguage questions or syntax so we take \na question like what are the names and \nrelease years for all the songs of the \nyoungest singer and then we translate \nthat into the SQL query based on our \nattributes of the table select song name \nsong release year from the table singer \nand then order the results by age in \nascending order and limit the results to \none for just this uh youngest singer so \nthis is the high level idea being able \nto ask databases questions in just a \nvery natural way and then under the hood \nthe large language model is translating \nthe natural questions into the \nstructured query language so one of the \nkey investigations of this paper is \ncomparing the performance of few shot \nprompting the Palm model Palm is one of \nthe giant pre-trained large language \nmodels one of the you know 500 billion \nparameter free trained models so we're \ngoing to be exploring how well you can \njust few shop prompt this compared to \nthe performance with say fine tuning \nPalm on the spider data set and \ncomparing with you know the current \nstate of the art all the existing models \nthat have been fine-tuned and deployed \nmiscellaneous training tricks and \ninference tricks to perform this task of \ntext SQL translation so quickly what \nthat looks like is when you're doing few \nshot prompting \nin the input you give it examples of a \ndatabase schema and a natural language \nquestion and then the corresponding SQL \ntranslation so you in this a diagram \nyou're just seeing two examples of this \nin the input that's kind of one of the \nquestions a few shot prompting is you \nknow how many examples to give whether \nthese examples should be tuned to be \nmore in line with the downstream \ninference but then what you do is you \nthen have this novel inference schema \nthree plus question three and then it \ngenerates the new SQL so Infuse shot \nprompting it has these references of the \ntask to you know to reference and sort \nof learn from in the input window which \nis you know one of the super interesting \nemergent abilities of large language \nmodels compared to the more standard \ninference setup where you just have the \nnovel input and then you know you \ngenerate the output so a is exploring \nthe few shot prompting B is exploring \nfine tuning Palm on the data set the \nspider data set of text SQL translations \nand then just seeing single inference \nsingle output kind of setup so this is a \nquick additional look at what this would \nlook like when you're talking about \ngiving it the schema you're talking \nabout compressing representations like \nthis into text to prompt the model so \nsay you bolded singer as the table and \nthen it has the keys singer ID name \ncountry song name and so on so \ninterestingly you say have like foreign \nKeys when you when you're looking at \nconcert and you need to join say concert \nID and Stadium singer in concert so you \nhave a lot of interesting ideas of how \nyou could kind of extend this and it's \nalso worth mentioning that this is \nmostly about kind of like a surface \nlevel SQL interface not like the \nunderlying optimization of how the data \nis stored but \nyou know offering this kind of interface \nin natural language so so this is the \nidea of taking these questions and then \ntranslating them into not into SQL based \non giving it the table in as a part of \nthe input so another really interesting \ndetail this paper are the data sets that \nthey use to evaluate this spider is a \ncollection of about uh 7 000 trading \nqueries I think a thousand testing \nqueries across 166 database schemas for \ntraining in something like 22 for \ntesting so they also have these variants \nof the spider data set as the text to \nSQL research Community has iterated and \nlearned about this these things so \nspider's synonym is about manually \nmodifying natural language questions \nwith synonym substitutions so instead of \nhow many singers do we have and singers \nmight be like two kind of on the nose \nwith the database schema you say how \nmany vocalists do we have ideas like \nthis to try to like test the robustness \nof how well the models perform when the \nnatural language question starts to \ndeviate from you know something that's \nclosely aligned with the database schema \nso it was spider realistic that removes \nthe mentioning of column names so \ncompared to the question how many \nconcerts are there in year 2014 or 2015 \njust more natural how many concerts are \nthere in 2014 or 2015 and then spider \ndomain knowledge is where you're adding \ndomain knowledge so you know list all \nsong names by singers above the average \nage and then hard to answer age-related \nquestion based on the you know if you \nonly have the uh the birthday column so \nso you need to like derive birthday from \nthe table and then answer the question \nby age and other examples like this so \nquickly before diving further into the \ndetails of the SQL Palm experiments I \nwant to quickly remind you that you can \ndo these symbolic aggregation queries \ndirectly in weviate using the aggregate \nAPI so in weavate if you have a class \nlike maybe just to continue on this if \nyou have say the singer class you \nsimilarly have these properties where \nyou have you know Joe sham is a text \nproperty or say you have age which is a \nyou know an in property or Ismail is a \nBoolean property in weeviate's aggregate \nsyntax you can then access these kind of \nsymbolic aggregations using this syntax \nso say you want to see which of your \nsingers appears the most in your data \nset you would do name and then top \noccurrences so you want to see the \naverage age you could similarly do this \nyou know age mean to access that or the \nBoolean total true total false this kind \nof thing and then if you want to do this \nkind of joining as well you would do you \nknow say singer and then say singer and \nthen the relation is performed in \nconcert concert you would do you know \nperformed in concert dot dot on concert \nand then now you're in the concert class \nand you can keep using all this kind of \nsyntax so that's how you do this in we \ngate we're going to look at a few shot \nexamples showing that this exact kind of \nthing works in weavate which is super \ninteresting so if you want to do this \nsymbolic joining queries aggregations of \nyour metadata you can also do that in \nweeviate there's another super super \nexciting connection of This research \nwith weeviate we're going to dive into \nthis more at the very end of the video \non some key takeaways but Lang chain \nllama index they've recently been \npromoting this self querying retriever \nkind of idea which is really amazing and \nwhat it is is you take a query like what \nis a golden doodle and you add filters \nto make it filtered Vector search to \nstep back a bit weavate Vector databases \nare about building these Vector index \nstructures to allow approximate nearest \nneighbor search at absolutely massive \nscale in addition to just kind of \ntraversing the proximity graphs to find \nthe nearest neighbor's distance wise we \nalso can connect them that match \nsymbolic filters so say you want to \nbuild one index and then have a symbolic \nproperty like the source of the index so \nsay it's you know text passages and then \nyou have a filter on you know whether \nit's comes from Wikipedia it comes from \narchive or comes from Reddit you can add \nthese filters onto the query and it will \nTraverse the vector index with that \nfilter so it's really interesting the \nidea of enabling these you know query \nrouters to either say which of these \nclasses do you want to search through or \nwhat kind of filters do you want to \napply on searching through the vector \nindex so we'll talk about that at the \nend but this is another kind of \nconnection to this idea of using these \nlarge language models or you know just \ngenerally the capabilities of language \nmodels to help facilitate the query \ninterfaces so coming back to the SQL \nPalm paper let's look at some examples \nof natural language questions and their \ncorresponding SQL translations as well \nas the database tables in reference so \nfirst of all imagine this question what \nis the average minimum and maximum age \nof all singers from France we have this \ndatabase table with the tables Stadium \nsinger concert singer in concert and \nthen we need this to produce this query \nselect average age Min age max age from \nsinger where country equals France so \nthe large language model needs to look \nat the table look at the keys infer this \ncountry property and then generate this \nquery so already I think something \nthat's really interesting about this and \nyou know previewing the weeviate angle a \nlittle bit is how right now what we're \ndoing with this SQL Palm paper is we're \njust giving it the names of the \nproperties without any kind of \ndescription of what the properties are \nor say you know if it's a categorical \nproperty which of the values it can take \non and maybe some kind of description of \nthe categories as well or say it's like \nan integer the range that it can take on \nso a lot of interesting things for \nextending this further but right now it \nseems like just semantic Keys is working \nfor this kind of translation but maybe \nthat's a direction to take this further \nso here's another question show name \ncountry age for all singers ordered by \nage from the oldest to the youngest so \nagain we take the exact same data schema \nas the the first example and we \ntranslate that this query into \nselect name country age from singer \norder by age in descending order so \nagain it needs to do an inference about \nthe age ranking and then produce this \norder by age descending order so this is \na great example of taking the natural \nlanguage query inferring the intent that \nthe user wants and then Translating that \ninto this particularly order by age \ndescending order thing so next up we \nhave our first example of needing to \njoin tables together so we have the \nquestion what are the names of Nations \nwhere both English and French are \nofficial languages we have this table \ncountry and country has the foreign key \ncode which is How We join with country \nlanguage country code so what we need to \ndo is we have this um you know from \ncountry as T1 join country language as \nT2 on t1. code equals t2.country code \nwhere and then it learns to parse out \nthe the English and French are the \nlanguages and then it needs to then get \nthe names from the top of it it also \nneeds to check this condition is \nofficial from the artificial languages \nso we're already starting to see an \nexample of a query where you know doing \nthis query out might require some \nknowledge of SQL some experience of \ndoing it especially to you know like \nquickly slash instantly translate this \nnatural language query into this kind of \nthing so this is a really example \ninteresting example of introducing \njoining tables together in this picture \nof generating text SQL queries the next \nquery is what are the number of concerts \nthat occurred in the stadium with the \nlargest capacity so now we're doing an \naggregation we're selecting the count \nfrom concert where Stadium ID equals and \nthen we have this nested query idea idea \nwhere we select Stadium ID from stadium \nand then we order by the capacity \nbecause we want the largest capacity and \nthen we want to just limit it one \nbecause we just want the largest \ncapacity not like a list of the you know \ntop five largest capacities so now we're \nseeing this concept of an inner query \nsuper interesting concept again of \ntranslating this into the SQL next up we \nhave a super interesting query find the \nfirst name of students who have both cat \nand dog pets and we have the database \ntable student has pet and then pets so \nwhat we're going to do is we're going to \nfirst sub-sample from each of the tables \nso first We join the student has pet \npets tables with the condition uh pet \ntype equals cat pet type equals dog and \nthen we're going to do the intersection \nof those two tables of students who have \ncats and students who have dogs to find \nthe first name of of the students who \nhave both cats and dogs or a cat and a \ndog as a pet so this is the first case I \nthink where we're starting to wade into \nthe Waters of query optimization their \nSQL is built on this idea of relational \nalgebra where basically you do these uh \nlike set pruning set operations that \nwill filter the set so say you know you \nhad a thousand a thousand objects in \nyour database table and this one filter \nwould potentially reduce it down to like \n20 objects compared to whereas this \nother one would reduce it to you know \n500 and then you're joining that with \nanother table so there's a question \nabout the order of operations for how \nyou apply this kind of set filtering to \nreduce the cardinality of how many \nobjects are in your databases hopefully \nthat was a decent overview I definitely \nneed a brush up on my relational algebra \nbut to get the general sense of there's \nsome optimization behind you know how \nyou apply filtering operations and then \nthe order the order in which you apply \nfiltering and Joint operations the next \nquery \nso this is a pretty complex one what are \nthe IDS and names of all the countries \nthat either have more than three card \nmakers or produce Fiat model so in this \ncase we have the union of these two \nconditions on the database tables so \nwe're joining together uh you know the \ncountries with the car makers so we have \nuh six different database tables in this \nso another case of the this example \nparticularly is a great example where \nyou know you would you would need to \nhave written some SQL to have quickly \ntranslated this into this select \nt1.country ID from country so this I \nthink is the perfect example of why we \nneed these models and how this \nfacilitates this kind of natural \nlanguage question shown on the top down \ninto this SQL syntax so quickly before \nmoving on from the SQL query examples I \nwanted to run a little test of how well \nthis would work with leviate's aggregate \nsyntax so the way that I structured The \nPrompt is first I give it a description \nof the API syntax so the aggregate \nfunction is structured as follows then \ngive it that same you know graphql all \npossible things you could do with it \nblock \nas shown previously and then I give it \nthe new schema so I you know I like to \nplay with this webia podcast search \nexample so I have podcast clip that has \nproperty speaker content podcast number \nand the duration of the podcast then \nanother quick description of the task \nyour task is to take a query and \ntranslate it to the appropriate \naggregate syntax based on the syntax \nprovided above and the data schema so \nthen a training example who is the most \nfrequent speaker in the podcast Clips \nyou know and then this would be the how \nyou do that you top occurrences value \noccurs and so now the test query of how \nlong was the longest podcast clip so \nrunning this live hopefully works \nso yeah that's exactly correct and so we \nsee how it's able to do this translation \nand maybe that's not the most confusing \nquery as we saw some really confusing \nqueries but just to get a general sense \nof how this might look with weaviate and \nthe things we can do with this kind of \nlarge language model translating from \nnatural language into structured query \nlanguages so let's get into the data \nsets that were used to evaluate Palm's \nability to write SQL queries and a \nlittle more background on this field of \nresearch called text to SQL so to take a \nquote from the paper text SQL is a \nlong-standing challenge crucial to \nenhanced database accessibility without \nrequiring expertise of SQL so this angle \nis the you know the general human \naccessibility trying to help more humans \nuse SQL systems you know as easily as \npossible get running as quickly as \npossible and then the other angle text \nSQL enables the development of \nconversational agents with Advanced data \nanalytics abilities so there's a lot of \ntalk about you know tool use large \nlanguage model agents that use tools and \nthis is about helping them helping the \nagents make SQL queries these symbolic \naggregations to acquire information like \nas we mentioned like I don't know I \nthink it was like how many concerts were \nperformed in the largest stadium or \nthings like this to enable large \nlanguage model agents to acquire that \nkind of information from structured \ndatabase tables so This research of text \nto SQL the flagship data set has been \nspider spider is the imagenet of text \nSQL or the beer like the you know the \nthe big data set for this research \ncategory spider contains 7 000 training \nsamples across 166 databases and 1034 \ndevelopment samples across 20 databases \nso having examples of a database schema \nand then corresponding natural language \nto query translations based on that \ndatabase table so similar to say \nimagenet C and you know the the \nrobustness corruption tests around \nimagenet spider has these variants \nspider synonym this describes manual \nreplacement of synonym substitutions in \nnatural language questions so you know \nsometimes the questions they they \nexplicitly kind of match the key in the \nschema so you so they replace this to \nsee how robust these models are when the \nquestion isn't so on the nose and \ntalking about exactly the property in \nthe table spider realistic is about \nremoving any mentions of column names in \nthe queries so similar idea instead of \nreplacing it with a synonym you just \noutright destroy any uh mention of a \ncolumn and then domain knowledge this \none I think is a little more nuanced \nthis is where you need to kind of derive \na property from one of the attributes so \nit was I wasn't completely sure of that \nso with that said let's dive into some \nexamples from the spider the original \nSpider data set which are categorized as \neasy medium hard and very hard so \ncharacterizing each you know train input \noutput example is easy medium hard extra \nhard this is a pretty standard practice \nin deep learning for programming \nlanguages like say a lot of these data \nsets constructed on like code forces or \nleak code they also have this kind of \ncategorization to it it'll be really \ninteresting to do this for imagenet and \nall that stuff as well but let's take a \nlook at the you know the training \nexamples and how difficult they've been \nlabeled as so an easy SQL question what \nis the number of cars with more than 4 \ncylinder cylinders just you know select \ncount from Cars data where cylinder is \ngreater than four then a medium question \nfor each Stadium how many concerts are \nthere and so I think this is graduates \nfrom easy to medium because now you need \nto join the concert table with the \nstadium table based on these IDs and \nthen you need to you know select the \ncount of the concerts and you also \nintroduce the group by syntax and you \nknow grouping the same IDs to you know \naggregate the concerts anyways so then \nthe hard question I think then you're \njoining together three tables country \ncontinents and car makers so you know \nextending the joining you have the \ncondition having as well uh which is \nsimilar well you have a condition on the \naggregation so maybe that's part of what \nmakes it hard versus easy and then extra \nhard I think you have this nested query \nnot in where you also have this kind of \njoin in the nested queries so a little \nbit more maybe there's more to the \ndifficulty levels with respect to \nqueries that have that kind of \nopportunity to optimize with the \nrelational algebra I'm not like a super \nan expert on this I'm just familiar with \nrelational algebra but maybe that's \nsomething that could also factor into \nthe categorization of the difficulty of \nthe queries okay so now that we have a \nsense of what the data set looks like \nexamples of these questions that are \nbased on these schemas and then the \ncorresponding natural language test \nskill question the key detail that we're \ngoing to be exploring in this paper is \nhow well these this SQL this Palm model \ntaken off the shelf and prompted with a \ntask description and a few of these \nexamples how well can that translate \nnatural language into SQL and how does \nthat compare with fine-tuning a palm \nmodel on these input output pairs so \nfirstly let's dive a little deeper into \nthe few shock prompt in the appendix of \nthe paper they have the exact prompts \nfor how they're going to compress tables \nwith the questions and do this few shot \nprompting so we're at the end of the \npaper and we're looking at the exact \nprompt that was used to prompt the Palm \nmodel to translate natural questions \ninto SQL so the first thing to note is \nthey're going to ablate two details a \nconcise prompt design compared to the \nverbose prompt design and this is kind \nof what I was mentioning earlier where a \nverbose prompt design is where you you \nknow you give it the attribute and then \nyou tell it the type of the attribute I \nthink it could be interesting also to \nkind of say it's a category attribute to \nextend this with the different \ncategories I think this would be sort of \nessential for that self querying \nretriever idea we mentioned at the \nbeginning but anyways I think that's \ngetting distracted from this but so \nbasically verbose prompt is where you \nreally tell it about you know these are \nprimary Keys these are foreign keys and \nyou know you give it a lot of \ninformation compared to concise where \nthe syntax is a little more maybe let me \nzoom in to make it easier to see whereas \nthe zoom in is just giving it the values \ndirectly so basically what you're doing \nis you start off by telling it the task \nthis is a task converting text into SQL \nstatement we will first give the \ndatabase schema and then ask a question \nin text you're asked to generate SQL \nstatements so then here's an example \nhere's an example so these are the few \nshot examples so they're annotated as \nhere is an example convert text to SQL \nso then you have the schema values \nso in this case it looks like the tables \nare separated with this um like Farm \ncolon uh yeah so this is City okay so \nthat's what that looks like uh then you \nhave the column names associated with \nthe \nschema oh so you do have the type so you \njust have a little more verbose way to \nsay in the type so sorry if I get bad \ninformation uh so then you have the \nquestion example so what are the themes \nof farm competition sorted by urine \nascending order and then you have the \ncorresponding translation so so you give \na couple examples of these and then when \nit comes to be test time you have here's \na test question to be answered convert \ntext SQL you have the new schema the new \nexplanations of the types of the columns \nthe primary Keys foreign keys and then \nthe question how many singers do we have \nand then generate the SQL in addition to \nthe comparison between concise and \nverbose prompting the authors are also \ngoing to explore consistency filtering \nand execution filtering so to give a \nquick background before we'll dive into \nthe open AI playground and get an \nexample of what this kind of Randomness \nin large language model decoding looks \nlike consistency filtering is mostly \nused in question answering is where you \nsample diverse reasoning paths and then \nthe ones that end up at the same answer \nsorry answering they end up at the same \nanswer that's going to be the final \nquestion so if it's like mathematical \nreasoning and then you're like breaking \ndown the steps of doing the math by \ndecoding different paths in the language \nmodel output then you just aggregate the \nfinal answers it's the most consistent \nlike say 40 if we're adding numbers or \nsomething and then that would be the \nanswer that you give in the question \nanswering execution filtering is unique \nto programming languages this is where \nyou sample the diverse outputs but then \nyou put the outputs through the code \nexecutor and then similarly how many \nended up with the same output so you can \nuse this for you know SQL python all \nthis kind of stuff you can take the \ndifferent code generated and then \nexecute it and then whatever the most \npopular output is that's what will get \nsent as the answer okay so we're in the \nopen AI playground and we're going to \ndive deeper into how consistency \nfiltering works so the idea is that \nwe're going to sample diverse candidates \nfrom large language models as we decode \nthem with Randomness we have temperature \nset to one and we're asking the language \nmodel please write a one sentence \nsummary of kubernetes for a \nfive-year-old please be as creative as \npossible so the first time we ask it \nthis it says kubernetes kubernetes is \nlike playing with Legos to build a \nsuperhero City in the cloud okay so that \nwould be you one potential generation \nthen we sample another generation \nkubernetes is like a magical box that \nhelps get your work done faster so \nthat's an example of how we can sample a \nyou know diverse outputs this is similar \nto the idea of like tree of thoughts \nwhere you you know go down all these \nreasoning paths so maybe another example \nwould be uh you know how many people are \nin America please show each intermediate \nstep as you you know determine this \nanswer \nand then so this is kind of like \nsomething that maybe requires reasoning \nso \nyou know it's sort of like a \nhallucination also to ask it to do this \nbut okay so it came up with \ncalculated people so it's saying you \nknow 331 000 so this is like the final \nanswer so then consistency filtering \nwould be we just keep sampling from it \nand then see if it keeps coming to that \nsame 330 Million number I don't know if \nthis is the best example of that but you \nsee how instead of doing the step two it \njust did it after step one you do this \nkind of thing but for writing python \ncode SQL code you sample a bunch of \ndifferent Pathways and then the final \nanswer because in question answering \nconsistency filtering is just about is \nthis answer the same whereas with code \nexecution filtering you take the green \nthat it generated like you know write a \nPython program for bubble sort and it \nyou know write this python code and then \nyou would put that into the python \nexecutor and then consistency of the \noutputs so quickly before diving fully \ninto the results the authors do find a \nsignificant benefit by doing this \nconsistency and execution filtering you \nsee you know no consistency down to 77 \nthen the execution filtering 79 compared \nto you know up to 83 with the exact \nmatching or the execution accuracy of \nthe SQL queries so I think this is a \nsuper interesting idea for this was one \nof my favorite ideas and say the Lang \nchain chains is taking the output of the \nlanguage model putting it into the say \nthe python reple and then seeing the \noutput and then chaining where the \nlanguage model then sees the output and \nsays okay is this the output the authors \nactually are going to conclude that they \ndidn't find good results of putting the \nerror messages for queries that didn't \npass into the back into the prompt and \nsaying hey here's the error that you got \nfor this but I think generally that kind \nof that I mean like that's how I \npersonally code as a human right is I \nsee the error and I iterate on the error \nso I think there's probably something to \ncontinuing to mine these chains of \nexecution filtering okay so let's dive \ninto the results now that we have an \nunderstanding of what the spider data \nset is what it measures these text SQL \ntranslations given a schema as well as \npart of the input and we have a sense of \nfew shot prompting versus say \nfine-tuning the model as well as say \nthis consistency filtering execution \nfiltering concise prompt verbose prompt \nablation so firstly what we're seeing is \nthe comparison of these few shot SQL \npalm versus the fine-tuned SQL Palm so \nthe first interesting detail is that \nthey don't find much benefit by \nfine-tuning the model this is actually \nan absolutely enormous detail because it \nit simplifies using this like crazy like \nif if you don't need to fine-tune the \nmodels and you don't need to think about \nlike all this stuff around constructing \nthe data sets the batching the you know \nthe the evaluation or the model \nversioning all that kind of stuff that \nwould come with if you really needed to \nfine tune these models to get it to do \ntasks like that so they do find good \nperformance in the fuse shot I mean it's \nprobably worth \nnoting that say we're doing the weeviate \ntrend we're writing weeviate aggregate \nqueries or you know you're trying to \ncustomize this to any arbitrary API it \nmight it might not have as much domain \nknowledge of that in the pre-training \ndata because surely palm and its \npre-training Corpus has SQL examples \ninformation about SQL in it so that \nmight be slightly biasing the results as \nwell but super interestingly so we're \nseeing 82.7 from the fuchsia model \ncompared to 84.1 from the fine-tuned \nstate of the art another kind of Reason \nthough the fine-tune state of the art \nmight be a little more interesting is \nbecause of this three billion parameter \nso it's gonna be a little cheaper to run \nthis is another one of the big Topics in \ndeep learning is can we use maybe these \nmodels to generate training data to then \ndo knowledge distillation and then have \na much smaller model that costs us less \nfor inference so you know is it really \nworth it if every time we run these \nqueries it costs us like two cents to \ntranslate it to the SQL especially when \nthe large language models are doing them \nautonomously so it's an interesting \ndetail these three billion parameter \nmodels that are you know pretty on par \nand we could probably use these models \nin a different way to distill them but \nnevertheless if you're a trans like \nagain is using this example of the \nweeviate aggregate query translation I \nthink that's the most interesting \nmotivating case of the few shot because \nyou know you're you're getting it to \nlearn this new API as fast as possible \nwithout collecting train data or \nanything like that so here's another \nexample breaking down the performance \nfrom easy medium hard extra hard so you \nknow probably the biggest takeaway is \nthat you do see this like monotonic \nperformance decrease from easy to medium \nhard extra hard so that's a pretty \ninteresting detail of this so especially \nif you're you know planning on if you're \ninterested in designing systems like \nthis if you should probably have some \nkind of maybe a classifier that says how \nhard the question is stuff like this or \njust generally logging the queries that \nfail and overall trying to work to get \nthese models to perform better on the \nhard questions but just an interesting \nthing to see \nso then we have the variants of spider \nso again we have the synonym replacement \nuh the more realistic questions where \nyou deleted any mention of the column \nname and then the domain knowledge I \nactually wasn't really able to figure \nout exactly what that is so uh so \ncomparing with the chai gbt open AI \ndefault prompt this is another really \ninteresting detail I'm sorry I forgot to \nshow this in the video but open AI they \nhave a recommended prompt for writing \nSQL queries so what they're showing is \nthey're uh they're more verbose problems \nwith the consistency filtering execution \nfiltering \nimprove the performance and then you see \nthe robustness across the uh the \ndifferent data sets you know it's still \nthis three billion parameter model is \ndoing a pretty good job which is \nexciting because this would be cheaper \nto run \nso then we have the ablation of the \nconcise versus verbose prompting so \ninterestingly the concise prompts \nperform better which they perform about \nthe same but like the you know not \nreally giving it these long descriptions \nof the properties I think it really \ndepends on this and you know we're gonna \nI think the verbose prompting is more \nexciting going forward for the k for the \ncase of filtered Vector search with that \nself querying retriever thing because we \nwant to you know filter it based on \nproperty so I think it needs to have \nsome sense of what the properties are \nlike what the potential values that you \ncould filter with so definitely an \ninteresting topic as well so here's some \ndiscussion topics from the authors they \nsay that you know once they fine-tuned \nthe model so you know converting this to \nthis the sampling diversity \nsignificantly reduced so that kind of \nconsistency filtering execution \nfiltering they had less diversity and \nthus that technique on top of the \ninference was less effective they also \nfound that as mentioned earlier the \nself-correction giving it the error \nmessages when it doesn't work that that \ndidn't work that well which I thought \nwas kind of interesting and then they \nfind that you know that there are some \nproblems in evaluation data set they \ngive this comment that many of the \nerrors are actually correct according to \nhuman experts so here are some of my \npersonal Reflections and takeaways after \nreading the SQL Palm paper so first of \nwhich I think coming up with some kind \nof Auto API for weviate aggregate I \nthink this is low hanging fruit it \ndefinitely seems like something we can \nachieve with using the openai large \nlanguage models or the Palm that's just \nany of these large language model apis \nthat we already have in place for say \nthe Eva generate modules we could \nsimilarly put this after the query to \ntranslate it into these aggregate \nqueries which then the next question is \nhow exactly we want to design this \npipeline so maybe it should First Take \nYou know the auto API should be so \nopen-ended that you just have a query \nand then the classifier or the language \nmodel first says is this aggregation \nquery or a get query and then the third \nthing so so this is kind of just a \nlittle layer on like is this an \naggregate query or is this a vector \nsearch query and but you can also apply \nVector search within here to you know to \nsay you want say you have tweets and you \nwant to say like like you know similar \nto this tweet you like exactly paste the \ntext for your new tweet and then you \nwant to aggregate I don't know say like \nthe likes or something from that I've \ngiven a talk on this at odsc London \nthat's also on alleviate YouTube if \nyou're interested in that kind of topic \nof the combination between Vector search \nand then symbolic aggregations I think \nit's a pretty interesting topic but \nanyway getting a little distracted but \nso then what I want to talk about is \nfirst of all this query routing idea \nso first of all imagine you have two \ndifferent classes in weeviate you have \nall the podcast podcast transcriptions \nand then you have like the Wii V8 code \nbase and you're asking a question like \nyou know how is this particular thing \nimplemented first asking that question \nthe language model of which class should \nyou search then this idea that I love \nwhich is which filters to add so this is \nthe you know self querying retriever you \nask what is a golden doodle and imagine \nyour passages have this attribute about \nwhich animal they're talking about you \ncan then filter the search space \ndramatically with that so say we have \nlike I don't know we have like a 5 \nmillion scale passages about animals so \nthen asking it what is a Goldendoodle if \nyou can do that filter where animal \nequals dog then you dramatically \nsimplify the search space so it's a \npretty interesting thing thinking about \nthese categories I think it's most \nstraightforwardly manifested with you \nknow like price filters so say you you \nknow like take a picture from a shirt \nfrom like Louis Vuitton or one of those \ndesigner Brands then you just drop that \ninto Amazon you say you know image \nsearch shirt like this for you know less \nthan a hundred dollars and not having to \nknow how to parse out the wear filtering \nthe the large language model under the \nhood parts of that out for you the next \nreally interesting topic I think is \nconnecting surge primitive so you know \nwe have these you know we have all sorts \nof different features for search and we \nV8 so say you have like you know you \nobviously have the wear filters we just \ntalked about but you also have Vector \nsearch bm25 Hybrid search or say you \nwant to re-rank the search results can \nwe kind of automatically construct a \nsearch pipeline for doing this kind of \nthing and then sixth thing is this \nconcept of generative feedback loops \nwhere we take data from the database you \nknow send it to the large language model \nand then save the result back to eviate \nI think in a lot of cases these you know \nlike when you're doing these kind of \nsymbolic aggregations you might want to \nsave the fact that you derived maybe as \na natural language fact into some kind \nof Text corpus like I know generally \nlike when I'm using SQL like back when I \ndid that kind of thing I if I had a \nquery that was useful I would save that \nquery for reference later so I wouldn't \nalways have to remember how to write it \nso maybe there's something to that in \nsome kind of connection with generative \nfeedback loops but overall my takeaway \nis I think this kind of idea of \nautomatically writing these kind of \naggregate queries exact same ideas the \npaper I think that's also something that \nwe could achieve in Wi-Fi and it's quite \nexciting so thank you so much for \nwatching this paper summary of SQL Palm \nagain if you like content like this \npaper summary content please leave a \nlike And subscribe to the channel it \nreally helps encourage us to make more \nvideos like this please check out wevv8 \non weavate iO or the open source GitHub \nrepository web \nand please follow us on Twitter at \nwebiate IO thank you so much for \nwatching \n", "type": "Video", "name": "SQL-PaLM Explained!", "path": "", "link": "https://www.youtube.com/watch?v=g3ocV0a_G2c", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "hey everyone thank you so much for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "watching weave it on YouTube today we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "going to dive into SQL Palm improved", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "large language model adaptation for text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "testql so before diving into it maybe", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "let me give you three reasons why this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "paper is worth your time exploring so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "firstly this could really reduce the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "barrier of Entry to using databases if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "you just have to write a natural", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "language question like you know what is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "the average age of country music singers", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "instead of having to learn how to do the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL syntax it makes more people able to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "access databases and by people we also", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "mean large language models in this whole", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "tool use kind of thing so the second", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "thing I think this is a really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting paper is just understanding", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "further the zero shot few shot learning", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "abilities of these large language models", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "they compare their fuse shot prompted", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "Palm large language model with say these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "models that have been fine-tuned on the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "spider text SQL data set and they're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "finding that basically they can prompt", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "this model to just instantly outperform", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "the previous models trained with", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "supervised learning and that brings me", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "to the third thing is I think especially", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "if you're interested in deep learning", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "research this spider data set we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "where they collect 7 000 queries across", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "166 different database tables for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "training and then say like a thousand", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "queries on 22 databases for testing it's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "a really interesting data set for how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "text SQL is measured they also have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "three variants of it spider synonym", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "replacement spider realistic and spider", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "domain knowledge that kind of tests this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "idea of you know how do we Benchmark how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "well these models can write SQL queries", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "I think this is super interesting for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "wevia weavate also has an aggregate API", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "built in as well so you can do these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of queries with weave as well I've", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "tested this kind of few shot prompt on", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "wevia's aggregate syntax so we'll dive", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "into that and all sorts of fun details", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "so thank you so much for tuning in and I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "hope you enjoy this paper summary this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "video will explain a super exciting new", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "paper on text to SQL translation SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "Palm improved large language model", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "adaptation for text to SQL really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "quickly before getting into the paper if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "you like paper summary videos like this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "please leave a like And subscribe to the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "channel it really helps encourage us to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "make more content like this so let's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "dive into it with a two minute tldr", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "overview so the high level task of text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "to SQL is to translate natural language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "questions into SQL structured query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "language questions or syntax so we take", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "a question like what are the names and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "release years for all the songs of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "youngest singer and then we translate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "that into the SQL query based on our", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}, {"text": "attributes of the table select song name", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 70, "tokens": 0, "vector": null, "score": 0}, {"text": "song release year from the table singer", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 71, "tokens": 0, "vector": null, "score": 0}, {"text": "and then order the results by age in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 72, "tokens": 0, "vector": null, "score": 0}, {"text": "ascending order and limit the results to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 73, "tokens": 0, "vector": null, "score": 0}, {"text": "one for just this uh youngest singer so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 74, "tokens": 0, "vector": null, "score": 0}, {"text": "this is the high level idea being able", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 75, "tokens": 0, "vector": null, "score": 0}, {"text": "to ask databases questions in just a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 76, "tokens": 0, "vector": null, "score": 0}, {"text": "very natural way and then under the hood", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 77, "tokens": 0, "vector": null, "score": 0}, {"text": "the large language model is translating", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 78, "tokens": 0, "vector": null, "score": 0}, {"text": "the natural questions into the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 79, "tokens": 0, "vector": null, "score": 0}, {"text": "structured query language so one of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 80, "tokens": 0, "vector": null, "score": 0}, {"text": "key investigations of this paper is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 81, "tokens": 0, "vector": null, "score": 0}, {"text": "comparing the performance of few shot", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 82, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting the Palm model Palm is one of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 83, "tokens": 0, "vector": null, "score": 0}, {"text": "the giant pre-trained large language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 84, "tokens": 0, "vector": null, "score": 0}, {"text": "models one of the you know 500 billion", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 85, "tokens": 0, "vector": null, "score": 0}, {"text": "parameter free trained models so we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 86, "tokens": 0, "vector": null, "score": 0}, {"text": "going to be exploring how well you can", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 87, "tokens": 0, "vector": null, "score": 0}, {"text": "just few shop prompt this compared to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 88, "tokens": 0, "vector": null, "score": 0}, {"text": "the performance with say fine tuning", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 89, "tokens": 0, "vector": null, "score": 0}, {"text": "Palm on the spider data set and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 90, "tokens": 0, "vector": null, "score": 0}, {"text": "comparing with you know the current", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 91, "tokens": 0, "vector": null, "score": 0}, {"text": "state of the art all the existing models", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 92, "tokens": 0, "vector": null, "score": 0}, {"text": "that have been fine-tuned and deployed", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 93, "tokens": 0, "vector": null, "score": 0}, {"text": "miscellaneous training tricks and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 94, "tokens": 0, "vector": null, "score": 0}, {"text": "inference tricks to perform this task of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 95, "tokens": 0, "vector": null, "score": 0}, {"text": "text SQL translation so quickly what", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 96, "tokens": 0, "vector": null, "score": 0}, {"text": "that looks like is when you're doing few", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 97, "tokens": 0, "vector": null, "score": 0}, {"text": "shot prompting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 98, "tokens": 0, "vector": null, "score": 0}, {"text": "in the input you give it examples of a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 99, "tokens": 0, "vector": null, "score": 0}, {"text": "database schema and a natural language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 100, "tokens": 0, "vector": null, "score": 0}, {"text": "question and then the corresponding SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 101, "tokens": 0, "vector": null, "score": 0}, {"text": "translation so you in this a diagram", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 102, "tokens": 0, "vector": null, "score": 0}, {"text": "you're just seeing two examples of this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 103, "tokens": 0, "vector": null, "score": 0}, {"text": "in the input that's kind of one of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 104, "tokens": 0, "vector": null, "score": 0}, {"text": "questions a few shot prompting is you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 105, "tokens": 0, "vector": null, "score": 0}, {"text": "know how many examples to give whether", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 106, "tokens": 0, "vector": null, "score": 0}, {"text": "these examples should be tuned to be", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 107, "tokens": 0, "vector": null, "score": 0}, {"text": "more in line with the downstream", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 108, "tokens": 0, "vector": null, "score": 0}, {"text": "inference but then what you do is you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 109, "tokens": 0, "vector": null, "score": 0}, {"text": "then have this novel inference schema", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 110, "tokens": 0, "vector": null, "score": 0}, {"text": "three plus question three and then it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 111, "tokens": 0, "vector": null, "score": 0}, {"text": "generates the new SQL so Infuse shot", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 112, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting it has these references of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 113, "tokens": 0, "vector": null, "score": 0}, {"text": "task to you know to reference and sort", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 114, "tokens": 0, "vector": null, "score": 0}, {"text": "of learn from in the input window which", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 115, "tokens": 0, "vector": null, "score": 0}, {"text": "is you know one of the super interesting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 116, "tokens": 0, "vector": null, "score": 0}, {"text": "emergent abilities of large language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 117, "tokens": 0, "vector": null, "score": 0}, {"text": "models compared to the more standard", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 118, "tokens": 0, "vector": null, "score": 0}, {"text": "inference setup where you just have the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 119, "tokens": 0, "vector": null, "score": 0}, {"text": "novel input and then you know you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 120, "tokens": 0, "vector": null, "score": 0}, {"text": "generate the output so a is exploring", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 121, "tokens": 0, "vector": null, "score": 0}, {"text": "the few shot prompting B is exploring", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 122, "tokens": 0, "vector": null, "score": 0}, {"text": "fine tuning Palm on the data set the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 123, "tokens": 0, "vector": null, "score": 0}, {"text": "spider data set of text SQL translations", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 124, "tokens": 0, "vector": null, "score": 0}, {"text": "and then just seeing single inference", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 125, "tokens": 0, "vector": null, "score": 0}, {"text": "single output kind of setup so this is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 126, "tokens": 0, "vector": null, "score": 0}, {"text": "quick additional look at what this would", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 127, "tokens": 0, "vector": null, "score": 0}, {"text": "look like when you're talking about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 128, "tokens": 0, "vector": null, "score": 0}, {"text": "giving it the schema you're talking", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 129, "tokens": 0, "vector": null, "score": 0}, {"text": "about compressing representations like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 130, "tokens": 0, "vector": null, "score": 0}, {"text": "this into text to prompt the model so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 131, "tokens": 0, "vector": null, "score": 0}, {"text": "say you bolded singer as the table and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 132, "tokens": 0, "vector": null, "score": 0}, {"text": "then it has the keys singer ID name", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 133, "tokens": 0, "vector": null, "score": 0}, {"text": "country song name and so on so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 134, "tokens": 0, "vector": null, "score": 0}, {"text": "interestingly you say have like foreign", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 135, "tokens": 0, "vector": null, "score": 0}, {"text": "Keys when you when you're looking at", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 136, "tokens": 0, "vector": null, "score": 0}, {"text": "concert and you need to join say concert", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 137, "tokens": 0, "vector": null, "score": 0}, {"text": "ID and Stadium singer in concert so you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 138, "tokens": 0, "vector": null, "score": 0}, {"text": "have a lot of interesting ideas of how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 139, "tokens": 0, "vector": null, "score": 0}, {"text": "you could kind of extend this and it's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 140, "tokens": 0, "vector": null, "score": 0}, {"text": "also worth mentioning that this is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 141, "tokens": 0, "vector": null, "score": 0}, {"text": "mostly about kind of like a surface", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 142, "tokens": 0, "vector": null, "score": 0}, {"text": "level SQL interface not like the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 143, "tokens": 0, "vector": null, "score": 0}, {"text": "underlying optimization of how the data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 144, "tokens": 0, "vector": null, "score": 0}, {"text": "is stored but", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 145, "tokens": 0, "vector": null, "score": 0}, {"text": "you know offering this kind of interface", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 146, "tokens": 0, "vector": null, "score": 0}, {"text": "in natural language so so this is the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 147, "tokens": 0, "vector": null, "score": 0}, {"text": "idea of taking these questions and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 148, "tokens": 0, "vector": null, "score": 0}, {"text": "translating them into not into SQL based", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 149, "tokens": 0, "vector": null, "score": 0}, {"text": "on giving it the table in as a part of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 150, "tokens": 0, "vector": null, "score": 0}, {"text": "the input so another really interesting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 151, "tokens": 0, "vector": null, "score": 0}, {"text": "detail this paper are the data sets that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 152, "tokens": 0, "vector": null, "score": 0}, {"text": "they use to evaluate this spider is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 153, "tokens": 0, "vector": null, "score": 0}, {"text": "collection of about uh 7 000 trading", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 154, "tokens": 0, "vector": null, "score": 0}, {"text": "queries I think a thousand testing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 155, "tokens": 0, "vector": null, "score": 0}, {"text": "queries across 166 database schemas for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 156, "tokens": 0, "vector": null, "score": 0}, {"text": "training in something like 22 for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 157, "tokens": 0, "vector": null, "score": 0}, {"text": "testing so they also have these variants", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 158, "tokens": 0, "vector": null, "score": 0}, {"text": "of the spider data set as the text to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 159, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL research Community has iterated and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 160, "tokens": 0, "vector": null, "score": 0}, {"text": "learned about this these things so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 161, "tokens": 0, "vector": null, "score": 0}, {"text": "spider's synonym is about manually", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 162, "tokens": 0, "vector": null, "score": 0}, {"text": "modifying natural language questions", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 163, "tokens": 0, "vector": null, "score": 0}, {"text": "with synonym substitutions so instead of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 164, "tokens": 0, "vector": null, "score": 0}, {"text": "how many singers do we have and singers", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 165, "tokens": 0, "vector": null, "score": 0}, {"text": "might be like two kind of on the nose", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 166, "tokens": 0, "vector": null, "score": 0}, {"text": "with the database schema you say how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 167, "tokens": 0, "vector": null, "score": 0}, {"text": "many vocalists do we have ideas like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 168, "tokens": 0, "vector": null, "score": 0}, {"text": "this to try to like test the robustness", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 169, "tokens": 0, "vector": null, "score": 0}, {"text": "of how well the models perform when the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 170, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language question starts to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 171, "tokens": 0, "vector": null, "score": 0}, {"text": "deviate from you know something that's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 172, "tokens": 0, "vector": null, "score": 0}, {"text": "closely aligned with the database schema", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 173, "tokens": 0, "vector": null, "score": 0}, {"text": "so it was spider realistic that removes", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 174, "tokens": 0, "vector": null, "score": 0}, {"text": "the mentioning of column names so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 175, "tokens": 0, "vector": null, "score": 0}, {"text": "compared to the question how many", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 176, "tokens": 0, "vector": null, "score": 0}, {"text": "concerts are there in year 2014 or 2015", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 177, "tokens": 0, "vector": null, "score": 0}, {"text": "just more natural how many concerts are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 178, "tokens": 0, "vector": null, "score": 0}, {"text": "there in 2014 or 2015 and then spider", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 179, "tokens": 0, "vector": null, "score": 0}, {"text": "domain knowledge is where you're adding", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 180, "tokens": 0, "vector": null, "score": 0}, {"text": "domain knowledge so you know list all", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 181, "tokens": 0, "vector": null, "score": 0}, {"text": "song names by singers above the average", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 182, "tokens": 0, "vector": null, "score": 0}, {"text": "age and then hard to answer age-related", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 183, "tokens": 0, "vector": null, "score": 0}, {"text": "question based on the you know if you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 184, "tokens": 0, "vector": null, "score": 0}, {"text": "only have the uh the birthday column so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 185, "tokens": 0, "vector": null, "score": 0}, {"text": "so you need to like derive birthday from", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 186, "tokens": 0, "vector": null, "score": 0}, {"text": "the table and then answer the question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 187, "tokens": 0, "vector": null, "score": 0}, {"text": "by age and other examples like this so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 188, "tokens": 0, "vector": null, "score": 0}, {"text": "quickly before diving further into the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 189, "tokens": 0, "vector": null, "score": 0}, {"text": "details of the SQL Palm experiments I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 190, "tokens": 0, "vector": null, "score": 0}, {"text": "want to quickly remind you that you can", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 191, "tokens": 0, "vector": null, "score": 0}, {"text": "do these symbolic aggregation queries", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 192, "tokens": 0, "vector": null, "score": 0}, {"text": "directly in weviate using the aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 193, "tokens": 0, "vector": null, "score": 0}, {"text": "API so in weavate if you have a class", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 194, "tokens": 0, "vector": null, "score": 0}, {"text": "like maybe just to continue on this if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 195, "tokens": 0, "vector": null, "score": 0}, {"text": "you have say the singer class you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 196, "tokens": 0, "vector": null, "score": 0}, {"text": "similarly have these properties where", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 197, "tokens": 0, "vector": null, "score": 0}, {"text": "you have you know Joe sham is a text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 198, "tokens": 0, "vector": null, "score": 0}, {"text": "property or say you have age which is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 199, "tokens": 0, "vector": null, "score": 0}, {"text": "you know an in property or Ismail is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 200, "tokens": 0, "vector": null, "score": 0}, {"text": "Boolean property in weeviate's aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 201, "tokens": 0, "vector": null, "score": 0}, {"text": "syntax you can then access these kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 202, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic aggregations using this syntax", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 203, "tokens": 0, "vector": null, "score": 0}, {"text": "so say you want to see which of your", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 204, "tokens": 0, "vector": null, "score": 0}, {"text": "singers appears the most in your data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 205, "tokens": 0, "vector": null, "score": 0}, {"text": "set you would do name and then top", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 206, "tokens": 0, "vector": null, "score": 0}, {"text": "occurrences so you want to see the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 207, "tokens": 0, "vector": null, "score": 0}, {"text": "average age you could similarly do this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 208, "tokens": 0, "vector": null, "score": 0}, {"text": "you know age mean to access that or the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 209, "tokens": 0, "vector": null, "score": 0}, {"text": "Boolean total true total false this kind", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 210, "tokens": 0, "vector": null, "score": 0}, {"text": "of thing and then if you want to do this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 211, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of joining as well you would do you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 212, "tokens": 0, "vector": null, "score": 0}, {"text": "know say singer and then say singer and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 213, "tokens": 0, "vector": null, "score": 0}, {"text": "then the relation is performed in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 214, "tokens": 0, "vector": null, "score": 0}, {"text": "concert concert you would do you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 215, "tokens": 0, "vector": null, "score": 0}, {"text": "performed in concert dot dot on concert", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 216, "tokens": 0, "vector": null, "score": 0}, {"text": "and then now you're in the concert class", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 217, "tokens": 0, "vector": null, "score": 0}, {"text": "and you can keep using all this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 218, "tokens": 0, "vector": null, "score": 0}, {"text": "syntax so that's how you do this in we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 219, "tokens": 0, "vector": null, "score": 0}, {"text": "gate we're going to look at a few shot", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 220, "tokens": 0, "vector": null, "score": 0}, {"text": "examples showing that this exact kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 221, "tokens": 0, "vector": null, "score": 0}, {"text": "thing works in weavate which is super", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 222, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting so if you want to do this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 223, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic joining queries aggregations of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 224, "tokens": 0, "vector": null, "score": 0}, {"text": "your metadata you can also do that in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 225, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate there's another super super", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 226, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting connection of This research", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 227, "tokens": 0, "vector": null, "score": 0}, {"text": "with weeviate we're going to dive into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 228, "tokens": 0, "vector": null, "score": 0}, {"text": "this more at the very end of the video", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 229, "tokens": 0, "vector": null, "score": 0}, {"text": "on some key takeaways but Lang chain", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 230, "tokens": 0, "vector": null, "score": 0}, {"text": "llama index they've recently been", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 231, "tokens": 0, "vector": null, "score": 0}, {"text": "promoting this self querying retriever", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 232, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of idea which is really amazing and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 233, "tokens": 0, "vector": null, "score": 0}, {"text": "what it is is you take a query like what", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 234, "tokens": 0, "vector": null, "score": 0}, {"text": "is a golden doodle and you add filters", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 235, "tokens": 0, "vector": null, "score": 0}, {"text": "to make it filtered Vector search to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 236, "tokens": 0, "vector": null, "score": 0}, {"text": "step back a bit weavate Vector databases", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 237, "tokens": 0, "vector": null, "score": 0}, {"text": "are about building these Vector index", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 238, "tokens": 0, "vector": null, "score": 0}, {"text": "structures to allow approximate nearest", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 239, "tokens": 0, "vector": null, "score": 0}, {"text": "neighbor search at absolutely massive", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 240, "tokens": 0, "vector": null, "score": 0}, {"text": "scale in addition to just kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 241, "tokens": 0, "vector": null, "score": 0}, {"text": "traversing the proximity graphs to find", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 242, "tokens": 0, "vector": null, "score": 0}, {"text": "the nearest neighbor's distance wise we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 243, "tokens": 0, "vector": null, "score": 0}, {"text": "also can connect them that match", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 244, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic filters so say you want to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 245, "tokens": 0, "vector": null, "score": 0}, {"text": "build one index and then have a symbolic", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 246, "tokens": 0, "vector": null, "score": 0}, {"text": "property like the source of the index so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 247, "tokens": 0, "vector": null, "score": 0}, {"text": "say it's you know text passages and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 248, "tokens": 0, "vector": null, "score": 0}, {"text": "you have a filter on you know whether", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 249, "tokens": 0, "vector": null, "score": 0}, {"text": "it's comes from Wikipedia it comes from", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 250, "tokens": 0, "vector": null, "score": 0}, {"text": "archive or comes from Reddit you can add", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 251, "tokens": 0, "vector": null, "score": 0}, {"text": "these filters onto the query and it will", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 252, "tokens": 0, "vector": null, "score": 0}, {"text": "Traverse the vector index with that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 253, "tokens": 0, "vector": null, "score": 0}, {"text": "filter so it's really interesting the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 254, "tokens": 0, "vector": null, "score": 0}, {"text": "idea of enabling these you know query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 255, "tokens": 0, "vector": null, "score": 0}, {"text": "routers to either say which of these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 256, "tokens": 0, "vector": null, "score": 0}, {"text": "classes do you want to search through or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 257, "tokens": 0, "vector": null, "score": 0}, {"text": "what kind of filters do you want to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 258, "tokens": 0, "vector": null, "score": 0}, {"text": "apply on searching through the vector", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 259, "tokens": 0, "vector": null, "score": 0}, {"text": "index so we'll talk about that at the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 260, "tokens": 0, "vector": null, "score": 0}, {"text": "end but this is another kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 261, "tokens": 0, "vector": null, "score": 0}, {"text": "connection to this idea of using these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 262, "tokens": 0, "vector": null, "score": 0}, {"text": "large language models or you know just", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 263, "tokens": 0, "vector": null, "score": 0}, {"text": "generally the capabilities of language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 264, "tokens": 0, "vector": null, "score": 0}, {"text": "models to help facilitate the query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 265, "tokens": 0, "vector": null, "score": 0}, {"text": "interfaces so coming back to the SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 266, "tokens": 0, "vector": null, "score": 0}, {"text": "Palm paper let's look at some examples", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 267, "tokens": 0, "vector": null, "score": 0}, {"text": "of natural language questions and their", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 268, "tokens": 0, "vector": null, "score": 0}, {"text": "corresponding SQL translations as well", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 269, "tokens": 0, "vector": null, "score": 0}, {"text": "as the database tables in reference so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 270, "tokens": 0, "vector": null, "score": 0}, {"text": "first of all imagine this question what", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 271, "tokens": 0, "vector": null, "score": 0}, {"text": "is the average minimum and maximum age", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 272, "tokens": 0, "vector": null, "score": 0}, {"text": "of all singers from France we have this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 273, "tokens": 0, "vector": null, "score": 0}, {"text": "database table with the tables Stadium", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 274, "tokens": 0, "vector": null, "score": 0}, {"text": "singer concert singer in concert and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 275, "tokens": 0, "vector": null, "score": 0}, {"text": "then we need this to produce this query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 276, "tokens": 0, "vector": null, "score": 0}, {"text": "select average age Min age max age from", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 277, "tokens": 0, "vector": null, "score": 0}, {"text": "singer where country equals France so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 278, "tokens": 0, "vector": null, "score": 0}, {"text": "the large language model needs to look", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 279, "tokens": 0, "vector": null, "score": 0}, {"text": "at the table look at the keys infer this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 280, "tokens": 0, "vector": null, "score": 0}, {"text": "country property and then generate this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 281, "tokens": 0, "vector": null, "score": 0}, {"text": "query so already I think something", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 282, "tokens": 0, "vector": null, "score": 0}, {"text": "that's really interesting about this and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 283, "tokens": 0, "vector": null, "score": 0}, {"text": "you know previewing the weeviate angle a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 284, "tokens": 0, "vector": null, "score": 0}, {"text": "little bit is how right now what we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 285, "tokens": 0, "vector": null, "score": 0}, {"text": "doing with this SQL Palm paper is we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 286, "tokens": 0, "vector": null, "score": 0}, {"text": "just giving it the names of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 287, "tokens": 0, "vector": null, "score": 0}, {"text": "properties without any kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 288, "tokens": 0, "vector": null, "score": 0}, {"text": "description of what the properties are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 289, "tokens": 0, "vector": null, "score": 0}, {"text": "or say you know if it's a categorical", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 290, "tokens": 0, "vector": null, "score": 0}, {"text": "property which of the values it can take", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 291, "tokens": 0, "vector": null, "score": 0}, {"text": "on and maybe some kind of description of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 292, "tokens": 0, "vector": null, "score": 0}, {"text": "the categories as well or say it's like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 293, "tokens": 0, "vector": null, "score": 0}, {"text": "an integer the range that it can take on", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 294, "tokens": 0, "vector": null, "score": 0}, {"text": "so a lot of interesting things for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 295, "tokens": 0, "vector": null, "score": 0}, {"text": "extending this further but right now it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 296, "tokens": 0, "vector": null, "score": 0}, {"text": "seems like just semantic Keys is working", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 297, "tokens": 0, "vector": null, "score": 0}, {"text": "for this kind of translation but maybe", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 298, "tokens": 0, "vector": null, "score": 0}, {"text": "that's a direction to take this further", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 299, "tokens": 0, "vector": null, "score": 0}, {"text": "so here's another question show name", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 300, "tokens": 0, "vector": null, "score": 0}, {"text": "country age for all singers ordered by", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 301, "tokens": 0, "vector": null, "score": 0}, {"text": "age from the oldest to the youngest so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 302, "tokens": 0, "vector": null, "score": 0}, {"text": "again we take the exact same data schema", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 303, "tokens": 0, "vector": null, "score": 0}, {"text": "as the the first example and we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 304, "tokens": 0, "vector": null, "score": 0}, {"text": "translate that this query into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 305, "tokens": 0, "vector": null, "score": 0}, {"text": "select name country age from singer", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 306, "tokens": 0, "vector": null, "score": 0}, {"text": "order by age in descending order so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 307, "tokens": 0, "vector": null, "score": 0}, {"text": "again it needs to do an inference about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 308, "tokens": 0, "vector": null, "score": 0}, {"text": "the age ranking and then produce this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 309, "tokens": 0, "vector": null, "score": 0}, {"text": "order by age descending order so this is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 310, "tokens": 0, "vector": null, "score": 0}, {"text": "a great example of taking the natural", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 311, "tokens": 0, "vector": null, "score": 0}, {"text": "language query inferring the intent that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 312, "tokens": 0, "vector": null, "score": 0}, {"text": "the user wants and then Translating that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 313, "tokens": 0, "vector": null, "score": 0}, {"text": "into this particularly order by age", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 314, "tokens": 0, "vector": null, "score": 0}, {"text": "descending order thing so next up we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 315, "tokens": 0, "vector": null, "score": 0}, {"text": "have our first example of needing to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 316, "tokens": 0, "vector": null, "score": 0}, {"text": "join tables together so we have the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 317, "tokens": 0, "vector": null, "score": 0}, {"text": "question what are the names of Nations", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 318, "tokens": 0, "vector": null, "score": 0}, {"text": "where both English and French are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 319, "tokens": 0, "vector": null, "score": 0}, {"text": "official languages we have this table", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 320, "tokens": 0, "vector": null, "score": 0}, {"text": "country and country has the foreign key", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 321, "tokens": 0, "vector": null, "score": 0}, {"text": "code which is How We join with country", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 322, "tokens": 0, "vector": null, "score": 0}, {"text": "language country code so what we need to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 323, "tokens": 0, "vector": null, "score": 0}, {"text": "do is we have this um you know from", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 324, "tokens": 0, "vector": null, "score": 0}, {"text": "country as T1 join country language as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 325, "tokens": 0, "vector": null, "score": 0}, {"text": "T2 on t1. code equals t2.country code", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 326, "tokens": 0, "vector": null, "score": 0}, {"text": "where and then it learns to parse out", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 327, "tokens": 0, "vector": null, "score": 0}, {"text": "the the English and French are the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 328, "tokens": 0, "vector": null, "score": 0}, {"text": "languages and then it needs to then get", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 329, "tokens": 0, "vector": null, "score": 0}, {"text": "the names from the top of it it also", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 330, "tokens": 0, "vector": null, "score": 0}, {"text": "needs to check this condition is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 331, "tokens": 0, "vector": null, "score": 0}, {"text": "official from the artificial languages", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 332, "tokens": 0, "vector": null, "score": 0}, {"text": "so we're already starting to see an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 333, "tokens": 0, "vector": null, "score": 0}, {"text": "example of a query where you know doing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 334, "tokens": 0, "vector": null, "score": 0}, {"text": "this query out might require some", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 335, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge of SQL some experience of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 336, "tokens": 0, "vector": null, "score": 0}, {"text": "doing it especially to you know like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 337, "tokens": 0, "vector": null, "score": 0}, {"text": "quickly slash instantly translate this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 338, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language query into this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 339, "tokens": 0, "vector": null, "score": 0}, {"text": "thing so this is a really example", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 340, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting example of introducing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 341, "tokens": 0, "vector": null, "score": 0}, {"text": "joining tables together in this picture", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 342, "tokens": 0, "vector": null, "score": 0}, {"text": "of generating text SQL queries the next", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 343, "tokens": 0, "vector": null, "score": 0}, {"text": "query is what are the number of concerts", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 344, "tokens": 0, "vector": null, "score": 0}, {"text": "that occurred in the stadium with the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 345, "tokens": 0, "vector": null, "score": 0}, {"text": "largest capacity so now we're doing an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 346, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregation we're selecting the count", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 347, "tokens": 0, "vector": null, "score": 0}, {"text": "from concert where Stadium ID equals and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 348, "tokens": 0, "vector": null, "score": 0}, {"text": "then we have this nested query idea idea", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 349, "tokens": 0, "vector": null, "score": 0}, {"text": "where we select Stadium ID from stadium", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 350, "tokens": 0, "vector": null, "score": 0}, {"text": "and then we order by the capacity", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 351, "tokens": 0, "vector": null, "score": 0}, {"text": "because we want the largest capacity and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 352, "tokens": 0, "vector": null, "score": 0}, {"text": "then we want to just limit it one", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 353, "tokens": 0, "vector": null, "score": 0}, {"text": "because we just want the largest", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 354, "tokens": 0, "vector": null, "score": 0}, {"text": "capacity not like a list of the you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 355, "tokens": 0, "vector": null, "score": 0}, {"text": "top five largest capacities so now we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 356, "tokens": 0, "vector": null, "score": 0}, {"text": "seeing this concept of an inner query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 357, "tokens": 0, "vector": null, "score": 0}, {"text": "super interesting concept again of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 358, "tokens": 0, "vector": null, "score": 0}, {"text": "translating this into the SQL next up we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 359, "tokens": 0, "vector": null, "score": 0}, {"text": "have a super interesting query find the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 360, "tokens": 0, "vector": null, "score": 0}, {"text": "first name of students who have both cat", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 361, "tokens": 0, "vector": null, "score": 0}, {"text": "and dog pets and we have the database", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 362, "tokens": 0, "vector": null, "score": 0}, {"text": "table student has pet and then pets so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 363, "tokens": 0, "vector": null, "score": 0}, {"text": "what we're going to do is we're going to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 364, "tokens": 0, "vector": null, "score": 0}, {"text": "first sub-sample from each of the tables", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 365, "tokens": 0, "vector": null, "score": 0}, {"text": "so first We join the student has pet", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 366, "tokens": 0, "vector": null, "score": 0}, {"text": "pets tables with the condition uh pet", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 367, "tokens": 0, "vector": null, "score": 0}, {"text": "type equals cat pet type equals dog and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 368, "tokens": 0, "vector": null, "score": 0}, {"text": "then we're going to do the intersection", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 369, "tokens": 0, "vector": null, "score": 0}, {"text": "of those two tables of students who have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 370, "tokens": 0, "vector": null, "score": 0}, {"text": "cats and students who have dogs to find", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 371, "tokens": 0, "vector": null, "score": 0}, {"text": "the first name of of the students who", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 372, "tokens": 0, "vector": null, "score": 0}, {"text": "have both cats and dogs or a cat and a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 373, "tokens": 0, "vector": null, "score": 0}, {"text": "dog as a pet so this is the first case I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 374, "tokens": 0, "vector": null, "score": 0}, {"text": "think where we're starting to wade into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 375, "tokens": 0, "vector": null, "score": 0}, {"text": "the Waters of query optimization their", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 376, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL is built on this idea of relational", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 377, "tokens": 0, "vector": null, "score": 0}, {"text": "algebra where basically you do these uh", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 378, "tokens": 0, "vector": null, "score": 0}, {"text": "like set pruning set operations that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 379, "tokens": 0, "vector": null, "score": 0}, {"text": "will filter the set so say you know you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 380, "tokens": 0, "vector": null, "score": 0}, {"text": "had a thousand a thousand objects in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 381, "tokens": 0, "vector": null, "score": 0}, {"text": "your database table and this one filter", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 382, "tokens": 0, "vector": null, "score": 0}, {"text": "would potentially reduce it down to like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 383, "tokens": 0, "vector": null, "score": 0}, {"text": "20 objects compared to whereas this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 384, "tokens": 0, "vector": null, "score": 0}, {"text": "other one would reduce it to you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 385, "tokens": 0, "vector": null, "score": 0}, {"text": "500 and then you're joining that with", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 386, "tokens": 0, "vector": null, "score": 0}, {"text": "another table so there's a question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 387, "tokens": 0, "vector": null, "score": 0}, {"text": "about the order of operations for how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 388, "tokens": 0, "vector": null, "score": 0}, {"text": "you apply this kind of set filtering to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 389, "tokens": 0, "vector": null, "score": 0}, {"text": "reduce the cardinality of how many", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 390, "tokens": 0, "vector": null, "score": 0}, {"text": "objects are in your databases hopefully", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 391, "tokens": 0, "vector": null, "score": 0}, {"text": "that was a decent overview I definitely", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 392, "tokens": 0, "vector": null, "score": 0}, {"text": "need a brush up on my relational algebra", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 393, "tokens": 0, "vector": null, "score": 0}, {"text": "but to get the general sense of there's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 394, "tokens": 0, "vector": null, "score": 0}, {"text": "some optimization behind you know how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 395, "tokens": 0, "vector": null, "score": 0}, {"text": "you apply filtering operations and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 396, "tokens": 0, "vector": null, "score": 0}, {"text": "the order the order in which you apply", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 397, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering and Joint operations the next", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 398, "tokens": 0, "vector": null, "score": 0}, {"text": "query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 399, "tokens": 0, "vector": null, "score": 0}, {"text": "so this is a pretty complex one what are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 400, "tokens": 0, "vector": null, "score": 0}, {"text": "the IDS and names of all the countries", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 401, "tokens": 0, "vector": null, "score": 0}, {"text": "that either have more than three card", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 402, "tokens": 0, "vector": null, "score": 0}, {"text": "makers or produce Fiat model so in this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 403, "tokens": 0, "vector": null, "score": 0}, {"text": "case we have the union of these two", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 404, "tokens": 0, "vector": null, "score": 0}, {"text": "conditions on the database tables so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 405, "tokens": 0, "vector": null, "score": 0}, {"text": "we're joining together uh you know the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 406, "tokens": 0, "vector": null, "score": 0}, {"text": "countries with the car makers so we have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 407, "tokens": 0, "vector": null, "score": 0}, {"text": "uh six different database tables in this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 408, "tokens": 0, "vector": null, "score": 0}, {"text": "so another case of the this example", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 409, "tokens": 0, "vector": null, "score": 0}, {"text": "particularly is a great example where", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 410, "tokens": 0, "vector": null, "score": 0}, {"text": "you know you would you would need to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 411, "tokens": 0, "vector": null, "score": 0}, {"text": "have written some SQL to have quickly", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 412, "tokens": 0, "vector": null, "score": 0}, {"text": "translated this into this select", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 413, "tokens": 0, "vector": null, "score": 0}, {"text": "t1.country ID from country so this I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 414, "tokens": 0, "vector": null, "score": 0}, {"text": "think is the perfect example of why we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 415, "tokens": 0, "vector": null, "score": 0}, {"text": "need these models and how this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 416, "tokens": 0, "vector": null, "score": 0}, {"text": "facilitates this kind of natural", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 417, "tokens": 0, "vector": null, "score": 0}, {"text": "language question shown on the top down", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 418, "tokens": 0, "vector": null, "score": 0}, {"text": "into this SQL syntax so quickly before", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 419, "tokens": 0, "vector": null, "score": 0}, {"text": "moving on from the SQL query examples I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 420, "tokens": 0, "vector": null, "score": 0}, {"text": "wanted to run a little test of how well", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 421, "tokens": 0, "vector": null, "score": 0}, {"text": "this would work with leviate's aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 422, "tokens": 0, "vector": null, "score": 0}, {"text": "syntax so the way that I structured The", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 423, "tokens": 0, "vector": null, "score": 0}, {"text": "Prompt is first I give it a description", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 424, "tokens": 0, "vector": null, "score": 0}, {"text": "of the API syntax so the aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 425, "tokens": 0, "vector": null, "score": 0}, {"text": "function is structured as follows then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 426, "tokens": 0, "vector": null, "score": 0}, {"text": "give it that same you know graphql all", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 427, "tokens": 0, "vector": null, "score": 0}, {"text": "possible things you could do with it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 428, "tokens": 0, "vector": null, "score": 0}, {"text": "block", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 429, "tokens": 0, "vector": null, "score": 0}, {"text": "as shown previously and then I give it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 430, "tokens": 0, "vector": null, "score": 0}, {"text": "the new schema so I you know I like to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 431, "tokens": 0, "vector": null, "score": 0}, {"text": "play with this webia podcast search", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 432, "tokens": 0, "vector": null, "score": 0}, {"text": "example so I have podcast clip that has", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 433, "tokens": 0, "vector": null, "score": 0}, {"text": "property speaker content podcast number", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 434, "tokens": 0, "vector": null, "score": 0}, {"text": "and the duration of the podcast then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 435, "tokens": 0, "vector": null, "score": 0}, {"text": "another quick description of the task", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 436, "tokens": 0, "vector": null, "score": 0}, {"text": "your task is to take a query and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 437, "tokens": 0, "vector": null, "score": 0}, {"text": "translate it to the appropriate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 438, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate syntax based on the syntax", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 439, "tokens": 0, "vector": null, "score": 0}, {"text": "provided above and the data schema so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 440, "tokens": 0, "vector": null, "score": 0}, {"text": "then a training example who is the most", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 441, "tokens": 0, "vector": null, "score": 0}, {"text": "frequent speaker in the podcast Clips", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 442, "tokens": 0, "vector": null, "score": 0}, {"text": "you know and then this would be the how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 443, "tokens": 0, "vector": null, "score": 0}, {"text": "you do that you top occurrences value", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 444, "tokens": 0, "vector": null, "score": 0}, {"text": "occurs and so now the test query of how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 445, "tokens": 0, "vector": null, "score": 0}, {"text": "long was the longest podcast clip so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 446, "tokens": 0, "vector": null, "score": 0}, {"text": "running this live hopefully works", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 447, "tokens": 0, "vector": null, "score": 0}, {"text": "so yeah that's exactly correct and so we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 448, "tokens": 0, "vector": null, "score": 0}, {"text": "see how it's able to do this translation", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 449, "tokens": 0, "vector": null, "score": 0}, {"text": "and maybe that's not the most confusing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 450, "tokens": 0, "vector": null, "score": 0}, {"text": "query as we saw some really confusing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 451, "tokens": 0, "vector": null, "score": 0}, {"text": "queries but just to get a general sense", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 452, "tokens": 0, "vector": null, "score": 0}, {"text": "of how this might look with weaviate and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 453, "tokens": 0, "vector": null, "score": 0}, {"text": "the things we can do with this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 454, "tokens": 0, "vector": null, "score": 0}, {"text": "large language model translating from", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 455, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language into structured query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 456, "tokens": 0, "vector": null, "score": 0}, {"text": "languages so let's get into the data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 457, "tokens": 0, "vector": null, "score": 0}, {"text": "sets that were used to evaluate Palm's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 458, "tokens": 0, "vector": null, "score": 0}, {"text": "ability to write SQL queries and a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 459, "tokens": 0, "vector": null, "score": 0}, {"text": "little more background on this field of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 460, "tokens": 0, "vector": null, "score": 0}, {"text": "research called text to SQL so to take a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 461, "tokens": 0, "vector": null, "score": 0}, {"text": "quote from the paper text SQL is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 462, "tokens": 0, "vector": null, "score": 0}, {"text": "long-standing challenge crucial to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 463, "tokens": 0, "vector": null, "score": 0}, {"text": "enhanced database accessibility without", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 464, "tokens": 0, "vector": null, "score": 0}, {"text": "requiring expertise of SQL so this angle", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 465, "tokens": 0, "vector": null, "score": 0}, {"text": "is the you know the general human", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 466, "tokens": 0, "vector": null, "score": 0}, {"text": "accessibility trying to help more humans", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 467, "tokens": 0, "vector": null, "score": 0}, {"text": "use SQL systems you know as easily as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 468, "tokens": 0, "vector": null, "score": 0}, {"text": "possible get running as quickly as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 469, "tokens": 0, "vector": null, "score": 0}, {"text": "possible and then the other angle text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 470, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL enables the development of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 471, "tokens": 0, "vector": null, "score": 0}, {"text": "conversational agents with Advanced data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 472, "tokens": 0, "vector": null, "score": 0}, {"text": "analytics abilities so there's a lot of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 473, "tokens": 0, "vector": null, "score": 0}, {"text": "talk about you know tool use large", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 474, "tokens": 0, "vector": null, "score": 0}, {"text": "language model agents that use tools and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 475, "tokens": 0, "vector": null, "score": 0}, {"text": "this is about helping them helping the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 476, "tokens": 0, "vector": null, "score": 0}, {"text": "agents make SQL queries these symbolic", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 477, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregations to acquire information like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 478, "tokens": 0, "vector": null, "score": 0}, {"text": "as we mentioned like I don't know I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 479, "tokens": 0, "vector": null, "score": 0}, {"text": "think it was like how many concerts were", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 480, "tokens": 0, "vector": null, "score": 0}, {"text": "performed in the largest stadium or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 481, "tokens": 0, "vector": null, "score": 0}, {"text": "things like this to enable large", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 482, "tokens": 0, "vector": null, "score": 0}, {"text": "language model agents to acquire that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 483, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of information from structured", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 484, "tokens": 0, "vector": null, "score": 0}, {"text": "database tables so This research of text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 485, "tokens": 0, "vector": null, "score": 0}, {"text": "to SQL the flagship data set has been", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 486, "tokens": 0, "vector": null, "score": 0}, {"text": "spider spider is the imagenet of text", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 487, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL or the beer like the you know the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 488, "tokens": 0, "vector": null, "score": 0}, {"text": "the big data set for this research", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 489, "tokens": 0, "vector": null, "score": 0}, {"text": "category spider contains 7 000 training", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 490, "tokens": 0, "vector": null, "score": 0}, {"text": "samples across 166 databases and 1034", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 491, "tokens": 0, "vector": null, "score": 0}, {"text": "development samples across 20 databases", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 492, "tokens": 0, "vector": null, "score": 0}, {"text": "so having examples of a database schema", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 493, "tokens": 0, "vector": null, "score": 0}, {"text": "and then corresponding natural language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 494, "tokens": 0, "vector": null, "score": 0}, {"text": "to query translations based on that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 495, "tokens": 0, "vector": null, "score": 0}, {"text": "database table so similar to say", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 496, "tokens": 0, "vector": null, "score": 0}, {"text": "imagenet C and you know the the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 497, "tokens": 0, "vector": null, "score": 0}, {"text": "robustness corruption tests around", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 498, "tokens": 0, "vector": null, "score": 0}, {"text": "imagenet spider has these variants", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 499, "tokens": 0, "vector": null, "score": 0}, {"text": "spider synonym this describes manual", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 500, "tokens": 0, "vector": null, "score": 0}, {"text": "replacement of synonym substitutions in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 501, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language questions so you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 502, "tokens": 0, "vector": null, "score": 0}, {"text": "sometimes the questions they they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 503, "tokens": 0, "vector": null, "score": 0}, {"text": "explicitly kind of match the key in the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 504, "tokens": 0, "vector": null, "score": 0}, {"text": "schema so you so they replace this to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 505, "tokens": 0, "vector": null, "score": 0}, {"text": "see how robust these models are when the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 506, "tokens": 0, "vector": null, "score": 0}, {"text": "question isn't so on the nose and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 507, "tokens": 0, "vector": null, "score": 0}, {"text": "talking about exactly the property in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 508, "tokens": 0, "vector": null, "score": 0}, {"text": "the table spider realistic is about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 509, "tokens": 0, "vector": null, "score": 0}, {"text": "removing any mentions of column names in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 510, "tokens": 0, "vector": null, "score": 0}, {"text": "the queries so similar idea instead of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 511, "tokens": 0, "vector": null, "score": 0}, {"text": "replacing it with a synonym you just", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 512, "tokens": 0, "vector": null, "score": 0}, {"text": "outright destroy any uh mention of a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 513, "tokens": 0, "vector": null, "score": 0}, {"text": "column and then domain knowledge this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 514, "tokens": 0, "vector": null, "score": 0}, {"text": "one I think is a little more nuanced", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 515, "tokens": 0, "vector": null, "score": 0}, {"text": "this is where you need to kind of derive", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 516, "tokens": 0, "vector": null, "score": 0}, {"text": "a property from one of the attributes so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 517, "tokens": 0, "vector": null, "score": 0}, {"text": "it was I wasn't completely sure of that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 518, "tokens": 0, "vector": null, "score": 0}, {"text": "so with that said let's dive into some", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 519, "tokens": 0, "vector": null, "score": 0}, {"text": "examples from the spider the original", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 520, "tokens": 0, "vector": null, "score": 0}, {"text": "Spider data set which are categorized as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 521, "tokens": 0, "vector": null, "score": 0}, {"text": "easy medium hard and very hard so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 522, "tokens": 0, "vector": null, "score": 0}, {"text": "characterizing each you know train input", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 523, "tokens": 0, "vector": null, "score": 0}, {"text": "output example is easy medium hard extra", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 524, "tokens": 0, "vector": null, "score": 0}, {"text": "hard this is a pretty standard practice", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 525, "tokens": 0, "vector": null, "score": 0}, {"text": "in deep learning for programming", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 526, "tokens": 0, "vector": null, "score": 0}, {"text": "languages like say a lot of these data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 527, "tokens": 0, "vector": null, "score": 0}, {"text": "sets constructed on like code forces or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 528, "tokens": 0, "vector": null, "score": 0}, {"text": "leak code they also have this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 529, "tokens": 0, "vector": null, "score": 0}, {"text": "categorization to it it'll be really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 530, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting to do this for imagenet and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 531, "tokens": 0, "vector": null, "score": 0}, {"text": "all that stuff as well but let's take a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 532, "tokens": 0, "vector": null, "score": 0}, {"text": "look at the you know the training", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 533, "tokens": 0, "vector": null, "score": 0}, {"text": "examples and how difficult they've been", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 534, "tokens": 0, "vector": null, "score": 0}, {"text": "labeled as so an easy SQL question what", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 535, "tokens": 0, "vector": null, "score": 0}, {"text": "is the number of cars with more than 4", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 536, "tokens": 0, "vector": null, "score": 0}, {"text": "cylinder cylinders just you know select", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 537, "tokens": 0, "vector": null, "score": 0}, {"text": "count from Cars data where cylinder is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 538, "tokens": 0, "vector": null, "score": 0}, {"text": "greater than four then a medium question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 539, "tokens": 0, "vector": null, "score": 0}, {"text": "for each Stadium how many concerts are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 540, "tokens": 0, "vector": null, "score": 0}, {"text": "there and so I think this is graduates", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 541, "tokens": 0, "vector": null, "score": 0}, {"text": "from easy to medium because now you need", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 542, "tokens": 0, "vector": null, "score": 0}, {"text": "to join the concert table with the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 543, "tokens": 0, "vector": null, "score": 0}, {"text": "stadium table based on these IDs and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 544, "tokens": 0, "vector": null, "score": 0}, {"text": "then you need to you know select the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 545, "tokens": 0, "vector": null, "score": 0}, {"text": "count of the concerts and you also", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 546, "tokens": 0, "vector": null, "score": 0}, {"text": "introduce the group by syntax and you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 547, "tokens": 0, "vector": null, "score": 0}, {"text": "know grouping the same IDs to you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 548, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate the concerts anyways so then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 549, "tokens": 0, "vector": null, "score": 0}, {"text": "the hard question I think then you're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 550, "tokens": 0, "vector": null, "score": 0}, {"text": "joining together three tables country", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 551, "tokens": 0, "vector": null, "score": 0}, {"text": "continents and car makers so you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 552, "tokens": 0, "vector": null, "score": 0}, {"text": "extending the joining you have the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 553, "tokens": 0, "vector": null, "score": 0}, {"text": "condition having as well uh which is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 554, "tokens": 0, "vector": null, "score": 0}, {"text": "similar well you have a condition on the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 555, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregation so maybe that's part of what", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 556, "tokens": 0, "vector": null, "score": 0}, {"text": "makes it hard versus easy and then extra", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 557, "tokens": 0, "vector": null, "score": 0}, {"text": "hard I think you have this nested query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 558, "tokens": 0, "vector": null, "score": 0}, {"text": "not in where you also have this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 559, "tokens": 0, "vector": null, "score": 0}, {"text": "join in the nested queries so a little", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 560, "tokens": 0, "vector": null, "score": 0}, {"text": "bit more maybe there's more to the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 561, "tokens": 0, "vector": null, "score": 0}, {"text": "difficulty levels with respect to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 562, "tokens": 0, "vector": null, "score": 0}, {"text": "queries that have that kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 563, "tokens": 0, "vector": null, "score": 0}, {"text": "opportunity to optimize with the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 564, "tokens": 0, "vector": null, "score": 0}, {"text": "relational algebra I'm not like a super", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 565, "tokens": 0, "vector": null, "score": 0}, {"text": "an expert on this I'm just familiar with", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 566, "tokens": 0, "vector": null, "score": 0}, {"text": "relational algebra but maybe that's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 567, "tokens": 0, "vector": null, "score": 0}, {"text": "something that could also factor into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 568, "tokens": 0, "vector": null, "score": 0}, {"text": "the categorization of the difficulty of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 569, "tokens": 0, "vector": null, "score": 0}, {"text": "the queries okay so now that we have a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 570, "tokens": 0, "vector": null, "score": 0}, {"text": "sense of what the data set looks like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 571, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of these questions that are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 572, "tokens": 0, "vector": null, "score": 0}, {"text": "based on these schemas and then the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 573, "tokens": 0, "vector": null, "score": 0}, {"text": "corresponding natural language test", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 574, "tokens": 0, "vector": null, "score": 0}, {"text": "skill question the key detail that we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 575, "tokens": 0, "vector": null, "score": 0}, {"text": "going to be exploring in this paper is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 576, "tokens": 0, "vector": null, "score": 0}, {"text": "how well these this SQL this Palm model", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 577, "tokens": 0, "vector": null, "score": 0}, {"text": "taken off the shelf and prompted with a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 578, "tokens": 0, "vector": null, "score": 0}, {"text": "task description and a few of these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 579, "tokens": 0, "vector": null, "score": 0}, {"text": "examples how well can that translate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 580, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language into SQL and how does", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 581, "tokens": 0, "vector": null, "score": 0}, {"text": "that compare with fine-tuning a palm", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 582, "tokens": 0, "vector": null, "score": 0}, {"text": "model on these input output pairs so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 583, "tokens": 0, "vector": null, "score": 0}, {"text": "firstly let's dive a little deeper into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 584, "tokens": 0, "vector": null, "score": 0}, {"text": "the few shock prompt in the appendix of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 585, "tokens": 0, "vector": null, "score": 0}, {"text": "the paper they have the exact prompts", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 586, "tokens": 0, "vector": null, "score": 0}, {"text": "for how they're going to compress tables", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 587, "tokens": 0, "vector": null, "score": 0}, {"text": "with the questions and do this few shot", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 588, "tokens": 0, "vector": null, "score": 0}, {"text": "prompting so we're at the end of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 589, "tokens": 0, "vector": null, "score": 0}, {"text": "paper and we're looking at the exact", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 590, "tokens": 0, "vector": null, "score": 0}, {"text": "prompt that was used to prompt the Palm", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 591, "tokens": 0, "vector": null, "score": 0}, {"text": "model to translate natural questions", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 592, "tokens": 0, "vector": null, "score": 0}, {"text": "into SQL so the first thing to note is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 593, "tokens": 0, "vector": null, "score": 0}, {"text": "they're going to ablate two details a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 594, "tokens": 0, "vector": null, "score": 0}, {"text": "concise prompt design compared to the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 595, "tokens": 0, "vector": null, "score": 0}, {"text": "verbose prompt design and this is kind", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 596, "tokens": 0, "vector": null, "score": 0}, {"text": "of what I was mentioning earlier where a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 597, "tokens": 0, "vector": null, "score": 0}, {"text": "verbose prompt design is where you you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 598, "tokens": 0, "vector": null, "score": 0}, {"text": "know you give it the attribute and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 599, "tokens": 0, "vector": null, "score": 0}, {"text": "you tell it the type of the attribute I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 600, "tokens": 0, "vector": null, "score": 0}, {"text": "think it could be interesting also to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 601, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of say it's a category attribute to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 602, "tokens": 0, "vector": null, "score": 0}, {"text": "extend this with the different", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 603, "tokens": 0, "vector": null, "score": 0}, {"text": "categories I think this would be sort of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 604, "tokens": 0, "vector": null, "score": 0}, {"text": "essential for that self querying", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 605, "tokens": 0, "vector": null, "score": 0}, {"text": "retriever idea we mentioned at the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 606, "tokens": 0, "vector": null, "score": 0}, {"text": "beginning but anyways I think that's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 607, "tokens": 0, "vector": null, "score": 0}, {"text": "getting distracted from this but so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 608, "tokens": 0, "vector": null, "score": 0}, {"text": "basically verbose prompt is where you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 609, "tokens": 0, "vector": null, "score": 0}, {"text": "really tell it about you know these are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 610, "tokens": 0, "vector": null, "score": 0}, {"text": "primary Keys these are foreign keys and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 611, "tokens": 0, "vector": null, "score": 0}, {"text": "you know you give it a lot of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 612, "tokens": 0, "vector": null, "score": 0}, {"text": "information compared to concise where", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 613, "tokens": 0, "vector": null, "score": 0}, {"text": "the syntax is a little more maybe let me", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 614, "tokens": 0, "vector": null, "score": 0}, {"text": "zoom in to make it easier to see whereas", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 615, "tokens": 0, "vector": null, "score": 0}, {"text": "the zoom in is just giving it the values", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 616, "tokens": 0, "vector": null, "score": 0}, {"text": "directly so basically what you're doing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 617, "tokens": 0, "vector": null, "score": 0}, {"text": "is you start off by telling it the task", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 618, "tokens": 0, "vector": null, "score": 0}, {"text": "this is a task converting text into SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 619, "tokens": 0, "vector": null, "score": 0}, {"text": "statement we will first give the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 620, "tokens": 0, "vector": null, "score": 0}, {"text": "database schema and then ask a question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 621, "tokens": 0, "vector": null, "score": 0}, {"text": "in text you're asked to generate SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 622, "tokens": 0, "vector": null, "score": 0}, {"text": "statements so then here's an example", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 623, "tokens": 0, "vector": null, "score": 0}, {"text": "here's an example so these are the few", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 624, "tokens": 0, "vector": null, "score": 0}, {"text": "shot examples so they're annotated as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 625, "tokens": 0, "vector": null, "score": 0}, {"text": "here is an example convert text to SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 626, "tokens": 0, "vector": null, "score": 0}, {"text": "so then you have the schema values", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 627, "tokens": 0, "vector": null, "score": 0}, {"text": "so in this case it looks like the tables", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 628, "tokens": 0, "vector": null, "score": 0}, {"text": "are separated with this um like Farm", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 629, "tokens": 0, "vector": null, "score": 0}, {"text": "colon uh yeah so this is City okay so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 630, "tokens": 0, "vector": null, "score": 0}, {"text": "that's what that looks like uh then you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 631, "tokens": 0, "vector": null, "score": 0}, {"text": "have the column names associated with", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 632, "tokens": 0, "vector": null, "score": 0}, {"text": "the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 633, "tokens": 0, "vector": null, "score": 0}, {"text": "schema oh so you do have the type so you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 634, "tokens": 0, "vector": null, "score": 0}, {"text": "just have a little more verbose way to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 635, "tokens": 0, "vector": null, "score": 0}, {"text": "say in the type so sorry if I get bad", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 636, "tokens": 0, "vector": null, "score": 0}, {"text": "information uh so then you have the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 637, "tokens": 0, "vector": null, "score": 0}, {"text": "question example so what are the themes", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 638, "tokens": 0, "vector": null, "score": 0}, {"text": "of farm competition sorted by urine", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 639, "tokens": 0, "vector": null, "score": 0}, {"text": "ascending order and then you have the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 640, "tokens": 0, "vector": null, "score": 0}, {"text": "corresponding translation so so you give", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 641, "tokens": 0, "vector": null, "score": 0}, {"text": "a couple examples of these and then when", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 642, "tokens": 0, "vector": null, "score": 0}, {"text": "it comes to be test time you have here's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 643, "tokens": 0, "vector": null, "score": 0}, {"text": "a test question to be answered convert", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 644, "tokens": 0, "vector": null, "score": 0}, {"text": "text SQL you have the new schema the new", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 645, "tokens": 0, "vector": null, "score": 0}, {"text": "explanations of the types of the columns", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 646, "tokens": 0, "vector": null, "score": 0}, {"text": "the primary Keys foreign keys and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 647, "tokens": 0, "vector": null, "score": 0}, {"text": "the question how many singers do we have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 648, "tokens": 0, "vector": null, "score": 0}, {"text": "and then generate the SQL in addition to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 649, "tokens": 0, "vector": null, "score": 0}, {"text": "the comparison between concise and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 650, "tokens": 0, "vector": null, "score": 0}, {"text": "verbose prompting the authors are also", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 651, "tokens": 0, "vector": null, "score": 0}, {"text": "going to explore consistency filtering", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 652, "tokens": 0, "vector": null, "score": 0}, {"text": "and execution filtering so to give a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 653, "tokens": 0, "vector": null, "score": 0}, {"text": "quick background before we'll dive into", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 654, "tokens": 0, "vector": null, "score": 0}, {"text": "the open AI playground and get an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 655, "tokens": 0, "vector": null, "score": 0}, {"text": "example of what this kind of Randomness", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 656, "tokens": 0, "vector": null, "score": 0}, {"text": "in large language model decoding looks", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 657, "tokens": 0, "vector": null, "score": 0}, {"text": "like consistency filtering is mostly", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 658, "tokens": 0, "vector": null, "score": 0}, {"text": "used in question answering is where you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 659, "tokens": 0, "vector": null, "score": 0}, {"text": "sample diverse reasoning paths and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 660, "tokens": 0, "vector": null, "score": 0}, {"text": "the ones that end up at the same answer", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 661, "tokens": 0, "vector": null, "score": 0}, {"text": "sorry answering they end up at the same", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 662, "tokens": 0, "vector": null, "score": 0}, {"text": "answer that's going to be the final", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 663, "tokens": 0, "vector": null, "score": 0}, {"text": "question so if it's like mathematical", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 664, "tokens": 0, "vector": null, "score": 0}, {"text": "reasoning and then you're like breaking", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 665, "tokens": 0, "vector": null, "score": 0}, {"text": "down the steps of doing the math by", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 666, "tokens": 0, "vector": null, "score": 0}, {"text": "decoding different paths in the language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 667, "tokens": 0, "vector": null, "score": 0}, {"text": "model output then you just aggregate the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 668, "tokens": 0, "vector": null, "score": 0}, {"text": "final answers it's the most consistent", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 669, "tokens": 0, "vector": null, "score": 0}, {"text": "like say 40 if we're adding numbers or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 670, "tokens": 0, "vector": null, "score": 0}, {"text": "something and then that would be the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 671, "tokens": 0, "vector": null, "score": 0}, {"text": "answer that you give in the question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 672, "tokens": 0, "vector": null, "score": 0}, {"text": "answering execution filtering is unique", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 673, "tokens": 0, "vector": null, "score": 0}, {"text": "to programming languages this is where", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 674, "tokens": 0, "vector": null, "score": 0}, {"text": "you sample the diverse outputs but then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 675, "tokens": 0, "vector": null, "score": 0}, {"text": "you put the outputs through the code", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 676, "tokens": 0, "vector": null, "score": 0}, {"text": "executor and then similarly how many", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 677, "tokens": 0, "vector": null, "score": 0}, {"text": "ended up with the same output so you can", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 678, "tokens": 0, "vector": null, "score": 0}, {"text": "use this for you know SQL python all", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 679, "tokens": 0, "vector": null, "score": 0}, {"text": "this kind of stuff you can take the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 680, "tokens": 0, "vector": null, "score": 0}, {"text": "different code generated and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 681, "tokens": 0, "vector": null, "score": 0}, {"text": "execute it and then whatever the most", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 682, "tokens": 0, "vector": null, "score": 0}, {"text": "popular output is that's what will get", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 683, "tokens": 0, "vector": null, "score": 0}, {"text": "sent as the answer okay so we're in the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 684, "tokens": 0, "vector": null, "score": 0}, {"text": "open AI playground and we're going to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 685, "tokens": 0, "vector": null, "score": 0}, {"text": "dive deeper into how consistency", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 686, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering works so the idea is that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 687, "tokens": 0, "vector": null, "score": 0}, {"text": "we're going to sample diverse candidates", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 688, "tokens": 0, "vector": null, "score": 0}, {"text": "from large language models as we decode", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 689, "tokens": 0, "vector": null, "score": 0}, {"text": "them with Randomness we have temperature", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 690, "tokens": 0, "vector": null, "score": 0}, {"text": "set to one and we're asking the language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 691, "tokens": 0, "vector": null, "score": 0}, {"text": "model please write a one sentence", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 692, "tokens": 0, "vector": null, "score": 0}, {"text": "summary of kubernetes for a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 693, "tokens": 0, "vector": null, "score": 0}, {"text": "five-year-old please be as creative as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 694, "tokens": 0, "vector": null, "score": 0}, {"text": "possible so the first time we ask it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 695, "tokens": 0, "vector": null, "score": 0}, {"text": "this it says kubernetes kubernetes is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 696, "tokens": 0, "vector": null, "score": 0}, {"text": "like playing with Legos to build a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 697, "tokens": 0, "vector": null, "score": 0}, {"text": "superhero City in the cloud okay so that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 698, "tokens": 0, "vector": null, "score": 0}, {"text": "would be you one potential generation", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 699, "tokens": 0, "vector": null, "score": 0}, {"text": "then we sample another generation", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 700, "tokens": 0, "vector": null, "score": 0}, {"text": "kubernetes is like a magical box that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 701, "tokens": 0, "vector": null, "score": 0}, {"text": "helps get your work done faster so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 702, "tokens": 0, "vector": null, "score": 0}, {"text": "that's an example of how we can sample a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 703, "tokens": 0, "vector": null, "score": 0}, {"text": "you know diverse outputs this is similar", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 704, "tokens": 0, "vector": null, "score": 0}, {"text": "to the idea of like tree of thoughts", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 705, "tokens": 0, "vector": null, "score": 0}, {"text": "where you you know go down all these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 706, "tokens": 0, "vector": null, "score": 0}, {"text": "reasoning paths so maybe another example", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 707, "tokens": 0, "vector": null, "score": 0}, {"text": "would be uh you know how many people are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 708, "tokens": 0, "vector": null, "score": 0}, {"text": "in America please show each intermediate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 709, "tokens": 0, "vector": null, "score": 0}, {"text": "step as you you know determine this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 710, "tokens": 0, "vector": null, "score": 0}, {"text": "answer", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 711, "tokens": 0, "vector": null, "score": 0}, {"text": "and then so this is kind of like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 712, "tokens": 0, "vector": null, "score": 0}, {"text": "something that maybe requires reasoning", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 713, "tokens": 0, "vector": null, "score": 0}, {"text": "so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 714, "tokens": 0, "vector": null, "score": 0}, {"text": "you know it's sort of like a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 715, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucination also to ask it to do this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 716, "tokens": 0, "vector": null, "score": 0}, {"text": "but okay so it came up with", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 717, "tokens": 0, "vector": null, "score": 0}, {"text": "calculated people so it's saying you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 718, "tokens": 0, "vector": null, "score": 0}, {"text": "know 331 000 so this is like the final", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 719, "tokens": 0, "vector": null, "score": 0}, {"text": "answer so then consistency filtering", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 720, "tokens": 0, "vector": null, "score": 0}, {"text": "would be we just keep sampling from it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 721, "tokens": 0, "vector": null, "score": 0}, {"text": "and then see if it keeps coming to that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 722, "tokens": 0, "vector": null, "score": 0}, {"text": "same 330 Million number I don't know if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 723, "tokens": 0, "vector": null, "score": 0}, {"text": "this is the best example of that but you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 724, "tokens": 0, "vector": null, "score": 0}, {"text": "see how instead of doing the step two it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 725, "tokens": 0, "vector": null, "score": 0}, {"text": "just did it after step one you do this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 726, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of thing but for writing python", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 727, "tokens": 0, "vector": null, "score": 0}, {"text": "code SQL code you sample a bunch of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 728, "tokens": 0, "vector": null, "score": 0}, {"text": "different Pathways and then the final", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 729, "tokens": 0, "vector": null, "score": 0}, {"text": "answer because in question answering", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 730, "tokens": 0, "vector": null, "score": 0}, {"text": "consistency filtering is just about is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 731, "tokens": 0, "vector": null, "score": 0}, {"text": "this answer the same whereas with code", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 732, "tokens": 0, "vector": null, "score": 0}, {"text": "execution filtering you take the green", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 733, "tokens": 0, "vector": null, "score": 0}, {"text": "that it generated like you know write a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 734, "tokens": 0, "vector": null, "score": 0}, {"text": "Python program for bubble sort and it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 735, "tokens": 0, "vector": null, "score": 0}, {"text": "you know write this python code and then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 736, "tokens": 0, "vector": null, "score": 0}, {"text": "you would put that into the python", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 737, "tokens": 0, "vector": null, "score": 0}, {"text": "executor and then consistency of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 738, "tokens": 0, "vector": null, "score": 0}, {"text": "outputs so quickly before diving fully", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 739, "tokens": 0, "vector": null, "score": 0}, {"text": "into the results the authors do find a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 740, "tokens": 0, "vector": null, "score": 0}, {"text": "significant benefit by doing this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 741, "tokens": 0, "vector": null, "score": 0}, {"text": "consistency and execution filtering you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 742, "tokens": 0, "vector": null, "score": 0}, {"text": "see you know no consistency down to 77", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 743, "tokens": 0, "vector": null, "score": 0}, {"text": "then the execution filtering 79 compared", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 744, "tokens": 0, "vector": null, "score": 0}, {"text": "to you know up to 83 with the exact", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 745, "tokens": 0, "vector": null, "score": 0}, {"text": "matching or the execution accuracy of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 746, "tokens": 0, "vector": null, "score": 0}, {"text": "the SQL queries so I think this is a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 747, "tokens": 0, "vector": null, "score": 0}, {"text": "super interesting idea for this was one", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 748, "tokens": 0, "vector": null, "score": 0}, {"text": "of my favorite ideas and say the Lang", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 749, "tokens": 0, "vector": null, "score": 0}, {"text": "chain chains is taking the output of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 750, "tokens": 0, "vector": null, "score": 0}, {"text": "language model putting it into the say", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 751, "tokens": 0, "vector": null, "score": 0}, {"text": "the python reple and then seeing the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 752, "tokens": 0, "vector": null, "score": 0}, {"text": "output and then chaining where the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 753, "tokens": 0, "vector": null, "score": 0}, {"text": "language model then sees the output and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 754, "tokens": 0, "vector": null, "score": 0}, {"text": "says okay is this the output the authors", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 755, "tokens": 0, "vector": null, "score": 0}, {"text": "actually are going to conclude that they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 756, "tokens": 0, "vector": null, "score": 0}, {"text": "didn't find good results of putting the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 757, "tokens": 0, "vector": null, "score": 0}, {"text": "error messages for queries that didn't", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 758, "tokens": 0, "vector": null, "score": 0}, {"text": "pass into the back into the prompt and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 759, "tokens": 0, "vector": null, "score": 0}, {"text": "saying hey here's the error that you got", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 760, "tokens": 0, "vector": null, "score": 0}, {"text": "for this but I think generally that kind", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 761, "tokens": 0, "vector": null, "score": 0}, {"text": "of that I mean like that's how I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 762, "tokens": 0, "vector": null, "score": 0}, {"text": "personally code as a human right is I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 763, "tokens": 0, "vector": null, "score": 0}, {"text": "see the error and I iterate on the error", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 764, "tokens": 0, "vector": null, "score": 0}, {"text": "so I think there's probably something to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 765, "tokens": 0, "vector": null, "score": 0}, {"text": "continuing to mine these chains of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 766, "tokens": 0, "vector": null, "score": 0}, {"text": "execution filtering okay so let's dive", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 767, "tokens": 0, "vector": null, "score": 0}, {"text": "into the results now that we have an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 768, "tokens": 0, "vector": null, "score": 0}, {"text": "understanding of what the spider data", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 769, "tokens": 0, "vector": null, "score": 0}, {"text": "set is what it measures these text SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 770, "tokens": 0, "vector": null, "score": 0}, {"text": "translations given a schema as well as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 771, "tokens": 0, "vector": null, "score": 0}, {"text": "part of the input and we have a sense of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 772, "tokens": 0, "vector": null, "score": 0}, {"text": "few shot prompting versus say", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 773, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuning the model as well as say", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 774, "tokens": 0, "vector": null, "score": 0}, {"text": "this consistency filtering execution", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 775, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering concise prompt verbose prompt", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 776, "tokens": 0, "vector": null, "score": 0}, {"text": "ablation so firstly what we're seeing is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 777, "tokens": 0, "vector": null, "score": 0}, {"text": "the comparison of these few shot SQL", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 778, "tokens": 0, "vector": null, "score": 0}, {"text": "palm versus the fine-tuned SQL Palm so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 779, "tokens": 0, "vector": null, "score": 0}, {"text": "the first interesting detail is that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 780, "tokens": 0, "vector": null, "score": 0}, {"text": "they don't find much benefit by", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 781, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuning the model this is actually", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 782, "tokens": 0, "vector": null, "score": 0}, {"text": "an absolutely enormous detail because it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 783, "tokens": 0, "vector": null, "score": 0}, {"text": "it simplifies using this like crazy like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 784, "tokens": 0, "vector": null, "score": 0}, {"text": "if if you don't need to fine-tune the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 785, "tokens": 0, "vector": null, "score": 0}, {"text": "models and you don't need to think about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 786, "tokens": 0, "vector": null, "score": 0}, {"text": "like all this stuff around constructing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 787, "tokens": 0, "vector": null, "score": 0}, {"text": "the data sets the batching the you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 788, "tokens": 0, "vector": null, "score": 0}, {"text": "the the evaluation or the model", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 789, "tokens": 0, "vector": null, "score": 0}, {"text": "versioning all that kind of stuff that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 790, "tokens": 0, "vector": null, "score": 0}, {"text": "would come with if you really needed to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 791, "tokens": 0, "vector": null, "score": 0}, {"text": "fine tune these models to get it to do", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 792, "tokens": 0, "vector": null, "score": 0}, {"text": "tasks like that so they do find good", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 793, "tokens": 0, "vector": null, "score": 0}, {"text": "performance in the fuse shot I mean it's", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 794, "tokens": 0, "vector": null, "score": 0}, {"text": "probably worth", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 795, "tokens": 0, "vector": null, "score": 0}, {"text": "noting that say we're doing the weeviate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 796, "tokens": 0, "vector": null, "score": 0}, {"text": "trend we're writing weeviate aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 797, "tokens": 0, "vector": null, "score": 0}, {"text": "queries or you know you're trying to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 798, "tokens": 0, "vector": null, "score": 0}, {"text": "customize this to any arbitrary API it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 799, "tokens": 0, "vector": null, "score": 0}, {"text": "might it might not have as much domain", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 800, "tokens": 0, "vector": null, "score": 0}, {"text": "knowledge of that in the pre-training", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 801, "tokens": 0, "vector": null, "score": 0}, {"text": "data because surely palm and its", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 802, "tokens": 0, "vector": null, "score": 0}, {"text": "pre-training Corpus has SQL examples", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 803, "tokens": 0, "vector": null, "score": 0}, {"text": "information about SQL in it so that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 804, "tokens": 0, "vector": null, "score": 0}, {"text": "might be slightly biasing the results as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 805, "tokens": 0, "vector": null, "score": 0}, {"text": "well but super interestingly so we're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 806, "tokens": 0, "vector": null, "score": 0}, {"text": "seeing 82.7 from the fuchsia model", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 807, "tokens": 0, "vector": null, "score": 0}, {"text": "compared to 84.1 from the fine-tuned", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 808, "tokens": 0, "vector": null, "score": 0}, {"text": "state of the art another kind of Reason", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 809, "tokens": 0, "vector": null, "score": 0}, {"text": "though the fine-tune state of the art", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 810, "tokens": 0, "vector": null, "score": 0}, {"text": "might be a little more interesting is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 811, "tokens": 0, "vector": null, "score": 0}, {"text": "because of this three billion parameter", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 812, "tokens": 0, "vector": null, "score": 0}, {"text": "so it's gonna be a little cheaper to run", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 813, "tokens": 0, "vector": null, "score": 0}, {"text": "this is another one of the big Topics in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 814, "tokens": 0, "vector": null, "score": 0}, {"text": "deep learning is can we use maybe these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 815, "tokens": 0, "vector": null, "score": 0}, {"text": "models to generate training data to then", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 816, "tokens": 0, "vector": null, "score": 0}, {"text": "do knowledge distillation and then have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 817, "tokens": 0, "vector": null, "score": 0}, {"text": "a much smaller model that costs us less", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 818, "tokens": 0, "vector": null, "score": 0}, {"text": "for inference so you know is it really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 819, "tokens": 0, "vector": null, "score": 0}, {"text": "worth it if every time we run these", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 820, "tokens": 0, "vector": null, "score": 0}, {"text": "queries it costs us like two cents to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 821, "tokens": 0, "vector": null, "score": 0}, {"text": "translate it to the SQL especially when", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 822, "tokens": 0, "vector": null, "score": 0}, {"text": "the large language models are doing them", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 823, "tokens": 0, "vector": null, "score": 0}, {"text": "autonomously so it's an interesting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 824, "tokens": 0, "vector": null, "score": 0}, {"text": "detail these three billion parameter", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 825, "tokens": 0, "vector": null, "score": 0}, {"text": "models that are you know pretty on par", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 826, "tokens": 0, "vector": null, "score": 0}, {"text": "and we could probably use these models", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 827, "tokens": 0, "vector": null, "score": 0}, {"text": "in a different way to distill them but", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 828, "tokens": 0, "vector": null, "score": 0}, {"text": "nevertheless if you're a trans like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 829, "tokens": 0, "vector": null, "score": 0}, {"text": "again is using this example of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 830, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate aggregate query translation I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 831, "tokens": 0, "vector": null, "score": 0}, {"text": "think that's the most interesting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 832, "tokens": 0, "vector": null, "score": 0}, {"text": "motivating case of the few shot because", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 833, "tokens": 0, "vector": null, "score": 0}, {"text": "you know you're you're getting it to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 834, "tokens": 0, "vector": null, "score": 0}, {"text": "learn this new API as fast as possible", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 835, "tokens": 0, "vector": null, "score": 0}, {"text": "without collecting train data or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 836, "tokens": 0, "vector": null, "score": 0}, {"text": "anything like that so here's another", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 837, "tokens": 0, "vector": null, "score": 0}, {"text": "example breaking down the performance", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 838, "tokens": 0, "vector": null, "score": 0}, {"text": "from easy medium hard extra hard so you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 839, "tokens": 0, "vector": null, "score": 0}, {"text": "know probably the biggest takeaway is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 840, "tokens": 0, "vector": null, "score": 0}, {"text": "that you do see this like monotonic", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 841, "tokens": 0, "vector": null, "score": 0}, {"text": "performance decrease from easy to medium", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 842, "tokens": 0, "vector": null, "score": 0}, {"text": "hard extra hard so that's a pretty", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 843, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting detail of this so especially", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 844, "tokens": 0, "vector": null, "score": 0}, {"text": "if you're you know planning on if you're", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 845, "tokens": 0, "vector": null, "score": 0}, {"text": "interested in designing systems like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 846, "tokens": 0, "vector": null, "score": 0}, {"text": "this if you should probably have some", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 847, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of maybe a classifier that says how", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 848, "tokens": 0, "vector": null, "score": 0}, {"text": "hard the question is stuff like this or", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 849, "tokens": 0, "vector": null, "score": 0}, {"text": "just generally logging the queries that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 850, "tokens": 0, "vector": null, "score": 0}, {"text": "fail and overall trying to work to get", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 851, "tokens": 0, "vector": null, "score": 0}, {"text": "these models to perform better on the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 852, "tokens": 0, "vector": null, "score": 0}, {"text": "hard questions but just an interesting", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 853, "tokens": 0, "vector": null, "score": 0}, {"text": "thing to see", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 854, "tokens": 0, "vector": null, "score": 0}, {"text": "so then we have the variants of spider", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 855, "tokens": 0, "vector": null, "score": 0}, {"text": "so again we have the synonym replacement", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 856, "tokens": 0, "vector": null, "score": 0}, {"text": "uh the more realistic questions where", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 857, "tokens": 0, "vector": null, "score": 0}, {"text": "you deleted any mention of the column", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 858, "tokens": 0, "vector": null, "score": 0}, {"text": "name and then the domain knowledge I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 859, "tokens": 0, "vector": null, "score": 0}, {"text": "actually wasn't really able to figure", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 860, "tokens": 0, "vector": null, "score": 0}, {"text": "out exactly what that is so uh so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 861, "tokens": 0, "vector": null, "score": 0}, {"text": "comparing with the chai gbt open AI", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 862, "tokens": 0, "vector": null, "score": 0}, {"text": "default prompt this is another really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 863, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting detail I'm sorry I forgot to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 864, "tokens": 0, "vector": null, "score": 0}, {"text": "show this in the video but open AI they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 865, "tokens": 0, "vector": null, "score": 0}, {"text": "have a recommended prompt for writing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 866, "tokens": 0, "vector": null, "score": 0}, {"text": "SQL queries so what they're showing is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 867, "tokens": 0, "vector": null, "score": 0}, {"text": "they're uh they're more verbose problems", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 868, "tokens": 0, "vector": null, "score": 0}, {"text": "with the consistency filtering execution", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 869, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 870, "tokens": 0, "vector": null, "score": 0}, {"text": "improve the performance and then you see", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 871, "tokens": 0, "vector": null, "score": 0}, {"text": "the robustness across the uh the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 872, "tokens": 0, "vector": null, "score": 0}, {"text": "different data sets you know it's still", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 873, "tokens": 0, "vector": null, "score": 0}, {"text": "this three billion parameter model is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 874, "tokens": 0, "vector": null, "score": 0}, {"text": "doing a pretty good job which is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 875, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting because this would be cheaper", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 876, "tokens": 0, "vector": null, "score": 0}, {"text": "to run", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 877, "tokens": 0, "vector": null, "score": 0}, {"text": "so then we have the ablation of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 878, "tokens": 0, "vector": null, "score": 0}, {"text": "concise versus verbose prompting so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 879, "tokens": 0, "vector": null, "score": 0}, {"text": "interestingly the concise prompts", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 880, "tokens": 0, "vector": null, "score": 0}, {"text": "perform better which they perform about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 881, "tokens": 0, "vector": null, "score": 0}, {"text": "the same but like the you know not", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 882, "tokens": 0, "vector": null, "score": 0}, {"text": "really giving it these long descriptions", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 883, "tokens": 0, "vector": null, "score": 0}, {"text": "of the properties I think it really", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 884, "tokens": 0, "vector": null, "score": 0}, {"text": "depends on this and you know we're gonna", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 885, "tokens": 0, "vector": null, "score": 0}, {"text": "I think the verbose prompting is more", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 886, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting going forward for the k for the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 887, "tokens": 0, "vector": null, "score": 0}, {"text": "case of filtered Vector search with that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 888, "tokens": 0, "vector": null, "score": 0}, {"text": "self querying retriever thing because we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 889, "tokens": 0, "vector": null, "score": 0}, {"text": "want to you know filter it based on", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 890, "tokens": 0, "vector": null, "score": 0}, {"text": "property so I think it needs to have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 891, "tokens": 0, "vector": null, "score": 0}, {"text": "some sense of what the properties are", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 892, "tokens": 0, "vector": null, "score": 0}, {"text": "like what the potential values that you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 893, "tokens": 0, "vector": null, "score": 0}, {"text": "could filter with so definitely an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 894, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting topic as well so here's some", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 895, "tokens": 0, "vector": null, "score": 0}, {"text": "discussion topics from the authors they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 896, "tokens": 0, "vector": null, "score": 0}, {"text": "say that you know once they fine-tuned", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 897, "tokens": 0, "vector": null, "score": 0}, {"text": "the model so you know converting this to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 898, "tokens": 0, "vector": null, "score": 0}, {"text": "this the sampling diversity", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 899, "tokens": 0, "vector": null, "score": 0}, {"text": "significantly reduced so that kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 900, "tokens": 0, "vector": null, "score": 0}, {"text": "consistency filtering execution", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 901, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering they had less diversity and", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 902, "tokens": 0, "vector": null, "score": 0}, {"text": "thus that technique on top of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 903, "tokens": 0, "vector": null, "score": 0}, {"text": "inference was less effective they also", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 904, "tokens": 0, "vector": null, "score": 0}, {"text": "found that as mentioned earlier the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 905, "tokens": 0, "vector": null, "score": 0}, {"text": "self-correction giving it the error", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 906, "tokens": 0, "vector": null, "score": 0}, {"text": "messages when it doesn't work that that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 907, "tokens": 0, "vector": null, "score": 0}, {"text": "didn't work that well which I thought", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 908, "tokens": 0, "vector": null, "score": 0}, {"text": "was kind of interesting and then they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 909, "tokens": 0, "vector": null, "score": 0}, {"text": "find that you know that there are some", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 910, "tokens": 0, "vector": null, "score": 0}, {"text": "problems in evaluation data set they", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 911, "tokens": 0, "vector": null, "score": 0}, {"text": "give this comment that many of the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 912, "tokens": 0, "vector": null, "score": 0}, {"text": "errors are actually correct according to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 913, "tokens": 0, "vector": null, "score": 0}, {"text": "human experts so here are some of my", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 914, "tokens": 0, "vector": null, "score": 0}, {"text": "personal Reflections and takeaways after", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 915, "tokens": 0, "vector": null, "score": 0}, {"text": "reading the SQL Palm paper so first of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 916, "tokens": 0, "vector": null, "score": 0}, {"text": "which I think coming up with some kind", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 917, "tokens": 0, "vector": null, "score": 0}, {"text": "of Auto API for weviate aggregate I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 918, "tokens": 0, "vector": null, "score": 0}, {"text": "think this is low hanging fruit it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 919, "tokens": 0, "vector": null, "score": 0}, {"text": "definitely seems like something we can", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 920, "tokens": 0, "vector": null, "score": 0}, {"text": "achieve with using the openai large", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 921, "tokens": 0, "vector": null, "score": 0}, {"text": "language models or the Palm that's just", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 922, "tokens": 0, "vector": null, "score": 0}, {"text": "any of these large language model apis", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 923, "tokens": 0, "vector": null, "score": 0}, {"text": "that we already have in place for say", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 924, "tokens": 0, "vector": null, "score": 0}, {"text": "the Eva generate modules we could", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 925, "tokens": 0, "vector": null, "score": 0}, {"text": "similarly put this after the query to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 926, "tokens": 0, "vector": null, "score": 0}, {"text": "translate it into these aggregate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 927, "tokens": 0, "vector": null, "score": 0}, {"text": "queries which then the next question is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 928, "tokens": 0, "vector": null, "score": 0}, {"text": "how exactly we want to design this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 929, "tokens": 0, "vector": null, "score": 0}, {"text": "pipeline so maybe it should First Take", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 930, "tokens": 0, "vector": null, "score": 0}, {"text": "You know the auto API should be so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 931, "tokens": 0, "vector": null, "score": 0}, {"text": "open-ended that you just have a query", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 932, "tokens": 0, "vector": null, "score": 0}, {"text": "and then the classifier or the language", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 933, "tokens": 0, "vector": null, "score": 0}, {"text": "model first says is this aggregation", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 934, "tokens": 0, "vector": null, "score": 0}, {"text": "query or a get query and then the third", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 935, "tokens": 0, "vector": null, "score": 0}, {"text": "thing so so this is kind of just a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 936, "tokens": 0, "vector": null, "score": 0}, {"text": "little layer on like is this an", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 937, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate query or is this a vector", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 938, "tokens": 0, "vector": null, "score": 0}, {"text": "search query and but you can also apply", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 939, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector search within here to you know to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 940, "tokens": 0, "vector": null, "score": 0}, {"text": "say you want say you have tweets and you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 941, "tokens": 0, "vector": null, "score": 0}, {"text": "want to say like like you know similar", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 942, "tokens": 0, "vector": null, "score": 0}, {"text": "to this tweet you like exactly paste the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 943, "tokens": 0, "vector": null, "score": 0}, {"text": "text for your new tweet and then you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 944, "tokens": 0, "vector": null, "score": 0}, {"text": "want to aggregate I don't know say like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 945, "tokens": 0, "vector": null, "score": 0}, {"text": "the likes or something from that I've", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 946, "tokens": 0, "vector": null, "score": 0}, {"text": "given a talk on this at odsc London", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 947, "tokens": 0, "vector": null, "score": 0}, {"text": "that's also on alleviate YouTube if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 948, "tokens": 0, "vector": null, "score": 0}, {"text": "you're interested in that kind of topic", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 949, "tokens": 0, "vector": null, "score": 0}, {"text": "of the combination between Vector search", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 950, "tokens": 0, "vector": null, "score": 0}, {"text": "and then symbolic aggregations I think", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 951, "tokens": 0, "vector": null, "score": 0}, {"text": "it's a pretty interesting topic but", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 952, "tokens": 0, "vector": null, "score": 0}, {"text": "anyway getting a little distracted but", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 953, "tokens": 0, "vector": null, "score": 0}, {"text": "so then what I want to talk about is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 954, "tokens": 0, "vector": null, "score": 0}, {"text": "first of all this query routing idea", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 955, "tokens": 0, "vector": null, "score": 0}, {"text": "so first of all imagine you have two", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 956, "tokens": 0, "vector": null, "score": 0}, {"text": "different classes in weeviate you have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 957, "tokens": 0, "vector": null, "score": 0}, {"text": "all the podcast podcast transcriptions", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 958, "tokens": 0, "vector": null, "score": 0}, {"text": "and then you have like the Wii V8 code", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 959, "tokens": 0, "vector": null, "score": 0}, {"text": "base and you're asking a question like", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 960, "tokens": 0, "vector": null, "score": 0}, {"text": "you know how is this particular thing", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 961, "tokens": 0, "vector": null, "score": 0}, {"text": "implemented first asking that question", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 962, "tokens": 0, "vector": null, "score": 0}, {"text": "the language model of which class should", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 963, "tokens": 0, "vector": null, "score": 0}, {"text": "you search then this idea that I love", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 964, "tokens": 0, "vector": null, "score": 0}, {"text": "which is which filters to add so this is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 965, "tokens": 0, "vector": null, "score": 0}, {"text": "the you know self querying retriever you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 966, "tokens": 0, "vector": null, "score": 0}, {"text": "ask what is a golden doodle and imagine", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 967, "tokens": 0, "vector": null, "score": 0}, {"text": "your passages have this attribute about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 968, "tokens": 0, "vector": null, "score": 0}, {"text": "which animal they're talking about you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 969, "tokens": 0, "vector": null, "score": 0}, {"text": "can then filter the search space", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 970, "tokens": 0, "vector": null, "score": 0}, {"text": "dramatically with that so say we have", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 971, "tokens": 0, "vector": null, "score": 0}, {"text": "like I don't know we have like a 5", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 972, "tokens": 0, "vector": null, "score": 0}, {"text": "million scale passages about animals so", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 973, "tokens": 0, "vector": null, "score": 0}, {"text": "then asking it what is a Goldendoodle if", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 974, "tokens": 0, "vector": null, "score": 0}, {"text": "you can do that filter where animal", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 975, "tokens": 0, "vector": null, "score": 0}, {"text": "equals dog then you dramatically", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 976, "tokens": 0, "vector": null, "score": 0}, {"text": "simplify the search space so it's a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 977, "tokens": 0, "vector": null, "score": 0}, {"text": "pretty interesting thing thinking about", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 978, "tokens": 0, "vector": null, "score": 0}, {"text": "these categories I think it's most", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 979, "tokens": 0, "vector": null, "score": 0}, {"text": "straightforwardly manifested with you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 980, "tokens": 0, "vector": null, "score": 0}, {"text": "know like price filters so say you you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 981, "tokens": 0, "vector": null, "score": 0}, {"text": "know like take a picture from a shirt", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 982, "tokens": 0, "vector": null, "score": 0}, {"text": "from like Louis Vuitton or one of those", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 983, "tokens": 0, "vector": null, "score": 0}, {"text": "designer Brands then you just drop that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 984, "tokens": 0, "vector": null, "score": 0}, {"text": "into Amazon you say you know image", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 985, "tokens": 0, "vector": null, "score": 0}, {"text": "search shirt like this for you know less", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 986, "tokens": 0, "vector": null, "score": 0}, {"text": "than a hundred dollars and not having to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 987, "tokens": 0, "vector": null, "score": 0}, {"text": "know how to parse out the wear filtering", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 988, "tokens": 0, "vector": null, "score": 0}, {"text": "the the large language model under the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 989, "tokens": 0, "vector": null, "score": 0}, {"text": "hood parts of that out for you the next", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 990, "tokens": 0, "vector": null, "score": 0}, {"text": "really interesting topic I think is", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 991, "tokens": 0, "vector": null, "score": 0}, {"text": "connecting surge primitive so you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 992, "tokens": 0, "vector": null, "score": 0}, {"text": "we have these you know we have all sorts", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 993, "tokens": 0, "vector": null, "score": 0}, {"text": "of different features for search and we", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 994, "tokens": 0, "vector": null, "score": 0}, {"text": "V8 so say you have like you know you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 995, "tokens": 0, "vector": null, "score": 0}, {"text": "obviously have the wear filters we just", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 996, "tokens": 0, "vector": null, "score": 0}, {"text": "talked about but you also have Vector", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 997, "tokens": 0, "vector": null, "score": 0}, {"text": "search bm25 Hybrid search or say you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 998, "tokens": 0, "vector": null, "score": 0}, {"text": "want to re-rank the search results can", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 999, "tokens": 0, "vector": null, "score": 0}, {"text": "we kind of automatically construct a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1000, "tokens": 0, "vector": null, "score": 0}, {"text": "search pipeline for doing this kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1001, "tokens": 0, "vector": null, "score": 0}, {"text": "thing and then sixth thing is this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1002, "tokens": 0, "vector": null, "score": 0}, {"text": "concept of generative feedback loops", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1003, "tokens": 0, "vector": null, "score": 0}, {"text": "where we take data from the database you", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1004, "tokens": 0, "vector": null, "score": 0}, {"text": "know send it to the large language model", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1005, "tokens": 0, "vector": null, "score": 0}, {"text": "and then save the result back to eviate", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1006, "tokens": 0, "vector": null, "score": 0}, {"text": "I think in a lot of cases these you know", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1007, "tokens": 0, "vector": null, "score": 0}, {"text": "like when you're doing these kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1008, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic aggregations you might want to", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1009, "tokens": 0, "vector": null, "score": 0}, {"text": "save the fact that you derived maybe as", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1010, "tokens": 0, "vector": null, "score": 0}, {"text": "a natural language fact into some kind", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1011, "tokens": 0, "vector": null, "score": 0}, {"text": "of Text corpus like I know generally", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1012, "tokens": 0, "vector": null, "score": 0}, {"text": "like when I'm using SQL like back when I", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1013, "tokens": 0, "vector": null, "score": 0}, {"text": "did that kind of thing I if I had a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1014, "tokens": 0, "vector": null, "score": 0}, {"text": "query that was useful I would save that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1015, "tokens": 0, "vector": null, "score": 0}, {"text": "query for reference later so I wouldn't", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1016, "tokens": 0, "vector": null, "score": 0}, {"text": "always have to remember how to write it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1017, "tokens": 0, "vector": null, "score": 0}, {"text": "so maybe there's something to that in", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1018, "tokens": 0, "vector": null, "score": 0}, {"text": "some kind of connection with generative", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1019, "tokens": 0, "vector": null, "score": 0}, {"text": "feedback loops but overall my takeaway", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1020, "tokens": 0, "vector": null, "score": 0}, {"text": "is I think this kind of idea of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1021, "tokens": 0, "vector": null, "score": 0}, {"text": "automatically writing these kind of", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1022, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate queries exact same ideas the", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1023, "tokens": 0, "vector": null, "score": 0}, {"text": "paper I think that's also something that", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1024, "tokens": 0, "vector": null, "score": 0}, {"text": "we could achieve in Wi-Fi and it's quite", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1025, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting so thank you so much for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1026, "tokens": 0, "vector": null, "score": 0}, {"text": "watching this paper summary of SQL Palm", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1027, "tokens": 0, "vector": null, "score": 0}, {"text": "again if you like content like this", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1028, "tokens": 0, "vector": null, "score": 0}, {"text": "paper summary content please leave a", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1029, "tokens": 0, "vector": null, "score": 0}, {"text": "like And subscribe to the channel it", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1030, "tokens": 0, "vector": null, "score": 0}, {"text": "really helps encourage us to make more", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1031, "tokens": 0, "vector": null, "score": 0}, {"text": "videos like this please check out wevv8", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1032, "tokens": 0, "vector": null, "score": 0}, {"text": "on weavate iO or the open source GitHub", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1033, "tokens": 0, "vector": null, "score": 0}, {"text": "repository web", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1034, "tokens": 0, "vector": null, "score": 0}, {"text": "and please follow us on Twitter at", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1035, "tokens": 0, "vector": null, "score": 0}, {"text": "webiate IO thank you so much for", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1036, "tokens": 0, "vector": null, "score": 0}, {"text": "watching", "doc_name": "SQL-PaLM Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1037, "tokens": 0, "vector": null, "score": 0}]}