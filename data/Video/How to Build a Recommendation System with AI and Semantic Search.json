{"text": "Vector databases and large language models (or LLMs) enable fast prototyping of systems that were incredibly difficult to build in ... \nhi it's Adam from we8 and welcome toanother episode in the series build withwe8 in today's digital agerecommendation systems have become anessential component of many onlineapplications and services from productrecommendations to content suggestionsthese systems help users discover newthings and make informed decisions everyday in this video we're going to build asimple recommendation system using weatea purpose-built open source Vector datadatabase let's try it out together Pointyour browser over to book rex. we. andtype in something that you want to learnabout the books that are surfaced willcontain semantically relevantsuggestions based on your query thesesemantic relationships are found throughapproximate nearest neighbor search onVector embeddings Associated betweenyour query and the book details like theauthor the title and the descriptionthis way we're not just judging a bookby its cover to build this project we'regoing to create an instance of a we we8cluster using the we8 cloud consolewe'll create embeddings for about 7,000books from a Kagel data set connect to alarge language model hosted on open Aiand then I'll walk through the nextjsapplication doing semantic search overthe data set to surface thosesemantically related books to you asalways here at we8 we love open sourceand so we've made this example availableto you on GitHub and repet we're excitedto see what you build yourself with thissample and just a heads up some of thecode in this video may be out of date bythe time you watch it so keep an eye onthe git repo for the latest changes ifthis sounds like an interesting projectto you let's go build it rightnow the first thing we'll do is registeron we8 cloud services or WCS it's supereasy and will only take you a minute ortwo to get to WCS Point your browser toconsole. we v8. cloud and if you needpause the video to sign up for anaccount once you're logged in to weateconsole we'll create a new cluster forthis example we can use the free clustertier give your cluster a memorable namemake sure enable authentication is setto yes and then when you're donereviewing the details go ahead and clickcreate give this a bit of time and letWCS deploy your cluster then we'll takenote of the cluster URL and the API keyfor your we8 instance when ready clickdetails on our newly created clusterthis will create an expanded view of thecluster go ahead and copy the clusterURL and save it in a text file or notesfile so that you can reference it laterand now for the API key back in WCSclick API keys and then copy the adminkey save it in that same text file forreferencelater and we're done with setting up ourwe8 cluster we'll also need an API keyfrom open AI so that we can use theirmodel to generate our embeddings to do cIC search note that since we're using anopen AI model each time you make a callto create an embedding or to query thevector database there will be a smallcharge on your API key if you alreadyhave an API key from openai you can usethat in this project too if you don'thave an API key yet go ahead andregister for an account onopen.com once you're logged in selectAPI then go to your avatar at the topright of the screen select view API Keyscreate a new Secret key and then give ita name of your choice and finally goahead and create it copy the key and putit into your notes file for referencelater and this should be everythinglet's go ahead and make sure that weactually have the source code now ifyou're watching this in repet you'lllikely have already cloned the templateand you're ready to go if you'rewatching this on YouTube or you want tobuild this locally you can find the linkto the git repository in the descriptionbelow clone the repository bydownloading the zip from GitHub orcloning it in your shell environmentwhen you have the files locally go aheadand open up the project in your editorof choice before we get into creatingour embeddings let's go and set up ourenvironment we need to put the clusterURL and the API Keys into ourenvironment variables if you're buildingthis locally you can use your editor ofchoice to put them in anv file you cancopy the env. sample into a newv fileuse the variable names as reference inthe file and change the placeholderswith your values if you're building thisin repet you can pull up the secretstool on the bottom left of the screenand insert your environment variablesthere instead just make sure to use thesame names as those referenced in theenv. sample awesome so our environmentis set up let's get going withpopulating the vector database with thebook's data set and their Vectorrepresentations as mentioned earlierwe'll be using a data set from Kegel itcontains contains about 7,000 books withdetails like the ISBN number thedescription a link to the book cover andmore if you're interested in readingmore about the data set in Kagel you canfind the link in the description belowthere's a folder called Data pipeline inour repository that has two scripts andthe kagle data set this data is storedin a file called 7k- books dk. CSV feelfree to pause the video and take a lookthrough it one of the scripts populatepy is respond responsible for creatingvectors and storing those vectors inwe8 let's look at populate py in Greaterdetail first we create a we V8 clientobject that receives the we V8 clusterURL the we V8 API key and the open AIAPI key in case the script was runbefore we delete any pre-existing schemacalled book just to you know keep thedatabase fresh you probably don't wantto do this in production but for thissample we do it to make sure our data isconsistent betweenruns then we create a schema for ourbooks the schema contains configurationdetails for how we want to vectorize thedata as you can see we are using thetextto V openai vectorizer and in themodule configuration we're using Ada O2as the foundation model to generate ourembeddings finally we'll iterate througheach row in our CSV data set to createvectors for each book and we use wehbatch creation API to create the vectorembeddings and to store the embeddingsand related data objects in the we8cluster okay so now that you know howthis works let's run it to do that we ofcourse need to install some dependenciesset up a python virtual environment forthese dependencies and then run pipinstall R requirements.txt in ourterminal to install the official we8python client along with several otherdependencies needed for these scripts torun if you're repet I think these shouldautomatically be installed into therepple then run python data pipelinepopulate py when it finishes you'll havedata in your we8 cluster and we canbegin doing some fun and interestingsearches overit with the data in the vector databaselet's run a simple semantic search overour embeddings in we8 and get a betterunderstanding of how the data is sentback to us as a result of the querythere's a script called search. py inthe data pipeline directory itdemonstrates a semantic search queryagain to interact with we8 we create awe8 client object then we create anobject called near text that listsseveral Concepts that we want to do oursearch against in the vector databasenow the search is not going to look forexact matches but rather semanticallyrelated Concepts to those in our listthe query is executed against the weedclient as shown on screen and theresults are then printed to screen feelfree to change some of the concepts inyour text and run the script severaltimes just to get an understanding ofwhat the responses look like running thescript should be as easy as runningpopulate py in your shell run pythondata pipeline search. py looking throughthe results you should see a largeobject sent back with a list of booksdeeply nested in the response as you cansee these book results should besemantically similar to those in thenear text Concepts from the query allright now that we know how we caninteract with we8 to find semanticallysimilar items I'm going to show you howthe nextjs application uses this tosurface those recommendations to the webinterface I used create next app inorder to create the nextjs project and Iconfigured Tailwind CSS from the get-gofor styling I've kept the application assimple as possible by limiting thecomplexity of the interface there's aninput field to receive the prompt fromthe user a grid view to show recommendedbooks and then a modal overlay to act asa single Book View where we can read thedescription and see other bookdetails the jsx for the applicationcontains a form element which contains asubmission button and an input elementwith various attributes the input fieldis most interesting because it's Whatreceives the user's input we store thatin a value attribute as query this queryvariable is a state managed in ourcomponent up at the top of this indexfile when text changes in the inputfieldthe set query function is triggered andthe query state is updated this is justregular react stuff if this is new toyou check out a course in react ornextjs to get a better understanding ofhow it works there's also some beautifulclass tags that style the input fieldthrough the power of Tailwind CSS TheForum element has onsubmit that triggersa function called get recommendationswhen the submission button is clickedlet's go take a look at getrecommendations the first thing is somelightweight validation that ensures theuser has actually typed something intothe input field then we can trigger afetch call against APIreccommendations once we get a responsewe extract the book data from thepayload if you look deeply enough at theresults from search. py we know we canget the list of recommended books fromrecommendations. dat.getbook we then store it in a statevariable and with this we have the bookrecommendations data in the next xjsclientapplication let's take a look at how weset up the API endpoint on our nextjsapp that queries weate on our data setin the pages folder there should be adirectory called API and within it is arecommendations. TS file that will betriggered when an HTTP request is sentto /i/reccommendations the recommendations. TSendpoint will extract the query from therequest body and then pass it into thewe client as a near text object andquery the book vectors in much the sameway that search. py did the result isthen sent back to the client which we'vealready set up to be stored in the statevariable of the nextjsapplication the recommendation gridappears with a list of books that comefrom the semantic search result from ournear text query we have these stored ina recommended books variable after aquery is made in the J SX of index wemap through recommended books and thisReturns the relevant divs that representthe recommendations grid the grid isstyled in a flex wrap div so that theyexpand into the parent container andwrap around when a row is filled as wemap through those recommendations werender book details to the screen suchas the book thumbnail the book title anda button to learn more about the bookwhen the button is tapped we rendermodal on screen there's some logic thatwill we select the book and put it intoa state variable so that the modal knowshow to display it and we also set anadditional State variable to force themodal to come on ascreen let's briefly look at the modalmechanics when the learn more button isclicked the open modal function istriggered and receives the book detailsso that we know which one was selectedand we set that book in the selectedbook Statevariable we'll also have a state tomanage the viewability of the modalwe'll call modal is open when this stateis set true the modal is rendered to thescreen this modal contains the thumbnailof the book the author details genreaverage rating published year anddescription and these are all renderedfrom the selected book State since wealso have the international standardbook number or ISBN for this book we canmake a naive query against Amazon toshow that book on an Amazon searchresult when clicked this is just for funlastly will also include a close modalbutton that will close the modal fromview okay that's all there really is tousing we V8 to create a simplerecommendation system in a nextjsapplication with the simple logic seenfrom this video we prototyped a simpleyet capable recommendation system usingwe8 Vector database thanks for watchingthis video we hope you found itinformative happy building with we8 andif you have any questions please sharewith us on our community slack or thewe8 forums the details are in thedescription below see you next[Music]time", "type": "Video", "name": "How to Build a Recommendation System with AI and Semantic Search", "path": "", "link": "https://www.youtube.com/watch?v=SF1ZlRjVsxw", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}