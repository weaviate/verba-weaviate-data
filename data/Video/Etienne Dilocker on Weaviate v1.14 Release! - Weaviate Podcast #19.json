{"text": "SeMI Technologies Co-Founder and CTO Etienne Dilocker returns to the Weaviate podcast to describe what's new with Weaviate ... \nhey everyone thank you so much forchecking out the we va podcast we have asuper exciting episode eddie anddilocker is back on the we vva podcastand we're going to be announcing what'snew about wev8 version 1.14in this podcast format so hopefully thiskind of style of having thisconversation around the new changes is anice companion to you know announces ofnew software and things like that andi'm really excited about kind of uhrolling out we vva version 1.14 in thiskind of style so eddie and if you hadsay one sentence to explain the what'snew about wev8 what would it beyeah hey connors thanks for for havingme i would say this is the most boringrelease that we've had so far and i'msuper excited about that so what i meanit's it's all about uh reliability aboutrunning vb and in production so all thatfeedback we've recently passed a milliondownloads and all that feedback that wegot from our users running it either intheir evaluation setup or in productionuh they discovered a lot of issues andand we fixed them all and basically thisis all in this release so i'm i'm superexcited about itso we have so we have the uh bulletpoints of the different topics that aregoing to be covered in the chapters ofthe podcast as well for people listeningif you want to jump ahead to thedifferent parts of the release thatyou're the most interested in but eddiecan we start with um what's new aboutmonitoring and observability what whatdoes that entail yeah yeah soobservability i think in in any newsoftware project it's like always one ofthese things where you know like youneed to design software in a way thatit's observable because well if it's notobservable you don't know what's goingon and then it makes it super hard to torun it like in a production setup whereuh yeah you can't monitor it as asclosely and uh with vv8 i think for thelongest time we've kind of said yeahit's coming it's coming it's coming andit's finally here so with this releaseuh we're adding uh prometheus compatiblemonitoring so prometheus is a sort of avery standard i would say industrystandard for for monitoring tools umessentially it's just a format it's justa format of how the metrics are arepresented but it comes with that wholeprometheus ecosystem so you canbasically just plug in standard softwarelike your standard prometheus a timeseries database standard grafana forvisualizing those metrics and all of asudden you have like insights into evathat you could never have before so youcan get all these these dashboards andand really for everything so it's ithink over the past couple of weeks wehad like a rough plan of what metrics wewould need but we just we kept on addingmore and more metrics because it's justso easy to add new metrics now so a verytypical example case would be importinginto vba so let's say you're importing arelatively large say i don't know 100million plusand all of a sudden it starts gettingslow so that was definitely one of theand also when we talk about thereliability fixes later on that was oneof the of the topics that could appearin the in the umin the past so a community user wouldmaybe say maybe say it's suddenly slowand then we would go oh well that's notsupposed to be like that but it's kindof hard to tell what's going on becausewellnot only is it not us running thatinstance like maybe it's self-hostableso so users can run it themselves um butalso they how would they know basicallyand with the monitoring setup this isnow super easy because every requestthat comes in so for example a batchimport that is split into its individualcomponents so it's being imported in thevector index and the object storagemaybe the inverted index if you ifyou're building that up as well and andthen all of these components are splitup further but that gives us a supereasy insight to just say oh look we cansee that the vector index is fast butthe object index is maybe uh slowingdown so ever since you crossed i don'tknow 100 million objects because you canof course also overlay that so you couldsend okay at that point you had 50million objects imported and all of asudden there was a jump maybe in thetime to to import one additional objectand uh that gives us and then our usersand then everyone operating vb8 a lot ofconfidence and a lot of insight in intojustfiguring out what the issue is andfixing it so it could easily say like ohlooks like you have an issue with yourdisk maybe or um something else in thesetup like yeah before it was a lot ofguesswork and now it's it's i guessdebugging is still it's still detectivework but now the detective has liketools and has hints toto basically uh yeahfigure out what's going onyes i'd really love to dive more intothe incremental build up of the h s wgraph and get back into the technicaldetails of that topic but uh just justso just one more time so prometheus it'sum it's like a visual dashboard kind oflike uh like a graph where you say haveuh you know you have this much ram hasbeen used uh this many vectors arewhat kind of what does the visual of itlook like yeah yeah so basically uh vvaitself just comes with those metrics andwe can like everything that's going onwe can basically measure and prometheusis kind of the format but prometheus isvery typically used in combination withgrafana which is this dashboard providerwhere you can you can so users candefine their own dashboards they can sayokay i want to combine this metric ormaybesee like how a metric changed over timeand these kind of thingsum and of course we also have like wehave a couple of sample dashboards so ifyou want you can have like this oneclick setup where you say um hey so wehave in our vba examples repository wehave this the setup you just spin it upand it has everything pre-configured andjust you start using vva normally butnow you can open up that grafanadashboard and you can just see what'sgoing on so so yeah it's a very veryvisual way you can of course also usethose metrics programmatically if youwant but like with grafana it's supereasy to just visualize it for yeah forthe users for the people having tooperate it for for everyone that'sinvolved in sort of making their casewith vb8 as a success caseyeah it sounds super exciting especiallyfor like you know very big scale iimagine that it's very useful to have uhso does this relate to say thehorizontal scalability idea we talkedabout earlier where uh you're using morethan one machine with wev8 and does thishelp you kind of monitor that as welldid those kind of play together a littlebit yeah yeah yeah exactly so soprometheus is really i would say sort ofa cloud native tool um so it does stufflike orchestrating across nodes it doesthat very well so you can like you canaggregate basically you have two wayslike you could say uh is there somethinggoing wrong on maybe one specific nodeand then prometheus just adds a label toit for for each node has a name or has ahostname or these kind of things so itgives you a label to to narrow it downor you could just say well i want totreat this vvate setup that's composedof multiple nodes as one unit basicallyfor for my use case and just tell it toto aggregate those those metrics as oneand you can do it as well so that'sthat's basically this granularitywould beyou start with the setup like like youcould let's say you would have amulti-tenant setup of like multiple vbainstances and that would be like thehighest one where you would say maybe uhas a as a vba user uh you yourself havelike different users and then each userhas like its own vba instance forexample then that would be the firstfirst level of granularity then per useryou would have this one vb8 setup thereyou video setup itself might havemultiple nodes on each node you wouldhave maybe multiple vb8 classes theycould be compromised of individualshards so basically you can you can godown as deep as you want until you havelike individual objects or even eveneven deeper on disk or you could go likevery highs and this gives you um sort ofthe the ability and prometheus does thatvery well to to just aggregate thoseindividual labels um yeah acrosswhatever you want including includingdistributed notes in a cluster setupyeah super exciting stuff and idefinitely want to talk also about uhmultiple classes and uh you know toquickly kind of background this forlisteners we have this kind ofsemantic relation data schema designwhere you could say uh have one classwould be say tweets and then you couldsay like has article link and then maybeyou want to store like an article asanother class like has image has anotherimage so it's a way to do multimodaldata it's a way to say decompose yourdata if you have a scientific paper andyou say want to have a has introductionhas related works has methodology youcan break it up into multiple classesand then you could have h sw structuresfor each of the classes if i'munderstanding that correctly but uh socould we kind of uh come back into theincremental build up of h sw and i thinkit ties into the monitoring as well justto maybe get a little more into what'shappening so so with h w my currentunderstanding of it again is we havethis proximity graphand umso you can take me through how youcompute the proximity graph and thenand then how you incrementally build upthe neighborhood graph to facilitatenearest neighbor search at massive scaleyeah yeah yeah i'm gonna gonna try tokeep this as short as possible so wedon't exploit the entire podcast becauseyou know i love talking about this umbut but no in in general uh the idea ofthe the proximity graph is that anearest neighbor in the graph basicallyis the nearest neighbor in the terms ofnearest neighbor search so that thedistance and that that may also be agood segue to one of the other topicsand when you talk about distances lateron um the distance between two neighborsin the graph is lower than the distancebetweena neighbor where you'd need two hopsthrough the graphum and that that is the same like if youimport two objects or maybe threeobjects or five objects or if you go tohundreds of millions like there is apoint where if you want to you can chartthis up into like multiple instances orinto multiple uh yeah indexes basicallyif you sayumfor examplewith this very large machine i can hold500 million on a single machine but themachine is simply not big enough to holdmore than 500 million but i need threebillion for example then you could sayokay i'm going to split this up into sixmachines that each hold 500 million andthen each of those machine would havetheir own hmsw graph but from a user'sperspective you wouldn't really noticebecause the the results basically if youdo a search it would search all sixgraphs in parallel and then because weall have this distance metric it'sbasically in a sense it's re-ranking iguess kind of a fancy term but yeah itbasically just means we take thoseresults from those six graphs and andbasically uh aggregate them yeah andwith the with the monitoring you can youcan watch uh the graph grow basically soyou can see live like how how manyobjects are imported and um it also hasa couple of so so the the graph itselfum basically it grows exponentially soyou need to reserve memory and and thiskind of growing operation is a bitcostly in the sense that while it'sgrowing nothing else can be going on soit's like for for the highly concurrentsetup you need synchronization and justi'm just throwing in buzzwords now sobasically you need to need to lock thisgraphand this is something that that um yeahyou could you could see before um or orthat we couldn't see before because wedidn't have the monitoring that the waythat we grew this graph um that thatwasn't necessarily optimal uh because itcost too much time and and now with themonitoring we could say like okay yeahthis is like this or growth interval ofthe graph is too low in comparison to umto how far we've already made it andthis this was to the the point um sothis is one of the the the reliabilityfixes that we have in this release tothe point where um we did a load testourselves and i think beyond50 million it it just it was verynoticeable that it slowed down likethere was no problem isn't you couldn'timport more than 50 million objects invva but going from zero to 50 millionwas super fast and going from 50 millionto 100 million was all of a suddenreally slow and the culprit was actuallythe the way that we grew the the h windex which was super super easy tovisualize like in our monitoring this isnow just like or it was like a graphthat was just like steps basically howthe the index would grow and then youcould easily see that just sort of theamount of data that we imported comparedto the the growth cycles just didn'tmake sense so all we had to do is likechange this from a linear to anexponentialgrowth uh setup and and now um yeah thegrowth operations are relatively rarebecause i think it grows by like 25um so if you already have 100 millionobjects imported the next growthoperation would go to 125 and then umyeah you wouldn't wouldn't have to growit again for the next 25 million importsand that was the entire reason for forwhy imports slow down so it's somethingsomething as significant as well vv8slows down after 50 million you knowjust simple change in the growth andthis is something that in this case weas the engineers could tell basicallyfrom the monitoring but all kinds ofthese these things i think like wheneveryou have a problem with v8 in the futurejust look at the metrics and just seelike what's what's going on andtypically if you have a bit of a feelingfor a bit of experience with vba it willbe very easy to just pinpoint okay yeahthis is this is the reasonyeah i love that and i love that the thenumbers behind it when you startthinking like uh you know 50 million 100million you start putting some numbersbehind how many vectors can i load and ithink ummaybe come back to our a n benchmarks ilove how that puts some numbers to youknow you have a million vectors you wantto search through it the vectors havethis dimensionality this is how long ittakes i think having these numbers outthere really helps just understandwhat's happening andso i think with the wikipedia exampleit's like uh 280 million uh paragraphsor something like thatjust kind of thinking about some somethings we can do like putting all ofwikipedia into wv8 andyeah yeah i think it's a bit bit smallerthan that at the paragraph level i thinkat the sentence level it would probablybe in the in the hundreds of million ithink it's in the tens of millions buti'm not entirely sure um but yeah butbut just yeah this this kind of scalelike it's it's it really is big data ina sense i mean that's just i'm reallyjust throwing in buzzwords todaylike what is big data but yeah that islikemillions tens of millions hundreds ofmillion billions and we're we're talkingabout like at the billing scale we'retalking about okay what are the kind ofoptimizations that we can make to to uhsort of make thatless resource intense in the future butwe're never talking about like can iachieve it at all because yeah it's it'sthere you can do it right nowyeah amazing so it's the idea of likesay putting all of archive into eva andi love the big data and kind of whatthat unlocks and uh and yeah i'm surethere's a lot of uh so i think kind ofgoing from this topic now i think thatwas agood coverage of monitoringobservability understanding and maybequickly to clarify it so the h and swgraph you build up as you scale uphorizontally you'll split the proximitygraph and you'll have separate proximitygraphs for each node and so kind ofcoming back into the approximate nearestneighbor search it's kind of like thatstochastic algorithm where you havethat kind of approximation so is that acorrect understanding quickly beforemoving on yeah yeah yeah absolutely andit's it's really the important thinghere is you can configure it in whateverway you want itthere is a disadvantage of splitting outmainly because you're you're spendingbasically your resources twice if youhave to look to traverse two graphs inparallel umso there is probably a point where itdoesn't make sense and you don't have todo it but it's it's full control to theuser so it's really you can sort ofbuild up in the same sense that thathmsw itself also has hyper parameterswhere you could and i think ourbenchmarks page really visualizes thatnicely where you could use differentbuild parameters to to sort of get adifferentdifferent uh yeah performance metricsout of the the graph and i think uhsharding it into smaller segments isjust one more of those sort of buildparameters in a senseis so is this approximation is thiscaptured in the a n benchmarks does doesthe a n benchmarks have the scale whereyou where you do this kind of thinguh it's currently all a single singlechart in there so that's that's notcaptured yet but that's a that's a goodpoint like we couldwe could add a sort of a very largescale benchmark and and that'sdefinitely something that we have on ourroadmap anyway um and we could we couldyeah sort of capture that as well likewhat how does it change if you build iton let's say a single very large machineas opposed to like three or four largemachines or something like that so yeahgood ideayeah really exciting and maybe just onemore thing on the a n benchmark some i'mmaybe just like um a little bit of i'm alittle curious how you have thebenchmarking script and the serverscript and then the hdf5 files where youhave theuh ground truth and how people can uhyou know contribute their own data setsto a n benchmarks uh you tell me take methrough the setup of that like if i havemy wikipedia vectors right and i want toadd it to and benchmarks with wv-8 howdo i do thatyeah yeah uh the the format that youmentioned hdf5 and this isi think hdf5 in itself is basically justlike a container format where you canlike um yeah put datavery similar to like a folder structureon on disk just like in a single fileand uh the reason we chose this is uhbecause of a n benchmarks on the greatwork that uh eric benhertzen has beendoing there alreadyand just all the data sets that arepresent there are in this format so thisis basically the reason why we chosethat format um so all you would have todo to run or to contribute your ownbenchmark is put that data set in thatsame format and then for the for thecontents basically um yeah you need tohave the the vectors obviously so allthe all the the vectors you wantimported and uh what's great about thoseexisting data sets is that they have sosimilar as you would have like a trainand test split when training a modelthey also have like this this sort ofpredefined these predefined queries uhjust to make sure that everyone that'srunning that independently is reallyasking or is really comparing the samething so it will always be the exactsame queries and i think it's typicallyin those data sets it's something like a10 000 queries as part of the set solet's say the set has like 10 million or1 million or 10 million or somethinglike that object and then you create thesame 10 000 uhvectorsand because it's the same the samevectors that you query all the time thatalso means that you expect the sameresults and this is what the groundtruth is so the crown truth is basicallyjust using a non-approximate nearestneighbor well not algorithms not reallyan algorithm anymore but basically justbrute force searchacross the data set um which is which isslow but it's basically only done oncefor for each query and then for eachquery we know the exact nearestneighbors which are the ground truthsand then all we have to do is basicallycompare this and this is this isthe what the the benchmark script thendoes so we have a very simple scriptthat basically it spins up vba withspecific configuration you can of courseyou can tune thatit's very simple actually i think thethe only sort of non-standardconfiguration in there is we've slightlytweaked the the garbage collector to tobe a bitmore aggressive in reserving memorybecause we've sized the machinerelatively largely so so we don'tbasically don't get interrupted bygarbage collection cycles um but that'san optimization that everyone can do sothere's no no sort of secret magic butthat i think's the the only thing umyeah and then the benchmark scriptbasically just takes that hdf5 filesextracts the individual vectors and justimports them and and after importing itqueries them and for querying it usesthe the query vectorsandcompares the results that vba will giveyou to those crown truthsand then basically the overlap is therecall so if umout of those100 resultsonly 98 are part of the crown truth listthat basically means you're missing twoso you'd have 98 recallyeah i think this is also exciting youknow how what's the recall looking likeuh how fast is it how many vectors can iload into ev8 having this monitoringobservability seeing it get uploaded soyou're not just like looking at itloading and you seeyeah all of this is really bringing ittogether notputting some numbers behind it i was soexcited so so in our podcast of ourrelease we're now going to kind of pivotinto adifferent topic now so uh so let's talkabout vector distance functions cosinedistance l2 distance dot product what'snew with that yeah uh yeah so in uh ifyou've seen the the benchmarks there'sactually i think some data sets areangular distance which is cosinedistanceand then one is using uh l2 or euclideandistance and that is something that'sactually new so this was kind of asilent release before the version thatwas released with the benchmarks alreadysupported that but it wasn't officiallysupported yet so you'd not not findanything in our documentation about itand the reason for this was we we had tosort of we we had to figure out how todo this in the apis correctly because inthe past um there was like one sort ofsingle number that always controlled allthe distances and that's the certaintyso whenever you get a result back uh youcould display the certainty and thecertainty was always guaranteed to be anumber between zero and one zero wouldessentially mean like it's there'sthere's absolutely no match so it's likein in uh in an angular space you couldsay it's the opposite vector so if onevector points in one direction thatwould be the vector pointing in theexact opposite direction um in not notall spaces basically oh yeah that thatthat's a good point of sort of why we weneed something elseso basically you have this bounded scorebetween zero and one which worksperfectly for for cosine distancebecause cosine distance yeah it's anangular distance and an angular anglecan only have like360 degrees basically soit's a limited range in a sensebut now if we're looking at a euclideandistance for example um if two pointslike two points can be infinitely faraway from one another so this this uhdistance basically there's clearly aminimal distance that they can havewhich is zero if they're identical uhbut there's no maximum distance becauseyou could always basically havecoordinates that are higher than othercoordinates so the distance wouldincrease so what we're noticing is thatthat general idea of saying you have adistance score between zero and one thatkind of breaks with other distances andand uh euclidean distance is just oneexample you could also havehave a dot product for example whereit's then the opposite way like dotproduct uh um basically the the closerthey are the higher the dot product butit's also not entirely correct but a bitof an oversimplification but uh herebasically you have a higher number ifthey're if they're more similar sogenerally what we're noticing is thatthis idea of just putting it in a numberbetween zero and one that's nice that'sthat's easy to understand but it's notvery flexible with different distancemetrics so what we're doing right now inin the 1.14 release is we're introducingan actual field that's called distanceand what you get back in that field isjust the raw distance so so if you'reusing a different distance metric andthis is this is the really the newfeature that you can use differentdistance metrics um if you're usingcosine nothing changes everything is thesame you can still use certainty um butif you use a distance metric that simplyisn't bounded in that that's a smallrangethen uh you can just use the raw scoreand you can interpret in whatever wayyou want if you you could for examplecome up in your application with a wayto normalize that into a specific rangethat's all fine but basically we as bb-8don't want to say like yeah we're doingsome elaborate calculation here uh wherethen users asking like okay i'm usingdot product why is this number like whydoesn't that match the raw dot productthat i could uh calculate outside of vbaso general idea is justless magic just sort of pass the actualvalues through and users can interpretit in in any way possible and that wasthe major reason of why uh we didn't umrelease the distances uh uh previouslyyet because yeah we said okay we need towe need to figure out how to do thisproperly in the apis for like a a properuser experience for for custom uhdistance metricsthat's yeah that's the the first part ofituh then there'sthere's something else that that ipersonally and this is the the engineerin me speaking and that i find superinteresting about distancesisthe most cpu time that we spend in vbais typically on calculating distances soeven with these these uh a n indexessuch as h and swit's basically just a smart way tocompute fewer distances but in the endhow many distances you can compute andhow efficiently you can compute thosedistances really determines the theperformance and throughput of the wholethe whole vector search engineand um therewe have center specific and this issomething that we're also releasing nowwith the new documentation for 1.14there's a clear overview of what kind ofoptimizations are in place for for vv8so tovery quickly dive into how this worksfrom from a coding perspective vva iswritten in golang and that isunfortunately a bit limited with theselike really low level umlow level optimization so in c plus plusfor example you get this thisvector intrinsics api that you can useto to do like parallel computations on asingle cpu cycle golang doesn't havethat so we had to be a bit creative andhad to write that in assembly um whichalways yeah this is this is the momentlike where the audience typically goesyeah so we had to to do this in assemblywhich i think it's it's cool that wehave it um but at the same time um thisthese kind of assembly optimizationsthat you do you always do them for likeone case so you would say that this isfor example for dot product on amd 64cpu architecturefor uhlet's sayi don't know cpus that support the avx2instruction set which is typically intelcpus for example so um long story shortwe have that like completely transparenton the documentation and my hope is thatmaybe someone out there in the communitywho really likes dealing with this likereally low level stuff is like hey lookat that combination like for examplethere's missing an optimization formaking this up a or m64 i know how touse that instruction said i'm going tocontribute something so that would be mymy dreamto get a couple of open sourcecontributors to really help us uh figureout like what the the yeah what distancemetrics can still are not distancemetrics but distance computationfunctions where they can still beimproved and uh yeah make it a a an evenfaster experience for everyone out thereyeah wow the that part of the arm isinstruction that's over my head i'm gladto be on your team where you knowi have someone who knows that kind ofthing because i don't think i would everfigure that out but that is sointeresting how you can go low level tooptimize the distance calculations andyou know speed these kinds of things upi find that whole thing to be sofascinating andmaybe we could return a little bit tothe first part aboutthe user experience and kind of usuallywhen i think of user interfaces i thinkof you know these visuals and you knowcss and that kind of thing but theselittle these little design decisionslike uh certainty or distance and kindof what that relays to you like you knowi like using the when you have the neartech search you get the certaintyunder the under uhunderscore additional certainty thatthat shows you the distance and it'sreally useful for say earlier wementioned re-ranking if you want to seethe distances from your query thedocuments and maybe have some extraprocessing based on that and yeah havingthat um distance just the just kind ofhow it uh helps people understand itbecause maybe i was curious about theoriginal design of certainty because umdo you think about uh vector distancesin that kind of probabilistic sense likewhere you have this kind ofuh certainty of saying i'm i'm thiscertain that this vector is similar tothis vector kind of in the same waybecause i think when you have like a thequestion answering examplethe certainty is very like uh clear youhave a good sense of what that means butwith vector distance um how do you thinkabout that kind of like use of certaintyor distance just just a little namingand what that tells people about whatit's doing yeah yeah yeah and i thinkthat that was exactly the the originalidea of of not going with a raw distancebecause way back sort of before vv8version 1.0 uh before we beforeeverything was modular and before umyeah the whole uh sentence transformerswere a thing umwhat you would typically uh or what youwould do with vva then wasyou would only use it with thecontextionary so basically we were incontrol of that whole sort of uhmodel uh uh uh spaceum and there was there was just onething and then our general idea was likeokay likeif if all of this is abstracted away theuser does not need a distance they justneedsomething to indicate them yeah likeokay the model is somewhat certain thatthese things are close matches whereasin other cases the model isn't ascertain obviously we've come a very longway since then you can still use thecontextionary as a sort of simpleuhyeah simple model with vba but alsothere's there's this wholeresearch out there new models sort ofpopping up every day and you can use anyone of them and that makes it a bit moredifficult to to claim that something ismore or less certain than something elsebecause every model will do thatdifferently so you have sometimes youhave models where like everything is inthe 0.99 to 1 uncertainty range and thenyou have another model where like aperfect almost identical result has likea certainty of 70 percent so that kindof highlights that that yeah as we we'veopened up vba and we're making moreflexible and where we're enabling allthose cool data science teams that havetheir own models um yeah it's reallyit's very hard to to make this one claimof like yeah this is how certain uhsomething is umbut of course you can use you can stilluse certainty in the future on onanything that uses cosine distance umbut yeah you'll also just get the rawdistance tosort of have an unun uh opinionated way of basically justhaving an objective number and you canstill sort of put something on top of itof saying like yeah distance larger thanx means certainty yyeah super cooland yeah the the i love the graphqlinterface for how you access thesethings too just kind of maybe come backinto the whole design of thing but so soback to our release podcast and pivotingtopics so um so this now the nextchapter is about uh reliability and bugfixes and i'm so i'm so interested tohear also about how the uh the communityplays into this i i'm so impressed byyou know your ability mars and stefanand everyone's ability to answer thesequestions that come up on slack i seethese questions come up in the slackchat and i'm like well that would belike a day for me to try to figure outbut it seems like you know you all canjust answer the question quickly and soi'm really curious to hear how thatwhole ecosystem plays with developingthese thingsyeah it's it's i think it's it's firstof all thank you very much this is supergreat to hear because i also think likeour community is our strongest asset inthat sense because um yeah we've nowcrossed a million downloads which is alot of users and umwe'vesort of i think uh vva 1.0 has been outfor like one and a half years sothere's there's just a lot of usage outthereand that gives sort of that gives usersthe guarantee that what they're using issomething that's that's sort of thatthat's battle tested and at the sametime every single user using vva isessentially a qa engineer for us becausethey're really their stress testing isand like no one is as creative as as ourcommunity in in trying to find ways tobreak vba and that is awesome that isexactly that is exactly what we what wewant and what we need um so that that'salso how uh sort of how we can be soenthusiastic about barb reports becauselikei think so someone's asked me at somepoint like ah aren't you would you likethree new bug reports this week aren'tyou sad or something or aren't youunhappy i was like no this is awesomelike the bug was already there now it'svisible and and if if a brand new pieceof software that that is sort of doingsomething so revolutionary if that's notgetting bug reports then i'm convincedthat she's not getting enough usagebecause like umi i don't think vb8 is any better orworse than our competitors with regardto preventing or not having bucks but ifit's being used then bugs are beingdiscovered and then they can be be fixedand um yeah huge shout out to to ourteam that'sdoing likespending so much time reproducing thattogether with our community users andreally identifying all these these sortof from smaller issues to to largerissues so for methat the worst i think there was aperiod in in bb8 history that luckilythat's that's gone now but there was aperiod uh where you could get vba tocrash in a specific way that it wouldn'tbe able to recover and that was that isfor me that's the worst becausewhat do you do like yeah that's the onething that you don't want to happen inyour database is that it just stopsbeing stops being visible and youbasically have to throw your data awayand start to start from scratch it'sfine if you're evaluating it but that'snot fine if you're running in productionand that is luckily that has been fixedfor for a couple of versions so i'm i'mnot aware of any more reports of peoplegetting into this kind of situationwhich is super super important but therewas one uh um sort of that i would stillconsider a very critical buck that we'venow fixed with the the umwhat not 14 version um this box so uhmartin's always joked that this bucklike it has many names because it waslike it was very simple bug but itresulted in yeah you could say like inin what was perceived as data loss likeyou would you would query your data butyou wouldn't get a proper result orsometimes there was like a a mismatch inin the way that how you queried it likeyou could retrieve that object uh if youused a filter that matched its id butyou couldn't retrieve the object by itsid and this is like this is this is theworst for a database this is really itreally shows like yeah you've managed tosomehow uhcorrupt your index and by saying youthat doesn't mean that the plane was onthe user not at all like they theycouldn't do anything about it that wasjust a bucking media and as with all ofthese bugs this bug was it wasessentially like a one or two line fixthat was just really like one edge casethat was somehow uh missed and uh i wantto plan like a a twitter threat aboutwhat is exactly going on with that bug ithink that's a bit too detailed for thefor the podcast um but yeah it it justmakes me super happy that we can we haveusers finding these things then we getthe help from the community to toreproduce it and then it's sort of thisthis nice interaction back and forth ofour engineers and our users to to reallyidentify these these umthese bugs and and then really fix themand and of course also add the testinginfrastructure to make sure that wenever regress on those of those kind ofbugs like if it's if a bug is discoveredand fixed once like we we never wantthis bug to to to reappear and we'readding the tests and we're adding likenew and creative ways of internally wecall them like stress pipelines or chaospipelines where really we're just tryingto to basically trying to simulate usersthat uh make heavy use of vva like forexample they're importing a lot they'requerying while importing and then theserver crashes every minute or somethingand then like the the goal of thepipeline is first of all it needs tocome back up uh but also when it comesback up it needs to like that the datacan't be corrupt like everything everywrite that was acknowledged to the userneeds to beare actually written to to the databaseand these kind of things um so thesethese pipeline help us tremendously toto really guaranteesort of yeah this this battle-testednessof bb-8by sort of automating what we're gettingfrom the community and every release isis better than the last and uh i reallythink that that 1.14as like if if i had to point at onepoint in our timeline would say likeokayfor whatever reason i was waiting withgoing to production with vv8 when shouldi go then like this this is the pointright now this is umwhere we're getting all that feedbackfromfrom uh semis uh uh uh sort of uhcustomers so paying customers and usersfrom the community uh from our ownsetups that we're testing internally andand we fixed so i i don't know the exactnumber right now because we're recordingthis slightly before the actual releaseis out so the number may still go up butwe're somewhere in the range of like 25plus issues that are fixed in thisparticular release and some of those aresuper critical like the one that i justtalked about for for the data loss someof them are just some small edge caseswhere maybe if you set a different uhspecific parameter in some sort offilter you would get an error messageand then okay you could fix it by justsetting something else so it's like amix of very large and very small issuesum but yeah just all of them comingtogether and all of them being fixedright now that makes me so proud of ourteam and so proud to to yeah sort ofannounce vb8 1.14yes so it's so interesting the flywheelof of community and open source softwareandlike pull requests issue raising and theway that it's all organized that wholething i think is such an interestingtopicso umyeahso i guess is there so yeah 25 issuesmentioned and i think it was a greatdetailing of particular bugs and iimagine the monitoring and observabilitythat probably helps a lot right with umespecially with importing and queryingwhile importing as you mentionedyeah hopefully content like the podcastalso and just kind of content generallyhelps educate people and justmake the flywheel spin faster with thewhole the whole scope of the thing so umso i think that's a good coverage of umreliability and fixes and i think thisnext topic in the update is kind ofrelated is it with the um api changesand namespace update is yeah yeah yeahin a sense in a sense you could say thatthis was also a bug but it was more of adesign box soum this is this ties very well intowhich you mentioned before with thedifferent classes so you gave theexample of like a tweet and maybe thathas a has a link to i don't know post orsomething so you would have two separateclassesand um the concept of having differentclasses or different collection ordifferent namespaces and databases ithink that's that's as old as databasesso if you if you spin up a mysqldatabase uh there i think they're calledthey're called databases if you um spinup elasticsearch they're called index soso this this kind of concept ofisolationum is very yeah it's very useful like ifyou want to do multi-tenancy or if youjust want a separate like even if it'sthe same tenant but if you just want aseparate data somehow it's it makessense to to isolate stuff umand there was one problem in vva whichistechnically everything is isolated ondisk already so so these never as yousaid before also we built a different hand sw index for each classand not just the agents w index also thethe store around it everything wasisolated on disk but then there was onepoint in the api where actually thatisolation was missing and um mostnotably so this was basically for thethe umthev1 objects and then id endpointif you would create it wasn't really aproblem because in your payload whencreating an object you would specify aclass name so basically you would havethat isolation which is the class namebut now if you deleted something youwould just delete object id withoutspecifying the class name so if your idactually existed in multiple classeswhich should be fine because we'resaying these are separate collections sowe're saying like yeah that's that'sfine like you can you can no need to tokeep ids globally unique because theseare separatethen what should happen because this isthis is and this is what i'm saying likeit's a design but because i think thereis no good answer and way back we had abug where i think bb-8 would delete thefirst object that it would find withthat id which is this i mean this ishorrible because like what does thatmean like you you meant to delete onefrom one collectionbut it would just delete the first onethat i found and then at some point wewefixed this and then fixed is really inin quotes here because it was more likea workaround or saying like okaythe delete function will actually deleteevery object that has that id so it kindof gives you the guarantee that theobject with this id is deleted but itwas still a mess because likeif that id really existed like in threedifferent classes and you wanted todelete just one all of a sudden youwould delete like three objects whichmeans two of them you might not evenhave wanted to to delete so long storyshort this is actually a very simplechange all we're doing is changing thatapi and by changing um there's nobreaking change so all the old apis arestill going to work you'll probably seea couple of deprecation messages in thethe coins but everything is stillstill working but we're simply changingthis api to include the class name andand that's that's basically it it tookme 10 minutes to explain but now youhave that that isolation and nowbasically all of these problems are aregone because anytime you reference an idyou also reference the class name withit and now we have that that completelyseparate name spacing basicallyso could you tell me a little bit moreso um so when you're saying isolationi'm thinking you mean isolation of thedifferent classes so tweets articles butthen there's also the vector index andthe object indexright is thereso what goes into the object index iknow we talk a lot about the vectorindex but is there any particularstructure like maybe like i've heard oflike inverted file is that the correctthing to say yesyeah yeah so i think we can we can splitit up even further and could basicallysay there's three parts there's thevector index which yeah we've talkedabout quite a bit um then there's theobject store which is basically just akey value store so every object has anid and you can retrieve that object byits id you can delete it you can you canupdate it replace it these kind ofthingsand then we have the inverted index andthe inverted index is sort of it's verysimilar to the object store in the sensethat it's also an lsm store to throw injust yet another buzzword here so that'sthat's the architecture behind it um itgoes too far to to explain what that isuh for now i think um so so they're verysimilar in the sense that they're bothlsm stores but the purpose is quitedifferent so the inverted indexbasically is there for uh for filteringso for for anything that's structuredsearch basically so uh if you would havea a property color and then it would beblue red green and you would set yourfilter in your search color bluethenprobably should have used color pink asan example or color uh whatever the nameof our vba green and blue is so wellgreen blue is in there yeah just justred was the one should have been pink umso so if you set that uh filter to tosomething like color blue uh then theinverted index would be used to tonarrow the search down basically so inthe inverted index that's why it'scalled inverted you would have an entrynot per object but per value so that'sthe the inversion basically so therewould be an entry for blue and then itwould point back to all the objects thatare that are blue basically that havecolor blue set and umyeah and these are these are technicallyseparate instances on diskbut vba combines them in a very uh yeahin a very intuitive way so so you canset a filter and you can set a vectorsearch and then basically the invertedindex would create what we call thisallow list which is just sort of a listof objects that may be contained in thatsearch and it would pass it on to thevector search and then a vector searchis optimized to sort of work within uhthat allow list in this way you havelike combined filtering of uh yourcombined vector search and filteringyeah really interestingthat kind of symbolic filtering on thevector search i think is a huge part ofit definitely an interesting part umso i kind of wanted to ask so the lsmthing i don't want to get too into itcan i understand it as being like abinary like a b tree kind of right somestructure like that where you um is thatcorrect like where youit serves it serves the same purpose asa b tree or as a b plus tree but it'sactually a slightly different differentstructure because b plus trees basicallyhave that and now now we're in a bigdata area again so b plus trees havethat problem that the more you importthe slower it is to import somethingbecause basically the tree grows andgrows and grows lsm trees sort of turnthat or i think they probably shouldn'tbe called treesbut i think that's the official name umbut lsm stores basically do it in asense that whenever you import somethingyou always import into a fresh segmentit's called a segment and then once asegment basically is is flushed to diskso the segment is first held in memorybut no data can be lost because parallelto writing into the in memory segmentyou also write into a right ahead lockbut once this memory segment isbasically flush to diskthen an async process sort of mergesthat segment with existing segments soum the the the write speed is prettymuch constant like doesn't matter howmuch how how many objects you alreadyhave it's constant and this is superimportant for these like hundred millionplus scales because uh way back uh ithink in version before version 1.4 orsomething we actually used a third-partylibrary that was based on a b-plus treeand back then i think we were talkinglike very different differences so coolto see where we've come like when we'retalking about the hundreds of millionsand the billions and back then i thinkwe were i don't know i remember like amillion was a barrier and like the bplus tree would really especially if wealso use the inverted index like amillion plus was really the point wherethe b plus tree sort of slowed down umand that's when we made the change tothe ls m tree and uh yeah now we'retalking about the hundreds of millionsand billionsso so can so so does it have a lot ofoverhead would it be would some userswant to turn that part of it off andhave no inverted file just the vectorindex and that kind of thingthat's that's a viable option like ifyou if you i don't think it has massiveoverhead um but maybe if youso essentially the overhead is thenumber of properties that you havebecause for each propertylike one bucket and a bucket is the theunit within the the inverted index onebucket is basically created for eachproperty so let's say you would havei don't know 100 properties on yourobject but you're ever only querying twoof them or ever only ever using two ofthem in filters then there's absolutelyno need to index those remaining 98 onesso you could absolutely turn them offyeah that's a that's a good pointyou can in that sense you could turn offthe entire inverted indexif you just ignored if you skipbasically every every propertyyou would lose the ability to filter butyeah that's a that's a viable case ifyou know you don't use filters duringyour search like don't need to spend thethe time on indexing it don't need tospend the disk based on indexing it yeahso it's absolutely absolutely viablethe object store itself you cannot turnoff because like whenever you get avector search like you don't just get anid background you get the whole objectback so that that needs to be therebecause that's that's in my opinion thatthat's one of the distinguishing factorsbetween an actual database and like asearch library you could like a searchlibrary would tell you uh the theresults are id 17 id 19 and id22 andthen you would have to use like aseparate database to retrieve whateverthat id represents but because vba beinga sort of vector database uh you couldjust get the whole object backamazing thank you so much eddie and ilove our podcast hacksaw it alwaysreally increases my understanding ofwebv8 and and the whole database thingreally and i you know i really enjoythis andversion 1.14 to quickly recap changes inmonitoring and observability reliabilityand bug fixes support for non-cosinedistance l2 dot product and also someapi namespace changes solisteners i really hope you enjoy thiskind of like podcast style of doing anew release and it's something thatwe're going to hope to keep doing andthat and i think it adds a nice kind ofuh you know flair conversational flairto it and i hope that also kind of thislike uhyou know teacher student with eddie andteaching me these things and hopefully iask questions that you know you also areat that level if you're not quite on theexpert level andit clarifies these ideas so so thanksagain eddiethank you very much i definitely enjoyedit hope our listeners too", "type": "Video", "name": "Etienne Dilocker on Weaviate v1.14 Release! - Weaviate Podcast #19", "path": "", "link": "https://www.youtube.com/watch?v=eiQaZIhUS_o", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}