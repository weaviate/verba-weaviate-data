{"text": "Thank you so much for watching the second episode of the LlamaIndex and Weaviate series! We cover the three indexes (Vector ... \nhi everyone welcome to the secondepisode of The Llama index and we V8integration in this video I'll be goingover the various indexes that are inllama index and I'll draw it out so youcan see the architecture design and thenI'll share a demo of how to use thevector store index and the list indexthank you for watching and let's jumpinto the video I just want to make itclear that there are other indexes thatare offered in llama index so I'drecommend checking out the documentationbut for the point of this video I justwanted to keep it quick and to the pointwhich has three indexes that I used inMy Demo so with the vector store indexit is is it takes each node or chunk oftext and stores it in a vector databasealong with its embedding but the listindex does is it takes the nodes andjust stores it in a sequential chain soeach chunk once it ends the other onebegins and it's kind of like thatsequential order and then what the treeindex is is it has a root node and thena parent node and then each parent nodehas a child node and this is obviouslyreally good for summarization taskum but yeah keep in mind that there areother indexes I'm not covering at all inthis video but I hope this helps and Ithink it would be even better to see itum and like I can draw it out I'm goingto start with the vector store index sowhat this is doing is just taking eachnode or a chunk of text and storing italong with its embedding and adding itto or importing it into the vectordatabase so here I have my three nodesand then the embedding I'm not a verygood drawer so let's just say the N is anode and then let's say that this pinkoutlineis a vector databasebecause that definitely makesa lot of sense kind of right okay sogiven that given the nodes and theembeddings are stored in the vectordatabase what it looks like when you aremaking a query is you take your queryembedding which I guess let'sagain denote that as a cue because thatmakes the most sense you're going toembed that and pass that into the vectordatabase and why would you want to passit into the vector database it isbecause it needs to retrieve the top Kdocuments that are most relevant foryour query so what this is again is thequeryembeddingokay so once that is passed in and let'ssay the first two nodes in this exampleare the most relevantthis will then be sent tothe response synthesizerquery is also sent here so what thisresponse synthesizer is doing is it'sfiguring out a way to combine the top Kretrieved documents into one singleoutput and there are quite a few ways toconfigure this setting so you can have atree summarization compact The Prompt orjust use the default setting there are afew different options and I can coverthat in another video but at a highlevel that is what this response of thisis doing moving on to the list indexwhat this is doing is taking each nodeand storing it in a sequential chain soso just spare some time thereum so here you have node onetwo and three and it's as easy as thatso what happens when you make a query isit is passing itto all of the documents or nodes if youaren't specifying a specific filter soessentially if you don't make anyumkind of like if you don't specify thefilter for your query then it's going totake all of the nodes and then it justpasses that onto the responsesynthesizer which I'll justwrite as RSum and this is good for short documentsand in the demo I use this to kind ofstore the very short meeting notes thatIhave as like an example but yeah that'swhat a list index is doing moving on tothe tree index what this is doing isbuilding a hierarchical index from thenodes from the set of nodes so here wehave the root node and then that isdivided into two parent nodes then eachparent node is going to have a childnodejust copy and paste this four timesthere with meokayso now we haveeach parent node has its child nodeso C1 and C2summarizes the parent node one and thenobviously C3 and not they aren't two cthrees there is C four summarizes aparent too and then that again goes upinto the root node and my this isobviously important or a goodarchitecture design or index forsummarization is because each node iscarryingum some information that is unique tochild 1 and child two then eventuallythat goes up into parent one and thenthe root index is summarizedum and now I'll show what it looks likeor how this is done when you are makinga query so now when querying a treeindex what this is doing is passing thequery to the root node and then it likeWorks its way down to the leaf nodes orthe child node for example so there is away to specify the number of nodes andthis is done with the child BranchFactor parameterum so if I set the child Branchparameter to one it's going to take thisnode given the one parent node but let'ssay I have I set this totwothen it's going to take it's going touse both parent nodesand then C2 and C3 for example so thenonce the child nodes or once you'vedefined the child Branch Factor againthe query is sent to the root nodeand then the two child nodes are thensent to the response synthesizer now I'mjumping over into the demo in episode 1I covered how to load data into leviateusing llama index and vice versa so inthis video I'll kind of like Breeze bythat so if you aren't up to speed oraren't familiar with this process Irecommend checking out episode one andthen jumping back to this video so thefirst step is to connect to your weebeadinstance and you simply do that byconnecting or passing in the URL to yourrepeat instanceum and then after you have connected toyour instance you're going to want tocreate your schema the point of My Demois to convince a client why they need anew feature in weeviate that we justreleased in 120. so for context when Imake the query I'm using the blog postand the podcast as like an informationSource if I'm like why does the clientneed multi-tenancy or why can't like howcan reftubec benefit their applicationthese are kind of the sources that thelanguage model needs because it needs torefer to the blog post and the podcastto have that context and understandingof what I'm talking about all right sofirst in order to do that we have tocreate this schema um so here I have myblog post class and then the contentproperty and that is just the text thatis within each blog post and thenseparately I have the podcast schema soI didn't encounter it post a releasepodcast every single time there is a newrelease so what I'm doing is taking uhbb8 120 or 1 117 18 19 and 20 as contextto give to the language model and I'mnot taking all the podcasts if you areinterested in taking that data set Irecommend a podcast search that um wasdone by Connor now that we we've definedour schema we're going to want to loadin the data all right so first I'm goingto start with the blogs so I'm using thesimple directory reader and in the firstvideo I go over the various data loadersthat are on the Llama Hubum so in here I have all the blogs in adata folder so I'm simply just readingevery markdown file and then for thepodcast so like I said I'm just stickingto the release podcast and I'm using theYouTube transcript reader and thenloading that in by passing in the URL tothe podcastonce I've defined the schema anduploaded the data I want to build outthe index so the first one that I'll becovering is the blogs index um so like Imentioned earlier I am using the vectorstore index for the blog posts alongwith the podcastsum so in the first video I go over howto construct your vector store and thenstore the blogs so I won't really gointo too much detail but um I've justcreated the blogs index and nowseparately I want toDefine my podcast indexokay and now the one unique thing Iguess that you can say that I'm doing isI'm now going to use a list index for mymeeting notes so I actually asked chatGPT to create a fictional meeting notesbased off oflike a few uh requirements so I'm sayingthat the client has a photo sharing appandum they're in need of multi-tenancy sohere I'm just going to load in themeeting notes using the simple directoryreader then I'm going to want to createnodes again which is just the chunk oftextand then I'm going to want to specifythat the list index will be using thosenodesthe next step is to create a summary ofeach index so the first one I have myblog posts um so you're saying that itcontains all of the blogs that are onreview i o and then the podcast that itcovers the new releases and then alsothe meeting notes with my client namedConnor and then I'll just want to setthe index summaries to the summariesthat I just definednow we've gone into the part of creatinga composable graph so what this is is itallows you to build an index on top ofyour index so here I have my threeindexes again so I'm using the vectorstore index for the blogs and podcastsand then a list index for the notes butall in all I'm going to take five nodesfrom the blogs five from podcasts andfive from notes and I'll have 15 nodesthat will then create a list index whichI'm passing in here and then I'm justpassing in the summaries for the indexesthat I had already creatednext I want to construct my query engineand then now I'm on the fun part so myquestion is what is multi-tenancy andwhy is it an important feature forConnor's application and in the meantimeas this run I'll just show you what themeeting notes look likeum so here I have that Connor iscreating a photo sharing app and he hasa few users and he is nervous abouthaving shared data or data leaked todifferent usersokay so here we have the response soit's explaining what multi-tenancy isand then it's saying it's an importantfeature for Connor's application becauseit allows them to scale to millions oftenants while still providing eachtenant with their own isolatedenvironment and this is a perfectlyexplaining what multi-tenancy is and whyit's in it and why it's importantand then if I want to print out thesources I can see that it's takenum it's actually taken information fromvariousuh documents and then also it'sconsidered the meeting notes as wellwhich is why it knows who Conor is andwhat his application uh covers thanks somuch for watching the second episode ofThe Llama index and we be integration inthis video I went over the differentindexes in llama index and I shared ademo notebook if you would like to getyour hands on the notebook I've sharedit under the webiate recipes and it'slinked in the description I hope youenjoyed stay tuned for the next videoand take care bye", "type": "Video", "name": "Episode 2: Indexes in LlamaIndex", "path": "", "link": "https://www.youtube.com/watch?v=6pLgOJrFL38", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}