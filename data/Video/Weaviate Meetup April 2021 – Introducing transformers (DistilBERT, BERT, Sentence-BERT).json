{"text": "documentation: https://weaviate.io/developers/weaviate Github: https://github.com/weaviate/weaviate. \ni have a few slides just for the meet upjust toyou know to talk through the meet up andfor those whoum uh are new to eva they're just a fewthings that i want to go over with idon't want to go into detailtoo much into detail into that becausethat's of course something that's donein the pastnormally i also was numbering themeetups but mymy colleague lara who took over themeetupsunfortunately couldn't make it today soi have absolutely no ideawhere we are number wise so i just callitthe meetup and as you might have seen isthat umwe're now releasing more and more intoeva then we try to schedule a meetupevery now and thento share these uh these updates with youumthese videos always also will be placedon youtube so if you want to seesomething back you can do that as wellso let's quickly start why we why we arehereso i also i always would like to go backto reiterate the problem that we try tosolve andand um and what we aim to doso um uh weave it is a is a vectorsearch engine andum a nice way to toto understand the concept is is based onthe way that the data is represented sofor exampleum this type of wineand if you use a traditional searchengine and you would search forwine for for seafood it wouldn't matchwith something that would be good withfish because itwouldn't necessarily make that relationbetweenseafood and fish um but what you can doactually with vector search engine andwe'llwe'll go through that in in the examplesand and the vectorization how that worksum you can actually find these theseenters because therather than doing a keyword match basedon in this case wine or forseafood you do a similarity search soyou search in a vector space forsomething that is related towine for seafood so now you can finddifferent data objects and you canrelate a data object differentand that is the it's at the core the thethe the core use case for we've hate andwhat vpa tries to solveum you can of course already do thatwith with machine learning modelsbut the power of review it sits in thefact that it's a database a data engineso if you would have thousands orhundreds of thousands of millions ofwines for example in your database andyou want to quickly search through themthat's the reason why you would workwith we've gate althoughwe're also getting feedback from peoplesaying that they justfind the ease of use handy because it'sjust you know as you will see in a bituh it's it that's easy to to to get upand runningso the core idea came actually fromuh from google from google search so allright sothe question that we wanted to answerwas like okay if we askthese kind types of questions on googlesearch umin the form of an abstract question andthe answer that is generatinghow was it able to find that answer umhow uh how would you be able todetermine your own data and how can youdo thisas fast you know as possible so this wasmore the the overarching goal that wehad can we make somethingum uh can we make a search engine thatpeople can usethemselves on their own data regardlesswhat ifwhat you know what kind of data you haveor what kind of project that you're thatyou're running but this was like thecore idea can we can we build somethingsimilarum so as i just mentioned so how can youdo that in an easy fast secure scalableway andwhat we mean with easy in this contextis that we strongly believein the in the ux element of these kindsof technologies because in the endif you are deep in in in these kinds ofof technologies then then you probablyunderstand a lot what's happeningbut we actually noticed that there are alot of people that they need to buildsomething they need to have a solutionfast that needs to be easy for themto get up and running and it's easy umit needs to be easy for them to add datasearch for data and those kind of thingsumfast i guess uh speaks for itself and sothat heum it's nice if you can um uhget to these kind of results uh but ifit takes a few seconds to get to ananswer that's very unfortunateso the other day somebody showed me ademo of something they built and theywere looking to evadeand they were able to solve the problembut it took up to five to six seconds toactuallygenerate a response what we mean withsecurein this context is that we've had is notasas service i mean it exists as a sasservice but it's also the packages justor the the software justavailable through an open source core soyou can run it fromwherever you want and i can assume thatscalable speaks for itselfum so we've hit as cloud nativeor as one of my colleagues alikealways likes to say it's it's kuberneteskubernetes nativeso that basically means that the um whatwe need at the lowest level iskubernetes and thatnowadays almost runs everywhere ummaybe one of our most important usbs ifyou willin we've eight is the fact that it'smodular that's something we're going tolook at also todayum so the version one release early thisyearand made wv8 not only uh completelystand alone but also modularand that means it becomes very easy forus to to add plug and playablemodules to to alleviate so regardless ofwhat these what these modules doright so they can for example they canvectorize data but they can also addfunctionality to we evade or those kindof thingsand it's very easy to integrate in thein the vc8 ecosystemum we have a focus on on real time ornear real time if you willuh so my colleague chen i believe isalso on callhe wrote a nice article on towards datascience about that that weare able to get to sub 50 millisecondsresultsand last but not least and we feed thisis a vector search engineand what's important to say here is thatumone of the goals that we have with vividis not to only be able to storevectors and quickly search throughvectors but also to store the dataobject itselfso are our oh somebody wants to join nowi have to click theaccept link oh and they're goneokay sorry so our goalis um uh um not toonly store the vectors and search forthem but more also store the data objectthat somebody really gets the feelingthat they're dealing with awith a a normal database like whatthey're used to but that they get allthese additional featuresthat we can uh do based on the onsimilarity searches andand classifications and as we like tosay it's built to scale your machinelearning models and what we mean withthatis that if you um let's say you usea um well a transformer model forexample that we're going to look attodayum it's great to use it on a document orto get insideof documents or a handful of documentsumhowever if you want to scale that tothousands or hundred thousands or evenmore documents that's difficult that'shard andas i like to say it's like nobodynowadays buildsa database anymore right if you have anapplication i mean it's not you're notalso going to build you know your owndatabase you pick something off theshelfthat you know that that fits your needsandwe believe that we've yet will um wellyou know we'll serve in a new need andthat is like or storing datathat gets vectorized by machinery modelsor umsearching through your own factors or ifyou want to do that however you want towant to structure themand especially thanks to the to themachine learning boom for those whodon't knowa lot of models came available toactually factorize content so thisso we're now going to look at text butvery soon you also see that we willstart to release modules related toimages and those kind of things that youcan mix andand and and match them umso the two core features that we haveand we've hit are as you like this socalled the searchand and classification those are on thehighest levelso search basically means that yousearch for something in the vector spaceand that what we also will go through inthe in the demoand classification is actually the otherway around so umweave it as a as a graph like data modelso that means if you have multipleobjects in your in yourum your graph you can automatically makerelationsor ask with yet to automatically makerelations between certainum nodes in your graph if you willor between data objects uh so we havethe modules as i mentionedso we have nlp models modules transformmodules you can also make custom modulesum i will go through that in a bitthe goal is that it's completely end toend so it is acomplete solution for for any industryright it's like alike you would use a normal databaseyou're agnostic about the about the usecase that you have it's more the problemthat you need to solvewe have an open core so that means thatthe core of vp8 isis open source and the focus is on itbeing scalable and fastand there's more ux ux elementsum one thing that i want to say aboutthe umabout the architecture but maybe i don'tknow hm are you still on the callyes yes you want to say you want to saya few words about this because this isyour coreum you know your day-to-day job so maybeyou want to say a few words about thisuh yeah sure so uh on the architectureso bob mentioned something in thebeginning that umvvn is not just about storing andsearching vectors but alsoabout storing and searching the objectsitself and this is something thatis reflected in our architecture rightin thein the core basically so we try to makesure that we store the dataalongside the vector positions and whatthat means is thatsort of if you scale um for example ifyou scale horizontally in a clusterthat um sort of on a single request youwill always getwhat you need sort of very nearbywithout having to make a lot of networkrequests forexample so let's say you're searchingfor something like theum the 10 or latest 10 related winesand then you very quickly get 10 idsback but then you have to do 10follow-up requests to resolve those idsto objectsthen these 10 follow-up requests couldeasily take more time than the searchitselfand there in our architecture we'remaking sure that sort of the vectorindex which is the coreis stored alongside the object storageand there's also an inverted indexso an inverted index essentially meansfor umyes sort of the the classic search casestructured search caseum which you can combine in v8 so forexample if you have a query such asgive me uh the wines related to or thatthat match well with fish which haveless than 12.5 percent alcohol orsomething so this is something that'ssuperstructured and you could combine theseand so if that's in the coreof one chartum yeah then if we if wevectorize data this is a sort of a verysimpleum a very simple microservice patternhereso in this case vvat itself runsentirely on cpusso that's cheap commodity hardware umbutthese machine learning models typicallyrequire gpusso um in this case you can sort of splitthat out scale it independentlyand uh just have your your sort of costintensive parts on uh on a separatemachineokay can you click to the next one yeahone sec somebody's joiningyep uh ohi don't i don't have a next one i onlyhad this one in here okay okay cool cooli'm going to improvise the next one yesso umwhat you what you see right here is sortof the the currentstate of the architecture and what we'recurrently working on umis sort of turning deviate which rightnow is confined to a singlenode into a fully uh distributeddatabase so right nowum we can easily cover umsort of data sets of 1 to 10 millionmaybe even 100 million if you're okaywithsort of yeah the machine running a bitslow here and thereslow in relative terms so just meaningyou can't get maximum performanceand what we're working on right now isbasically making thishorizontally scalable and this is one ofour key goals in the architecture andthat was always from the beginning so ifwewe always knew that we wouldn't do anykind of patterns that wouldn't lead toor that wouldn't work with scalabilityso um yeah sort of half a year from nowbasicallyuh vba is done a fully distributeddatabase and you can scale sort offor whatever needs you have so one ofthe typical examples would be highavailability so you just don't want yourmachine to go downum because i don't know it's maybeserving a user-facing siteso you need high high availability ormaybe toget a higher throughput because youproduce more datathan a single vba machine could importin a day for exampleor all these kinds of kinds of um yeahscaling use casesthat you can configure to your needscool thank you very much for sharing sothis is as i as i mentioned this is mymy last slide because ii want to get to more a show rather thantellum a situation uh but of course i wantedto also give a little bit of of contextfor you all so um what i always like todo is that i like to start from theperspectiveof our documentation because thedocumentation is the hence the heartwhere you start to learnuh about we've gate and how you can howyou can use itum the um uhone big thing that has changed with umuh with the new setup is actuallythe installation pattern so as as weas i mentioned earlier like the goal forus is to make it assimple as possible for you to startworking with all these models and allthese out-of-the-box setups andand what we use at the lowest level isor for the for the productionenvironment we talk about kubernetes butif you develop you can justdo that on with with docker so one newthing that we haveuh is the um the customizer so if youjust go to the installation you cancustomize youryour weave yet setup so of course i'mgonna choose the latest versionuh here you already see the media typesso what's umyou can set you can select none so ifyou only want to use vva to storevectors and search through vectorsbut if you want to use specific modulesthento factorize you can do that as wellwhat is interesting here is that you seeyour images coming soonwe will have more coming soon but aninteresting umthing that i already want to share withyou is that in the future we'll be ableto mix them so you will be able to saywell this data object i want tofactorizebased on its text and this data objecti want to vectorize based on itson the images for the image that itrepresents but you can still connectthemin the same graph space if you will soi'm going to go for textfor now we currently have two types sothe first one that we started withwas what we call the contextionary whichis based on cloth and fast textand now we also have the f transformersavailablethe um of course if we gonna add in thefuture we're gonna addum the images then you will get evenmore of course modulesavailable um just interesting to know isthat one of the things that we learnedfromusing it in practice is that if you havemore classification use cases so thatyou have datathat you want we've had to classify foryou then the contextionary works verywelluh so the based on glove and fast textand if youwant to do more with text or if you wantto search through text then thethe transformers work better so itdepends a little bit on the use casethat you have but this is also somethingthat you can play around withso it's very easy to spin up one we'vegate to the other and just you know playaround with umoh somebody else is joining we gowith um you can play around with thesewith these with these modules easilywhat's important to mention here as wellyou just have to make minor tweaks and iwilltalk about that in a bit to um uh tojust shift between modules while you'redeveloping and trying to figure out howto use we've hitthe last but not least oh no two moresteps so one of you youyou pick the model uh that you want soi'm just gonna go for the firstin this case like this one this is forenterprise users which we don't neednow so it's disabled and then you selectyour runtimeso you say like door compose and so wealso have kubernetes andwhat this outputs is very nice onesingle curl command that contains verylong url as you can see with exactlyyourum your configuration so if you wouldlook just at that url you seethe configuration that we just made isrepresented in this docker fileso now just running docker compose up isenoughto um to start working with the uh withthe environmentthe next tiny tiny comment from my sidesorry for the interruptionuh just on the kubernetes part um thethe part that's missing here is just uhkubernetes in the customizer um sovva itself already works with kubernetesjust right now you would have to sort ofmanuallyuh adapt your your we have a helm chartand you can adapt the values yaml so youcan use it on kubernetes alreadyjust not uh configure it with thecustomizerthank you um the next stepum um the next thing that you need to dowith we've hit that we did is a schemaso so a graph like schema um sowe get a lot of questions about schemaso my colleague lara is also working ona few extra tutorials tounderstand um at the schema but actuallytheusing the schema somebody sent somethingherelet's seethanks well we'll look at that um we'llcontinueso the um the schema so lara is workingon a few tutorials also to learn how towork with the schemas but the verysimple concept is with thewith schema is that you define the classproperty structure that we've yet hasso um we spun up what we've had alreadyin the cloud just to give you a demoso we've hit is completely api basedand i can explain the schema actuallyfrom that perspective sothe schema this is a very simple schemabecause it only containsone node uh we don't make any graphrelations here because we wanna reallyfocus on showing thethe model in action but it does nicelyshow you howthe the schema works so all the schemashave ahave a class so they can have multipleclasses so actually let me increase it alittle bitand have multiple classes hence it's anarray and then here you see for examplethe first class that is a paragrapha few things that i want to highlighthere the first thing is that you have amodule configso you need to explain which ummodule you want to use to vectorize thedata and that has to do what i said inthe past like in the future we will beyou will be able to use differentvectorizers for differentum classes so now we have a classparagraphwhere we want to use the text to vectmodulebut maybe in the future we also willhave images that would be part of thatparagraphand then you would say well i have theimage to vec modulethen of course we have propertiesbecause a class has propertiesso in this case this class has two typesof propertiesso one is the title one is the contentand those are both both text objects andhere you can seewe can even give more in-depthconfigurations for the schema so in thiscase we're saying that wedo not want to vectorize the propertyname for examplesomething you're going to learn on thewebsite that's all in the documentationbut that you can see how that schema isis defined andif we now go to the graphql interfacethat we use to query data you willactually see this coming backso if i now say get and iwould say paragraph so i start with thefrom the perspectiveof the class which always starts with awith a capitalized first characterand then here you see i have title andformat so these are paragraph title andcontentwhich i use during querying and theseare defined here in the umin the schema um creating a schemaupdating a schemamany ways how you can do that you can dothat directly through through curl soyeah so you can just do apium calls but we have the python and wehave python libraries javascript librarygo library and we havei believe java libraries in the makingum so we will have more and more ofthese kinds oflibraries available in the in the futuresowhat i'm showing you today is completelythrough the apibut you can make all the requests forall these libraries as well if you likeum one thing that i want to do first isthat i want to before we start searchingum with we've yet i want to look at thedata objectsso one of the things that we can do inwe've heard is that we can see like okayshow me justdump all the all the um uhdump all the all the data that you haveso here you see for example we just haveobjects as you will see in a bit we haveabout a million objects in here so thisis just the firstobject that it encounters this objecthas an idea it has contentand it has it as a title uh so what wecan do is like we can take that ideaand then go just one step deeper and wecan retrieve thatthat note this is if you look at with itfrom a graph perspective thisis one uh a note in your graphso it is a note of the class paragraph aparagraphit is a properties content and titlethen no references in here so it's notreferring to any othernotes this is just a very simplestandalone notebut what is interesting here is one ofthe things that we always say is thateverydata object in the vp is represented uhby by the um by vector so these thesethese nodes are if you will they'refloating aroundin space and there's actually a way howwe cansee that so we can do uh additionaland then is i'm doing this frommy head not additional it isinclude i think oh include sorryincludesyeah but it's a demo right so sometimesstuff goes wrongso it's not it's not it's included so ican say well include the vector here sonow you see hereso this paragraph about independence dayis represented by this vector and wecould do this for all the data objectsthat we haveand so this also you can how you canenvision thisum these these um all these nodes arefloating around in hyperspace and thecoordinates where they float aroundare these represented in this in thisvectorso if you now go to the graphqlinterface so what we often say isum you use the restful api to or wellwhat ioften say is like use the restful api toadd dataand and the graphql api to retrieve dataor if you use one of the clientlibraries then you're basicallyunder the hood you're that's what you'reusing um but you can usethe graphql um api to retrieve dataso if i now say well this square is verysimple querythis base is like okay get me all theparagraphs and show me thetitle and the content so if i run thesquare it just shows me randomparagraphsand their titles and their content issueand as you can see the first one herethat returns isalso independence day which it's kindthat the query is kind of similar rightto the one that i just showed forthe restful endpoints oh let me notforget to also showyou um how many uh that we're dealingwith sowhat we have at the at the core is likewe have we have uhthree root functions so get that's onethat that's the one that we'll be usingwe also have explore umthat's something we're just gonna pausefor later but we also have aggregateand aggregate is actually used to um uhyou know to get insights aboutabout your v8 so you can say for examplemeta and then i can say count so withthis query basically says like okayaggregate all the paragraph informationumand the meta information is that i wantto see it's just that i want you tocountall the objects so as you can see herethis results injust under a million uh wikipediaparagraphsjust so you know what the size is thatwe're dealing with during this demoso let me get rid of this again let's goback to theprevious query umone of the things where it becomesinteresting is of course is that we saylike okay we now we want we want toleverage thesefactor representations we want to dosomething with themand so one of the things that we can dois that in umin this specific case and for thisspecific demowe use the transformermodule and and what what the thetransformer module is specifically goodat is dealing withlonger questions or those kind of thingsso how we do that in we fit is that weuse the near text[Music]function we say we search for conceptsand we can askfor example we can say verbs used in thefrench kitchen i believe if you haveseenthe video that i made i use the same iuse the same query i thinkuh certainty so let's sayoh let's not use the certainty yet let'ssearch just start withlimit first and let's say for examplethe first three results so what thisquery saysis i do the exact same as you just didbefore but nowvectorize the query herbs used in thefrench kitchentake that vector representation of thatquery and search to the vector spacewhat kind of data objects are the mostclosely related tothis query and show me the first threeresultsso if i now run this query you see weget back titles from in this case frenchcuisineso we see here the herbs and seasoningsand french regionalcuisine etc now it's important to bearin mind here is thatthe lower the further down the answer isthe further it's removed from our fromour curry and there are two interestingthings here to look at so one is theuh the order and and the the reason thatum we either got to this order isactually something you can see so we cansaywe can add a certain p as an additionalpropertyso what it shows here is like what theso what it shows here is the umuh the distance from the umfrom the query to the to the resultand as you can see here so this onefrench cuisine it's ait's close by because it's like you saidto 88 and this set to 84so it's it's further removed umfrom the from the query and here it'seven 81 percent so that means that if iwould increase this number so let me setit to fiveat that then the further i go down youwill see that the furtherthe lower the the percentage umdrops now one of the things you can dowith vivid as wellis that if you want to use that in a foruse case then you might say well i don'tnecessarily want to limit it to fiveresultsbut i also want to set a a minimalcertainty so you can say well i want tohavea minimal certainty of let's say at 85.so i now run this query it basicallysays like show me all the resultsuh that are higher than 85 certaintyand if there are more than five umresults then you know then then limitthose two to fiveso for now around this query you seethat it's umthe answer is returned in um uh there'sjust one answerreturn that you that you can use in yourresultsand it still has that additionalcertainty here so that is in ain a in a nutshell with how that weaveit worksum uh one of the things that we'recurrently also working on with thesemodules is that we say like we kind ofmove closer to for examplea question answering that it also goesinto the content to try to find theanswer in there as welland oh yeah the last thing that i forgotto mention that is very important thatis of course that's the speed that we'redealing withso this server i'm i'm running this demofrom from amsterdam this server is spunup in thein in the center of the us so the momentwhen iwhen i hit this um this search buttonuh the time that it took to send backthe results based on thethe million data objects first had totravel to the uswe had to process the data and it had tosend it backand based on our own benchmarks we seethat these for this specific demoit takes about 100 milliseconds totravel to the usabout 35 milliseconds to get you knowto capture the results from the ev8 andto send it back so one of the thingsthat you will notice that if you'rebuilding a solutionum yourself and you run it locally oryou're runningum your queries on the same machine umas where you're working on then it willbe even even fasterum so that's an important thing tomention um here as wellum let's see if there's something morethat i want to say about thiswell the only thing that i want to sayabout this that's the umthat we look very much forward to peoplestarting to workwith these with these with these uhvectorizer modulesi'm also curious if people areinterested in custom modules we areinterested to learn if peoplethis is a little bit more into thenitty-gritty but if people areinterested in differentuh index plugins we are interested inlearning if people need differentclient libraries and we're interested inlearningif people need different um cropoperations forum working with the with your data socoincidentally somebodyum created an issue today on our githubasking for specific supportso we just look forward for peopletrying it out work with it andum you know share with us theirlearnings and and what they think thatwe can do better or where we canwhere we can improve so that was what iwanted to show to you todayuh everything that i've shown you issomething you can run yourselfso um let's quickly soare you still on the call uh hm yepdo you know by heart what um uh birdmodel is being used for this umfor this demo uh yeah in this case thisis one of the sentence transformermodels and the oneuh that is based on the microsoft uhdata set uh i think it's calledms marco and essentially this particularso they call the asymmetrics uh semanticsearchso that means that particular model istrained on matchingshort queries and question queries topotentially long answers so it wastrained on i think being search queriesjust from from usage data knowing that idon't knowusers who ask like who is the ceo ofgoogle or something and thenif they don't click on the first resultbut on the second result and that's likea usage metricsuh metric that tells the model um thatthis is a potentially a better resultand it was trained onon these kind of um yeah these kind ofdata setsyeah thanks thanks for mentioning so soso umuh where i wanted to get inside so it'svery easy for you to get this same setupup and runningimportant thing to mention i'm awarethat there are people on thisuh on this school who are alsointerested in maybe working with theirown transformer models uh what you cando there and i'm going here from the topof my headso if you go to the the modules the texteffectmodules you can go to the option custombuilt with a private or local modeland there's explained how you can buildyour own private or local modelthe only difference there is that whatyou've seen in the configuratoris a setup where we v8 umtakes everything from docker hop justout of the box youliterally only run docker compose up andand you're good to go so we've hit runsuh here you need to take that one extrastep where you need to buildthat that module yourself with thewith the um transformer module that youwant to usealso if you will be using that there'ssomebody turning againyeah so also if you umif you want if you're working with thatwe also would love to learn what yourexperience is if it'seasy enough for you to use i think thathere the the importance sits more in theum in the documentationrather than in the software and what imean with that is thatif the if you know if it's clear for youhow to go uh how to make the changesuh from a documentation point of view umthen it runs because using all our testsand and also for certain um customers weuse these custom modelsso um and we know that it works but wealso would love to get feedback frompeople just try it outdirectly from the perspective of the ofthe documentationso that leads me to also looking at thetime because i've been speaking way toolongso to also stop the uh stop therecordingand ask", "type": "Video", "name": "Weaviate Meetup April 2021 \u2013 Introducing transformers (DistilBERT, BERT, Sentence-BERT)", "path": "", "link": "https://www.youtube.com/watch?v=DCQWqMecdlA", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}