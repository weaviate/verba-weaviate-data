{"text": "Meet Verba, the golden RAGtriever! Verba will not only help you build with Weaviate faster but also enable you to bring your own ... \nHi, I'm Philip from Weaviate. \nWelcome to our new series\nbuild with Weaviate. \nIn this series,\nwe take you on a tour to do a deep dive \nto our newest Open Source Contribution\nproject and life demos. \nWe will also show you \nour little tricks and techniques to build\nbetter machine learning pipelines. \nIn this episode, we are going to reveal\nour tricks for better retrieval. \naugmented generation pipelines. \nRAG helps you utilizing large language\nmodels and reduce the model hallucination \nfrom more precise outputs\nand better results \nat Weaviate. \nWe love open source and work hard\nevery day to make your developer life \neasier. \nDeveloping applications and machine\nlearning pipelines can be sometimes hard. \nYou run into errors, problems and often \nyou need to learn a new API or framework. \nAlso, starting with Weaviate is learning\nsomething new. \nAnd here comes our newest addition to\nthe Weaviate, open source family into play. \nVerba. \nThe golden RAGtriever, Verba\nis going to help you build \nwith Weaviate faster, but not only with Weaviate\nbecause you can easily \nbring your own data\nand adapt Verba to your personal need. \nIt is complete customizable because\nit's open source and we are releasing it \nwith already included data to help\nyou build with Vercel for NextJS \nCohere, HuggingFace and OpenAI. \nWhat is Verba doing under the hood? \nIt used a so called RAG retrieval\naugmented generation architecture. \nThis architecture\nhelps the LLM to generate better results. \nIt also helps to reduce the time window\nwhen the model needs to be retrained \nor to give context to events with happen\nafter the training data ends. \nFor example, looking at ChatGPT\nand the fixed knowledge \nhorizon or the so-called knowledge cutoff. \nSo the model hasn't seen\nany training after events \nhappening after September 2021. \nRAG also helps\nto reduce the problem of hallucination. \nThat is a model just dreaming\nfictional things that are simply not true \nor reflect a reality in easy\nthe model is making something up. \nBut for you, it sounds plausible \nand without knowledge or fact checking,\nyou're going to run into problems. \nHow does retrieval\naugmented generation work? \nIn this example, a user is asking \u201cWhat is Weaviate?\u201d \nthen we retrieve and search\nfor the fitting documents and chunks \nin an internal source\nlike our company knowledge base. \nWe then pass this information\nas context \nto the LM\nto generate the answer for the question. \nAnd in this case,\nthe answer is 100% correct, \nbecause Weaviate is the coolest vector database\nknown to humankind. \nAfter all, also,\nRAG is not going to be the one silver \nbullet hitting all the pitfalls of machine\nlearning pipelines. \nSo as often a hybrid approach or fine tuning \nRAG in combination could lead\nto the state of the art results. \nLet's now dive straight\ninto the action of the Verba \nVerba \ncomes by default with all our Weaviate\ndocumentation. \nThis includes our internal\nand external documentation, \nour engineering blog posts around Weaviate,\nthe transcript of our YouTube videos \nand everything that could help\nyou build faster with Weaviate \nlittle teaser. \nIt also outputs useful code snippets. \nLet's see how easy you can use Verba,\nbut also how to transform it \nfor your personal needs\nand bring your own data. \nLet\u2019s head over to verba.weaviate.io to interact with our Verba \nThe golden RAGtriever. \nsay hello to your new friend \nfor building super fast with Weaviate. \nHow we built Verba. \nIt's using NextJS in the frontend, FastAPI, Weaviate and GPT in the backend. \nLet's start easy with some recursion\nand ask Verba what it thinks it is. \nAre we going\nto see the ghost in a machine? \nDo we explore AGI? Let's see. \nNice or? \nNot only provided you with an explanation,\nit's also not claiming machine world \ndomination, so humans\nwill at least survive for a bit longer. \nYou can browse through Verba\u2019s outputs \nand go to the potential source\nof the information and learn \nmore interesting insights. \nBut now let's enter the serious action. \nWe are new to Weaviate\nand we want to know how to use the \nnearText function in Python \nVoila, Verba \ncomes up with the answer\nand the relevant code snippet. \nHow nice you can now use this code snippet\nin your pipeline adapted to your needs. \nAnd the best part\nyou can use this live demo \nand ask Verba\nanything you want to know about Weaviate. \nIn fact, we used Verba to build itself. \nHow meta is that? \nMaybe we call the next generation\nof Verba,  Verba the Skynet edition \nDid you like the demo? \nLet's bring Verba onto your own machine\nand customize it to your needs. \nAs Verba is open source,\nwe released all its code on GitHub. \nLittle warning. \nThe code shown in this example\ncould be to some degree outdated. \nSo keep an eye on the GitHub repository. \nWe want the installation of Verba\nto be super easy so it\u2019s just a pip install \nand whenever you want to run Verba\nlocally you can use Weaviate embedded. \nSo no need to deal with infrastructure \nor use it in the cloud of via docker\ncontainer. \nTo get started, make sure you're running\nPython 3.9 or higher. \nIt is also a good practice to create a new\nvirtual environment for your project. \nSo type in pip instll goldenverba\ninto your terminal and hit enter. \nNext, you will need to set up your OpenAI API key \nas an environment\nvariable named OpenAPI key. \nFor now, Verba only supports Open\nAI models, but we are integrating \nmore model providers in the future\nwith everything in place. \nLet's import the data \nwe will use OpenAI\u2019s API documentation\nas example to import the data \ninto Verba type verba import --path data/openai \nin the terminal. \nThis imports the files into Weaviate \nand don't worry, Weaviate embedded\nruns smoothly in the background. \nonce your data is imported fire up Verba \nwith verba start \nyou can access it locally. \nvia localhost \nCongratulations. \nYou successfully installed Verba on your\nlocal machine and imported custom data. \nLet's dive in and ask Verba\nabout OpenAI\u2019s new \nfunction_calling methods \nyou maybe \nwondering how Verba integrates\nwith other frameworks or libraries. \nWell, we designed Verba to be flexible\nand modular. \nFor now, it's optimized\nto work with Weaviate\u2019s native techniques, \nbut also designed to integrate easily\ninto popular libraries like Haystack \nLlama Index, Langchain and many more. \nLet's take a quick\nlook at how Verba was built. \nWe start by loading in the data\nand supporting a wide collection \nof file types like text and markdown. \nThe data is then chunked and broken down\ninto smaller parts using spaCy. \nOur most loved and NLP library. \nAfter that,\nwe ingest the data and into Weaviate \nboth the loading and chunking\nparts can be customized. \nNow, let's ask Verba \u201cWhat is Weaviate?\u201d \nIt uses hybrid search to find relevant\nchunks from the important data. \nSo traditional text\nsearch in combination with vector search. \nLet's look at \none of our tricks\nwe use to improve the retrieval. \nWe call this the chunk window approach. \nWe add the surrounding information of each\nchunk to the context of the LLM. \nThis helps to improve the results. \nAs there is a high probability\nthat this information is connected \nand also relevant for providing\nbetter answers to the end user. \nThe resulting context end user query \nis then sent to OpenAI\nto generate the answer. \nWe are adding more of this retrieval\nand RAG optimizations \nin the future to Verba\nbut Verba is also open source. \nSo we are happy to see you\nbecoming part of it \nof our open source Weaviate family. \nI hope you enjoyed our short\nintro into Verba. \nIf you have ideas how we could improve\nor what new features we should add \nJust open an issue on our GitHub\nrepository or drop us a message. \nVerba should become your new entry point \nto build faster\nwith Weaviate and all other applications \nwhere you are in the need for user\nspecific context and relevant outputs. \nThank you for watching\nand see you next time on this channel. \n", "type": "Video", "name": "Retrieval Augmented Generation with Weaviate", "path": "", "link": "https://www.youtube.com/watch?v=OSt3sFT1i18", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "Hi, I'm Philip from Weaviate.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "Welcome to our new series\nbuild with Weaviate.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "In this series,\nwe take you on a tour to do a deep dive", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "to our newest Open Source Contribution\nproject and life demos.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "We will also show you", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "our little tricks and techniques to build\nbetter machine learning pipelines.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "In this episode, we are going to reveal\nour tricks for better retrieval.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "augmented generation pipelines.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "RAG helps you utilizing large language\nmodels and reduce the model hallucination", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "from more precise outputs\nand better results", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "at Weaviate.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "We love open source and work hard\nevery day to make your developer life", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "easier.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "Developing applications and machine\nlearning pipelines can be sometimes hard.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "You run into errors, problems and often", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "you need to learn a new API or framework.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "Also, starting with Weaviate is learning\nsomething new.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "And here comes our newest addition to\nthe Weaviate, open source family into play.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "Verba.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "The golden RAGtriever, Verba\nis going to help you build", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "with Weaviate faster, but not only with Weaviate\nbecause you can easily", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "bring your own data\nand adapt Verba to your personal need.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "It is complete customizable because\nit's open source and we are releasing it", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "with already included data to help\nyou build with Vercel for NextJS", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "Cohere, HuggingFace and OpenAI.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "What is Verba doing under the hood?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "It used a so called RAG retrieval\naugmented generation architecture.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "This architecture\nhelps the LLM to generate better results.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "It also helps to reduce the time window\nwhen the model needs to be retrained", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "or to give context to events with happen\nafter the training data ends.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "For example, looking at ChatGPT\nand the fixed knowledge", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "horizon or the so-called knowledge cutoff.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "So the model hasn't seen\nany training after events", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "happening after September 2021.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "RAG also helps\nto reduce the problem of hallucination.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "That is a model just dreaming\nfictional things that are simply not true", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "or reflect a reality in easy\nthe model is making something up.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "But for you, it sounds plausible", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "and without knowledge or fact checking,\nyou're going to run into problems.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "How does retrieval\naugmented generation work?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "In this example, a user is asking \u201cWhat is Weaviate?\u201d", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "then we retrieve and search\nfor the fitting documents and chunks", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "in an internal source\nlike our company knowledge base.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "We then pass this information\nas context", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "to the LM\nto generate the answer for the question.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "And in this case,\nthe answer is 100% correct,", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "because Weaviate is the coolest vector database\nknown to humankind.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "After all, also,\nRAG is not going to be the one silver", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "bullet hitting all the pitfalls of machine\nlearning pipelines.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "So as often a hybrid approach or fine tuning", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "RAG in combination could lead\nto the state of the art results.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's now dive straight\ninto the action of the Verba", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "Verba", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "comes by default with all our Weaviate\ndocumentation.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "This includes our internal\nand external documentation,", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "our engineering blog posts around Weaviate,\nthe transcript of our YouTube videos", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "and everything that could help\nyou build faster with Weaviate", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "little teaser.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "It also outputs useful code snippets.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's see how easy you can use Verba,\nbut also how to transform it", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "for your personal needs\nand bring your own data.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "Let\u2019s head over to verba.weaviate.io to interact with our Verba", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "The golden RAGtriever.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "say hello to your new friend", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "for building super fast with Weaviate.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "How we built Verba.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "It's using NextJS in the frontend, FastAPI, Weaviate and GPT in the backend.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's start easy with some recursion\nand ask Verba what it thinks it is.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "Are we going\nto see the ghost in a machine?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "Do we explore AGI? Let's see.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}, {"text": "Nice or?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 70, "tokens": 0, "vector": null, "score": 0}, {"text": "Not only provided you with an explanation,\nit's also not claiming machine world", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 71, "tokens": 0, "vector": null, "score": 0}, {"text": "domination, so humans\nwill at least survive for a bit longer.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 72, "tokens": 0, "vector": null, "score": 0}, {"text": "You can browse through Verba\u2019s outputs", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 73, "tokens": 0, "vector": null, "score": 0}, {"text": "and go to the potential source\nof the information and learn", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 74, "tokens": 0, "vector": null, "score": 0}, {"text": "more interesting insights.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 75, "tokens": 0, "vector": null, "score": 0}, {"text": "But now let's enter the serious action.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 76, "tokens": 0, "vector": null, "score": 0}, {"text": "We are new to Weaviate\nand we want to know how to use the", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 77, "tokens": 0, "vector": null, "score": 0}, {"text": "nearText function in Python", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 78, "tokens": 0, "vector": null, "score": 0}, {"text": "Voila, Verba", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 79, "tokens": 0, "vector": null, "score": 0}, {"text": "comes up with the answer\nand the relevant code snippet.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 80, "tokens": 0, "vector": null, "score": 0}, {"text": "How nice you can now use this code snippet\nin your pipeline adapted to your needs.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 81, "tokens": 0, "vector": null, "score": 0}, {"text": "And the best part\nyou can use this live demo", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 82, "tokens": 0, "vector": null, "score": 0}, {"text": "and ask Verba\nanything you want to know about Weaviate.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 83, "tokens": 0, "vector": null, "score": 0}, {"text": "In fact, we used Verba to build itself.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 84, "tokens": 0, "vector": null, "score": 0}, {"text": "How meta is that?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 85, "tokens": 0, "vector": null, "score": 0}, {"text": "Maybe we call the next generation\nof Verba,  Verba the Skynet edition", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 86, "tokens": 0, "vector": null, "score": 0}, {"text": "Did you like the demo?", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 87, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's bring Verba onto your own machine\nand customize it to your needs.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 88, "tokens": 0, "vector": null, "score": 0}, {"text": "As Verba is open source,\nwe released all its code on GitHub.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 89, "tokens": 0, "vector": null, "score": 0}, {"text": "Little warning.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 90, "tokens": 0, "vector": null, "score": 0}, {"text": "The code shown in this example\ncould be to some degree outdated.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 91, "tokens": 0, "vector": null, "score": 0}, {"text": "So keep an eye on the GitHub repository.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 92, "tokens": 0, "vector": null, "score": 0}, {"text": "We want the installation of Verba\nto be super easy so it\u2019s just a pip install", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 93, "tokens": 0, "vector": null, "score": 0}, {"text": "and whenever you want to run Verba\nlocally you can use Weaviate embedded.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 94, "tokens": 0, "vector": null, "score": 0}, {"text": "So no need to deal with infrastructure", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 95, "tokens": 0, "vector": null, "score": 0}, {"text": "or use it in the cloud of via docker\ncontainer.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 96, "tokens": 0, "vector": null, "score": 0}, {"text": "To get started, make sure you're running\nPython 3.9 or higher.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 97, "tokens": 0, "vector": null, "score": 0}, {"text": "It is also a good practice to create a new\nvirtual environment for your project.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 98, "tokens": 0, "vector": null, "score": 0}, {"text": "So type in pip instll goldenverba\ninto your terminal and hit enter.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 99, "tokens": 0, "vector": null, "score": 0}, {"text": "Next, you will need to set up your OpenAI API key", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 100, "tokens": 0, "vector": null, "score": 0}, {"text": "as an environment\nvariable named OpenAPI key.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 101, "tokens": 0, "vector": null, "score": 0}, {"text": "For now, Verba only supports Open\nAI models, but we are integrating", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 102, "tokens": 0, "vector": null, "score": 0}, {"text": "more model providers in the future\nwith everything in place.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 103, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's import the data", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 104, "tokens": 0, "vector": null, "score": 0}, {"text": "we will use OpenAI\u2019s API documentation\nas example to import the data", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 105, "tokens": 0, "vector": null, "score": 0}, {"text": "into Verba type verba import --path data/openai", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 106, "tokens": 0, "vector": null, "score": 0}, {"text": "in the terminal.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 107, "tokens": 0, "vector": null, "score": 0}, {"text": "This imports the files into Weaviate", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 108, "tokens": 0, "vector": null, "score": 0}, {"text": "and don't worry, Weaviate embedded\nruns smoothly in the background.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 109, "tokens": 0, "vector": null, "score": 0}, {"text": "once your data is imported fire up Verba", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 110, "tokens": 0, "vector": null, "score": 0}, {"text": "with verba start", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 111, "tokens": 0, "vector": null, "score": 0}, {"text": "you can access it locally.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 112, "tokens": 0, "vector": null, "score": 0}, {"text": "via localhost", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 113, "tokens": 0, "vector": null, "score": 0}, {"text": "Congratulations.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 114, "tokens": 0, "vector": null, "score": 0}, {"text": "You successfully installed Verba on your\nlocal machine and imported custom data.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 115, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's dive in and ask Verba\nabout OpenAI\u2019s new", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 116, "tokens": 0, "vector": null, "score": 0}, {"text": "function_calling methods", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 117, "tokens": 0, "vector": null, "score": 0}, {"text": "you maybe", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 118, "tokens": 0, "vector": null, "score": 0}, {"text": "wondering how Verba integrates\nwith other frameworks or libraries.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 119, "tokens": 0, "vector": null, "score": 0}, {"text": "Well, we designed Verba to be flexible\nand modular.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 120, "tokens": 0, "vector": null, "score": 0}, {"text": "For now, it's optimized\nto work with Weaviate\u2019s native techniques,", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 121, "tokens": 0, "vector": null, "score": 0}, {"text": "but also designed to integrate easily\ninto popular libraries like Haystack", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 122, "tokens": 0, "vector": null, "score": 0}, {"text": "Llama Index, Langchain and many more.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 123, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's take a quick\nlook at how Verba was built.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 124, "tokens": 0, "vector": null, "score": 0}, {"text": "We start by loading in the data\nand supporting a wide collection", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 125, "tokens": 0, "vector": null, "score": 0}, {"text": "of file types like text and markdown.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 126, "tokens": 0, "vector": null, "score": 0}, {"text": "The data is then chunked and broken down\ninto smaller parts using spaCy.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 127, "tokens": 0, "vector": null, "score": 0}, {"text": "Our most loved and NLP library.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 128, "tokens": 0, "vector": null, "score": 0}, {"text": "After that,\nwe ingest the data and into Weaviate", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 129, "tokens": 0, "vector": null, "score": 0}, {"text": "both the loading and chunking\nparts can be customized.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 130, "tokens": 0, "vector": null, "score": 0}, {"text": "Now, let's ask Verba \u201cWhat is Weaviate?\u201d", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 131, "tokens": 0, "vector": null, "score": 0}, {"text": "It uses hybrid search to find relevant\nchunks from the important data.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 132, "tokens": 0, "vector": null, "score": 0}, {"text": "So traditional text\nsearch in combination with vector search.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 133, "tokens": 0, "vector": null, "score": 0}, {"text": "Let's look at", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 134, "tokens": 0, "vector": null, "score": 0}, {"text": "one of our tricks\nwe use to improve the retrieval.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 135, "tokens": 0, "vector": null, "score": 0}, {"text": "We call this the chunk window approach.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 136, "tokens": 0, "vector": null, "score": 0}, {"text": "We add the surrounding information of each\nchunk to the context of the LLM.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 137, "tokens": 0, "vector": null, "score": 0}, {"text": "This helps to improve the results.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 138, "tokens": 0, "vector": null, "score": 0}, {"text": "As there is a high probability\nthat this information is connected", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 139, "tokens": 0, "vector": null, "score": 0}, {"text": "and also relevant for providing\nbetter answers to the end user.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 140, "tokens": 0, "vector": null, "score": 0}, {"text": "The resulting context end user query", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 141, "tokens": 0, "vector": null, "score": 0}, {"text": "is then sent to OpenAI\nto generate the answer.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 142, "tokens": 0, "vector": null, "score": 0}, {"text": "We are adding more of this retrieval\nand RAG optimizations", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 143, "tokens": 0, "vector": null, "score": 0}, {"text": "in the future to Verba\nbut Verba is also open source.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 144, "tokens": 0, "vector": null, "score": 0}, {"text": "So we are happy to see you\nbecoming part of it", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 145, "tokens": 0, "vector": null, "score": 0}, {"text": "of our open source Weaviate family.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 146, "tokens": 0, "vector": null, "score": 0}, {"text": "I hope you enjoyed our short\nintro into Verba.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 147, "tokens": 0, "vector": null, "score": 0}, {"text": "If you have ideas how we could improve\nor what new features we should add", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 148, "tokens": 0, "vector": null, "score": 0}, {"text": "Just open an issue on our GitHub\nrepository or drop us a message.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 149, "tokens": 0, "vector": null, "score": 0}, {"text": "Verba should become your new entry point", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 150, "tokens": 0, "vector": null, "score": 0}, {"text": "to build faster\nwith Weaviate and all other applications", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 151, "tokens": 0, "vector": null, "score": 0}, {"text": "where you are in the need for user\nspecific context and relevant outputs.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 152, "tokens": 0, "vector": null, "score": 0}, {"text": "Thank you for watching\nand see you next time on this channel.", "doc_name": "Retrieval Augmented Generation with Weaviate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 153, "tokens": 0, "vector": null, "score": 0}]}