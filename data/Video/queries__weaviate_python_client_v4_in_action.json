{"text": "Accompanying code: https://github.com/weaviate-tutorials/DEMO-pyv4-release-videos v4 of the Weaviate Python client has just ... \nhey there in this video I want to show you how to use the new V4 release of the Python client to perform queries in W8 the new client runs grpc under the hood to speed up your queries but also we've made changes to the API to make it easier for you to formulate queries and to deal with the responses let's take a look at a few examples I've got a cloud instance of W8 setup already with a couple of collections one is of movies and another is of reviews that are link uh connected go related to these movies so let's grab them first and then work with them client collections yet that's going to create a python object called movies that we can interact with like send queries to um let's do the same thing with let's just duplicate that line call reviews and that'll be for the review collection let's start with a near text query so I'm going to look under the query Nam space or subm module and if I do that you can see that there's all of these methods here like the M25 hybrid and so on so these are all um queries um or searches for the most part for hybrid search keyword search and near whatever search so let's perform a NE text search to start with for some holiday movies um query holiday season and let's for the limit of two and what I'm going to do is to say that hey let's look at the response have to sign the output to a variable so let's do that and for I know that the response object and you can see because it's typed I can inspect it and that's got the object attribute if I can say 4 o in objects CU I know that that's a list let's just print the whole set of properties but you can you see there's a whole lot of attributes here um but let's start with the properties and I'll show you what that is and let's have a look at the uid as well why not and now if I print that you can see it's printed a whole lot of um data for each response and also the uid now note that I haven't specified which properties to return in my query and that's because with the new client by default it'll return all of those um properties and a uid for the object unless of course it's something really heavy like a blob so that's the only I plot property data type that's excluded by default let's extend that query to grab some reviews which are linked to so to do that I can use this return references parameter and what I need to do then is to provide a set of references um I can do this by providing a oh I have to use a helper class so let's import that whole sub module classes do um query as WQ you can of course import individual classes but I'm going to be using a few of those so I'll use that and I'll say query reference link on and I know that I have a property called has review and let's grab the return propert properties of um the usern name so that'll be the writer of the review so and just like properties I'm going to wrap this into a list um I'm going to just return one but let's wrap that into a list and if you do want to just return some of the properties you can do a similar thing here properties and let's just grab for now the title and tagline taglines are fun and now if I want to have a look at the responses that would be now in the response or the references excuse me um attribute and each reference is now like a little bit like a property right because it's a reference property so I need to provide the reference property name to start with that is has review and within that that's going to have objects you can see the structure here it's starting to mirror the structure of the response itself and you can imagine why that might be because they are linked references to other sets of objects let's just have a look at the first um review object here so just like our response object it's going to have properties so let's have a look to see what that looks like there you go so we have the properties here that uh that's what our first print statement is The UU ID and this is the reference line that is printed out the the username and the actual username itself so that's the property of the review collection and this is the value of that property so that's pretty simple right and notice here I didn't have to remember what the property names or what the parameter names excuse me uh had to be in the query because I'm not providing a raw Json to weate but what I'm doing is using these helper parameters and classes which have the parameters built in as part of its init function so that that's really really really nice um let's add a filter to this query so what I'm going to do is use the filters parameter again I didn't have to look that up which is nice and there are I know that there's a filter class so let's use that I want to filter by I can filter by all of those different things but I want to filter by property at the moment um let's let's filter these movies by runtime so we if I want to look for movies with runtime let's say I want to look for something short that I can watch in less than say 100 minutes um that should do it and if I run this again oh let's what I'll do is I will also grab the I'll just delete that and grab all the properties for now and let's just do um title and let's do runtime here cool so the results have changed now I've got the nightm before Christmas which is a breezy 76 minutes and the classic jingle on the jingle all the way at 89 minutes and you can see that meets a criteria of less than 100 minutes and if I want to let's say be even more restrictive or if I want add additional conditions I can add another one here and combine them with an ampersand or a pipe so if I add an ampersand that's an and condition so now if I want want something that's less than 100 minutes and say greater than let's see if I can thread the needle at 85 and see what results come back there you go we've still got jingle all the way cuz that meets all the conditions and we've got taken not sure if that's a holiday movie but it does meet the criteria so that's um what we're looking for and if I want to convert that to a generative query what I would do is change that sub module to generate and the rest of the syntax Remains the Same all I need to do is now provide us um provide the prompt for the language model so let's do that by looking through the parameters I'll use single prompt and I'll say hey language model um please translate the this into French and let's just start easy with the title and and the single prompt you'll remember operates on oops I need a comma there um the single prompt operates on each individual object so the results are tied to each individual object as in the generated results and that means I can use this looking the individual object looking the generated um attribute if I run this this will take a couple of seconds as it goes through the third party API and language model there you go this is Tak in French and this is jingle all the way in French that's quite nice and similarly if I want to use a or perform a grouped task on all of the results that come back I would say um what do these movies have in common let's reduce well let's remove this restriced filter and let's turn that four results um now because this group task operates in the whole set of results where I would look for the results or the generated output is on the response itself like so and if I run this query again is going to perform that one additional generative query and return the results for us so let's have a look there you go it's done quite well actually this movies or these movies have the common theme of Christmas blah blah blah okay let's stop there I won't go through every single method um because you might find that a little bit boring but I will note that there is also an aggregate namespace or sub module so that you can look through movies Aggregate and try these functions or methods yourself and another nice thing is that if I look in the query subm module and say look at near text you get all of these different available parameters and one of them is Group by um so that's the interface for that is quite nice so if you have used Group by before the building that syntax was quite tricky but it's become much easier and same thing goes for things like reranking and so on so of course as always I would encourage you to check out the official documentation for specific examples of all of those things but I think um the changes to the API the inclusion of these doc strings helper classes and so on really make the life easier for lives easier for developers um for me you know writing document in making videos like this has been such a pleasure and it's become so much easier for me and I hope it will be for you as well okay then we'll see you soon ", "type": "Video", "name": "queries__weaviate_python_client_v4_in_action", "path": "", "link": "https://www.youtube.com/watch?v=1dpHYyuIpOo", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}