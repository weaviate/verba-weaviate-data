{"text": "Ever used ChatGPT to create JSON objects that you can use in your application? In this video we'll walk through a Jupyter ... \nlet's use AI to create data for your application yo it's Adam from we8 and welcome to another episode in the series build with we8 in this episode we're going to walk through a Jupiter notebook which will generate mock Hotel objects we'll do this by randomizing some data points like landmarks and amenities for the hotels and we'll leverage a large language model through the openi chat completions API to create those Json objects for us these Json objects are going to be of our specific design and then we'll extract data for use later then we'll learn how to use we8 an AI native Vector database to help us create vector embeddings and store them in a schema that we've created this will be the basis of our rag application to help us generate marketing emails based on the data retrieved we do this through a combination of vector search and generative search which will come as integrated modules in weate we'll also extend our initial prompts to chat GPT to create some descriptive imagery and then use these in a diffusion model to create images if this sounds interesting to you let's go ahead and get started this video is going to walk through a jupyter notebook that uses apis from several SAS services including open and replicate we'll do things incrementally so you won't have to spend too much time registering for accounts just to find API keys to get started when we get to a point in the notebook where we need a new API key for some service I'll let you know so you can go get it and add it to your environment variables also all right let's go test the feasibility of this in chat GPT in our project we want to create Json objects that represent a hotel we want the objects to be flat and have information such as the address the name landmarks that are close by Etc okay so here's the list I put together and formatted it roughly into a Json object where the data types of each field are specified next up we're going to see how feasible everything is in the chat interface of chat GPT to generate objects with this format before we jump into any code in the chat GPT interface let's ask it to generate a hotel with the following Json object type that we created a moment ago feel free to pause the video to read this prompt but I'm basically just instructing chat GPT to create this Json object and make uh references to San Francisco and then I include the template below so let's go ahead and send this pretty good already now I want to add some complexities such as specifying the top amenity specifically and then making a reference to some kind of uh Landmark so here's a new prompt an updated prompt that says San Francisco Landmark Golden Gate Bridge and specifying top amenity as private spa and of course we send the Json template again and let's see what happens Golden Gate View Hotel and Spa top amenity private Spa cool I'm pretty happy with this not bad I'm pretty happy with the results already and I'm confident that chat GPT can do this for us let's jump over to a Jupiter notebook now and convert what we just did into some code okay first things first we'll execute through a jupyter notebook I published to GitHub that means you can clone it and follow along too you can just head on over to this repository and you can find the link in the description below once you open up the GitHub link from the description in this video you should get to this GitHub repository what I'm going to do is click on code and grab the https URL and then head on over to my terminal here I'll say get clone and paste the link and then hit enter this will clone the repository to my local computer and then from here I'll access the repository list the files I have the jupyter notebook right here I have a dependency list in requirements.txt a read me and a license file first off I'll start up a new python virtual environment we'll activate it we'll install all the dependencies in requirements.txt okay looks good all we should need to do now is write Jupiter notebook in order to Kickstart the notebook and we're in I'm going to jump right into executing the notebook but if you want to read anything here feel free to pause the video all right well let's open up our jupyter notebook we're first going to set up the openai API and in order to do that you're going to need an openai API key if you don't have one yet go over to open.com register for an account and then create the API key then take the API key and make sure you add it to your EnV file and make sure that it's named open AI API key like so so we'll execute this first cell and this will create an open AI client great this is just a warning it's non-critical then we're going to create a list of luxury amenities so that we can randomize uh in order to make our hotels a little more interesting we're basically seating our hotels with some randomized data sets so you can see we have spa and wellness centers private infinity pools Michelin starred restaurants Etc so let's execute this all then we're also going to create a list of San Francisco landmarks so we have the Golden Gate Park we have the Painted Ladies Jed Deli Square Etc so let's go ahead and execute this cell and this cell here is going to define a function that will generate the hotel for us and make a call against the chat completions API with the same prompt that we passed into chat GPT earlier so our first step is to randomize the selection of both an amenity and a landmark we print them out just for visibility and then we make the chat completion call against open AI using chat gp35 turbo 1106 we're also using this uh property or attribute here called response format and we're passing in type Json object which will put chat GPT in Json mode which is a new feature released by open aai on open a Dev day in November 2023 so from here what we'll do is we'll pass in the specific prompt generate the viic generate the fictitious tell Etc uh we say specify a specific Landmark uh and we pass in the landmark using an F string like so and the same is done with the amenity and we say to include it in the top amenity object and then we pass in the Json object so that chat GPT knows what to make it look like and when it's done we will just return here we go so when it's done we'll just return the object um as a Json dictionary so now if I were to run this cell this was actually going to go and generate a hotel store it in hotel dict and then print out the results so let's give it a try so here is the hotel we've created called Golden Gate Park in 1 12 34 Park Avenue uh it's got free Wi-Fi the top amenity is pet services and just like it shows here and the randomized landmark is Golden Gate Park so Golden Gate Park in okay so now we can programmatically create these Hotel objects in our python jupyter notebook next we'll create an embedded instance of we8 that means running it locally on your computer and the data is saved on disk and Vector lookups happen in memory all right to create an embedded instance of we8 the first thing we need to do is import we8 and import embedded options from we v8. embedded then we can create a we8 client passing in these embedded options and then passing in an openai API key as an additional header so that weate client can interact with open AI on our behalf to create Vector embeddings for us and to vectorize our queries okay so let's go ahead and execute this cell so now a weate embedded instance is running locally let's go ahead and delete classes because I've run this previously and I'd like to have a fully fresh database in order for us to run this but if you have never run this before this will give you an error because of course there's no Hotel schema on your computer all right so that finished this cell will create a schema based on the Json object that we defined earlier so in this case we're saying we have a Json uh we have a class named Hotel we're specifying use text Tove open aai as the vectorizer and this is why we need the openai key passed into the we8 client because the we8 client will receive these objects for us and use text to vectorizer use text to V vectorizer and vectorize our data for for us then we specify each each of the properties we have a name we have an address we have proximity to attractions and some of these I am configuring the fields to skip vectorization because I don't want to do Vector search over them so here I'm vectorizing over the name uh I am vectorizing over accessibility options the type of Hotel Wi-Fi breakfast Pool and Spa Etc you can go through this schema if you'd like but what I'm going to do is execute the cell just so that we have it in our Jupiter notebook and then I'm going to create the schema against the we embedded client so this now creates the schema against the we8 embedded client and here we'll create 10 hotels um just through a for Loop and then we'll store them in weat embedded using this client call to data object.create we pass in the hotel data and then we specify the schema so let's go ahead and execute this for 10 hotels all right so this is done let's go and see what's next so because we've added these 10 hotels to our Vector database we can now do some interesting things against them such as Vector search and generative search the following cell executes both a vector search to find specific hotels of some specific parameters that we can specify and then it will apply generative search with a specific prompt and pass in details of each Hotel into that prompt so I'll show you here's the generate prompt explain in an email why this hotel with a given name could be good for people traveling for business here's a business related amenity business amenities and if there's some good ways to kick back and relax you can reference those to and here's the top amenity so these in these um handlebars are passed in as attributes from each object in the schema and we pass in the generate prompt into the with generate attribute and actually the reason why this works is because the generate the generate module is included in the schema and is included in the weate embedded instance so I'll show you what that looks like over here we're using generative open and we're specifying specific model GPT 35 Turbo 16k with a max number of tokens and this will basically make calls against open a on our behalf with the specific prompt as demonstrated here and when we get back our results we are limiting them to two and we pass them to the large language model to generate these and then from there we just print out print out these results so okay so what we have here is we're searching for hotels with some specific concept that's business related let's just execute this and see what we get all right dear recipient I hope this email finds you well I wanted to bring your attention to a hotel that I believe would be a great option for people traveling for business The chanat toown Retreat Hotel here's another one uh the koi Tower Hotel ideal accommodation for business Travelers I hope this email finds you well I'm ready to introduce you to the koi Tower Hotel a premier accommodation option that I believe would be perfect for your upcoming business trip okay so using the generative search module you're able to create any kind of textual response by making calls to a large language model and you can pass in the prompt directly in your vector search query uh through the generative module provided um and integrated in we8 we'll grab one of the hotels we created earlier and create some descriptions on top of them so I'll do that manually with the chat completion library with prompts to create General descriptions and one that is focused on descriptive imagery okay to continue into the next part go to replicate and create an API key put the API key into your EnV file and make sure it's named how you see it on screen we'll start by grabbing one of the hotels we created earlier in this first cell we're just taking that hotel printing it and showing it on screen it's the mission Oasis hotel and I have another prompt here that says in some number of words or less describe the following Json in a descriptive Manner and then I print out the response so let's go ahead and do that the mission ois hotel is a mediumsized boutique hotel in San Francisco um personalized city tours Etc what we're going to do with this is pass it to a stable diffusion model to generate some imagery on what this hotel could look like we also have another call to chat GPT here which basically asks it to write descriptive imagery of what the hotel could look like and use this to help us visualize the hotel so let's go ahead and do this one too okay so here we go the mission Oasis Hotel is a medium-sized Boutique Hotel located at 123 Mission Street in San Francisco picture a Charming establishment with modern decor and incorporates cultural influences from the Mission District awesome this is quite a long description so as mentioned at this point you should have a replicate API key make sure that you have it in your EnV file as shown here and what this cell will do is create a replicate client with the API key that you passed in we'll go ahead and execute this great here we make a call against replicates specific model stability Ai and if you Google search for this you'll see that it's just the stability AI stable diffusion model we pass in a specific prompt uh this in this case we are manually crafting The Prompt uh specifying the top amenity and specifying proximity to uh to attractions and then we print the image to screen as shown here with a width and height of 600 so let's just go ahead and run this and in this second image that we create we're just passing in the entire description of the imagery so that's going to be this entire block of text here and you could edit this Jupiter notebook to pass in the descriptive the description that we created earlier also but I'm not going to do that so we'll wait a second until this finishes and we should get a image of a sleek and modern luxury hotel with some specific toity and proximity to attractions there is our hotel looks great there's the Golden Gate Bridge in the back Trans America pyramid in the distance what it looks like anyways all right and let's try passing in the entire descriptive imagery that we created earlier also looks quite San Franciscan I we have some of the text there not super great but does have some Mission District Vibes and that's it you now know how to create Json objects with the new Json mode feature in several open AI models and how to store them in WEA to apply Vector search and generative search and create descriptions that you can use to prompt a diffusion model to help generate images for your mock data also from here on out you can do anything with this new skill from populating your own application demos to creating immersive applications on generated images thanks for watching this video we hope you found it informative happy building with we8 and if you have any questions please share with us on our community slack details are in the description below see you next time ", "type": "Video", "name": "let39s_use_ai_to_create_data", "path": "", "link": "https://www.youtube.com/watch?v=KYk00HuZLkU", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}