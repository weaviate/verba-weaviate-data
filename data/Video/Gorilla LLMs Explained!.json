{"text": "Hey everyone, thank you so much for watching this explanation of \"Gorilla: Large Language Model Connected with Massive APIs\" ... \nhey everyone thank you so much for \nwatching we've been on YouTube I am \nsuper excited to tell you about the \ngorilla large language models we're \nabout to release a ton of awesome \ncontent about what we're doing with the \ngorilla models a podcast with shashir \nand Tianjin but let's kick things off \nwith an explanation of the paper all the \nexperiments all the details of it but \nfirstly let's take a step back so \nshortly after Chad gbt you just blew \neveryone's Minds with its ability to \ncommunicate and complete tasks in \nnatural language people soon realize \nthat you can connect these large \nlanguage models like trashy BT to \nexternal tools to enhance their \ncapabilities even further these external \ntools typically referenced search \nengines or maybe code executors or \ncalculators like the Wolfram Alpha \ncalculator or just you know a basic \ncalculator as well as say how to send \nemails how to book calendar appointments \nor how to you know purchase a flight \nticket connecting llms with these tools \nhas kicked off this area of research \nknown as agents and all sorts of \nexciting things with doing this so what \ngorilla is adding to the table is it's \ntreating formatting these API requests \nas a deep learning task so deep learning \nresearch has typically been organized \nbased on demonstrations of input output \nexamples like text classification \nquestion answering summarization and \ngorilla is leading the way in treating \nformatting API requests as a task to \nfine-tune deep learning models on they \nhave an amazing ablation showing the \ndifference between fine tuning with and \nwithout retrieval and the rule of \nretrieval in this which obviously with \nweavate we find this super interesting \nand then of course they have these \nreally interesting details around using \nself-instruct to generate training data \nto learn to write API requests and all \nsorts of interesting details that of \ncourse we'll dive into in this video so \nthank you so much for watching and let's \nget into it so just in case you're in a \nhurry and just want the general overview \nof gorilla here's my attempt to compress \nthe key ideas in two minutes before \ndiving further into the details in the \nrest of the video the high level \nmotivation is to equip large language \nmodels with tools tools are described as \nform adding API requests so open AI \nfunks has been a huge like related work \nprobably the current state of the art \nwhat I think most people are using for \nthis where openai funcs introduced \nhere's how to present a Json that \ndescribes the name of a function a \ndescription of what it does and how to \nformat input arguments to that function \nto then pass to the openai large \nlanguage models and I think openai is \ndoing a little bit of fine tuning on \nthese jsons I'm not exactly sure but I \nthink it's either some fine tuning of \nthose jsons or it's just kind of done \nzero shot where these large language \nmodels like gbt4 they are as we'll see \nin the details of the paper they are \nreally good at taking some kind of \ndescription of a function and then \nlearning how to use it like you can do \ntext to SQL this way all sorts of ways \nif you tell it here's some kind of \nfunction and how to use it the models \nare really good at using it so examples \ninclude say sending an email getting the \ncurrent weather and then importantly \nthis is this is kind of the big detail \nof how do you write API requests is how \ndo you format the input argue arguments \ncorrectly so in this case you have you \nknow send email to say Bob inlight body \nyou know how are you like these two \nstrings or you can imagine it's like uh \nyou know maybe you have like a date when \ndo you want to send the email so \nformatting these these arguments \ncorrectly is the key detail now here's \nthe super interesting thing the open AI \nmodels they are great at this but they \nare massive language models like you \nknow 200 billion parameters and so on to \nserve these and to do inference is \nexpensive so if you can com the gorilla \nmodels are compressing this \nfunctionality into this seven billion \nparameter model by fine-tuning that \nllama 7B the open source large language \nmodel from meta AI they're fine-tuning \nthat model to do this and then the \ndifference is that this is way more \neconomical to serve this kind of API \nrequest if you compress it from you know \nhundreds of billions of parameters to \nseven billion parameters and they'll \nprobably you know keep compressing it as \nthis research continues to evolve so the \nkey idea behind how it works \nis that we have these examples of apis \nwe use self-instruct where we take an \nexample of an API and then we prompt \ngpt4 to say can you write an example of \nan instruction that would want to use \nthis API and then that then becomes the \ntraining data to compress to train this \nnew language model the Guerrilla \nlanguage models so there's also a really \ninteresting ablation about using \nretrieval in this and this is I love \nthis part because retrieval aware \ntraining is I think one of the most \nexciting ideas on The Cutting Edge where \nyou use you take the prompt and then you \nretrieve and then you use the retrieve \ncontext during trading not just as like \na you know fit after you've trained the \nmodel you're going to be training the \nmodels with this retrieval and they do a \nsuper interesting ablation exploring the \ndetails of trading these models with and \nwithout retrieval or at inference time \nthan with and without retrieval so a lot \nof interesting stuff there so \nparticularly what gorilla is is Gorilla \nthis first research paper is about \nformatting requests to call Deep \nlearning pre-trained models so I taking \nmodels from the hugging face model Hub \ntensor Hub and pytorch's torch Hub we \ninstantiate these models based on some \nnatural language instruction so if you \nhave the natural language instruction I \nwant to classify the gorillas in this \npicture then the gorilla large language \nmodel would write the python code to \nextension instantiate that like an image \nclassifier from hugging face and maybe \npreferably one that's been trained on \nlike animals and this kind of thing and \nso that's kind of the details is knowing \nwhich path to like some of the kind of \ninput arguments that are required from \nthis is mostly kind of which path to put \ninto the argument but also sometimes say \nyou know you have like the resnet object \ndetectors they have like these different \nuh feature extractor backbones so there \nare some details to how you kind of \nformat the the requests which we'll see \nlater on in the videos we look at like \nthe abstract syntax tree and all this \nkind of stuff but so this is kind of the \nfirst work of gorilla is you know \nlearning to call model inferences and \nthis is there's another paper called \nhugging GPT which is like this where you \nthink of these pre-trained models as \nkind of like the API zoo and the \ncollection of tools that the large \nlanguage model can use is other models \nspecialized to some particular thing \nlike say you know gbt4 calls the dolly \nimage generation model and orchestrates \nall this kind of stuff \nbut the authors are collecting this API \nZoo data set on their GitHub and I think \nthis is extremely powerful the authors \ndescribe supporting web scale collection \nof potentially millions of changing apis \nit requires rethinking our approach to \nhow we integrate tools it is no longer \npossible to describe the full set of \napis in a single context many of the \napis will have overlapping functionality \nwith Nuance limitations and constraints \nso they're building up this data set \nthat I think will just be super powerful \nI think it'll be insanely exciting to \nsee how this plays out for example we're \nlooking into adding our weeviate apis to \nthis API Zoo data set to so to give you \na quick sense of this before you know we \nhave more content so I'm not going to \ndive into this too much yet I'll talk a \nlittle more at the end with some \ntakeaways about how this you know how I \nthink this connects to the weeviate apis \nbut for example if you want to use the \ncohere re-ranker you know you have this \ngraphql syntax which near text is how \nyou use a vector search and we V8 limit \nis how you limit how many search results \nyou get back and then you have this \nre-ranked syntax so teaching the large \nlanguage models how to format requests \nlike this yeah I think it's going to be \na game changer for bb8 and so it's also \nexciting so in conclusion here are some \nof the key ideas so firstly API syntax \nfollowing is a deep learning task for a \nsmaller specialized large language model \nthe use of retrieval aware training I \nthink this is the first paper I've seen \nthat's really doing this in an exciting \nway and that's where you're integrating \nretrieval into the training not in kind \nof like the end-to-end differentiable \nsense where gradients from the LM go \nback to the encoder but kind of just \nusing this retrieval to supplement the \ninputs and help reduce that \nhallucination by turning the task \nbasically to copying where you just have \nto kind of like look at the input window \nrather than like have all this \ninformation like in your brain so to say \nif you're a nola but and so then I think \nthis API bench data set and \nunderstanding the potential of this API \nZoo data set as this continues to evolve \nis so interesting and then understanding \nthe details of how they evaluate these \nmodels okay so the first step to \nunderstand the experiments of the paper \nis to understand the new API bench data \nset the authors publish and create for \nthese experiments and how how they use \nself-instruct prompting to generate \nsynthetic training data to fine-tune \nthese models for Tool use so starting \noff collecting a data set of model API \ncalls they're taking models from the \npytorch lets you upload models to the \ntorch Hub tensorflow also does this with \nthe tensor Hub and then of course \nthere's hugging face the hugging face \nplatform hosts and serves about \n203 681 models so you know it's it's \namazing this model collection that \nhugging face has created and it's really \ninteresting to think of what will become \nof that this particular research \nresearch like hugging GPT treats these \npre-trained models like they themselves \nare the tools that uh you know some kind \nof orchestrating model would want to \ncall like say you know you call the \nimage generation maybe you call the \nimage segmentation model you call the \nyou know the natural language inference \nthe question answering like kind of the \ncreativity of thinking about these tests \nand then you know because so here's kind \nof stepping into the details of all \nthese models that it exists they filter \nthese models out by picking the top 20 \nmodels from each domain and I think I \nshould have bolded domain domain's a \npretty interesting concept because on \none level you could have domain in this \ncase they're using it to mean what I \nwould refer to as modality or they have \nseven domains in multimodal which means \nyou know maybe it's like the clip model \nthat you use text to search for images \nor you know this kind of thing they have \neight in computer vision 12 in natural \nlanguage processing five and audio two \nand tabular data and two and \nreinforcement learning so you know that \nkind of idea of like you you have like a \npodcast MP3 file and you grab the you \ngrab the whisper model and then you put \nit into the whisper \nthen you say grab like a text \nvectorization model to put it into \nleviate or something or you just I don't \nknow summarization right out of whatever \ncame out of the whisper model but this \nkind of like combining models I think is \nquite an interesting idea but to get a \nsense these are kind of like the models \nthat they take to combine into this data \nset so each entry in the data set is an \ninstruction API reference pair so in \nthis case an API reference would be like \num you know Auto model Dot from \npre-training the hugging face sense and \nthen like the model path and if it has \nadditional arguments like what that \nentails so we have 925 models from \nhugging face 626 from \ntensorflow Hub and then 95 from torch \nHub and the 1 645 API calls are \norganized into this Json that has these \nkeys so the key so you know the keys in \nthe Json are the domain so you know and \ndomain would be like computer vision so \nlike domain computer vision framework \nhug and face functionality like what it \ndoes the name of the API the API call an \nexample of it the arguments it takes \nmaybe the environment requirements like \nif you need like a GPU to run it or \nexample code which I think is similar to \nAPI call we'll take a look at this in \none second uh the performance this is a \nreally interesting detail with respect \nto how they evaluate API calls with \nconstraints because uh you know say you \nwant a 10 million parameter image \nclassifier so you can run it on your \nphone but then you also want it to have \nlike at least 75 percent image in that \ntop one accuracy so you you kind of \ntrade this off with the constraints and \nthat's a super interesting detail of \nthis kind of paper and research and then \ndescriptions like a natural description \nof what this is so let's take a look at \nan example of how these uh how this Json \nis formatted okay so I'm not completely \nsure I have all the details correct here \nbut here is a basic overview so I went \nto the gorilla repository where you can \nsee uh the API bench and then hugging \nface.train so I grabbed one of these and \nthen dropped it into the three back \nticks Json to make it look a little \nnicer uh so anyway so you have these \nkeys that describe each of the apis so \nsimilar to the you know the open AI \nfunks he sees like how it's what the \narguments are to make the API call and \num you know like how to how to call it \nso in this case instruction our customer \nis a robotic manufacturer of cleaning \ndevices they ask for help on solving \nusers questions okay probably okay so \nquestion answering so so here's a sense \nof it I'm not sure I've completely \nunderstand the details yet but basically \nthinking about how you want to organize \nthese API calls into Json such that you \ncan you know either prompt it to come up \nwith the instruction of when you would \nwant to use this or a description of \nwhat it is this is again that \nperformance thing is so it gets like you \nknow 78.4 I think this is recall within \nwith the embeddings encodone model so \nyou know on these different question \nanswering data sets like trivia QA or \nTrek or web questions Squad so \nthis is kind of a sense of what what it \nis organizing these apis in this kind of \nJson such that you can either \nself-instruct the gbt4 model to produce \na natural language command like this of \nof when you would want to use it as well \nas like then this being kind of \nsomething you would retrieve to put in \nthe input to then format the API call \nand all this kind of stuff so the author \nState we employed gbt4 to generate \nsynthetic instruction data we provided \nthree in-context examples along with a \nreference API documentation and task the \nmodel with generating real world use \ncases that call upon the API so you have \nsomething like as shown previously the \nDPR question encoder and the model would \nhave to the gbt4 model produces some \nkind of natural language command of when \nsomeone would want to use this kind of \nthing like I have you know Airline \nmanuals or whatever and I need to answer \nquestions about it so then it knows like \nokay I translate that natural command \ninto the API request for this particular \nmodel or as mentioned like the I wanted \nto detect the gorillas in this image to \nrep to then be mapping to that object \ndetection model API so the authors \nconstructed six instruction API pairs \nfor each of the three model hubs and \nthese 18 points are the only hand \ngenerated or like handcrafted data and \nthis is a huge paradigm shift for deep \nlearning research which this \nself-instruct thing this generative data \naugmentation synthetic data cannot be \nunderstated enough it most of these deep \nlearning papers in the past the authors \nhave been like hey we've labeled like a \nhundred thousand examples and this kind \nof like collection of this data set has \nbeen such a integral part for doing \nanything in deep learning and now by \nusing they they could they collect like \n18 examples again of how to write an \ninstruction API pair \nthen you just give that to gbt4 and it \njust generates the training data to then \nfine-tune gorilla taking as input the \nsynthetic instruction and then the API \nreference and then the output is the \ncorrect API call so a high level \noverview of this full flow we've curated \n1 645 API calls from tensor Hub \ntensorflow torch Hub and hugging face so \nthen we build up this API data database \nof this which we use through the API \nreference retrieval later on but then \nfrom these examples we have the \nself-instruct we create 10 instructions \nper API so now we have a data set of 16 \n450 you know inputs being the natural \nlanguage command and then the API is the \nretrieved API or maybe we use the Oracle \ncontext or we use the exact API in the \ninput and so then these are used to \nOutput the correct API call for calling \nthis particular model that was used to \ncreate one of the 10 synthetic \ninstructions per the API call so then we \nbuild up this API database so \nso again one of the instructions could \nbe I want to see some cats uh dancing in \ncelebration so this is like a call to \nthe stable diffusion model so the input \nthen becomes uh the task generate image \nfrom text \num I'm not exactly sure about this \ndetail I think that the it depends on \nhow you want to format this for sure but \nI think one way of doing it would be \ninput and then hashtag hashtag \ninstruction I want to see some cast \ndancing and celebration and then \nreference API would be the retrieved API \nwhen you turn the say it's Vector search \nyou turn this into a vector and then \nretrieve the nearest neighbor vector and \nthen that becomes the reference API or \nthe you know you can see already how \nlike bm25 search would be terrible for \nthis how you I want to see some cast \nDancing in celebration you don't have \nany good keywords to return like an API \nfor that so another great case of a \nvector search example but so then you \nformat this input this input goes to \ngorilla and gorilla outputs the call for \nthis model stable diffusion pipeline Dot \nfrom pre-train stability AI slash stable \ndiffusion Dash you know 2-1 and then you \nget the generated image of the cats so \nbefore continuing on with the \nexperimental details of the paper I \nthink it's worth checking in quickly \nwith our friends at hugging face and \nlooking at this amazing repository of \nmodels they have so the paper it claims \n203 000 I imagine this paper isn't more \nthan a couple months old and we already \nnow have nearly 300 000 models in the \nhug and face model Hub so you know we \nhave say this stable diffusion model we \nhave of course the Llama that's like the \nmost famous model in the world right now \nI think this new Desi coder I've seen \nthis is like a model that's been you \nknow trained for code so you see how you \nkind of have like these different kinds \nof models like this you know Med llama 2 \nis probably like a llama tube fine-tuned \non medical information or let's see what \nelse we can find yeah I mean the stable \ndiffusion ones these are like the \ngenerative image models I do think kind \nof generative image models in large \nlanguage models those two kind of \ncategories of models dominate most of \nthe you know public discussion about \nthese models but \nanyways you can see these kind of tags \nlike you see text classification table \nquestion answering that's a pretty \nunique one like if you need to answer \nquestions about a CSV table you might \nwant one of these models uh you know \nlet's see what else we have in audio \ntext-to-speech that's a really cool one \nso yeah you see how um you have these \ndifferent domains multimodal computer \nvision natural language processing it's \ncrazy like the kind of Robotics taking \nthese models that do like continuous \ncontrol but yeah I just thought it'd be \ninteresting maybe to just take a look at \nunderstanding further that there are \nthat what gorilla is doing is you're \ntraining a language model to you know \nform to instantiate one of these \nparticular models whatever is best \nsuited for this task so like if you say \nI need to generate a video of cats \ndancing then I guess this text to video \nmight be the way to do it maybe you want \nto decompose that too so like you know \nfirst writing a story about the movie \nand then doing it frame by I don't know \nbut like you can imagine just this kind \nof repository is this the best way of \nthinking about the collection of apis \nmaybe yeah it's definitely a pretty \ninteresting thing okay now I like \neverything about this paper but this is \nmy favorite detail so training gorilla \nablating training with and without \nretrieval so quickly retrieval augments \na generation most of the way that people \nare using it right now is you train the \nlanguage model without retrieval \nand then at inference time you give it \nretrieval but what they're going to be \ndoing is they're going to be training \nwith retrieval as well and really \ncollecting the experimental data on you \nknow is this worth doing what's the \nstate of this so to kick things off uh \nthey're so they're going to be training \nwith and without retrieval as well as \nablating at inference time with and \nwithout retrieval so inference just \nrefers to making predictions with a \ntrained model if that wasn't clear so \nyou know when they say zero shot they \nmean it has not been trained with \nretrieval and retrieval means trained \nwith retrieval so they're going to be \ntraining llama 7B llama 7B a large \nlanguage model by meta and the the \nfinest open source model to date so this \nis how I understand how they do the \ntraining and I hope this is correct but \nmaybe if someone else has an \ninterpretation of this it would be you \nknow if you could leave it in the \ncomments and maybe we could see if \nthat's more accurate but I think \nbasically what they do with standard \ninstruction fine-tuning is that you have \nthe ground Truth uh API call to generate \nand so you force the model to you know \nso the model with its first token \ngenerated it might not be correct but \nyou still can like force it to do those \ndecodings and then you would multiply \nthose probabilities out and then you \nhave this proximal policy optimization \nwhere you just do like plus one minus \none did I like it did I not like it and \nthen you send that reward signal back \nthrough the probabilities of the entire \nsequence that generated that was the \nprobabilities put to the ground truth \nAPI call so that's how I think they do \nthis maybe another way to do it would be \njust kind of the standard language \nmodeling loss where you just you know \nlanguage model each of the tokens of the \nground truth API call you could also \nmaybe uh generate an API call try to \nexecute it and then if it executes plus \none reward if it doesn't execute minus \ndo less of that so that this is how I \nthink it works is they force the \ngenerations to follow the API call I'm \nnot exactly sure what the standard \ninstruction fine-tuning is but I think \nlike maybe I'm getting off topic but \nlike I think the way that hugging face \nhas abstracted training models I don't \nknow if it's really worth most of us \ngetting into unless unless this is your \nthing unless you're like training models \nall the time but for you know our \nexperiments with UVA gorilla it hasn't \nbeen a pain to just uh do whatever \nhugging face offers off the shelf but \nanyways \nso here's how retrieval augmented \ngeneration during training works so you \nhave the natural language instruction \nlike please classify if this image \ncontains a dog I want to see cats \ndancing in celebration and then not just \nthat as the input you add use this API \ndocumentation for reference and then the \nfirst retrieve search result so this is \nwhat we do all the time at inference \ntime these days with retrieve augments \nof generation but what if we did this \nduring training as well and what's so \ninteresting about that is then you're \ntraining the model with gradients to \nread that API request which is super \nimpactful for updating documentation you \nknow like the weviate apis they're not \njust going to look like this forever or \nlike you know however llama index all \nthis stuff all these software tools they \nevolve over time and so you need to \nlearn how to do the new API requests so \nhaving it be trained to read the request \nis seems like a huge unlock for this in \nkeeping the models fresh with new \ninformation as well as generally it just \nmakes the task a ton easier if you see \nthe it basically the answer in the input \nso this is what they mean by doing this \nduring training not just at inference \ntime so the key benefits the other state \nwhich I think you know agrees with what \neveryone says that there's maybe one \nfourth thing I would add to this but \nthis makes the llm adapt to test time \nchanges in API documentation it improves \nthe performance from in context learning \nso you know it's easier to learn this \ntask it can transfer learn better \nbecause it has some representation of \nall the tote of like the you know the \nAPI reference so it learns better and \nthen also it reduces the hallucination \nerror the hallucination error is a huge \none obviously for API syntax because you \nknow it has to be correct you can't like \nhallucinate an API request or it won't \ndo anything productive at all but \ngenerally this retrieval aware training \nI think has a huge opportunity to reduce \nhallucinations so the fourth thing I \nwould add to this \nis when you decompose the retrieval from \nthe reasoning you can also then have a \nsmaller reasoning model so you don't you \nknow this is like the atlas paper from \nmeta which is saying that you know when \nyou decouple retrieval and reasoning you \nthese uh you could have like a 13 \nbillion parameter reading model that \nperforms just as well as a 300 billion \nparameter like fully end-to-end llm so \nthis kind of retrieval also is \neconomical in the llm you need because \nthe task is just way easier it's just \nabout like reasoning in the input not \nabout like having remembered everything \nin the world \nokay before we see some data tables we \nneed to talk a little bit about how \nwe're going to be evaluating these \nmodels so again what we're evaluating \nthese models to do is to select the \nright model the right model path and \nsometimes there are optional arguments \nas well to the model so these are \nexamples of incorrect Generations so in \nthis case uh this the gpt4 model is \nhallucinating extra arguments to the \nfunction like you know this ASR \nparameter in string or Source equals \nlocal the anthropic cloud model is you \nknow instead of doing torch.hub.load is \ndoing torch audio dot pipelines you know \ndot wave2vec ASR pipeline so it's like \nhallucinating or it's calling the wrong \nlibrary to do this whereas so we wanted \nto do this particular kind of Syntax for \nloading this model so what the authors \npropose doing is decomposing the API \ncall into an abstract syntax tree and \nthen matching that tree with the uh with \nthe ground truth or say you know you got \nsome of it right so this is like if you \nmade it to here right like you got the \ntorch.hub.load maybe you would penalize \nthat less something like this so yeah I \ndid I didn't go too into this detail but \nI think it's quite interesting how \nyou're going to be evaluating these \nmodels like maybe the dumb way to do it \nis just to do to keep the perplexity \nlike the perplexity is the common \nlawsuits and language modeling where \nyou're just multiplying out the \nprobabilities the language model puts to \nthe ground true tokens and you know \nthat's typically what you do with \nlanguage modeling \nwith this uh you know the the probably \nthe most interesting thing about this is \nif you uh did you know if instead of \ndense net 121 you did densnet 161 or 200 \none it would still execute so you can't \njust purely evaluate this based on did \nthe API call execute you also need to \nkind of see if it gave the particular \nmodel which will make sense too as we \nlook at the ablation on uh API calls \nwith constraints where you particularly \nwant like you know eight eighty percent \nimagenet accuracy but less than 20 \nmillion parameters \nokay let's get into some of the results \nso the first thing to note before we \ndive into the results is they're going \nto be exploring again training gorilla \nwithout retrieval as well as training \nGuerrilla with retrieval so starting \nwith training gorilla without retrieval \njust purely fine-tuning a language model \nto go from natural language instruction \nto API call the API reference is only \nused during inference not during \ntraining when when they do bring it out \nfor to see what happens to Performance \nso the takeaway fine-tuned gorilla gets \nCDR performance 20 better than gbt4 \nnearly 11 better than cha gbt and then \n83 better than the other open source \nmodels so you know you see that \nobviously obviously there's a gap \nbetween gbt4 Chad gbt and then most of \nthe open source models so but this take \naway the fact that you can fine-tune \ngorilla to do a better job of these API \nrequests then gbt4 zero shot or Chad GP \nzero shot this suggests quantitatively \nthat fine tuning is better than just \nretrieval augmentation so you know what \nthey mean is \nthey you know so neither model has been \ntrained with the API reference but they \ndo also show what happens when you put \nthe API reference in the input at test \ntime not during training time and they \ndo find that fine-tuning models performs \nbetter than just purely augmenting gbt4 \nwith the ape guy reference so another \nthing before we look at the data table \nis that you know this is a warning for \nbrag implementations they find that if \nyou give it a non-optimal I mean this is \nobviously common sense like if you give \nit the incorrect API reference it will \nmisguide the model of course so I don't \nknow if that's like exactly like a \nmind-blowing takeaway but I mean it it \nof course is because when you're \nthinking about retrieval it really like \nthat's why I think this cohere \nre-rankers thing is so exciting because \nfor a lot of these retrieval augmented \ngeneration applications I don't think \nyou're going to be latency bound because \nyou know what's the point of making it \nsuper fast but not accurate prediction \nso kind of these re-ranking models I \nthink become more valuable because it's \nworth taking the time to make sure you \ngot the right API reference before you \nthen do the generation so let's take a \nlook at the data table so \nokay so obviously this is a ton to look \nat but uh so so gorilla of course is you \nknow the model we're talking about and \nso gorilla zero so zero shot means all \nthese models are just being evaluated \nwith the natural language command I want \nto see some cats dancing right they just \nget that as input and they just have to \nwrite the API request to the hug and \nface model so they measure different \nkinds of uh you know the overall which \nis that abstract syntax tree matching \nthing the hallucinations when it um you \nknow invokes the like just generates an \nAPI call that doesn't exist or errors I \nthink is just when it makes one of the \nthings right I'm not exactly sure the \ndifference but I think probably we can \njust look at this overall metric so so \nhere's the thing about uh be careful \nwith the retriever so bm25 if you get \nthe wrong context it goes from 59 to 40. \nas we saw earlier I think it makes a lot \nof sense why bm25 retrieval is hard for \nthis kind of case because if you say I \nwant to see some cats dancing you don't \nhave any keywords that are going to \nmatch the you know the hug and face API \ndocumentation so I do think that result \nmakes a lot of sense uh gbt index that \nbeing that was the earlier name of llama \nindex uh returning so a site boost using \nVector embeddings but definitely a lot \nto this and then Oracle Oracle is the \nyou know the perfect API reference to \nhave so you can see how much it boosts \nby having the perfect API reference so \nmaybe in addition to seeing our gorilla \nmodel so we see gbt4 Zero shot doesn't \nperform so well but then when gbt4 has \nthe you know 38 to 66 again you know \nthat's the retrieval augmented \ngeneration thing is when you give it the \ncontext the large language models \nperform way better but then you can also \nsee the detriment by not having it be \nthe right context so here's another kind \nof view of what these models ended up \nlooking like \nyou know with the Oracle retrieval so \njust zero shot where you've just \nfine-tuned gorilla compared to gbt 3.5 \nand GT4 zero shot gorilla model performs \nway better but then with the Oracle \nretriever you push these super capable \nlanguage models closer llama just with \nretrieval doesn't seem to be able to you \nknow get up up into the left like these \nother models do so that's kind of \ninteresting as well you see the input \nimpact of uh not a perfect Retriever and \nso on so so this is again this is \nfine-tuning Gorilla without retrieval \nokay so now let's get into the results \nof retrieval aware training fine tuning \nwith retrieval so shown on the right is \nthe gorilla trained with the Oracle \nretriever so that means that during \nfine-tuning the gorilla is always seeing \nthe perfect API reference so I want to \nsee some cats dancing and then it's that \nstapled stable diffusion model API \nreference so it's you know perfect API \nreference so here's so we see with the \nOracle that the results are much better \nso you know comparing this column with \nthe Oracle one is train with it or maybe \ncomparing this column with the zero shot \ngorilla without retriever when it's been \nfine-tuned without any kind of retrieval \nat all so you know so that's that \ncomparison gorilla with the Oracle \nretriever then is completely unable to \ndo this without any kind of retrieval \naugmentation and then here's another \nreally interesting detail of it is that \nwhen you train it with the Oracle \nretriever it becomes less robust to \nnoise in the retrieve which makes a ton \nof sense because you've changed the task \nfrom memorization to like learning to \nread and so if you're learning to read \nthe wrong thing obviously that makes a \nlot of sense why that would mess it up \nor yeah so you know it would be \ninteresting to see kind of like um \nablating this further like instead of \njust um \ntop one maybe you you have top three so \nthere's there's definitely some more \nexploration they could do with uh you \nknow how you retrieve the context during \ntraining do you put do you mix the \nOracle with noisy results to make it to \ntry to make it robust to noise that way \nand so on so the big takeaway is that \nthe current retrievers still have a big \ngap between the ground truth retriever I \nthink this is maybe confounded by \nbecause you could have like a I I think \nI think this task also is particularly \nbad for bm25 but you could generally you \ncould do like hybrid search with \nre-ranking to try to improve it you can \nmaybe fine-tune the embedding model as \nsomething that is not common to see but \nyou know definitely could be a lever to \npull this performance even further but \nyeah so the key thing is to note that if \nyou're going to train it with the Oracle \ncontext and then at test time you have \nsome noise in the return context you can \nexpect the model to perform worse \nbecause you know it's being trained to \ncopy perfectly okay now here is maybe \nthe more important evaluation thing is \ntest time documentation change as the \nauthors State the rapidly evolving \nnature of API documentation presents a \nsignificant challenge for the \napplication of llms in this field these \ndocuments are often updated at a \nfrequency that outpaces the retraining \nor fine-tuning schedule of llms making \nthese models particularly brittle to \nchanges in the information they are \ndesigned to process this mismatch sorry \nan update frequency can lead to a \ndecline in the utility and reliability \nof elements over time so I think this is \nprobably the most important thing for \nthis API documentation because you know \nas imagine we train the wev8 gorilla one \ntime and now we want to say change the \narguments to one of the function calls \nor deprecate some something or we want \nto introduce new apis this ability of \nretrieval aware training where you're \ntraining it to just kind of read the \ndocumentation that enables it to adapt \nto changes in the apis and that is a \nhuge enabler for this kind of \napplication they illustrate how you can \nupload the model registry to change the \nmodel path from PI torch Vision to \nNvidia deep learning examples colon \ntorch Hub and they show this kind kind \nof thing of how the retrieval aware \nmodel is able to adapt to updates in the \ndocumentation the next really \ninteresting detail for these kind of \nmodels is how well they can follow \nconstraints so particularly with deep \nlearning models we have resource \nconstraints and then performance \nexpectations so you know we have these \ntwo kind of things parameter size which \nis a pretty good proxy for how you know \nthe late how slow is going to be to make \npredictions as well as what kind of like \nwhether you need like four gpus to run \nit or what kind of GPU you need to run \nit and so on as well as the lower bound \naccuracy so for example the natural \nlanguage command might be invoke an \nimage classification model that uses \nless than 10 million parameters but \nmaintains an imagenet accuracy of at \nleast 70 percent so this requires the \nNuance of understanding the request as \nwell as then how to format it into the \nAPI so you kind of have this confounding \nof these two tasks in one but it's \nlearning how to simultaneously balance \nthe performance you want with the \nresource constraints so this table is \nshowing how well the models are at doing \nthis this definitely makes the task more \ndifficult you can see how the cloud and \ngbt4 they pick it up because now I think \nhaving this kind of um you know like \nability to reason about the request as \nwell as just how to format the API \nsyntax because you need to you need to \nbe able to like parse out this kind of \nyou know what I want as well as the \nconstraints then you need to kind of \nread the description read the \nperformance and so on so I think this \nhelps the more General models catch up \ndefinitely an interesting kind of aspect \nis this API calls with constraints \nparticularly I would say resource \nconstraints so hopefully that was a good \nexplanation of the details of the \ngorilla paper more than happy to further \nclarify anything if you have any \nquestions or ideas please leave them in \nthe comments here are some of my \npersonal takeaways from reading this \npaper so firstly I think it's really \ninteresting to just kind of consider the \nevolution of this kind of research I \nthink it started with react that showed \nhow you could have zero shot prompting \nwhere in the input you would say hey you \nhave a calculator a search engine if you \nwould like to use it then you know \nplease format your response like this \nand then we'll send the request to the \nexternal tool and this kind of thing so \ntools former I think was then that the \npaper that showed that you could \nfine-tune language models to use tools \nwith gradients I think it was a little \nmore entangled with uh the language \nmodeling objective than this kind of \ngorilla work where I think the gorilla \nwork is more specialized on particular \ntools rather than having gradients all \nthe way in the end to end of how you use \nthe tools to complete the tasks hugging \nGPT I think is another really \ninteresting work connected to this which \nuh was at least for me the first paper \nthat showed like this idea of like \nmodels or tools so I think gorilla is \nsomewhere in between tools former and \nhugging GPT but I love the specialized \nFocus I love how they brought in the \nself-instruct for how you generate the \nnatural language commands and bootstrap \nthis data for then compressing from the \nlarge model to the smaller model to \nwrite these API requests so you know \nwe're going to be doing more stuff on \nthis wuvia gorilla so I'll just give a \nquick preview of this for now but you \nknow we V8 gorilla is about you know \ntraining fine-tuning the model on the \nWii V8 apis so starting with the search \napis you know we it has a graphql API as \nwell as like you know python JavaScript \nall that client libraries for how you \nwrite searches so \nyou know this is similar to the web GPT \nstuff uh web gbt is where it has search \nactions like you open up a square \nbracket and say search and then the term \nor you and you get the search results \nand you say you know Open Bracket next \npage to see the next page of search \nresults from say you know the Bing API \nor the Google search serp API and how \nyou do that so it's also quite related \nto learning to search so learning to \nsearch is I don't think a massively \npopular area of research but that's \nwhere you would try to train a model to \nyou know maybe copy like what what terms \nparticularly humans search for so you \nknow like how you know with how we use \nGoogle we might focus on these kind of \nkeywords and so on so you try to \ncompress that into LM so kind of similar \nto the API call with constraints in \naddition to this kind of how would you \nsend the request to leviate you might \nwant to entangle the gorilla model to \nalso coming up with the search query and \nthe search query isn't just the prompt \nso one really popular way to get better \nretrieval augment to generation is you \ntake the prom and then you take that \nprompt put it to a large language model \nand say what would be the search query \nfor this and then you send that search \nquery to the vector database to get the \ncontext not just sending the prompt \nitself to the database so \nit was like this interesting layer in \nthe middle as well now here's the thing \nthat I think is really the like \nmind-blowing future of this is using \nGorilla for software integration so you \ncan imagine the natural language command \nbuild me a chat with data from my notion \nworkspace titled wevia gorilla using \nllama index and weviate and you have \nthese gorilla models that are that know \nhow to scrape data from notion they know \nhow to import data into Eva and then \nthey know how to use the Llama index \nquery routers across you know within \nwith the weeviate data index there so \nyou have this kind of natural language \nto build out all this software and I \nthink the way that you kind of decompose \nthe task into particular apis is a huge \nstep closer to this kind of like \nautonomous software as we you know our \ntrading models for the apis of \nparticular software libraries you could \nreally unpack the box here and think \nabout kind of all open source software \nas a you think of all all class is in \ntheir functions as apis and \nyou know this kind of I think the \nintegration of Open Source software and \nscience is about to become super \nintegrated because of the way these \nlarge language models are going to be \nable to test new ideas by using the apis \nof Open Source software so a lot of \nstuff there for sure but I think kind of \nthe interesting thing especially you \nknow as we transition to Guerrilla for \nIntegrations build me a chat with my \ndata from my notion workspace blah blah \nis how abstract are these instructions \ngoing to be so in the paper they you \nknow give you examples like I would like \nto identify the objects in an image or \nI'm going to the zoo and would like to \ntrack animals so it's kind of \ninteresting like whether these \ninstructions are kind of like atomicized \nto one model call or if you need to like \nyou know really decompose the task sort \nof like you know self-ask multi-hop or \nthis Auto gbt thing where you need to \nreally kind of break apart the task like \nwhat are the subtasks it's not just like \none the instruction is just some \nimmediate task \nthe next thing the authors kind of talk \nabout is systems to execute apis during \ntraining and data set generation so you \nknow as as you imagine uh generating the \nsynthetic data would you try to execute \nit or when you're evaluating the models \nwill you execute it and I think this \nwill be you know building these kind of \nsystems that work in the simulation \nduring training will be huge for this \nkind of evolution of program synthesis \nusing this kind of idea \nnow this next thing is something that I \nthink is really exciting so I I got this \nidea from listening to Bob in light uh \nspeaking at the Llama index webinar \nbragging production and you know I \nworked with Bob on the generative \nfeedback loops idea and I think this \nidea is awesome generative feedback \nloops are basically this idea of the \nlanguage model transforms the data in \nsome way and then saves it back in the \ndatabase so say you have you know we \nstarted off with this Airbnb listings \nexample where Airbnb listings you have \nsymbolic properties like how much it \ncosts what neighborhood it's in maybe \nyou know nearby coffee shops or \nsomething like that and you would take \nthose tabular features and then generate \na text description save that text \ndescription back in the vector database \nwhere you vectorize it with like the \nopen Ai embeddings and now you search \nthrough those descriptions of Airbnb \nlistings there were all sorts of things \nyou could do generative feedback loops \nthe most recent example Bob gave in the \nwebinar was process email threads to \nsave summaries which can be searched \nthrough so you know imagine I have a you \nknow a class of emails and it's like you \nknow there's a thread where we're \ndiscussing something and then you \nsummarize the thread indexes summary you \nadd symbolic tags like who is a part of \nthe summary yeah I'm sorry a part of the \nemail thread in the conversation but \nanyway so \ngenerative feedback loops is about \ntransforming the data because the the \nnew transformation of the data might be \nuseful like if it's a personalized \nadvertisement or something like that or \nit might be better for a search index \nlike if you have podcast clips and you \nsummarize the content into the abstract \ndescription of like what was discussed \nand then you index that that'll be a \nbetter search index so that's one side \nof it and then on the other side of it \nwe have Gorilla so right now what we're \nthinking about with a gorilla and \nthere'll be a blog post soon more \ndetails on this is just kind of using \nthe search apis but Guerrilla kind of I \nthink where this research is headed is \nit can configure itself it can create \nnew classes it can maybe even tune the \nproduct quantization parameters so it's \nkind of like this and I I got this \nphrase from Andy Pavlo who's a brilliant \nProfessor on databases at Carnegie \nMellon where he calls this self-driving \ndatabases \nand I think self-driving databases is \nused to describe kind of uh databases \nthat like automatically optimize their \nindex structures and I think that's \nthat's probably the missing piece of \nthis gorilla plus generator feedback \nloop so I haven't gotten into that part \nyet but I think this kind of generative \nfeedback loops and Guerrilla we're \nalready seeing this kind of autonomous \ndatabase the database that takes the \ndata and does all sorts of stuff with it \nbecause it has all these different \nlevers to you know it can query itself \nit can import data to itself sort of \ncreate new classes and then it can \ntransform data with these LMS so anyways \nthose are some of my takeaways I think \nprobably from the highest level I think \njust the leviate gorilla will facilitate \nthe learning curve of learning to use \nthe search apis if you just have to say \nVector search in podcasts you know and \nthen it will just translate that into \nthe graphql or you know you want to add \na filter like vector search and podcasts \nuh published after July 5th 2023 and it \nwill just add the wear filter for you \nand we V8 syntax so I think that's \nprobably the lowest fruit is just \nfacilitating the learning curve to \nlearning how to write these kind of \nquery apis but I do think the potential \nof this kind of research is just through \nthe roof thank you so much for watching \nthis explanation of the Gorilla research \npaper if you're interested in this kind \nof work we have all sorts of cool things \nplanned this is hardly the End of This \nresearch on llms that control apis the \nweeviate Guerrilla models and all these \nexciting things we can do if you're \ninterested in this research please \nsubscribe to the channel we'll be \npublishing our podcast with shashir and \ntianjun the original authors of this \npaper on Wednesday and please subscribe \ngenerally to the webia YouTube channel \nfor all kinds of videos and podcasts and \nthings about this whole world of \nretrieve augmented generation Vector \ndatabases and large language models you \nconnect with us find wevian weeva.io \nopen source on GitHub wev8 weavate or on \nTwitter at weba underscore IO thank you \nso much for watching I hope you found \nthis video useful and exciting \n", "type": "Video", "name": "Gorilla LLMs Explained!", "path": "", "link": "https://www.youtube.com/watch?v=LkV5DTRNxAg", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "hey everyone thank you so much for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "watching we've been on YouTube I am", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "super excited to tell you about the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla large language models we're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "about to release a ton of awesome", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "content about what we're doing with the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla models a podcast with shashir", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "and Tianjin but let's kick things off", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "with an explanation of the paper all the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "experiments all the details of it but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "firstly let's take a step back so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "shortly after Chad gbt you just blew", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "everyone's Minds with its ability to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "communicate and complete tasks in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language people soon realize", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "that you can connect these large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "language models like trashy BT to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "external tools to enhance their", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "capabilities even further these external", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "tools typically referenced search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "engines or maybe code executors or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "calculators like the Wolfram Alpha", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "calculator or just you know a basic", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "calculator as well as say how to send", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "emails how to book calendar appointments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "or how to you know purchase a flight", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "ticket connecting llms with these tools", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "has kicked off this area of research", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "known as agents and all sorts of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting things with doing this so what", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla is adding to the table is it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "treating formatting these API requests", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "as a deep learning task so deep learning", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "research has typically been organized", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "based on demonstrations of input output", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "examples like text classification", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "question answering summarization and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla is leading the way in treating", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "formatting API requests as a task to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tune deep learning models on they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "have an amazing ablation showing the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "difference between fine tuning with and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "without retrieval and the rule of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval in this which obviously with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "weavate we find this super interesting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "and then of course they have these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "really interesting details around using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct to generate training data", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "to learn to write API requests and all", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "sorts of interesting details that of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "course we'll dive into in this video so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "thank you so much for watching and let's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "get into it so just in case you're in a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "hurry and just want the general overview", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "of gorilla here's my attempt to compress", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "the key ideas in two minutes before", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "diving further into the details in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "rest of the video the high level", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "motivation is to equip large language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "models with tools tools are described as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "form adding API requests so open AI", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "funks has been a huge like related work", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "probably the current state of the art", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "what I think most people are using for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "this where openai funcs introduced", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "here's how to present a Json that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "describes the name of a function a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "description of what it does and how to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "format input arguments to that function", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "to then pass to the openai large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}, {"text": "language models and I think openai is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 70, "tokens": 0, "vector": null, "score": 0}, {"text": "doing a little bit of fine tuning on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 71, "tokens": 0, "vector": null, "score": 0}, {"text": "these jsons I'm not exactly sure but I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 72, "tokens": 0, "vector": null, "score": 0}, {"text": "think it's either some fine tuning of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 73, "tokens": 0, "vector": null, "score": 0}, {"text": "those jsons or it's just kind of done", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 74, "tokens": 0, "vector": null, "score": 0}, {"text": "zero shot where these large language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 75, "tokens": 0, "vector": null, "score": 0}, {"text": "models like gbt4 they are as we'll see", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 76, "tokens": 0, "vector": null, "score": 0}, {"text": "in the details of the paper they are", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 77, "tokens": 0, "vector": null, "score": 0}, {"text": "really good at taking some kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 78, "tokens": 0, "vector": null, "score": 0}, {"text": "description of a function and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 79, "tokens": 0, "vector": null, "score": 0}, {"text": "learning how to use it like you can do", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 80, "tokens": 0, "vector": null, "score": 0}, {"text": "text to SQL this way all sorts of ways", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 81, "tokens": 0, "vector": null, "score": 0}, {"text": "if you tell it here's some kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 82, "tokens": 0, "vector": null, "score": 0}, {"text": "function and how to use it the models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 83, "tokens": 0, "vector": null, "score": 0}, {"text": "are really good at using it so examples", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 84, "tokens": 0, "vector": null, "score": 0}, {"text": "include say sending an email getting the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 85, "tokens": 0, "vector": null, "score": 0}, {"text": "current weather and then importantly", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 86, "tokens": 0, "vector": null, "score": 0}, {"text": "this is this is kind of the big detail", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 87, "tokens": 0, "vector": null, "score": 0}, {"text": "of how do you write API requests is how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 88, "tokens": 0, "vector": null, "score": 0}, {"text": "do you format the input argue arguments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 89, "tokens": 0, "vector": null, "score": 0}, {"text": "correctly so in this case you have you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 90, "tokens": 0, "vector": null, "score": 0}, {"text": "know send email to say Bob inlight body", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 91, "tokens": 0, "vector": null, "score": 0}, {"text": "you know how are you like these two", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 92, "tokens": 0, "vector": null, "score": 0}, {"text": "strings or you can imagine it's like uh", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 93, "tokens": 0, "vector": null, "score": 0}, {"text": "you know maybe you have like a date when", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 94, "tokens": 0, "vector": null, "score": 0}, {"text": "do you want to send the email so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 95, "tokens": 0, "vector": null, "score": 0}, {"text": "formatting these these arguments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 96, "tokens": 0, "vector": null, "score": 0}, {"text": "correctly is the key detail now here's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 97, "tokens": 0, "vector": null, "score": 0}, {"text": "the super interesting thing the open AI", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 98, "tokens": 0, "vector": null, "score": 0}, {"text": "models they are great at this but they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 99, "tokens": 0, "vector": null, "score": 0}, {"text": "are massive language models like you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 100, "tokens": 0, "vector": null, "score": 0}, {"text": "know 200 billion parameters and so on to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 101, "tokens": 0, "vector": null, "score": 0}, {"text": "serve these and to do inference is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 102, "tokens": 0, "vector": null, "score": 0}, {"text": "expensive so if you can com the gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 103, "tokens": 0, "vector": null, "score": 0}, {"text": "models are compressing this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 104, "tokens": 0, "vector": null, "score": 0}, {"text": "functionality into this seven billion", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 105, "tokens": 0, "vector": null, "score": 0}, {"text": "parameter model by fine-tuning that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 106, "tokens": 0, "vector": null, "score": 0}, {"text": "llama 7B the open source large language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 107, "tokens": 0, "vector": null, "score": 0}, {"text": "model from meta AI they're fine-tuning", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 108, "tokens": 0, "vector": null, "score": 0}, {"text": "that model to do this and then the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 109, "tokens": 0, "vector": null, "score": 0}, {"text": "difference is that this is way more", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 110, "tokens": 0, "vector": null, "score": 0}, {"text": "economical to serve this kind of API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 111, "tokens": 0, "vector": null, "score": 0}, {"text": "request if you compress it from you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 112, "tokens": 0, "vector": null, "score": 0}, {"text": "hundreds of billions of parameters to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 113, "tokens": 0, "vector": null, "score": 0}, {"text": "seven billion parameters and they'll", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 114, "tokens": 0, "vector": null, "score": 0}, {"text": "probably you know keep compressing it as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 115, "tokens": 0, "vector": null, "score": 0}, {"text": "this research continues to evolve so the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 116, "tokens": 0, "vector": null, "score": 0}, {"text": "key idea behind how it works", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 117, "tokens": 0, "vector": null, "score": 0}, {"text": "is that we have these examples of apis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 118, "tokens": 0, "vector": null, "score": 0}, {"text": "we use self-instruct where we take an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 119, "tokens": 0, "vector": null, "score": 0}, {"text": "example of an API and then we prompt", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 120, "tokens": 0, "vector": null, "score": 0}, {"text": "gpt4 to say can you write an example of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 121, "tokens": 0, "vector": null, "score": 0}, {"text": "an instruction that would want to use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 122, "tokens": 0, "vector": null, "score": 0}, {"text": "this API and then that then becomes the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 123, "tokens": 0, "vector": null, "score": 0}, {"text": "training data to compress to train this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 124, "tokens": 0, "vector": null, "score": 0}, {"text": "new language model the Guerrilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 125, "tokens": 0, "vector": null, "score": 0}, {"text": "language models so there's also a really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 126, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting ablation about using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 127, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval in this and this is I love", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 128, "tokens": 0, "vector": null, "score": 0}, {"text": "this part because retrieval aware", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 129, "tokens": 0, "vector": null, "score": 0}, {"text": "training is I think one of the most", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 130, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting ideas on The Cutting Edge where", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 131, "tokens": 0, "vector": null, "score": 0}, {"text": "you use you take the prompt and then you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 132, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieve and then you use the retrieve", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 133, "tokens": 0, "vector": null, "score": 0}, {"text": "context during trading not just as like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 134, "tokens": 0, "vector": null, "score": 0}, {"text": "a you know fit after you've trained the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 135, "tokens": 0, "vector": null, "score": 0}, {"text": "model you're going to be training the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 136, "tokens": 0, "vector": null, "score": 0}, {"text": "models with this retrieval and they do a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 137, "tokens": 0, "vector": null, "score": 0}, {"text": "super interesting ablation exploring the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 138, "tokens": 0, "vector": null, "score": 0}, {"text": "details of trading these models with and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 139, "tokens": 0, "vector": null, "score": 0}, {"text": "without retrieval or at inference time", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 140, "tokens": 0, "vector": null, "score": 0}, {"text": "than with and without retrieval so a lot", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 141, "tokens": 0, "vector": null, "score": 0}, {"text": "of interesting stuff there so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 142, "tokens": 0, "vector": null, "score": 0}, {"text": "particularly what gorilla is is Gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 143, "tokens": 0, "vector": null, "score": 0}, {"text": "this first research paper is about", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 144, "tokens": 0, "vector": null, "score": 0}, {"text": "formatting requests to call Deep", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 145, "tokens": 0, "vector": null, "score": 0}, {"text": "learning pre-trained models so I taking", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 146, "tokens": 0, "vector": null, "score": 0}, {"text": "models from the hugging face model Hub", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 147, "tokens": 0, "vector": null, "score": 0}, {"text": "tensor Hub and pytorch's torch Hub we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 148, "tokens": 0, "vector": null, "score": 0}, {"text": "instantiate these models based on some", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 149, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language instruction so if you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 150, "tokens": 0, "vector": null, "score": 0}, {"text": "have the natural language instruction I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 151, "tokens": 0, "vector": null, "score": 0}, {"text": "want to classify the gorillas in this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 152, "tokens": 0, "vector": null, "score": 0}, {"text": "picture then the gorilla large language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 153, "tokens": 0, "vector": null, "score": 0}, {"text": "model would write the python code to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 154, "tokens": 0, "vector": null, "score": 0}, {"text": "extension instantiate that like an image", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 155, "tokens": 0, "vector": null, "score": 0}, {"text": "classifier from hugging face and maybe", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 156, "tokens": 0, "vector": null, "score": 0}, {"text": "preferably one that's been trained on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 157, "tokens": 0, "vector": null, "score": 0}, {"text": "like animals and this kind of thing and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 158, "tokens": 0, "vector": null, "score": 0}, {"text": "so that's kind of the details is knowing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 159, "tokens": 0, "vector": null, "score": 0}, {"text": "which path to like some of the kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 160, "tokens": 0, "vector": null, "score": 0}, {"text": "input arguments that are required from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 161, "tokens": 0, "vector": null, "score": 0}, {"text": "this is mostly kind of which path to put", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 162, "tokens": 0, "vector": null, "score": 0}, {"text": "into the argument but also sometimes say", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 163, "tokens": 0, "vector": null, "score": 0}, {"text": "you know you have like the resnet object", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 164, "tokens": 0, "vector": null, "score": 0}, {"text": "detectors they have like these different", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 165, "tokens": 0, "vector": null, "score": 0}, {"text": "uh feature extractor backbones so there", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 166, "tokens": 0, "vector": null, "score": 0}, {"text": "are some details to how you kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 167, "tokens": 0, "vector": null, "score": 0}, {"text": "format the the requests which we'll see", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 168, "tokens": 0, "vector": null, "score": 0}, {"text": "later on in the videos we look at like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 169, "tokens": 0, "vector": null, "score": 0}, {"text": "the abstract syntax tree and all this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 170, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of stuff but so this is kind of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 171, "tokens": 0, "vector": null, "score": 0}, {"text": "first work of gorilla is you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 172, "tokens": 0, "vector": null, "score": 0}, {"text": "learning to call model inferences and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 173, "tokens": 0, "vector": null, "score": 0}, {"text": "this is there's another paper called", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 174, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging GPT which is like this where you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 175, "tokens": 0, "vector": null, "score": 0}, {"text": "think of these pre-trained models as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 176, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of like the API zoo and the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 177, "tokens": 0, "vector": null, "score": 0}, {"text": "collection of tools that the large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 178, "tokens": 0, "vector": null, "score": 0}, {"text": "language model can use is other models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 179, "tokens": 0, "vector": null, "score": 0}, {"text": "specialized to some particular thing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 180, "tokens": 0, "vector": null, "score": 0}, {"text": "like say you know gbt4 calls the dolly", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 181, "tokens": 0, "vector": null, "score": 0}, {"text": "image generation model and orchestrates", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 182, "tokens": 0, "vector": null, "score": 0}, {"text": "all this kind of stuff", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 183, "tokens": 0, "vector": null, "score": 0}, {"text": "but the authors are collecting this API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 184, "tokens": 0, "vector": null, "score": 0}, {"text": "Zoo data set on their GitHub and I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 185, "tokens": 0, "vector": null, "score": 0}, {"text": "this is extremely powerful the authors", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 186, "tokens": 0, "vector": null, "score": 0}, {"text": "describe supporting web scale collection", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 187, "tokens": 0, "vector": null, "score": 0}, {"text": "of potentially millions of changing apis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 188, "tokens": 0, "vector": null, "score": 0}, {"text": "it requires rethinking our approach to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 189, "tokens": 0, "vector": null, "score": 0}, {"text": "how we integrate tools it is no longer", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 190, "tokens": 0, "vector": null, "score": 0}, {"text": "possible to describe the full set of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 191, "tokens": 0, "vector": null, "score": 0}, {"text": "apis in a single context many of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 192, "tokens": 0, "vector": null, "score": 0}, {"text": "apis will have overlapping functionality", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 193, "tokens": 0, "vector": null, "score": 0}, {"text": "with Nuance limitations and constraints", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 194, "tokens": 0, "vector": null, "score": 0}, {"text": "so they're building up this data set", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 195, "tokens": 0, "vector": null, "score": 0}, {"text": "that I think will just be super powerful", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 196, "tokens": 0, "vector": null, "score": 0}, {"text": "I think it'll be insanely exciting to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 197, "tokens": 0, "vector": null, "score": 0}, {"text": "see how this plays out for example we're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 198, "tokens": 0, "vector": null, "score": 0}, {"text": "looking into adding our weeviate apis to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 199, "tokens": 0, "vector": null, "score": 0}, {"text": "this API Zoo data set to so to give you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 200, "tokens": 0, "vector": null, "score": 0}, {"text": "a quick sense of this before you know we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 201, "tokens": 0, "vector": null, "score": 0}, {"text": "have more content so I'm not going to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 202, "tokens": 0, "vector": null, "score": 0}, {"text": "dive into this too much yet I'll talk a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 203, "tokens": 0, "vector": null, "score": 0}, {"text": "little more at the end with some", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 204, "tokens": 0, "vector": null, "score": 0}, {"text": "takeaways about how this you know how I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 205, "tokens": 0, "vector": null, "score": 0}, {"text": "think this connects to the weeviate apis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 206, "tokens": 0, "vector": null, "score": 0}, {"text": "but for example if you want to use the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 207, "tokens": 0, "vector": null, "score": 0}, {"text": "cohere re-ranker you know you have this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 208, "tokens": 0, "vector": null, "score": 0}, {"text": "graphql syntax which near text is how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 209, "tokens": 0, "vector": null, "score": 0}, {"text": "you use a vector search and we V8 limit", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 210, "tokens": 0, "vector": null, "score": 0}, {"text": "is how you limit how many search results", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 211, "tokens": 0, "vector": null, "score": 0}, {"text": "you get back and then you have this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 212, "tokens": 0, "vector": null, "score": 0}, {"text": "re-ranked syntax so teaching the large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 213, "tokens": 0, "vector": null, "score": 0}, {"text": "language models how to format requests", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 214, "tokens": 0, "vector": null, "score": 0}, {"text": "like this yeah I think it's going to be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 215, "tokens": 0, "vector": null, "score": 0}, {"text": "a game changer for bb8 and so it's also", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 216, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting so in conclusion here are some", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 217, "tokens": 0, "vector": null, "score": 0}, {"text": "of the key ideas so firstly API syntax", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 218, "tokens": 0, "vector": null, "score": 0}, {"text": "following is a deep learning task for a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 219, "tokens": 0, "vector": null, "score": 0}, {"text": "smaller specialized large language model", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 220, "tokens": 0, "vector": null, "score": 0}, {"text": "the use of retrieval aware training I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 221, "tokens": 0, "vector": null, "score": 0}, {"text": "think this is the first paper I've seen", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 222, "tokens": 0, "vector": null, "score": 0}, {"text": "that's really doing this in an exciting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 223, "tokens": 0, "vector": null, "score": 0}, {"text": "way and that's where you're integrating", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 224, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval into the training not in kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 225, "tokens": 0, "vector": null, "score": 0}, {"text": "of like the end-to-end differentiable", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 226, "tokens": 0, "vector": null, "score": 0}, {"text": "sense where gradients from the LM go", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 227, "tokens": 0, "vector": null, "score": 0}, {"text": "back to the encoder but kind of just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 228, "tokens": 0, "vector": null, "score": 0}, {"text": "using this retrieval to supplement the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 229, "tokens": 0, "vector": null, "score": 0}, {"text": "inputs and help reduce that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 230, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucination by turning the task", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 231, "tokens": 0, "vector": null, "score": 0}, {"text": "basically to copying where you just have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 232, "tokens": 0, "vector": null, "score": 0}, {"text": "to kind of like look at the input window", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 233, "tokens": 0, "vector": null, "score": 0}, {"text": "rather than like have all this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 234, "tokens": 0, "vector": null, "score": 0}, {"text": "information like in your brain so to say", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 235, "tokens": 0, "vector": null, "score": 0}, {"text": "if you're a nola but and so then I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 236, "tokens": 0, "vector": null, "score": 0}, {"text": "this API bench data set and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 237, "tokens": 0, "vector": null, "score": 0}, {"text": "understanding the potential of this API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 238, "tokens": 0, "vector": null, "score": 0}, {"text": "Zoo data set as this continues to evolve", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 239, "tokens": 0, "vector": null, "score": 0}, {"text": "is so interesting and then understanding", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 240, "tokens": 0, "vector": null, "score": 0}, {"text": "the details of how they evaluate these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 241, "tokens": 0, "vector": null, "score": 0}, {"text": "models okay so the first step to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 242, "tokens": 0, "vector": null, "score": 0}, {"text": "understand the experiments of the paper", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 243, "tokens": 0, "vector": null, "score": 0}, {"text": "is to understand the new API bench data", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 244, "tokens": 0, "vector": null, "score": 0}, {"text": "set the authors publish and create for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 245, "tokens": 0, "vector": null, "score": 0}, {"text": "these experiments and how how they use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 246, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct prompting to generate", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 247, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic training data to fine-tune", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 248, "tokens": 0, "vector": null, "score": 0}, {"text": "these models for Tool use so starting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 249, "tokens": 0, "vector": null, "score": 0}, {"text": "off collecting a data set of model API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 250, "tokens": 0, "vector": null, "score": 0}, {"text": "calls they're taking models from the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 251, "tokens": 0, "vector": null, "score": 0}, {"text": "pytorch lets you upload models to the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 252, "tokens": 0, "vector": null, "score": 0}, {"text": "torch Hub tensorflow also does this with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 253, "tokens": 0, "vector": null, "score": 0}, {"text": "the tensor Hub and then of course", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 254, "tokens": 0, "vector": null, "score": 0}, {"text": "there's hugging face the hugging face", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 255, "tokens": 0, "vector": null, "score": 0}, {"text": "platform hosts and serves about", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 256, "tokens": 0, "vector": null, "score": 0}, {"text": "203 681 models so you know it's it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 257, "tokens": 0, "vector": null, "score": 0}, {"text": "amazing this model collection that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 258, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face has created and it's really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 259, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting to think of what will become", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 260, "tokens": 0, "vector": null, "score": 0}, {"text": "of that this particular research", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 261, "tokens": 0, "vector": null, "score": 0}, {"text": "research like hugging GPT treats these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 262, "tokens": 0, "vector": null, "score": 0}, {"text": "pre-trained models like they themselves", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 263, "tokens": 0, "vector": null, "score": 0}, {"text": "are the tools that uh you know some kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 264, "tokens": 0, "vector": null, "score": 0}, {"text": "of orchestrating model would want to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 265, "tokens": 0, "vector": null, "score": 0}, {"text": "call like say you know you call the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 266, "tokens": 0, "vector": null, "score": 0}, {"text": "image generation maybe you call the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 267, "tokens": 0, "vector": null, "score": 0}, {"text": "image segmentation model you call the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 268, "tokens": 0, "vector": null, "score": 0}, {"text": "you know the natural language inference", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 269, "tokens": 0, "vector": null, "score": 0}, {"text": "the question answering like kind of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 270, "tokens": 0, "vector": null, "score": 0}, {"text": "creativity of thinking about these tests", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 271, "tokens": 0, "vector": null, "score": 0}, {"text": "and then you know because so here's kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 272, "tokens": 0, "vector": null, "score": 0}, {"text": "of stepping into the details of all", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 273, "tokens": 0, "vector": null, "score": 0}, {"text": "these models that it exists they filter", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 274, "tokens": 0, "vector": null, "score": 0}, {"text": "these models out by picking the top 20", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 275, "tokens": 0, "vector": null, "score": 0}, {"text": "models from each domain and I think I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 276, "tokens": 0, "vector": null, "score": 0}, {"text": "should have bolded domain domain's a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 277, "tokens": 0, "vector": null, "score": 0}, {"text": "pretty interesting concept because on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 278, "tokens": 0, "vector": null, "score": 0}, {"text": "one level you could have domain in this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 279, "tokens": 0, "vector": null, "score": 0}, {"text": "case they're using it to mean what I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 280, "tokens": 0, "vector": null, "score": 0}, {"text": "would refer to as modality or they have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 281, "tokens": 0, "vector": null, "score": 0}, {"text": "seven domains in multimodal which means", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 282, "tokens": 0, "vector": null, "score": 0}, {"text": "you know maybe it's like the clip model", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 283, "tokens": 0, "vector": null, "score": 0}, {"text": "that you use text to search for images", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 284, "tokens": 0, "vector": null, "score": 0}, {"text": "or you know this kind of thing they have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 285, "tokens": 0, "vector": null, "score": 0}, {"text": "eight in computer vision 12 in natural", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 286, "tokens": 0, "vector": null, "score": 0}, {"text": "language processing five and audio two", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 287, "tokens": 0, "vector": null, "score": 0}, {"text": "and tabular data and two and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 288, "tokens": 0, "vector": null, "score": 0}, {"text": "reinforcement learning so you know that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 289, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of idea of like you you have like a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 290, "tokens": 0, "vector": null, "score": 0}, {"text": "podcast MP3 file and you grab the you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 291, "tokens": 0, "vector": null, "score": 0}, {"text": "grab the whisper model and then you put", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 292, "tokens": 0, "vector": null, "score": 0}, {"text": "it into the whisper", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 293, "tokens": 0, "vector": null, "score": 0}, {"text": "then you say grab like a text", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 294, "tokens": 0, "vector": null, "score": 0}, {"text": "vectorization model to put it into", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 295, "tokens": 0, "vector": null, "score": 0}, {"text": "leviate or something or you just I don't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 296, "tokens": 0, "vector": null, "score": 0}, {"text": "know summarization right out of whatever", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 297, "tokens": 0, "vector": null, "score": 0}, {"text": "came out of the whisper model but this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 298, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of like combining models I think is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 299, "tokens": 0, "vector": null, "score": 0}, {"text": "quite an interesting idea but to get a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 300, "tokens": 0, "vector": null, "score": 0}, {"text": "sense these are kind of like the models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 301, "tokens": 0, "vector": null, "score": 0}, {"text": "that they take to combine into this data", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 302, "tokens": 0, "vector": null, "score": 0}, {"text": "set so each entry in the data set is an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 303, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction API reference pair so in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 304, "tokens": 0, "vector": null, "score": 0}, {"text": "this case an API reference would be like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 305, "tokens": 0, "vector": null, "score": 0}, {"text": "um you know Auto model Dot from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 306, "tokens": 0, "vector": null, "score": 0}, {"text": "pre-training the hugging face sense and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 307, "tokens": 0, "vector": null, "score": 0}, {"text": "then like the model path and if it has", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 308, "tokens": 0, "vector": null, "score": 0}, {"text": "additional arguments like what that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 309, "tokens": 0, "vector": null, "score": 0}, {"text": "entails so we have 925 models from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 310, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face 626 from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 311, "tokens": 0, "vector": null, "score": 0}, {"text": "tensorflow Hub and then 95 from torch", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 312, "tokens": 0, "vector": null, "score": 0}, {"text": "Hub and the 1 645 API calls are", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 313, "tokens": 0, "vector": null, "score": 0}, {"text": "organized into this Json that has these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 314, "tokens": 0, "vector": null, "score": 0}, {"text": "keys so the key so you know the keys in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 315, "tokens": 0, "vector": null, "score": 0}, {"text": "the Json are the domain so you know and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 316, "tokens": 0, "vector": null, "score": 0}, {"text": "domain would be like computer vision so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 317, "tokens": 0, "vector": null, "score": 0}, {"text": "like domain computer vision framework", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 318, "tokens": 0, "vector": null, "score": 0}, {"text": "hug and face functionality like what it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 319, "tokens": 0, "vector": null, "score": 0}, {"text": "does the name of the API the API call an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 320, "tokens": 0, "vector": null, "score": 0}, {"text": "example of it the arguments it takes", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 321, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe the environment requirements like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 322, "tokens": 0, "vector": null, "score": 0}, {"text": "if you need like a GPU to run it or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 323, "tokens": 0, "vector": null, "score": 0}, {"text": "example code which I think is similar to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 324, "tokens": 0, "vector": null, "score": 0}, {"text": "API call we'll take a look at this in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 325, "tokens": 0, "vector": null, "score": 0}, {"text": "one second uh the performance this is a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 326, "tokens": 0, "vector": null, "score": 0}, {"text": "really interesting detail with respect", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 327, "tokens": 0, "vector": null, "score": 0}, {"text": "to how they evaluate API calls with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 328, "tokens": 0, "vector": null, "score": 0}, {"text": "constraints because uh you know say you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 329, "tokens": 0, "vector": null, "score": 0}, {"text": "want a 10 million parameter image", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 330, "tokens": 0, "vector": null, "score": 0}, {"text": "classifier so you can run it on your", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 331, "tokens": 0, "vector": null, "score": 0}, {"text": "phone but then you also want it to have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 332, "tokens": 0, "vector": null, "score": 0}, {"text": "like at least 75 percent image in that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 333, "tokens": 0, "vector": null, "score": 0}, {"text": "top one accuracy so you you kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 334, "tokens": 0, "vector": null, "score": 0}, {"text": "trade this off with the constraints and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 335, "tokens": 0, "vector": null, "score": 0}, {"text": "that's a super interesting detail of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 336, "tokens": 0, "vector": null, "score": 0}, {"text": "this kind of paper and research and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 337, "tokens": 0, "vector": null, "score": 0}, {"text": "descriptions like a natural description", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 338, "tokens": 0, "vector": null, "score": 0}, {"text": "of what this is so let's take a look at", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 339, "tokens": 0, "vector": null, "score": 0}, {"text": "an example of how these uh how this Json", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 340, "tokens": 0, "vector": null, "score": 0}, {"text": "is formatted okay so I'm not completely", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 341, "tokens": 0, "vector": null, "score": 0}, {"text": "sure I have all the details correct here", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 342, "tokens": 0, "vector": null, "score": 0}, {"text": "but here is a basic overview so I went", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 343, "tokens": 0, "vector": null, "score": 0}, {"text": "to the gorilla repository where you can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 344, "tokens": 0, "vector": null, "score": 0}, {"text": "see uh the API bench and then hugging", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 345, "tokens": 0, "vector": null, "score": 0}, {"text": "face.train so I grabbed one of these and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 346, "tokens": 0, "vector": null, "score": 0}, {"text": "then dropped it into the three back", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 347, "tokens": 0, "vector": null, "score": 0}, {"text": "ticks Json to make it look a little", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 348, "tokens": 0, "vector": null, "score": 0}, {"text": "nicer uh so anyway so you have these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 349, "tokens": 0, "vector": null, "score": 0}, {"text": "keys that describe each of the apis so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 350, "tokens": 0, "vector": null, "score": 0}, {"text": "similar to the you know the open AI", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 351, "tokens": 0, "vector": null, "score": 0}, {"text": "funks he sees like how it's what the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 352, "tokens": 0, "vector": null, "score": 0}, {"text": "arguments are to make the API call and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 353, "tokens": 0, "vector": null, "score": 0}, {"text": "um you know like how to how to call it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 354, "tokens": 0, "vector": null, "score": 0}, {"text": "so in this case instruction our customer", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 355, "tokens": 0, "vector": null, "score": 0}, {"text": "is a robotic manufacturer of cleaning", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 356, "tokens": 0, "vector": null, "score": 0}, {"text": "devices they ask for help on solving", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 357, "tokens": 0, "vector": null, "score": 0}, {"text": "users questions okay probably okay so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 358, "tokens": 0, "vector": null, "score": 0}, {"text": "question answering so so here's a sense", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 359, "tokens": 0, "vector": null, "score": 0}, {"text": "of it I'm not sure I've completely", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 360, "tokens": 0, "vector": null, "score": 0}, {"text": "understand the details yet but basically", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 361, "tokens": 0, "vector": null, "score": 0}, {"text": "thinking about how you want to organize", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 362, "tokens": 0, "vector": null, "score": 0}, {"text": "these API calls into Json such that you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 363, "tokens": 0, "vector": null, "score": 0}, {"text": "can you know either prompt it to come up", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 364, "tokens": 0, "vector": null, "score": 0}, {"text": "with the instruction of when you would", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 365, "tokens": 0, "vector": null, "score": 0}, {"text": "want to use this or a description of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 366, "tokens": 0, "vector": null, "score": 0}, {"text": "what it is this is again that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 367, "tokens": 0, "vector": null, "score": 0}, {"text": "performance thing is so it gets like you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 368, "tokens": 0, "vector": null, "score": 0}, {"text": "know 78.4 I think this is recall within", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 369, "tokens": 0, "vector": null, "score": 0}, {"text": "with the embeddings encodone model so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 370, "tokens": 0, "vector": null, "score": 0}, {"text": "you know on these different question", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 371, "tokens": 0, "vector": null, "score": 0}, {"text": "answering data sets like trivia QA or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 372, "tokens": 0, "vector": null, "score": 0}, {"text": "Trek or web questions Squad so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 373, "tokens": 0, "vector": null, "score": 0}, {"text": "this is kind of a sense of what what it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 374, "tokens": 0, "vector": null, "score": 0}, {"text": "is organizing these apis in this kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 375, "tokens": 0, "vector": null, "score": 0}, {"text": "Json such that you can either", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 376, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct the gbt4 model to produce", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 377, "tokens": 0, "vector": null, "score": 0}, {"text": "a natural language command like this of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 378, "tokens": 0, "vector": null, "score": 0}, {"text": "of when you would want to use it as well", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 379, "tokens": 0, "vector": null, "score": 0}, {"text": "as like then this being kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 380, "tokens": 0, "vector": null, "score": 0}, {"text": "something you would retrieve to put in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 381, "tokens": 0, "vector": null, "score": 0}, {"text": "the input to then format the API call", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 382, "tokens": 0, "vector": null, "score": 0}, {"text": "and all this kind of stuff so the author", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 383, "tokens": 0, "vector": null, "score": 0}, {"text": "State we employed gbt4 to generate", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 384, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic instruction data we provided", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 385, "tokens": 0, "vector": null, "score": 0}, {"text": "three in-context examples along with a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 386, "tokens": 0, "vector": null, "score": 0}, {"text": "reference API documentation and task the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 387, "tokens": 0, "vector": null, "score": 0}, {"text": "model with generating real world use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 388, "tokens": 0, "vector": null, "score": 0}, {"text": "cases that call upon the API so you have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 389, "tokens": 0, "vector": null, "score": 0}, {"text": "something like as shown previously the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 390, "tokens": 0, "vector": null, "score": 0}, {"text": "DPR question encoder and the model would", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 391, "tokens": 0, "vector": null, "score": 0}, {"text": "have to the gbt4 model produces some", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 392, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of natural language command of when", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 393, "tokens": 0, "vector": null, "score": 0}, {"text": "someone would want to use this kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 394, "tokens": 0, "vector": null, "score": 0}, {"text": "thing like I have you know Airline", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 395, "tokens": 0, "vector": null, "score": 0}, {"text": "manuals or whatever and I need to answer", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 396, "tokens": 0, "vector": null, "score": 0}, {"text": "questions about it so then it knows like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 397, "tokens": 0, "vector": null, "score": 0}, {"text": "okay I translate that natural command", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 398, "tokens": 0, "vector": null, "score": 0}, {"text": "into the API request for this particular", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 399, "tokens": 0, "vector": null, "score": 0}, {"text": "model or as mentioned like the I wanted", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 400, "tokens": 0, "vector": null, "score": 0}, {"text": "to detect the gorillas in this image to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 401, "tokens": 0, "vector": null, "score": 0}, {"text": "rep to then be mapping to that object", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 402, "tokens": 0, "vector": null, "score": 0}, {"text": "detection model API so the authors", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 403, "tokens": 0, "vector": null, "score": 0}, {"text": "constructed six instruction API pairs", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 404, "tokens": 0, "vector": null, "score": 0}, {"text": "for each of the three model hubs and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 405, "tokens": 0, "vector": null, "score": 0}, {"text": "these 18 points are the only hand", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 406, "tokens": 0, "vector": null, "score": 0}, {"text": "generated or like handcrafted data and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 407, "tokens": 0, "vector": null, "score": 0}, {"text": "this is a huge paradigm shift for deep", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 408, "tokens": 0, "vector": null, "score": 0}, {"text": "learning research which this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 409, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct thing this generative data", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 410, "tokens": 0, "vector": null, "score": 0}, {"text": "augmentation synthetic data cannot be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 411, "tokens": 0, "vector": null, "score": 0}, {"text": "understated enough it most of these deep", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 412, "tokens": 0, "vector": null, "score": 0}, {"text": "learning papers in the past the authors", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 413, "tokens": 0, "vector": null, "score": 0}, {"text": "have been like hey we've labeled like a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 414, "tokens": 0, "vector": null, "score": 0}, {"text": "hundred thousand examples and this kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 415, "tokens": 0, "vector": null, "score": 0}, {"text": "of like collection of this data set has", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 416, "tokens": 0, "vector": null, "score": 0}, {"text": "been such a integral part for doing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 417, "tokens": 0, "vector": null, "score": 0}, {"text": "anything in deep learning and now by", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 418, "tokens": 0, "vector": null, "score": 0}, {"text": "using they they could they collect like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 419, "tokens": 0, "vector": null, "score": 0}, {"text": "18 examples again of how to write an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 420, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction API pair", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 421, "tokens": 0, "vector": null, "score": 0}, {"text": "then you just give that to gbt4 and it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 422, "tokens": 0, "vector": null, "score": 0}, {"text": "just generates the training data to then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 423, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tune gorilla taking as input the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 424, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic instruction and then the API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 425, "tokens": 0, "vector": null, "score": 0}, {"text": "reference and then the output is the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 426, "tokens": 0, "vector": null, "score": 0}, {"text": "correct API call so a high level", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 427, "tokens": 0, "vector": null, "score": 0}, {"text": "overview of this full flow we've curated", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 428, "tokens": 0, "vector": null, "score": 0}, {"text": "1 645 API calls from tensor Hub", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 429, "tokens": 0, "vector": null, "score": 0}, {"text": "tensorflow torch Hub and hugging face so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 430, "tokens": 0, "vector": null, "score": 0}, {"text": "then we build up this API data database", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 431, "tokens": 0, "vector": null, "score": 0}, {"text": "of this which we use through the API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 432, "tokens": 0, "vector": null, "score": 0}, {"text": "reference retrieval later on but then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 433, "tokens": 0, "vector": null, "score": 0}, {"text": "from these examples we have the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 434, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct we create 10 instructions", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 435, "tokens": 0, "vector": null, "score": 0}, {"text": "per API so now we have a data set of 16", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 436, "tokens": 0, "vector": null, "score": 0}, {"text": "450 you know inputs being the natural", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 437, "tokens": 0, "vector": null, "score": 0}, {"text": "language command and then the API is the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 438, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieved API or maybe we use the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 439, "tokens": 0, "vector": null, "score": 0}, {"text": "context or we use the exact API in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 440, "tokens": 0, "vector": null, "score": 0}, {"text": "input and so then these are used to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 441, "tokens": 0, "vector": null, "score": 0}, {"text": "Output the correct API call for calling", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 442, "tokens": 0, "vector": null, "score": 0}, {"text": "this particular model that was used to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 443, "tokens": 0, "vector": null, "score": 0}, {"text": "create one of the 10 synthetic", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 444, "tokens": 0, "vector": null, "score": 0}, {"text": "instructions per the API call so then we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 445, "tokens": 0, "vector": null, "score": 0}, {"text": "build up this API database so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 446, "tokens": 0, "vector": null, "score": 0}, {"text": "so again one of the instructions could", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 447, "tokens": 0, "vector": null, "score": 0}, {"text": "be I want to see some cats uh dancing in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 448, "tokens": 0, "vector": null, "score": 0}, {"text": "celebration so this is like a call to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 449, "tokens": 0, "vector": null, "score": 0}, {"text": "the stable diffusion model so the input", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 450, "tokens": 0, "vector": null, "score": 0}, {"text": "then becomes uh the task generate image", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 451, "tokens": 0, "vector": null, "score": 0}, {"text": "from text", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 452, "tokens": 0, "vector": null, "score": 0}, {"text": "um I'm not exactly sure about this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 453, "tokens": 0, "vector": null, "score": 0}, {"text": "detail I think that the it depends on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 454, "tokens": 0, "vector": null, "score": 0}, {"text": "how you want to format this for sure but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 455, "tokens": 0, "vector": null, "score": 0}, {"text": "I think one way of doing it would be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 456, "tokens": 0, "vector": null, "score": 0}, {"text": "input and then hashtag hashtag", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 457, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction I want to see some cast", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 458, "tokens": 0, "vector": null, "score": 0}, {"text": "dancing and celebration and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 459, "tokens": 0, "vector": null, "score": 0}, {"text": "reference API would be the retrieved API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 460, "tokens": 0, "vector": null, "score": 0}, {"text": "when you turn the say it's Vector search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 461, "tokens": 0, "vector": null, "score": 0}, {"text": "you turn this into a vector and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 462, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieve the nearest neighbor vector and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 463, "tokens": 0, "vector": null, "score": 0}, {"text": "then that becomes the reference API or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 464, "tokens": 0, "vector": null, "score": 0}, {"text": "the you know you can see already how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 465, "tokens": 0, "vector": null, "score": 0}, {"text": "like bm25 search would be terrible for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 466, "tokens": 0, "vector": null, "score": 0}, {"text": "this how you I want to see some cast", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 467, "tokens": 0, "vector": null, "score": 0}, {"text": "Dancing in celebration you don't have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 468, "tokens": 0, "vector": null, "score": 0}, {"text": "any good keywords to return like an API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 469, "tokens": 0, "vector": null, "score": 0}, {"text": "for that so another great case of a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 470, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search example but so then you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 471, "tokens": 0, "vector": null, "score": 0}, {"text": "format this input this input goes to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 472, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla and gorilla outputs the call for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 473, "tokens": 0, "vector": null, "score": 0}, {"text": "this model stable diffusion pipeline Dot", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 474, "tokens": 0, "vector": null, "score": 0}, {"text": "from pre-train stability AI slash stable", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 475, "tokens": 0, "vector": null, "score": 0}, {"text": "diffusion Dash you know 2-1 and then you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 476, "tokens": 0, "vector": null, "score": 0}, {"text": "get the generated image of the cats so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 477, "tokens": 0, "vector": null, "score": 0}, {"text": "before continuing on with the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 478, "tokens": 0, "vector": null, "score": 0}, {"text": "experimental details of the paper I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 479, "tokens": 0, "vector": null, "score": 0}, {"text": "think it's worth checking in quickly", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 480, "tokens": 0, "vector": null, "score": 0}, {"text": "with our friends at hugging face and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 481, "tokens": 0, "vector": null, "score": 0}, {"text": "looking at this amazing repository of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 482, "tokens": 0, "vector": null, "score": 0}, {"text": "models they have so the paper it claims", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 483, "tokens": 0, "vector": null, "score": 0}, {"text": "203 000 I imagine this paper isn't more", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 484, "tokens": 0, "vector": null, "score": 0}, {"text": "than a couple months old and we already", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 485, "tokens": 0, "vector": null, "score": 0}, {"text": "now have nearly 300 000 models in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 486, "tokens": 0, "vector": null, "score": 0}, {"text": "hug and face model Hub so you know we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 487, "tokens": 0, "vector": null, "score": 0}, {"text": "have say this stable diffusion model we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 488, "tokens": 0, "vector": null, "score": 0}, {"text": "have of course the Llama that's like the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 489, "tokens": 0, "vector": null, "score": 0}, {"text": "most famous model in the world right now", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 490, "tokens": 0, "vector": null, "score": 0}, {"text": "I think this new Desi coder I've seen", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 491, "tokens": 0, "vector": null, "score": 0}, {"text": "this is like a model that's been you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 492, "tokens": 0, "vector": null, "score": 0}, {"text": "know trained for code so you see how you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 493, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of have like these different kinds", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 494, "tokens": 0, "vector": null, "score": 0}, {"text": "of models like this you know Med llama 2", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 495, "tokens": 0, "vector": null, "score": 0}, {"text": "is probably like a llama tube fine-tuned", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 496, "tokens": 0, "vector": null, "score": 0}, {"text": "on medical information or let's see what", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 497, "tokens": 0, "vector": null, "score": 0}, {"text": "else we can find yeah I mean the stable", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 498, "tokens": 0, "vector": null, "score": 0}, {"text": "diffusion ones these are like the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 499, "tokens": 0, "vector": null, "score": 0}, {"text": "generative image models I do think kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 500, "tokens": 0, "vector": null, "score": 0}, {"text": "of generative image models in large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 501, "tokens": 0, "vector": null, "score": 0}, {"text": "language models those two kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 502, "tokens": 0, "vector": null, "score": 0}, {"text": "categories of models dominate most of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 503, "tokens": 0, "vector": null, "score": 0}, {"text": "the you know public discussion about", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 504, "tokens": 0, "vector": null, "score": 0}, {"text": "these models but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 505, "tokens": 0, "vector": null, "score": 0}, {"text": "anyways you can see these kind of tags", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 506, "tokens": 0, "vector": null, "score": 0}, {"text": "like you see text classification table", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 507, "tokens": 0, "vector": null, "score": 0}, {"text": "question answering that's a pretty", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 508, "tokens": 0, "vector": null, "score": 0}, {"text": "unique one like if you need to answer", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 509, "tokens": 0, "vector": null, "score": 0}, {"text": "questions about a CSV table you might", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 510, "tokens": 0, "vector": null, "score": 0}, {"text": "want one of these models uh you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 511, "tokens": 0, "vector": null, "score": 0}, {"text": "let's see what else we have in audio", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 512, "tokens": 0, "vector": null, "score": 0}, {"text": "text-to-speech that's a really cool one", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 513, "tokens": 0, "vector": null, "score": 0}, {"text": "so yeah you see how um you have these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 514, "tokens": 0, "vector": null, "score": 0}, {"text": "different domains multimodal computer", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 515, "tokens": 0, "vector": null, "score": 0}, {"text": "vision natural language processing it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 516, "tokens": 0, "vector": null, "score": 0}, {"text": "crazy like the kind of Robotics taking", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 517, "tokens": 0, "vector": null, "score": 0}, {"text": "these models that do like continuous", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 518, "tokens": 0, "vector": null, "score": 0}, {"text": "control but yeah I just thought it'd be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 519, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting maybe to just take a look at", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 520, "tokens": 0, "vector": null, "score": 0}, {"text": "understanding further that there are", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 521, "tokens": 0, "vector": null, "score": 0}, {"text": "that what gorilla is doing is you're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 522, "tokens": 0, "vector": null, "score": 0}, {"text": "training a language model to you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 523, "tokens": 0, "vector": null, "score": 0}, {"text": "form to instantiate one of these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 524, "tokens": 0, "vector": null, "score": 0}, {"text": "particular models whatever is best", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 525, "tokens": 0, "vector": null, "score": 0}, {"text": "suited for this task so like if you say", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 526, "tokens": 0, "vector": null, "score": 0}, {"text": "I need to generate a video of cats", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 527, "tokens": 0, "vector": null, "score": 0}, {"text": "dancing then I guess this text to video", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 528, "tokens": 0, "vector": null, "score": 0}, {"text": "might be the way to do it maybe you want", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 529, "tokens": 0, "vector": null, "score": 0}, {"text": "to decompose that too so like you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 530, "tokens": 0, "vector": null, "score": 0}, {"text": "first writing a story about the movie", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 531, "tokens": 0, "vector": null, "score": 0}, {"text": "and then doing it frame by I don't know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 532, "tokens": 0, "vector": null, "score": 0}, {"text": "but like you can imagine just this kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 533, "tokens": 0, "vector": null, "score": 0}, {"text": "of repository is this the best way of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 534, "tokens": 0, "vector": null, "score": 0}, {"text": "thinking about the collection of apis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 535, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe yeah it's definitely a pretty", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 536, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting thing okay now I like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 537, "tokens": 0, "vector": null, "score": 0}, {"text": "everything about this paper but this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 538, "tokens": 0, "vector": null, "score": 0}, {"text": "my favorite detail so training gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 539, "tokens": 0, "vector": null, "score": 0}, {"text": "ablating training with and without", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 540, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval so quickly retrieval augments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 541, "tokens": 0, "vector": null, "score": 0}, {"text": "a generation most of the way that people", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 542, "tokens": 0, "vector": null, "score": 0}, {"text": "are using it right now is you train the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 543, "tokens": 0, "vector": null, "score": 0}, {"text": "language model without retrieval", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 544, "tokens": 0, "vector": null, "score": 0}, {"text": "and then at inference time you give it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 545, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval but what they're going to be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 546, "tokens": 0, "vector": null, "score": 0}, {"text": "doing is they're going to be training", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 547, "tokens": 0, "vector": null, "score": 0}, {"text": "with retrieval as well and really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 548, "tokens": 0, "vector": null, "score": 0}, {"text": "collecting the experimental data on you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 549, "tokens": 0, "vector": null, "score": 0}, {"text": "know is this worth doing what's the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 550, "tokens": 0, "vector": null, "score": 0}, {"text": "state of this so to kick things off uh", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 551, "tokens": 0, "vector": null, "score": 0}, {"text": "they're so they're going to be training", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 552, "tokens": 0, "vector": null, "score": 0}, {"text": "with and without retrieval as well as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 553, "tokens": 0, "vector": null, "score": 0}, {"text": "ablating at inference time with and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 554, "tokens": 0, "vector": null, "score": 0}, {"text": "without retrieval so inference just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 555, "tokens": 0, "vector": null, "score": 0}, {"text": "refers to making predictions with a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 556, "tokens": 0, "vector": null, "score": 0}, {"text": "trained model if that wasn't clear so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 557, "tokens": 0, "vector": null, "score": 0}, {"text": "you know when they say zero shot they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 558, "tokens": 0, "vector": null, "score": 0}, {"text": "mean it has not been trained with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 559, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval and retrieval means trained", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 560, "tokens": 0, "vector": null, "score": 0}, {"text": "with retrieval so they're going to be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 561, "tokens": 0, "vector": null, "score": 0}, {"text": "training llama 7B llama 7B a large", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 562, "tokens": 0, "vector": null, "score": 0}, {"text": "language model by meta and the the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 563, "tokens": 0, "vector": null, "score": 0}, {"text": "finest open source model to date so this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 564, "tokens": 0, "vector": null, "score": 0}, {"text": "is how I understand how they do the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 565, "tokens": 0, "vector": null, "score": 0}, {"text": "training and I hope this is correct but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 566, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe if someone else has an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 567, "tokens": 0, "vector": null, "score": 0}, {"text": "interpretation of this it would be you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 568, "tokens": 0, "vector": null, "score": 0}, {"text": "know if you could leave it in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 569, "tokens": 0, "vector": null, "score": 0}, {"text": "comments and maybe we could see if", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 570, "tokens": 0, "vector": null, "score": 0}, {"text": "that's more accurate but I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 571, "tokens": 0, "vector": null, "score": 0}, {"text": "basically what they do with standard", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 572, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction fine-tuning is that you have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 573, "tokens": 0, "vector": null, "score": 0}, {"text": "the ground Truth uh API call to generate", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 574, "tokens": 0, "vector": null, "score": 0}, {"text": "and so you force the model to you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 575, "tokens": 0, "vector": null, "score": 0}, {"text": "so the model with its first token", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 576, "tokens": 0, "vector": null, "score": 0}, {"text": "generated it might not be correct but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 577, "tokens": 0, "vector": null, "score": 0}, {"text": "you still can like force it to do those", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 578, "tokens": 0, "vector": null, "score": 0}, {"text": "decodings and then you would multiply", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 579, "tokens": 0, "vector": null, "score": 0}, {"text": "those probabilities out and then you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 580, "tokens": 0, "vector": null, "score": 0}, {"text": "have this proximal policy optimization", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 581, "tokens": 0, "vector": null, "score": 0}, {"text": "where you just do like plus one minus", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 582, "tokens": 0, "vector": null, "score": 0}, {"text": "one did I like it did I not like it and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 583, "tokens": 0, "vector": null, "score": 0}, {"text": "then you send that reward signal back", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 584, "tokens": 0, "vector": null, "score": 0}, {"text": "through the probabilities of the entire", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 585, "tokens": 0, "vector": null, "score": 0}, {"text": "sequence that generated that was the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 586, "tokens": 0, "vector": null, "score": 0}, {"text": "probabilities put to the ground truth", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 587, "tokens": 0, "vector": null, "score": 0}, {"text": "API call so that's how I think they do", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 588, "tokens": 0, "vector": null, "score": 0}, {"text": "this maybe another way to do it would be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 589, "tokens": 0, "vector": null, "score": 0}, {"text": "just kind of the standard language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 590, "tokens": 0, "vector": null, "score": 0}, {"text": "modeling loss where you just you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 591, "tokens": 0, "vector": null, "score": 0}, {"text": "language model each of the tokens of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 592, "tokens": 0, "vector": null, "score": 0}, {"text": "ground truth API call you could also", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 593, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe uh generate an API call try to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 594, "tokens": 0, "vector": null, "score": 0}, {"text": "execute it and then if it executes plus", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 595, "tokens": 0, "vector": null, "score": 0}, {"text": "one reward if it doesn't execute minus", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 596, "tokens": 0, "vector": null, "score": 0}, {"text": "do less of that so that this is how I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 597, "tokens": 0, "vector": null, "score": 0}, {"text": "think it works is they force the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 598, "tokens": 0, "vector": null, "score": 0}, {"text": "generations to follow the API call I'm", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 599, "tokens": 0, "vector": null, "score": 0}, {"text": "not exactly sure what the standard", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 600, "tokens": 0, "vector": null, "score": 0}, {"text": "instruction fine-tuning is but I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 601, "tokens": 0, "vector": null, "score": 0}, {"text": "like maybe I'm getting off topic but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 602, "tokens": 0, "vector": null, "score": 0}, {"text": "like I think the way that hugging face", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 603, "tokens": 0, "vector": null, "score": 0}, {"text": "has abstracted training models I don't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 604, "tokens": 0, "vector": null, "score": 0}, {"text": "know if it's really worth most of us", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 605, "tokens": 0, "vector": null, "score": 0}, {"text": "getting into unless unless this is your", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 606, "tokens": 0, "vector": null, "score": 0}, {"text": "thing unless you're like training models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 607, "tokens": 0, "vector": null, "score": 0}, {"text": "all the time but for you know our", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 608, "tokens": 0, "vector": null, "score": 0}, {"text": "experiments with UVA gorilla it hasn't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 609, "tokens": 0, "vector": null, "score": 0}, {"text": "been a pain to just uh do whatever", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 610, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging face offers off the shelf but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 611, "tokens": 0, "vector": null, "score": 0}, {"text": "anyways", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 612, "tokens": 0, "vector": null, "score": 0}, {"text": "so here's how retrieval augmented", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 613, "tokens": 0, "vector": null, "score": 0}, {"text": "generation during training works so you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 614, "tokens": 0, "vector": null, "score": 0}, {"text": "have the natural language instruction", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 615, "tokens": 0, "vector": null, "score": 0}, {"text": "like please classify if this image", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 616, "tokens": 0, "vector": null, "score": 0}, {"text": "contains a dog I want to see cats", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 617, "tokens": 0, "vector": null, "score": 0}, {"text": "dancing in celebration and then not just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 618, "tokens": 0, "vector": null, "score": 0}, {"text": "that as the input you add use this API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 619, "tokens": 0, "vector": null, "score": 0}, {"text": "documentation for reference and then the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 620, "tokens": 0, "vector": null, "score": 0}, {"text": "first retrieve search result so this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 621, "tokens": 0, "vector": null, "score": 0}, {"text": "what we do all the time at inference", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 622, "tokens": 0, "vector": null, "score": 0}, {"text": "time these days with retrieve augments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 623, "tokens": 0, "vector": null, "score": 0}, {"text": "of generation but what if we did this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 624, "tokens": 0, "vector": null, "score": 0}, {"text": "during training as well and what's so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 625, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting about that is then you're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 626, "tokens": 0, "vector": null, "score": 0}, {"text": "training the model with gradients to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 627, "tokens": 0, "vector": null, "score": 0}, {"text": "read that API request which is super", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 628, "tokens": 0, "vector": null, "score": 0}, {"text": "impactful for updating documentation you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 629, "tokens": 0, "vector": null, "score": 0}, {"text": "know like the weviate apis they're not", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 630, "tokens": 0, "vector": null, "score": 0}, {"text": "just going to look like this forever or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 631, "tokens": 0, "vector": null, "score": 0}, {"text": "like you know however llama index all", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 632, "tokens": 0, "vector": null, "score": 0}, {"text": "this stuff all these software tools they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 633, "tokens": 0, "vector": null, "score": 0}, {"text": "evolve over time and so you need to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 634, "tokens": 0, "vector": null, "score": 0}, {"text": "learn how to do the new API requests so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 635, "tokens": 0, "vector": null, "score": 0}, {"text": "having it be trained to read the request", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 636, "tokens": 0, "vector": null, "score": 0}, {"text": "is seems like a huge unlock for this in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 637, "tokens": 0, "vector": null, "score": 0}, {"text": "keeping the models fresh with new", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 638, "tokens": 0, "vector": null, "score": 0}, {"text": "information as well as generally it just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 639, "tokens": 0, "vector": null, "score": 0}, {"text": "makes the task a ton easier if you see", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 640, "tokens": 0, "vector": null, "score": 0}, {"text": "the it basically the answer in the input", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 641, "tokens": 0, "vector": null, "score": 0}, {"text": "so this is what they mean by doing this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 642, "tokens": 0, "vector": null, "score": 0}, {"text": "during training not just at inference", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 643, "tokens": 0, "vector": null, "score": 0}, {"text": "time so the key benefits the other state", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 644, "tokens": 0, "vector": null, "score": 0}, {"text": "which I think you know agrees with what", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 645, "tokens": 0, "vector": null, "score": 0}, {"text": "everyone says that there's maybe one", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 646, "tokens": 0, "vector": null, "score": 0}, {"text": "fourth thing I would add to this but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 647, "tokens": 0, "vector": null, "score": 0}, {"text": "this makes the llm adapt to test time", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 648, "tokens": 0, "vector": null, "score": 0}, {"text": "changes in API documentation it improves", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 649, "tokens": 0, "vector": null, "score": 0}, {"text": "the performance from in context learning", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 650, "tokens": 0, "vector": null, "score": 0}, {"text": "so you know it's easier to learn this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 651, "tokens": 0, "vector": null, "score": 0}, {"text": "task it can transfer learn better", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 652, "tokens": 0, "vector": null, "score": 0}, {"text": "because it has some representation of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 653, "tokens": 0, "vector": null, "score": 0}, {"text": "all the tote of like the you know the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 654, "tokens": 0, "vector": null, "score": 0}, {"text": "API reference so it learns better and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 655, "tokens": 0, "vector": null, "score": 0}, {"text": "then also it reduces the hallucination", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 656, "tokens": 0, "vector": null, "score": 0}, {"text": "error the hallucination error is a huge", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 657, "tokens": 0, "vector": null, "score": 0}, {"text": "one obviously for API syntax because you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 658, "tokens": 0, "vector": null, "score": 0}, {"text": "know it has to be correct you can't like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 659, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucinate an API request or it won't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 660, "tokens": 0, "vector": null, "score": 0}, {"text": "do anything productive at all but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 661, "tokens": 0, "vector": null, "score": 0}, {"text": "generally this retrieval aware training", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 662, "tokens": 0, "vector": null, "score": 0}, {"text": "I think has a huge opportunity to reduce", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 663, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucinations so the fourth thing I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 664, "tokens": 0, "vector": null, "score": 0}, {"text": "would add to this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 665, "tokens": 0, "vector": null, "score": 0}, {"text": "is when you decompose the retrieval from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 666, "tokens": 0, "vector": null, "score": 0}, {"text": "the reasoning you can also then have a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 667, "tokens": 0, "vector": null, "score": 0}, {"text": "smaller reasoning model so you don't you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 668, "tokens": 0, "vector": null, "score": 0}, {"text": "know this is like the atlas paper from", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 669, "tokens": 0, "vector": null, "score": 0}, {"text": "meta which is saying that you know when", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 670, "tokens": 0, "vector": null, "score": 0}, {"text": "you decouple retrieval and reasoning you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 671, "tokens": 0, "vector": null, "score": 0}, {"text": "these uh you could have like a 13", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 672, "tokens": 0, "vector": null, "score": 0}, {"text": "billion parameter reading model that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 673, "tokens": 0, "vector": null, "score": 0}, {"text": "performs just as well as a 300 billion", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 674, "tokens": 0, "vector": null, "score": 0}, {"text": "parameter like fully end-to-end llm so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 675, "tokens": 0, "vector": null, "score": 0}, {"text": "this kind of retrieval also is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 676, "tokens": 0, "vector": null, "score": 0}, {"text": "economical in the llm you need because", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 677, "tokens": 0, "vector": null, "score": 0}, {"text": "the task is just way easier it's just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 678, "tokens": 0, "vector": null, "score": 0}, {"text": "about like reasoning in the input not", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 679, "tokens": 0, "vector": null, "score": 0}, {"text": "about like having remembered everything", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 680, "tokens": 0, "vector": null, "score": 0}, {"text": "in the world", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 681, "tokens": 0, "vector": null, "score": 0}, {"text": "okay before we see some data tables we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 682, "tokens": 0, "vector": null, "score": 0}, {"text": "need to talk a little bit about how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 683, "tokens": 0, "vector": null, "score": 0}, {"text": "we're going to be evaluating these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 684, "tokens": 0, "vector": null, "score": 0}, {"text": "models so again what we're evaluating", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 685, "tokens": 0, "vector": null, "score": 0}, {"text": "these models to do is to select the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 686, "tokens": 0, "vector": null, "score": 0}, {"text": "right model the right model path and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 687, "tokens": 0, "vector": null, "score": 0}, {"text": "sometimes there are optional arguments", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 688, "tokens": 0, "vector": null, "score": 0}, {"text": "as well to the model so these are", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 689, "tokens": 0, "vector": null, "score": 0}, {"text": "examples of incorrect Generations so in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 690, "tokens": 0, "vector": null, "score": 0}, {"text": "this case uh this the gpt4 model is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 691, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucinating extra arguments to the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 692, "tokens": 0, "vector": null, "score": 0}, {"text": "function like you know this ASR", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 693, "tokens": 0, "vector": null, "score": 0}, {"text": "parameter in string or Source equals", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 694, "tokens": 0, "vector": null, "score": 0}, {"text": "local the anthropic cloud model is you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 695, "tokens": 0, "vector": null, "score": 0}, {"text": "know instead of doing torch.hub.load is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 696, "tokens": 0, "vector": null, "score": 0}, {"text": "doing torch audio dot pipelines you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 697, "tokens": 0, "vector": null, "score": 0}, {"text": "dot wave2vec ASR pipeline so it's like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 698, "tokens": 0, "vector": null, "score": 0}, {"text": "hallucinating or it's calling the wrong", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 699, "tokens": 0, "vector": null, "score": 0}, {"text": "library to do this whereas so we wanted", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 700, "tokens": 0, "vector": null, "score": 0}, {"text": "to do this particular kind of Syntax for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 701, "tokens": 0, "vector": null, "score": 0}, {"text": "loading this model so what the authors", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 702, "tokens": 0, "vector": null, "score": 0}, {"text": "propose doing is decomposing the API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 703, "tokens": 0, "vector": null, "score": 0}, {"text": "call into an abstract syntax tree and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 704, "tokens": 0, "vector": null, "score": 0}, {"text": "then matching that tree with the uh with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 705, "tokens": 0, "vector": null, "score": 0}, {"text": "the ground truth or say you know you got", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 706, "tokens": 0, "vector": null, "score": 0}, {"text": "some of it right so this is like if you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 707, "tokens": 0, "vector": null, "score": 0}, {"text": "made it to here right like you got the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 708, "tokens": 0, "vector": null, "score": 0}, {"text": "torch.hub.load maybe you would penalize", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 709, "tokens": 0, "vector": null, "score": 0}, {"text": "that less something like this so yeah I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 710, "tokens": 0, "vector": null, "score": 0}, {"text": "did I didn't go too into this detail but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 711, "tokens": 0, "vector": null, "score": 0}, {"text": "I think it's quite interesting how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 712, "tokens": 0, "vector": null, "score": 0}, {"text": "you're going to be evaluating these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 713, "tokens": 0, "vector": null, "score": 0}, {"text": "models like maybe the dumb way to do it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 714, "tokens": 0, "vector": null, "score": 0}, {"text": "is just to do to keep the perplexity", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 715, "tokens": 0, "vector": null, "score": 0}, {"text": "like the perplexity is the common", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 716, "tokens": 0, "vector": null, "score": 0}, {"text": "lawsuits and language modeling where", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 717, "tokens": 0, "vector": null, "score": 0}, {"text": "you're just multiplying out the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 718, "tokens": 0, "vector": null, "score": 0}, {"text": "probabilities the language model puts to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 719, "tokens": 0, "vector": null, "score": 0}, {"text": "the ground true tokens and you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 720, "tokens": 0, "vector": null, "score": 0}, {"text": "that's typically what you do with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 721, "tokens": 0, "vector": null, "score": 0}, {"text": "language modeling", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 722, "tokens": 0, "vector": null, "score": 0}, {"text": "with this uh you know the the probably", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 723, "tokens": 0, "vector": null, "score": 0}, {"text": "the most interesting thing about this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 724, "tokens": 0, "vector": null, "score": 0}, {"text": "if you uh did you know if instead of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 725, "tokens": 0, "vector": null, "score": 0}, {"text": "dense net 121 you did densnet 161 or 200", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 726, "tokens": 0, "vector": null, "score": 0}, {"text": "one it would still execute so you can't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 727, "tokens": 0, "vector": null, "score": 0}, {"text": "just purely evaluate this based on did", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 728, "tokens": 0, "vector": null, "score": 0}, {"text": "the API call execute you also need to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 729, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of see if it gave the particular", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 730, "tokens": 0, "vector": null, "score": 0}, {"text": "model which will make sense too as we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 731, "tokens": 0, "vector": null, "score": 0}, {"text": "look at the ablation on uh API calls", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 732, "tokens": 0, "vector": null, "score": 0}, {"text": "with constraints where you particularly", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 733, "tokens": 0, "vector": null, "score": 0}, {"text": "want like you know eight eighty percent", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 734, "tokens": 0, "vector": null, "score": 0}, {"text": "imagenet accuracy but less than 20", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 735, "tokens": 0, "vector": null, "score": 0}, {"text": "million parameters", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 736, "tokens": 0, "vector": null, "score": 0}, {"text": "okay let's get into some of the results", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 737, "tokens": 0, "vector": null, "score": 0}, {"text": "so the first thing to note before we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 738, "tokens": 0, "vector": null, "score": 0}, {"text": "dive into the results is they're going", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 739, "tokens": 0, "vector": null, "score": 0}, {"text": "to be exploring again training gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 740, "tokens": 0, "vector": null, "score": 0}, {"text": "without retrieval as well as training", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 741, "tokens": 0, "vector": null, "score": 0}, {"text": "Guerrilla with retrieval so starting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 742, "tokens": 0, "vector": null, "score": 0}, {"text": "with training gorilla without retrieval", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 743, "tokens": 0, "vector": null, "score": 0}, {"text": "just purely fine-tuning a language model", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 744, "tokens": 0, "vector": null, "score": 0}, {"text": "to go from natural language instruction", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 745, "tokens": 0, "vector": null, "score": 0}, {"text": "to API call the API reference is only", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 746, "tokens": 0, "vector": null, "score": 0}, {"text": "used during inference not during", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 747, "tokens": 0, "vector": null, "score": 0}, {"text": "training when when they do bring it out", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 748, "tokens": 0, "vector": null, "score": 0}, {"text": "for to see what happens to Performance", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 749, "tokens": 0, "vector": null, "score": 0}, {"text": "so the takeaway fine-tuned gorilla gets", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 750, "tokens": 0, "vector": null, "score": 0}, {"text": "CDR performance 20 better than gbt4", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 751, "tokens": 0, "vector": null, "score": 0}, {"text": "nearly 11 better than cha gbt and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 752, "tokens": 0, "vector": null, "score": 0}, {"text": "83 better than the other open source", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 753, "tokens": 0, "vector": null, "score": 0}, {"text": "models so you know you see that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 754, "tokens": 0, "vector": null, "score": 0}, {"text": "obviously obviously there's a gap", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 755, "tokens": 0, "vector": null, "score": 0}, {"text": "between gbt4 Chad gbt and then most of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 756, "tokens": 0, "vector": null, "score": 0}, {"text": "the open source models so but this take", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 757, "tokens": 0, "vector": null, "score": 0}, {"text": "away the fact that you can fine-tune", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 758, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla to do a better job of these API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 759, "tokens": 0, "vector": null, "score": 0}, {"text": "requests then gbt4 zero shot or Chad GP", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 760, "tokens": 0, "vector": null, "score": 0}, {"text": "zero shot this suggests quantitatively", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 761, "tokens": 0, "vector": null, "score": 0}, {"text": "that fine tuning is better than just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 762, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval augmentation so you know what", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 763, "tokens": 0, "vector": null, "score": 0}, {"text": "they mean is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 764, "tokens": 0, "vector": null, "score": 0}, {"text": "they you know so neither model has been", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 765, "tokens": 0, "vector": null, "score": 0}, {"text": "trained with the API reference but they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 766, "tokens": 0, "vector": null, "score": 0}, {"text": "do also show what happens when you put", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 767, "tokens": 0, "vector": null, "score": 0}, {"text": "the API reference in the input at test", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 768, "tokens": 0, "vector": null, "score": 0}, {"text": "time not during training time and they", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 769, "tokens": 0, "vector": null, "score": 0}, {"text": "do find that fine-tuning models performs", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 770, "tokens": 0, "vector": null, "score": 0}, {"text": "better than just purely augmenting gbt4", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 771, "tokens": 0, "vector": null, "score": 0}, {"text": "with the ape guy reference so another", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 772, "tokens": 0, "vector": null, "score": 0}, {"text": "thing before we look at the data table", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 773, "tokens": 0, "vector": null, "score": 0}, {"text": "is that you know this is a warning for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 774, "tokens": 0, "vector": null, "score": 0}, {"text": "brag implementations they find that if", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 775, "tokens": 0, "vector": null, "score": 0}, {"text": "you give it a non-optimal I mean this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 776, "tokens": 0, "vector": null, "score": 0}, {"text": "obviously common sense like if you give", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 777, "tokens": 0, "vector": null, "score": 0}, {"text": "it the incorrect API reference it will", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 778, "tokens": 0, "vector": null, "score": 0}, {"text": "misguide the model of course so I don't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 779, "tokens": 0, "vector": null, "score": 0}, {"text": "know if that's like exactly like a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 780, "tokens": 0, "vector": null, "score": 0}, {"text": "mind-blowing takeaway but I mean it it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 781, "tokens": 0, "vector": null, "score": 0}, {"text": "of course is because when you're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 782, "tokens": 0, "vector": null, "score": 0}, {"text": "thinking about retrieval it really like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 783, "tokens": 0, "vector": null, "score": 0}, {"text": "that's why I think this cohere", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 784, "tokens": 0, "vector": null, "score": 0}, {"text": "re-rankers thing is so exciting because", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 785, "tokens": 0, "vector": null, "score": 0}, {"text": "for a lot of these retrieval augmented", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 786, "tokens": 0, "vector": null, "score": 0}, {"text": "generation applications I don't think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 787, "tokens": 0, "vector": null, "score": 0}, {"text": "you're going to be latency bound because", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 788, "tokens": 0, "vector": null, "score": 0}, {"text": "you know what's the point of making it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 789, "tokens": 0, "vector": null, "score": 0}, {"text": "super fast but not accurate prediction", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 790, "tokens": 0, "vector": null, "score": 0}, {"text": "so kind of these re-ranking models I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 791, "tokens": 0, "vector": null, "score": 0}, {"text": "think become more valuable because it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 792, "tokens": 0, "vector": null, "score": 0}, {"text": "worth taking the time to make sure you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 793, "tokens": 0, "vector": null, "score": 0}, {"text": "got the right API reference before you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 794, "tokens": 0, "vector": null, "score": 0}, {"text": "then do the generation so let's take a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 795, "tokens": 0, "vector": null, "score": 0}, {"text": "look at the data table so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 796, "tokens": 0, "vector": null, "score": 0}, {"text": "okay so obviously this is a ton to look", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 797, "tokens": 0, "vector": null, "score": 0}, {"text": "at but uh so so gorilla of course is you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 798, "tokens": 0, "vector": null, "score": 0}, {"text": "know the model we're talking about and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 799, "tokens": 0, "vector": null, "score": 0}, {"text": "so gorilla zero so zero shot means all", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 800, "tokens": 0, "vector": null, "score": 0}, {"text": "these models are just being evaluated", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 801, "tokens": 0, "vector": null, "score": 0}, {"text": "with the natural language command I want", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 802, "tokens": 0, "vector": null, "score": 0}, {"text": "to see some cats dancing right they just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 803, "tokens": 0, "vector": null, "score": 0}, {"text": "get that as input and they just have to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 804, "tokens": 0, "vector": null, "score": 0}, {"text": "write the API request to the hug and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 805, "tokens": 0, "vector": null, "score": 0}, {"text": "face model so they measure different", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 806, "tokens": 0, "vector": null, "score": 0}, {"text": "kinds of uh you know the overall which", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 807, "tokens": 0, "vector": null, "score": 0}, {"text": "is that abstract syntax tree matching", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 808, "tokens": 0, "vector": null, "score": 0}, {"text": "thing the hallucinations when it um you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 809, "tokens": 0, "vector": null, "score": 0}, {"text": "know invokes the like just generates an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 810, "tokens": 0, "vector": null, "score": 0}, {"text": "API call that doesn't exist or errors I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 811, "tokens": 0, "vector": null, "score": 0}, {"text": "think is just when it makes one of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 812, "tokens": 0, "vector": null, "score": 0}, {"text": "things right I'm not exactly sure the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 813, "tokens": 0, "vector": null, "score": 0}, {"text": "difference but I think probably we can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 814, "tokens": 0, "vector": null, "score": 0}, {"text": "just look at this overall metric so so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 815, "tokens": 0, "vector": null, "score": 0}, {"text": "here's the thing about uh be careful", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 816, "tokens": 0, "vector": null, "score": 0}, {"text": "with the retriever so bm25 if you get", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 817, "tokens": 0, "vector": null, "score": 0}, {"text": "the wrong context it goes from 59 to 40.", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 818, "tokens": 0, "vector": null, "score": 0}, {"text": "as we saw earlier I think it makes a lot", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 819, "tokens": 0, "vector": null, "score": 0}, {"text": "of sense why bm25 retrieval is hard for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 820, "tokens": 0, "vector": null, "score": 0}, {"text": "this kind of case because if you say I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 821, "tokens": 0, "vector": null, "score": 0}, {"text": "want to see some cats dancing you don't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 822, "tokens": 0, "vector": null, "score": 0}, {"text": "have any keywords that are going to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 823, "tokens": 0, "vector": null, "score": 0}, {"text": "match the you know the hug and face API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 824, "tokens": 0, "vector": null, "score": 0}, {"text": "documentation so I do think that result", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 825, "tokens": 0, "vector": null, "score": 0}, {"text": "makes a lot of sense uh gbt index that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 826, "tokens": 0, "vector": null, "score": 0}, {"text": "being that was the earlier name of llama", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 827, "tokens": 0, "vector": null, "score": 0}, {"text": "index uh returning so a site boost using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 828, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector embeddings but definitely a lot", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 829, "tokens": 0, "vector": null, "score": 0}, {"text": "to this and then Oracle Oracle is the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 830, "tokens": 0, "vector": null, "score": 0}, {"text": "you know the perfect API reference to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 831, "tokens": 0, "vector": null, "score": 0}, {"text": "have so you can see how much it boosts", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 832, "tokens": 0, "vector": null, "score": 0}, {"text": "by having the perfect API reference so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 833, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe in addition to seeing our gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 834, "tokens": 0, "vector": null, "score": 0}, {"text": "model so we see gbt4 Zero shot doesn't", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 835, "tokens": 0, "vector": null, "score": 0}, {"text": "perform so well but then when gbt4 has", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 836, "tokens": 0, "vector": null, "score": 0}, {"text": "the you know 38 to 66 again you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 837, "tokens": 0, "vector": null, "score": 0}, {"text": "that's the retrieval augmented", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 838, "tokens": 0, "vector": null, "score": 0}, {"text": "generation thing is when you give it the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 839, "tokens": 0, "vector": null, "score": 0}, {"text": "context the large language models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 840, "tokens": 0, "vector": null, "score": 0}, {"text": "perform way better but then you can also", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 841, "tokens": 0, "vector": null, "score": 0}, {"text": "see the detriment by not having it be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 842, "tokens": 0, "vector": null, "score": 0}, {"text": "the right context so here's another kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 843, "tokens": 0, "vector": null, "score": 0}, {"text": "of view of what these models ended up", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 844, "tokens": 0, "vector": null, "score": 0}, {"text": "looking like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 845, "tokens": 0, "vector": null, "score": 0}, {"text": "you know with the Oracle retrieval so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 846, "tokens": 0, "vector": null, "score": 0}, {"text": "just zero shot where you've just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 847, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuned gorilla compared to gbt 3.5", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 848, "tokens": 0, "vector": null, "score": 0}, {"text": "and GT4 zero shot gorilla model performs", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 849, "tokens": 0, "vector": null, "score": 0}, {"text": "way better but then with the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 850, "tokens": 0, "vector": null, "score": 0}, {"text": "retriever you push these super capable", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 851, "tokens": 0, "vector": null, "score": 0}, {"text": "language models closer llama just with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 852, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval doesn't seem to be able to you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 853, "tokens": 0, "vector": null, "score": 0}, {"text": "know get up up into the left like these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 854, "tokens": 0, "vector": null, "score": 0}, {"text": "other models do so that's kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 855, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting as well you see the input", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 856, "tokens": 0, "vector": null, "score": 0}, {"text": "impact of uh not a perfect Retriever and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 857, "tokens": 0, "vector": null, "score": 0}, {"text": "so on so so this is again this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 858, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuning Gorilla without retrieval", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 859, "tokens": 0, "vector": null, "score": 0}, {"text": "okay so now let's get into the results", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 860, "tokens": 0, "vector": null, "score": 0}, {"text": "of retrieval aware training fine tuning", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 861, "tokens": 0, "vector": null, "score": 0}, {"text": "with retrieval so shown on the right is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 862, "tokens": 0, "vector": null, "score": 0}, {"text": "the gorilla trained with the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 863, "tokens": 0, "vector": null, "score": 0}, {"text": "retriever so that means that during", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 864, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuning the gorilla is always seeing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 865, "tokens": 0, "vector": null, "score": 0}, {"text": "the perfect API reference so I want to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 866, "tokens": 0, "vector": null, "score": 0}, {"text": "see some cats dancing and then it's that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 867, "tokens": 0, "vector": null, "score": 0}, {"text": "stapled stable diffusion model API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 868, "tokens": 0, "vector": null, "score": 0}, {"text": "reference so it's you know perfect API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 869, "tokens": 0, "vector": null, "score": 0}, {"text": "reference so here's so we see with the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 870, "tokens": 0, "vector": null, "score": 0}, {"text": "Oracle that the results are much better", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 871, "tokens": 0, "vector": null, "score": 0}, {"text": "so you know comparing this column with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 872, "tokens": 0, "vector": null, "score": 0}, {"text": "the Oracle one is train with it or maybe", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 873, "tokens": 0, "vector": null, "score": 0}, {"text": "comparing this column with the zero shot", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 874, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla without retriever when it's been", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 875, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tuned without any kind of retrieval", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 876, "tokens": 0, "vector": null, "score": 0}, {"text": "at all so you know so that's that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 877, "tokens": 0, "vector": null, "score": 0}, {"text": "comparison gorilla with the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 878, "tokens": 0, "vector": null, "score": 0}, {"text": "retriever then is completely unable to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 879, "tokens": 0, "vector": null, "score": 0}, {"text": "do this without any kind of retrieval", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 880, "tokens": 0, "vector": null, "score": 0}, {"text": "augmentation and then here's another", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 881, "tokens": 0, "vector": null, "score": 0}, {"text": "really interesting detail of it is that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 882, "tokens": 0, "vector": null, "score": 0}, {"text": "when you train it with the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 883, "tokens": 0, "vector": null, "score": 0}, {"text": "retriever it becomes less robust to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 884, "tokens": 0, "vector": null, "score": 0}, {"text": "noise in the retrieve which makes a ton", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 885, "tokens": 0, "vector": null, "score": 0}, {"text": "of sense because you've changed the task", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 886, "tokens": 0, "vector": null, "score": 0}, {"text": "from memorization to like learning to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 887, "tokens": 0, "vector": null, "score": 0}, {"text": "read and so if you're learning to read", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 888, "tokens": 0, "vector": null, "score": 0}, {"text": "the wrong thing obviously that makes a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 889, "tokens": 0, "vector": null, "score": 0}, {"text": "lot of sense why that would mess it up", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 890, "tokens": 0, "vector": null, "score": 0}, {"text": "or yeah so you know it would be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 891, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting to see kind of like um", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 892, "tokens": 0, "vector": null, "score": 0}, {"text": "ablating this further like instead of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 893, "tokens": 0, "vector": null, "score": 0}, {"text": "just um", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 894, "tokens": 0, "vector": null, "score": 0}, {"text": "top one maybe you you have top three so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 895, "tokens": 0, "vector": null, "score": 0}, {"text": "there's there's definitely some more", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 896, "tokens": 0, "vector": null, "score": 0}, {"text": "exploration they could do with uh you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 897, "tokens": 0, "vector": null, "score": 0}, {"text": "know how you retrieve the context during", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 898, "tokens": 0, "vector": null, "score": 0}, {"text": "training do you put do you mix the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 899, "tokens": 0, "vector": null, "score": 0}, {"text": "Oracle with noisy results to make it to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 900, "tokens": 0, "vector": null, "score": 0}, {"text": "try to make it robust to noise that way", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 901, "tokens": 0, "vector": null, "score": 0}, {"text": "and so on so the big takeaway is that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 902, "tokens": 0, "vector": null, "score": 0}, {"text": "the current retrievers still have a big", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 903, "tokens": 0, "vector": null, "score": 0}, {"text": "gap between the ground truth retriever I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 904, "tokens": 0, "vector": null, "score": 0}, {"text": "think this is maybe confounded by", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 905, "tokens": 0, "vector": null, "score": 0}, {"text": "because you could have like a I I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 906, "tokens": 0, "vector": null, "score": 0}, {"text": "I think this task also is particularly", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 907, "tokens": 0, "vector": null, "score": 0}, {"text": "bad for bm25 but you could generally you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 908, "tokens": 0, "vector": null, "score": 0}, {"text": "could do like hybrid search with", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 909, "tokens": 0, "vector": null, "score": 0}, {"text": "re-ranking to try to improve it you can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 910, "tokens": 0, "vector": null, "score": 0}, {"text": "maybe fine-tune the embedding model as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 911, "tokens": 0, "vector": null, "score": 0}, {"text": "something that is not common to see but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 912, "tokens": 0, "vector": null, "score": 0}, {"text": "you know definitely could be a lever to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 913, "tokens": 0, "vector": null, "score": 0}, {"text": "pull this performance even further but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 914, "tokens": 0, "vector": null, "score": 0}, {"text": "yeah so the key thing is to note that if", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 915, "tokens": 0, "vector": null, "score": 0}, {"text": "you're going to train it with the Oracle", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 916, "tokens": 0, "vector": null, "score": 0}, {"text": "context and then at test time you have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 917, "tokens": 0, "vector": null, "score": 0}, {"text": "some noise in the return context you can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 918, "tokens": 0, "vector": null, "score": 0}, {"text": "expect the model to perform worse", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 919, "tokens": 0, "vector": null, "score": 0}, {"text": "because you know it's being trained to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 920, "tokens": 0, "vector": null, "score": 0}, {"text": "copy perfectly okay now here is maybe", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 921, "tokens": 0, "vector": null, "score": 0}, {"text": "the more important evaluation thing is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 922, "tokens": 0, "vector": null, "score": 0}, {"text": "test time documentation change as the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 923, "tokens": 0, "vector": null, "score": 0}, {"text": "authors State the rapidly evolving", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 924, "tokens": 0, "vector": null, "score": 0}, {"text": "nature of API documentation presents a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 925, "tokens": 0, "vector": null, "score": 0}, {"text": "significant challenge for the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 926, "tokens": 0, "vector": null, "score": 0}, {"text": "application of llms in this field these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 927, "tokens": 0, "vector": null, "score": 0}, {"text": "documents are often updated at a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 928, "tokens": 0, "vector": null, "score": 0}, {"text": "frequency that outpaces the retraining", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 929, "tokens": 0, "vector": null, "score": 0}, {"text": "or fine-tuning schedule of llms making", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 930, "tokens": 0, "vector": null, "score": 0}, {"text": "these models particularly brittle to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 931, "tokens": 0, "vector": null, "score": 0}, {"text": "changes in the information they are", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 932, "tokens": 0, "vector": null, "score": 0}, {"text": "designed to process this mismatch sorry", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 933, "tokens": 0, "vector": null, "score": 0}, {"text": "an update frequency can lead to a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 934, "tokens": 0, "vector": null, "score": 0}, {"text": "decline in the utility and reliability", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 935, "tokens": 0, "vector": null, "score": 0}, {"text": "of elements over time so I think this is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 936, "tokens": 0, "vector": null, "score": 0}, {"text": "probably the most important thing for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 937, "tokens": 0, "vector": null, "score": 0}, {"text": "this API documentation because you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 938, "tokens": 0, "vector": null, "score": 0}, {"text": "as imagine we train the wev8 gorilla one", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 939, "tokens": 0, "vector": null, "score": 0}, {"text": "time and now we want to say change the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 940, "tokens": 0, "vector": null, "score": 0}, {"text": "arguments to one of the function calls", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 941, "tokens": 0, "vector": null, "score": 0}, {"text": "or deprecate some something or we want", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 942, "tokens": 0, "vector": null, "score": 0}, {"text": "to introduce new apis this ability of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 943, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval aware training where you're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 944, "tokens": 0, "vector": null, "score": 0}, {"text": "training it to just kind of read the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 945, "tokens": 0, "vector": null, "score": 0}, {"text": "documentation that enables it to adapt", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 946, "tokens": 0, "vector": null, "score": 0}, {"text": "to changes in the apis and that is a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 947, "tokens": 0, "vector": null, "score": 0}, {"text": "huge enabler for this kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 948, "tokens": 0, "vector": null, "score": 0}, {"text": "application they illustrate how you can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 949, "tokens": 0, "vector": null, "score": 0}, {"text": "upload the model registry to change the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 950, "tokens": 0, "vector": null, "score": 0}, {"text": "model path from PI torch Vision to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 951, "tokens": 0, "vector": null, "score": 0}, {"text": "Nvidia deep learning examples colon", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 952, "tokens": 0, "vector": null, "score": 0}, {"text": "torch Hub and they show this kind kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 953, "tokens": 0, "vector": null, "score": 0}, {"text": "of thing of how the retrieval aware", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 954, "tokens": 0, "vector": null, "score": 0}, {"text": "model is able to adapt to updates in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 955, "tokens": 0, "vector": null, "score": 0}, {"text": "documentation the next really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 956, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting detail for these kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 957, "tokens": 0, "vector": null, "score": 0}, {"text": "models is how well they can follow", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 958, "tokens": 0, "vector": null, "score": 0}, {"text": "constraints so particularly with deep", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 959, "tokens": 0, "vector": null, "score": 0}, {"text": "learning models we have resource", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 960, "tokens": 0, "vector": null, "score": 0}, {"text": "constraints and then performance", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 961, "tokens": 0, "vector": null, "score": 0}, {"text": "expectations so you know we have these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 962, "tokens": 0, "vector": null, "score": 0}, {"text": "two kind of things parameter size which", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 963, "tokens": 0, "vector": null, "score": 0}, {"text": "is a pretty good proxy for how you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 964, "tokens": 0, "vector": null, "score": 0}, {"text": "the late how slow is going to be to make", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 965, "tokens": 0, "vector": null, "score": 0}, {"text": "predictions as well as what kind of like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 966, "tokens": 0, "vector": null, "score": 0}, {"text": "whether you need like four gpus to run", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 967, "tokens": 0, "vector": null, "score": 0}, {"text": "it or what kind of GPU you need to run", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 968, "tokens": 0, "vector": null, "score": 0}, {"text": "it and so on as well as the lower bound", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 969, "tokens": 0, "vector": null, "score": 0}, {"text": "accuracy so for example the natural", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 970, "tokens": 0, "vector": null, "score": 0}, {"text": "language command might be invoke an", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 971, "tokens": 0, "vector": null, "score": 0}, {"text": "image classification model that uses", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 972, "tokens": 0, "vector": null, "score": 0}, {"text": "less than 10 million parameters but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 973, "tokens": 0, "vector": null, "score": 0}, {"text": "maintains an imagenet accuracy of at", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 974, "tokens": 0, "vector": null, "score": 0}, {"text": "least 70 percent so this requires the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 975, "tokens": 0, "vector": null, "score": 0}, {"text": "Nuance of understanding the request as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 976, "tokens": 0, "vector": null, "score": 0}, {"text": "well as then how to format it into the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 977, "tokens": 0, "vector": null, "score": 0}, {"text": "API so you kind of have this confounding", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 978, "tokens": 0, "vector": null, "score": 0}, {"text": "of these two tasks in one but it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 979, "tokens": 0, "vector": null, "score": 0}, {"text": "learning how to simultaneously balance", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 980, "tokens": 0, "vector": null, "score": 0}, {"text": "the performance you want with the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 981, "tokens": 0, "vector": null, "score": 0}, {"text": "resource constraints so this table is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 982, "tokens": 0, "vector": null, "score": 0}, {"text": "showing how well the models are at doing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 983, "tokens": 0, "vector": null, "score": 0}, {"text": "this this definitely makes the task more", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 984, "tokens": 0, "vector": null, "score": 0}, {"text": "difficult you can see how the cloud and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 985, "tokens": 0, "vector": null, "score": 0}, {"text": "gbt4 they pick it up because now I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 986, "tokens": 0, "vector": null, "score": 0}, {"text": "having this kind of um you know like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 987, "tokens": 0, "vector": null, "score": 0}, {"text": "ability to reason about the request as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 988, "tokens": 0, "vector": null, "score": 0}, {"text": "well as just how to format the API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 989, "tokens": 0, "vector": null, "score": 0}, {"text": "syntax because you need to you need to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 990, "tokens": 0, "vector": null, "score": 0}, {"text": "be able to like parse out this kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 991, "tokens": 0, "vector": null, "score": 0}, {"text": "you know what I want as well as the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 992, "tokens": 0, "vector": null, "score": 0}, {"text": "constraints then you need to kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 993, "tokens": 0, "vector": null, "score": 0}, {"text": "read the description read the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 994, "tokens": 0, "vector": null, "score": 0}, {"text": "performance and so on so I think this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 995, "tokens": 0, "vector": null, "score": 0}, {"text": "helps the more General models catch up", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 996, "tokens": 0, "vector": null, "score": 0}, {"text": "definitely an interesting kind of aspect", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 997, "tokens": 0, "vector": null, "score": 0}, {"text": "is this API calls with constraints", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 998, "tokens": 0, "vector": null, "score": 0}, {"text": "particularly I would say resource", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 999, "tokens": 0, "vector": null, "score": 0}, {"text": "constraints so hopefully that was a good", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1000, "tokens": 0, "vector": null, "score": 0}, {"text": "explanation of the details of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1001, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla paper more than happy to further", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1002, "tokens": 0, "vector": null, "score": 0}, {"text": "clarify anything if you have any", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1003, "tokens": 0, "vector": null, "score": 0}, {"text": "questions or ideas please leave them in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1004, "tokens": 0, "vector": null, "score": 0}, {"text": "the comments here are some of my", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1005, "tokens": 0, "vector": null, "score": 0}, {"text": "personal takeaways from reading this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1006, "tokens": 0, "vector": null, "score": 0}, {"text": "paper so firstly I think it's really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1007, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting to just kind of consider the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1008, "tokens": 0, "vector": null, "score": 0}, {"text": "evolution of this kind of research I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1009, "tokens": 0, "vector": null, "score": 0}, {"text": "think it started with react that showed", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1010, "tokens": 0, "vector": null, "score": 0}, {"text": "how you could have zero shot prompting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1011, "tokens": 0, "vector": null, "score": 0}, {"text": "where in the input you would say hey you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1012, "tokens": 0, "vector": null, "score": 0}, {"text": "have a calculator a search engine if you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1013, "tokens": 0, "vector": null, "score": 0}, {"text": "would like to use it then you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1014, "tokens": 0, "vector": null, "score": 0}, {"text": "please format your response like this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1015, "tokens": 0, "vector": null, "score": 0}, {"text": "and then we'll send the request to the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1016, "tokens": 0, "vector": null, "score": 0}, {"text": "external tool and this kind of thing so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1017, "tokens": 0, "vector": null, "score": 0}, {"text": "tools former I think was then that the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1018, "tokens": 0, "vector": null, "score": 0}, {"text": "paper that showed that you could", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1019, "tokens": 0, "vector": null, "score": 0}, {"text": "fine-tune language models to use tools", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1020, "tokens": 0, "vector": null, "score": 0}, {"text": "with gradients I think it was a little", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1021, "tokens": 0, "vector": null, "score": 0}, {"text": "more entangled with uh the language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1022, "tokens": 0, "vector": null, "score": 0}, {"text": "modeling objective than this kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1023, "tokens": 0, "vector": null, "score": 0}, {"text": "gorilla work where I think the gorilla", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1024, "tokens": 0, "vector": null, "score": 0}, {"text": "work is more specialized on particular", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1025, "tokens": 0, "vector": null, "score": 0}, {"text": "tools rather than having gradients all", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1026, "tokens": 0, "vector": null, "score": 0}, {"text": "the way in the end to end of how you use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1027, "tokens": 0, "vector": null, "score": 0}, {"text": "the tools to complete the tasks hugging", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1028, "tokens": 0, "vector": null, "score": 0}, {"text": "GPT I think is another really", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1029, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting work connected to this which", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1030, "tokens": 0, "vector": null, "score": 0}, {"text": "uh was at least for me the first paper", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1031, "tokens": 0, "vector": null, "score": 0}, {"text": "that showed like this idea of like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1032, "tokens": 0, "vector": null, "score": 0}, {"text": "models or tools so I think gorilla is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1033, "tokens": 0, "vector": null, "score": 0}, {"text": "somewhere in between tools former and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1034, "tokens": 0, "vector": null, "score": 0}, {"text": "hugging GPT but I love the specialized", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1035, "tokens": 0, "vector": null, "score": 0}, {"text": "Focus I love how they brought in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1036, "tokens": 0, "vector": null, "score": 0}, {"text": "self-instruct for how you generate the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1037, "tokens": 0, "vector": null, "score": 0}, {"text": "natural language commands and bootstrap", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1038, "tokens": 0, "vector": null, "score": 0}, {"text": "this data for then compressing from the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1039, "tokens": 0, "vector": null, "score": 0}, {"text": "large model to the smaller model to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1040, "tokens": 0, "vector": null, "score": 0}, {"text": "write these API requests so you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1041, "tokens": 0, "vector": null, "score": 0}, {"text": "we're going to be doing more stuff on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1042, "tokens": 0, "vector": null, "score": 0}, {"text": "this wuvia gorilla so I'll just give a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1043, "tokens": 0, "vector": null, "score": 0}, {"text": "quick preview of this for now but you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1044, "tokens": 0, "vector": null, "score": 0}, {"text": "know we V8 gorilla is about you know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1045, "tokens": 0, "vector": null, "score": 0}, {"text": "training fine-tuning the model on the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1046, "tokens": 0, "vector": null, "score": 0}, {"text": "Wii V8 apis so starting with the search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1047, "tokens": 0, "vector": null, "score": 0}, {"text": "apis you know we it has a graphql API as", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1048, "tokens": 0, "vector": null, "score": 0}, {"text": "well as like you know python JavaScript", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1049, "tokens": 0, "vector": null, "score": 0}, {"text": "all that client libraries for how you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1050, "tokens": 0, "vector": null, "score": 0}, {"text": "write searches so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1051, "tokens": 0, "vector": null, "score": 0}, {"text": "you know this is similar to the web GPT", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1052, "tokens": 0, "vector": null, "score": 0}, {"text": "stuff uh web gbt is where it has search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1053, "tokens": 0, "vector": null, "score": 0}, {"text": "actions like you open up a square", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1054, "tokens": 0, "vector": null, "score": 0}, {"text": "bracket and say search and then the term", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1055, "tokens": 0, "vector": null, "score": 0}, {"text": "or you and you get the search results", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1056, "tokens": 0, "vector": null, "score": 0}, {"text": "and you say you know Open Bracket next", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1057, "tokens": 0, "vector": null, "score": 0}, {"text": "page to see the next page of search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1058, "tokens": 0, "vector": null, "score": 0}, {"text": "results from say you know the Bing API", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1059, "tokens": 0, "vector": null, "score": 0}, {"text": "or the Google search serp API and how", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1060, "tokens": 0, "vector": null, "score": 0}, {"text": "you do that so it's also quite related", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1061, "tokens": 0, "vector": null, "score": 0}, {"text": "to learning to search so learning to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1062, "tokens": 0, "vector": null, "score": 0}, {"text": "search is I don't think a massively", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1063, "tokens": 0, "vector": null, "score": 0}, {"text": "popular area of research but that's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1064, "tokens": 0, "vector": null, "score": 0}, {"text": "where you would try to train a model to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1065, "tokens": 0, "vector": null, "score": 0}, {"text": "you know maybe copy like what what terms", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1066, "tokens": 0, "vector": null, "score": 0}, {"text": "particularly humans search for so you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1067, "tokens": 0, "vector": null, "score": 0}, {"text": "know like how you know with how we use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1068, "tokens": 0, "vector": null, "score": 0}, {"text": "Google we might focus on these kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1069, "tokens": 0, "vector": null, "score": 0}, {"text": "keywords and so on so you try to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1070, "tokens": 0, "vector": null, "score": 0}, {"text": "compress that into LM so kind of similar", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1071, "tokens": 0, "vector": null, "score": 0}, {"text": "to the API call with constraints in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1072, "tokens": 0, "vector": null, "score": 0}, {"text": "addition to this kind of how would you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1073, "tokens": 0, "vector": null, "score": 0}, {"text": "send the request to leviate you might", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1074, "tokens": 0, "vector": null, "score": 0}, {"text": "want to entangle the gorilla model to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1075, "tokens": 0, "vector": null, "score": 0}, {"text": "also coming up with the search query and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1076, "tokens": 0, "vector": null, "score": 0}, {"text": "the search query isn't just the prompt", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1077, "tokens": 0, "vector": null, "score": 0}, {"text": "so one really popular way to get better", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1078, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieval augment to generation is you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1079, "tokens": 0, "vector": null, "score": 0}, {"text": "take the prom and then you take that", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1080, "tokens": 0, "vector": null, "score": 0}, {"text": "prompt put it to a large language model", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1081, "tokens": 0, "vector": null, "score": 0}, {"text": "and say what would be the search query", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1082, "tokens": 0, "vector": null, "score": 0}, {"text": "for this and then you send that search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1083, "tokens": 0, "vector": null, "score": 0}, {"text": "query to the vector database to get the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1084, "tokens": 0, "vector": null, "score": 0}, {"text": "context not just sending the prompt", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1085, "tokens": 0, "vector": null, "score": 0}, {"text": "itself to the database so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1086, "tokens": 0, "vector": null, "score": 0}, {"text": "it was like this interesting layer in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1087, "tokens": 0, "vector": null, "score": 0}, {"text": "the middle as well now here's the thing", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1088, "tokens": 0, "vector": null, "score": 0}, {"text": "that I think is really the like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1089, "tokens": 0, "vector": null, "score": 0}, {"text": "mind-blowing future of this is using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1090, "tokens": 0, "vector": null, "score": 0}, {"text": "Gorilla for software integration so you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1091, "tokens": 0, "vector": null, "score": 0}, {"text": "can imagine the natural language command", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1092, "tokens": 0, "vector": null, "score": 0}, {"text": "build me a chat with data from my notion", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1093, "tokens": 0, "vector": null, "score": 0}, {"text": "workspace titled wevia gorilla using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1094, "tokens": 0, "vector": null, "score": 0}, {"text": "llama index and weviate and you have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1095, "tokens": 0, "vector": null, "score": 0}, {"text": "these gorilla models that are that know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1096, "tokens": 0, "vector": null, "score": 0}, {"text": "how to scrape data from notion they know", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1097, "tokens": 0, "vector": null, "score": 0}, {"text": "how to import data into Eva and then", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1098, "tokens": 0, "vector": null, "score": 0}, {"text": "they know how to use the Llama index", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1099, "tokens": 0, "vector": null, "score": 0}, {"text": "query routers across you know within", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1100, "tokens": 0, "vector": null, "score": 0}, {"text": "with the weeviate data index there so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1101, "tokens": 0, "vector": null, "score": 0}, {"text": "you have this kind of natural language", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1102, "tokens": 0, "vector": null, "score": 0}, {"text": "to build out all this software and I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1103, "tokens": 0, "vector": null, "score": 0}, {"text": "think the way that you kind of decompose", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1104, "tokens": 0, "vector": null, "score": 0}, {"text": "the task into particular apis is a huge", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1105, "tokens": 0, "vector": null, "score": 0}, {"text": "step closer to this kind of like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1106, "tokens": 0, "vector": null, "score": 0}, {"text": "autonomous software as we you know our", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1107, "tokens": 0, "vector": null, "score": 0}, {"text": "trading models for the apis of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1108, "tokens": 0, "vector": null, "score": 0}, {"text": "particular software libraries you could", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1109, "tokens": 0, "vector": null, "score": 0}, {"text": "really unpack the box here and think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1110, "tokens": 0, "vector": null, "score": 0}, {"text": "about kind of all open source software", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1111, "tokens": 0, "vector": null, "score": 0}, {"text": "as a you think of all all class is in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1112, "tokens": 0, "vector": null, "score": 0}, {"text": "their functions as apis and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1113, "tokens": 0, "vector": null, "score": 0}, {"text": "you know this kind of I think the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1114, "tokens": 0, "vector": null, "score": 0}, {"text": "integration of Open Source software and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1115, "tokens": 0, "vector": null, "score": 0}, {"text": "science is about to become super", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1116, "tokens": 0, "vector": null, "score": 0}, {"text": "integrated because of the way these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1117, "tokens": 0, "vector": null, "score": 0}, {"text": "large language models are going to be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1118, "tokens": 0, "vector": null, "score": 0}, {"text": "able to test new ideas by using the apis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1119, "tokens": 0, "vector": null, "score": 0}, {"text": "of Open Source software so a lot of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1120, "tokens": 0, "vector": null, "score": 0}, {"text": "stuff there for sure but I think kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1121, "tokens": 0, "vector": null, "score": 0}, {"text": "the interesting thing especially you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1122, "tokens": 0, "vector": null, "score": 0}, {"text": "know as we transition to Guerrilla for", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1123, "tokens": 0, "vector": null, "score": 0}, {"text": "Integrations build me a chat with my", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1124, "tokens": 0, "vector": null, "score": 0}, {"text": "data from my notion workspace blah blah", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1125, "tokens": 0, "vector": null, "score": 0}, {"text": "is how abstract are these instructions", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1126, "tokens": 0, "vector": null, "score": 0}, {"text": "going to be so in the paper they you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1127, "tokens": 0, "vector": null, "score": 0}, {"text": "know give you examples like I would like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1128, "tokens": 0, "vector": null, "score": 0}, {"text": "to identify the objects in an image or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1129, "tokens": 0, "vector": null, "score": 0}, {"text": "I'm going to the zoo and would like to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1130, "tokens": 0, "vector": null, "score": 0}, {"text": "track animals so it's kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1131, "tokens": 0, "vector": null, "score": 0}, {"text": "interesting like whether these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1132, "tokens": 0, "vector": null, "score": 0}, {"text": "instructions are kind of like atomicized", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1133, "tokens": 0, "vector": null, "score": 0}, {"text": "to one model call or if you need to like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1134, "tokens": 0, "vector": null, "score": 0}, {"text": "you know really decompose the task sort", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1135, "tokens": 0, "vector": null, "score": 0}, {"text": "of like you know self-ask multi-hop or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1136, "tokens": 0, "vector": null, "score": 0}, {"text": "this Auto gbt thing where you need to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1137, "tokens": 0, "vector": null, "score": 0}, {"text": "really kind of break apart the task like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1138, "tokens": 0, "vector": null, "score": 0}, {"text": "what are the subtasks it's not just like", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1139, "tokens": 0, "vector": null, "score": 0}, {"text": "one the instruction is just some", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1140, "tokens": 0, "vector": null, "score": 0}, {"text": "immediate task", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1141, "tokens": 0, "vector": null, "score": 0}, {"text": "the next thing the authors kind of talk", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1142, "tokens": 0, "vector": null, "score": 0}, {"text": "about is systems to execute apis during", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1143, "tokens": 0, "vector": null, "score": 0}, {"text": "training and data set generation so you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1144, "tokens": 0, "vector": null, "score": 0}, {"text": "know as as you imagine uh generating the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1145, "tokens": 0, "vector": null, "score": 0}, {"text": "synthetic data would you try to execute", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1146, "tokens": 0, "vector": null, "score": 0}, {"text": "it or when you're evaluating the models", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1147, "tokens": 0, "vector": null, "score": 0}, {"text": "will you execute it and I think this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1148, "tokens": 0, "vector": null, "score": 0}, {"text": "will be you know building these kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1149, "tokens": 0, "vector": null, "score": 0}, {"text": "systems that work in the simulation", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1150, "tokens": 0, "vector": null, "score": 0}, {"text": "during training will be huge for this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1151, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of evolution of program synthesis", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1152, "tokens": 0, "vector": null, "score": 0}, {"text": "using this kind of idea", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1153, "tokens": 0, "vector": null, "score": 0}, {"text": "now this next thing is something that I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1154, "tokens": 0, "vector": null, "score": 0}, {"text": "think is really exciting so I I got this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1155, "tokens": 0, "vector": null, "score": 0}, {"text": "idea from listening to Bob in light uh", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1156, "tokens": 0, "vector": null, "score": 0}, {"text": "speaking at the Llama index webinar", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1157, "tokens": 0, "vector": null, "score": 0}, {"text": "bragging production and you know I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1158, "tokens": 0, "vector": null, "score": 0}, {"text": "worked with Bob on the generative", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1159, "tokens": 0, "vector": null, "score": 0}, {"text": "feedback loops idea and I think this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1160, "tokens": 0, "vector": null, "score": 0}, {"text": "idea is awesome generative feedback", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1161, "tokens": 0, "vector": null, "score": 0}, {"text": "loops are basically this idea of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1162, "tokens": 0, "vector": null, "score": 0}, {"text": "language model transforms the data in", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1163, "tokens": 0, "vector": null, "score": 0}, {"text": "some way and then saves it back in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1164, "tokens": 0, "vector": null, "score": 0}, {"text": "database so say you have you know we", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1165, "tokens": 0, "vector": null, "score": 0}, {"text": "started off with this Airbnb listings", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1166, "tokens": 0, "vector": null, "score": 0}, {"text": "example where Airbnb listings you have", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1167, "tokens": 0, "vector": null, "score": 0}, {"text": "symbolic properties like how much it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1168, "tokens": 0, "vector": null, "score": 0}, {"text": "costs what neighborhood it's in maybe", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1169, "tokens": 0, "vector": null, "score": 0}, {"text": "you know nearby coffee shops or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1170, "tokens": 0, "vector": null, "score": 0}, {"text": "something like that and you would take", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1171, "tokens": 0, "vector": null, "score": 0}, {"text": "those tabular features and then generate", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1172, "tokens": 0, "vector": null, "score": 0}, {"text": "a text description save that text", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1173, "tokens": 0, "vector": null, "score": 0}, {"text": "description back in the vector database", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1174, "tokens": 0, "vector": null, "score": 0}, {"text": "where you vectorize it with like the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1175, "tokens": 0, "vector": null, "score": 0}, {"text": "open Ai embeddings and now you search", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1176, "tokens": 0, "vector": null, "score": 0}, {"text": "through those descriptions of Airbnb", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1177, "tokens": 0, "vector": null, "score": 0}, {"text": "listings there were all sorts of things", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1178, "tokens": 0, "vector": null, "score": 0}, {"text": "you could do generative feedback loops", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1179, "tokens": 0, "vector": null, "score": 0}, {"text": "the most recent example Bob gave in the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1180, "tokens": 0, "vector": null, "score": 0}, {"text": "webinar was process email threads to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1181, "tokens": 0, "vector": null, "score": 0}, {"text": "save summaries which can be searched", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1182, "tokens": 0, "vector": null, "score": 0}, {"text": "through so you know imagine I have a you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1183, "tokens": 0, "vector": null, "score": 0}, {"text": "know a class of emails and it's like you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1184, "tokens": 0, "vector": null, "score": 0}, {"text": "know there's a thread where we're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1185, "tokens": 0, "vector": null, "score": 0}, {"text": "discussing something and then you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1186, "tokens": 0, "vector": null, "score": 0}, {"text": "summarize the thread indexes summary you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1187, "tokens": 0, "vector": null, "score": 0}, {"text": "add symbolic tags like who is a part of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1188, "tokens": 0, "vector": null, "score": 0}, {"text": "the summary yeah I'm sorry a part of the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1189, "tokens": 0, "vector": null, "score": 0}, {"text": "email thread in the conversation but", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1190, "tokens": 0, "vector": null, "score": 0}, {"text": "anyway so", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1191, "tokens": 0, "vector": null, "score": 0}, {"text": "generative feedback loops is about", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1192, "tokens": 0, "vector": null, "score": 0}, {"text": "transforming the data because the the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1193, "tokens": 0, "vector": null, "score": 0}, {"text": "new transformation of the data might be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1194, "tokens": 0, "vector": null, "score": 0}, {"text": "useful like if it's a personalized", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1195, "tokens": 0, "vector": null, "score": 0}, {"text": "advertisement or something like that or", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1196, "tokens": 0, "vector": null, "score": 0}, {"text": "it might be better for a search index", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1197, "tokens": 0, "vector": null, "score": 0}, {"text": "like if you have podcast clips and you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1198, "tokens": 0, "vector": null, "score": 0}, {"text": "summarize the content into the abstract", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1199, "tokens": 0, "vector": null, "score": 0}, {"text": "description of like what was discussed", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1200, "tokens": 0, "vector": null, "score": 0}, {"text": "and then you index that that'll be a", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1201, "tokens": 0, "vector": null, "score": 0}, {"text": "better search index so that's one side", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1202, "tokens": 0, "vector": null, "score": 0}, {"text": "of it and then on the other side of it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1203, "tokens": 0, "vector": null, "score": 0}, {"text": "we have Gorilla so right now what we're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1204, "tokens": 0, "vector": null, "score": 0}, {"text": "thinking about with a gorilla and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1205, "tokens": 0, "vector": null, "score": 0}, {"text": "there'll be a blog post soon more", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1206, "tokens": 0, "vector": null, "score": 0}, {"text": "details on this is just kind of using", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1207, "tokens": 0, "vector": null, "score": 0}, {"text": "the search apis but Guerrilla kind of I", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1208, "tokens": 0, "vector": null, "score": 0}, {"text": "think where this research is headed is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1209, "tokens": 0, "vector": null, "score": 0}, {"text": "it can configure itself it can create", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1210, "tokens": 0, "vector": null, "score": 0}, {"text": "new classes it can maybe even tune the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1211, "tokens": 0, "vector": null, "score": 0}, {"text": "product quantization parameters so it's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1212, "tokens": 0, "vector": null, "score": 0}, {"text": "kind of like this and I I got this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1213, "tokens": 0, "vector": null, "score": 0}, {"text": "phrase from Andy Pavlo who's a brilliant", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1214, "tokens": 0, "vector": null, "score": 0}, {"text": "Professor on databases at Carnegie", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1215, "tokens": 0, "vector": null, "score": 0}, {"text": "Mellon where he calls this self-driving", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1216, "tokens": 0, "vector": null, "score": 0}, {"text": "databases", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1217, "tokens": 0, "vector": null, "score": 0}, {"text": "and I think self-driving databases is", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1218, "tokens": 0, "vector": null, "score": 0}, {"text": "used to describe kind of uh databases", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1219, "tokens": 0, "vector": null, "score": 0}, {"text": "that like automatically optimize their", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1220, "tokens": 0, "vector": null, "score": 0}, {"text": "index structures and I think that's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1221, "tokens": 0, "vector": null, "score": 0}, {"text": "that's probably the missing piece of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1222, "tokens": 0, "vector": null, "score": 0}, {"text": "this gorilla plus generator feedback", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1223, "tokens": 0, "vector": null, "score": 0}, {"text": "loop so I haven't gotten into that part", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1224, "tokens": 0, "vector": null, "score": 0}, {"text": "yet but I think this kind of generative", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1225, "tokens": 0, "vector": null, "score": 0}, {"text": "feedback loops and Guerrilla we're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1226, "tokens": 0, "vector": null, "score": 0}, {"text": "already seeing this kind of autonomous", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1227, "tokens": 0, "vector": null, "score": 0}, {"text": "database the database that takes the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1228, "tokens": 0, "vector": null, "score": 0}, {"text": "data and does all sorts of stuff with it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1229, "tokens": 0, "vector": null, "score": 0}, {"text": "because it has all these different", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1230, "tokens": 0, "vector": null, "score": 0}, {"text": "levers to you know it can query itself", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1231, "tokens": 0, "vector": null, "score": 0}, {"text": "it can import data to itself sort of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1232, "tokens": 0, "vector": null, "score": 0}, {"text": "create new classes and then it can", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1233, "tokens": 0, "vector": null, "score": 0}, {"text": "transform data with these LMS so anyways", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1234, "tokens": 0, "vector": null, "score": 0}, {"text": "those are some of my takeaways I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1235, "tokens": 0, "vector": null, "score": 0}, {"text": "probably from the highest level I think", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1236, "tokens": 0, "vector": null, "score": 0}, {"text": "just the leviate gorilla will facilitate", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1237, "tokens": 0, "vector": null, "score": 0}, {"text": "the learning curve of learning to use", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1238, "tokens": 0, "vector": null, "score": 0}, {"text": "the search apis if you just have to say", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1239, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector search in podcasts you know and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1240, "tokens": 0, "vector": null, "score": 0}, {"text": "then it will just translate that into", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1241, "tokens": 0, "vector": null, "score": 0}, {"text": "the graphql or you know you want to add", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1242, "tokens": 0, "vector": null, "score": 0}, {"text": "a filter like vector search and podcasts", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1243, "tokens": 0, "vector": null, "score": 0}, {"text": "uh published after July 5th 2023 and it", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1244, "tokens": 0, "vector": null, "score": 0}, {"text": "will just add the wear filter for you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1245, "tokens": 0, "vector": null, "score": 0}, {"text": "and we V8 syntax so I think that's", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1246, "tokens": 0, "vector": null, "score": 0}, {"text": "probably the lowest fruit is just", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1247, "tokens": 0, "vector": null, "score": 0}, {"text": "facilitating the learning curve to", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1248, "tokens": 0, "vector": null, "score": 0}, {"text": "learning how to write these kind of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1249, "tokens": 0, "vector": null, "score": 0}, {"text": "query apis but I do think the potential", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1250, "tokens": 0, "vector": null, "score": 0}, {"text": "of this kind of research is just through", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1251, "tokens": 0, "vector": null, "score": 0}, {"text": "the roof thank you so much for watching", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1252, "tokens": 0, "vector": null, "score": 0}, {"text": "this explanation of the Gorilla research", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1253, "tokens": 0, "vector": null, "score": 0}, {"text": "paper if you're interested in this kind", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1254, "tokens": 0, "vector": null, "score": 0}, {"text": "of work we have all sorts of cool things", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1255, "tokens": 0, "vector": null, "score": 0}, {"text": "planned this is hardly the End of This", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1256, "tokens": 0, "vector": null, "score": 0}, {"text": "research on llms that control apis the", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1257, "tokens": 0, "vector": null, "score": 0}, {"text": "weeviate Guerrilla models and all these", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1258, "tokens": 0, "vector": null, "score": 0}, {"text": "exciting things we can do if you're", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1259, "tokens": 0, "vector": null, "score": 0}, {"text": "interested in this research please", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1260, "tokens": 0, "vector": null, "score": 0}, {"text": "subscribe to the channel we'll be", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1261, "tokens": 0, "vector": null, "score": 0}, {"text": "publishing our podcast with shashir and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1262, "tokens": 0, "vector": null, "score": 0}, {"text": "tianjun the original authors of this", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1263, "tokens": 0, "vector": null, "score": 0}, {"text": "paper on Wednesday and please subscribe", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1264, "tokens": 0, "vector": null, "score": 0}, {"text": "generally to the webia YouTube channel", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1265, "tokens": 0, "vector": null, "score": 0}, {"text": "for all kinds of videos and podcasts and", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1266, "tokens": 0, "vector": null, "score": 0}, {"text": "things about this whole world of", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1267, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieve augmented generation Vector", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1268, "tokens": 0, "vector": null, "score": 0}, {"text": "databases and large language models you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1269, "tokens": 0, "vector": null, "score": 0}, {"text": "connect with us find wevian weeva.io", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1270, "tokens": 0, "vector": null, "score": 0}, {"text": "open source on GitHub wev8 weavate or on", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1271, "tokens": 0, "vector": null, "score": 0}, {"text": "Twitter at weba underscore IO thank you", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1272, "tokens": 0, "vector": null, "score": 0}, {"text": "so much for watching I hope you found", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1273, "tokens": 0, "vector": null, "score": 0}, {"text": "this video useful and exciting", "doc_name": "Gorilla LLMs Explained!", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1274, "tokens": 0, "vector": null, "score": 0}]}