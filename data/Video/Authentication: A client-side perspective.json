{"text": "See how to authenticate against Weaviate using various authentication options. See what difference (if any) it might have on ... \nhi there in this short video we'lldiscuss authentication from theclient-side perspectivewe'll show you how you can accesswebiate with various authenticationsetupsto do this we'll use the python clientwith vva instances from vv8 cloudservices which is also called WCSbut please note that the principles arethe same for other clients and we getinstances running in other ways such aswith Docker or kuberneteslet's get started first let's take alook at WCS instances that we'll beusingokay here we are at my WCS dashboard youcan see that I've got three wavy8instances here one of which is astandard cluster and the other two beingsandbox instancesWCS clusters come with differentauthentication options depending on thetypeso let's click on the details buttonhere to see cluster detailsyou see a lot of useful information hereincluding the URL and the webiateversionwhat we want is the authenticationinformation and we can get that byclicking on this button herethat'll show the API Keys now we'll beusing these to log in lateryou'll notice I have hidden mind hereand that's because you should treatthese API Keys like your passwords asthey can be used to provide access tothe corresponding vv8 clusternote that this cluster provides two keysadmin and read only you can probablyguess how they're different but we'llalso show you later onon the other hand this sandbox instantis is set up to not requireauthentication this is obviously notsecure and it's only available forsandboxed instances as an option foreasy experimentationlastly let's look at the other sandboxinstance this one is set up withauthentication this is the defaultoption when you create the sandbox andif we look at the API Keys you'll noticethat it only includes an admin key asthe read-only key is only provided onproduction clustersnow that we have the authenticationinformation let's see how we can usethese with a waviate client to interactwith a waviate server okay I've got aJupiter notebook here to demonstrateconnecting to two of the Wii V8 serversyou saw earlier using variousauthentication methods we'll use thepublic sandbox and the productioninstance that requires authenticationwe'll Define the URLs here like soand let's start with the anonymousaccessthe public instance requires no usercredentials so all we need to access itis the URL which we defined earlier andthe client should be ready to gogreatnow what happens if we try the samething on a non-public instanceyou can see the client throws an erroras it's not able to access the serverand if we look through the error messagewe see that it's due to lack of logincredentialsso let's take a look at how we canprovide these credentialswe'll create multiple instances of theclient here so we can compare them atthe endthe first option we'll look at is usingthe API keywhen we're passing login credentials weneed to pass an additional argumentthrough the auth client secret parameterfor the API key you should use the authAPI key class as shown hereand the key specified as a stringhere I've got it saved as an environmentvariable but you can pass it in any waygenerally it's more secure to have yourscript read keys or passwords like thisor from a file so that they're notexposed in scripts or notebooks thatmight be sharedand now we're able to access theinstance unlike before where there wasan exceptionlet's try the same with username andpasswordthis uses a standard protocol calledoidc or open ID connect which is alittle more complex under the hoodIE instances and WCS are configured toauthenticate users based on their WCScredentials so you can just pass them onlike sonotice here that I'm using a differentclass called auth client password andpassing on my WCS username and passwordthese credentials could be used for anyof my WCS instances whereas each API keywill be unique to that particular webinstance onlyand lastly let's instantiate a clientusing a read-only key you saw earlierthat production instances come with aread-only key so that's the key that I'musing in this example you can see thatjust as before the client is ready to golet's test them out to see if they allwork as they should we'll begin with asimple query we'll set up a dictionaryof the client instances that we'vedefined flu can Loop through themand here we'll just go through the loopto retrieve one object with each clientinstanceand you can see that each one is able toretrieve data from waviate now we'll trywriting to aviate using the same processhere I've got a helper function definedso we can create a class and justconfirm that it's been addedwe delete it again once I've confirmedthat it's been successfully addedwe'll run this function in the loop hereI've also set it up to catch anyexceptions that might get thrown andwhen we run the cell we see that itworks for three out of the fourinstances that we've built but one ofthem throws an exceptionpredictably it's the read-on declinethat's drawn the exception because asthe name suggests it's not allowed tomake modifications to aviate serverthat's it for our demo showing you howto log into or authenticate againstwebiate with the python clientas you saw it's important that you usethe correct authentication configurationto match how the server is set up and byusing the right configuration classesand keep in mind that differentidentities can have different levels ofauthorization or permissions so makesure to authenticate with theappropriate credentials for moreinformation you can also take a look atour documentation to see I can usedifferent clients for authentication orto learn how to create instances on WCSthanks for watching see you next time", "type": "Video", "name": "Authentication: A client-side perspective", "path": "", "link": "https://www.youtube.com/watch?v=I3o93Co1Ezg", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}