{"text": "See how to authenticate against Weaviate using various authentication options. See what difference (if any) it might have on ... \nhi there in this short video we'll discuss authentication from the client-side perspective we'll show you how you can access webiate with various authentication setups to do this we'll use the python client with vva instances from vv8 cloud services which is also called WCS but please note that the principles are the same for other clients and we get instances running in other ways such as with Docker or kubernetes let's get started first let's take a look at WCS instances that we'll be using okay here we are at my WCS dashboard you can see that I've got three wavy8 instances here one of which is a standard cluster and the other two being sandbox instances WCS clusters come with different authentication options depending on the type so let's click on the details button here to see cluster details you see a lot of useful information here including the URL and the webiate version what we want is the authentication information and we can get that by clicking on this button here that'll show the API Keys now we'll be using these to log in later you'll notice I have hidden mind here and that's because you should treat these API Keys like your passwords as they can be used to provide access to the corresponding vv8 cluster note that this cluster provides two keys admin and read only you can probably guess how they're different but we'll also show you later on on the other hand this sandbox instant is is set up to not require authentication this is obviously not secure and it's only available for sandboxed instances as an option for easy experimentation lastly let's look at the other sandbox instance this one is set up with authentication this is the default option when you create the sandbox and if we look at the API Keys you'll notice that it only includes an admin key as the read-only key is only provided on production clusters now that we have the authentication information let's see how we can use these with a waviate client to interact with a waviate server okay I've got a Jupiter notebook here to demonstrate connecting to two of the Wii V8 servers you saw earlier using various authentication methods we'll use the public sandbox and the production instance that requires authentication we'll Define the URLs here like so and let's start with the anonymous access the public instance requires no user credentials so all we need to access it is the URL which we defined earlier and the client should be ready to go great now what happens if we try the same thing on a non-public instance you can see the client throws an error as it's not able to access the server and if we look through the error message we see that it's due to lack of login credentials so let's take a look at how we can provide these credentials we'll create multiple instances of the client here so we can compare them at the end the first option we'll look at is using the API key when we're passing login credentials we need to pass an additional argument through the auth client secret parameter for the API key you should use the auth API key class as shown here and the key specified as a string here I've got it saved as an environment variable but you can pass it in any way generally it's more secure to have your script read keys or passwords like this or from a file so that they're not exposed in scripts or notebooks that might be shared and now we're able to access the instance unlike before where there was an exception let's try the same with username and password this uses a standard protocol called oidc or open ID connect which is a little more complex under the hood IE instances and WCS are configured to authenticate users based on their WCS credentials so you can just pass them on like so notice here that I'm using a different class called auth client password and passing on my WCS username and password these credentials could be used for any of my WCS instances whereas each API key will be unique to that particular web instance only and lastly let's instantiate a client using a read-only key you saw earlier that production instances come with a read-only key so that's the key that I'm using in this example you can see that just as before the client is ready to go let's test them out to see if they all work as they should we'll begin with a simple query we'll set up a dictionary of the client instances that we've defined flu can Loop through them and here we'll just go through the loop to retrieve one object with each client instance and you can see that each one is able to retrieve data from waviate now we'll try writing to aviate using the same process here I've got a helper function defined so we can create a class and just confirm that it's been added we delete it again once I've confirmed that it's been successfully added we'll run this function in the loop here I've also set it up to catch any exceptions that might get thrown and when we run the cell we see that it works for three out of the four instances that we've built but one of them throws an exception predictably it's the read-on decline that's drawn the exception because as the name suggests it's not allowed to make modifications to aviate server that's it for our demo showing you how to log into or authenticate against webiate with the python client as you saw it's important that you use the correct authentication configuration to match how the server is set up and by using the right configuration classes and keep in mind that different identities can have different levels of authorization or permissions so make sure to authenticate with the appropriate credentials for more information you can also take a look at our documentation to see I can use different clients for authentication or to learn how to create instances on WCS thanks for watching see you next time ", "type": "Video", "name": "Authentication: A client-side perspective", "path": "", "link": "https://www.youtube.com/watch?v=I3o93Co1Ezg", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}