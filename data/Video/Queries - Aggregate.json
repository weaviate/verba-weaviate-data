{"text": "Weaviate Academy Unit 2: Aggregate. \nhey there to welcome back \nin this video we'll introduce you to \naggregate queries a powerful way to \ncompile information from multiple \nobjects and gain insights from your data \naggregate queries allow to combined \ninformation from several objects into a \nsingle one providing you with an \noverview of the group \nthis is especially useful when you want \nto extract insights that describe the \nresults set as a whole such as how the \nsearch results might differ from the \nrest of the data set \nthe Syntax for aggregate queries is \nsimilar to get queries but there are \nsome key differences \nlet's take a look at the basic Syntax \nfor an aggregate query \nwith aggregate queries you can retrieve \nwhat we call Meta properties such as the \ncount as well as aggregations of each \nproperties \nnow as you might imagine different \noperations are available to you \ndepending on the data type of the \nproperty \nwhile we could aggregate numbers to \nobtain the mean maximum or the minimum \nwe couldn't do that for texts and \nsimilarly operations like getting count \nof tokens would only be available for \ntexts \nin other words the available \naggregations depend on the data type of \nthe property being queried \nyou can also use Vector search \nparameters like near text in an \naggregate query \nbut because Vector search finds objects \nby degrees of similarity it doesn't \nexclude any objects \nso when performing aggregations with a \nvector search it is crucial that you do \nwhat's called limiting the search Space \nby setting an explicit limit or \nthreshold with the limit or distance \nargument for example \nto further refine your aggregate queries \nyou can use the group by argument \nthis allows you to compile information \nfrom multiple subsets results based on \nspecified properties \nthe aggregate function is a powerful \ntool that helps you to compile and \ninformation from multiple objects \nyou can use it to gain an overview of \nthe search results or even subsets of \nresults whether by themselves or in \ncomparison to the rest of the data set \nyou can use them with Vector search \nparameters as well as filters which \nyou'll learn about in the next section \nand remember that with aggregate queries \nit is very important to limit search \nspace with some sort of a threshold \nthat's it for this video on aggregate \nqueries and waviate \nthanks for watching and we'll see you \nsoon \n", "type": "Video", "name": "Queries - Aggregate", "path": "", "link": "https://www.youtube.com/watch?v=wi3DG6XJkmA", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "hey there to welcome back", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "in this video we'll introduce you to", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate queries a powerful way to", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "compile information from multiple", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "objects and gain insights from your data", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate queries allow to combined", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "information from several objects into a", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "single one providing you with an", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "overview of the group", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "this is especially useful when you want", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "to extract insights that describe the", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "results set as a whole such as how the", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "search results might differ from the", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "rest of the data set", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "the Syntax for aggregate queries is", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "similar to get queries but there are", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "some key differences", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "let's take a look at the basic Syntax", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "for an aggregate query", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "with aggregate queries you can retrieve", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "what we call Meta properties such as the", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "count as well as aggregations of each", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "properties", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "now as you might imagine different", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "operations are available to you", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "depending on the data type of the", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "property", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "while we could aggregate numbers to", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "obtain the mean maximum or the minimum", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "we couldn't do that for texts and", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "similarly operations like getting count", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "of tokens would only be available for", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "texts", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "in other words the available", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregations depend on the data type of", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "the property being queried", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "you can also use Vector search", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters like near text in an", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate query", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "but because Vector search finds objects", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "by degrees of similarity it doesn't", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "exclude any objects", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "so when performing aggregations with a", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search it is crucial that you do", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "what's called limiting the search Space", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "by setting an explicit limit or", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "threshold with the limit or distance", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "argument for example", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "to further refine your aggregate queries", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "you can use the group by argument", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "this allows you to compile information", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "from multiple subsets results based on", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "specified properties", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "the aggregate function is a powerful", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "tool that helps you to compile and", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "information from multiple objects", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "you can use it to gain an overview of", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "the search results or even subsets of", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "results whether by themselves or in", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "comparison to the rest of the data set", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "you can use them with Vector search", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters as well as filters which", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "you'll learn about in the next section", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "and remember that with aggregate queries", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "it is very important to limit search", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "space with some sort of a threshold", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "that's it for this video on aggregate", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "queries and waviate", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "thanks for watching and we'll see you", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "soon", "doc_name": "Queries - Aggregate", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}]}