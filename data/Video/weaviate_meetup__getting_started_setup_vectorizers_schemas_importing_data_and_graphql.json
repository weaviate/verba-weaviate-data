{"text": "00:00 - Introduction 03:57 - Install Weaviate 10:05 - Running Weaviate with Docker 11:57 - Working with a Weaviate schema ... \nso again that is the the golden smith was more to look at the setup schemas importing uh data and working with graphql within wv88 uh again there are other meetups planned as well more deep dives more about horizontal scalability those kind of things the goal of this one is more generic so we're going to look at installation as setup so how you can work with the wv8 i'm going to run an installation i'm going to show you how you can configure an installation we're going to talk about schema because something that is important within vv8 is the uh is the schema we it works for the schema we're going to look at importing data we're going to look at the clients that you can use actually interact with the apis coming out of ev8 and last but not least we're going to look a little bit at the graphql interface um the graphql interface is often used to you know show bf's capabilities um in this situation i'm going to look more at graphql from the perspective of when we create a scheme and if we work with a schema so you might have seen this drawing more often or is this visual and what we try to show with this visual is that um we've hit is not only a tool to work with and secure machinery models it's actually a database on its own so what you see in the center and something that you also see when we go over the installation is that you can also choose to run vf8 standalone we see also some community members do that because for example they have their own vectors or they have very specific models that they want to work with and then the power sits in the fact that you can store both the data object as you can see here with my mouse and the factory representation of the data object how you're representing it and you can choose to or have fifa vectorized data for you so as you can see here we have text factorization we have image factorization we currently have also some community members working on audio we know people working on video but what we now have out of the box is text factorization and image vectorization or you have these other modules for example to connect semantic search or question answering and those kind of things so it's very important to bear in mind so you can you can use we've run we've had standalone but then you have to provide your own vectors to represent your data or you can use one of these modules to represent the data something we will also go over important to bear in mind the the schema that we'll be looking at abbreviate as a class property schema important also to bear in mind that sometimes people refer to it as a graph database which it is not with it is a vector database the focus is on vector search but we've decided to adopt the the graph data model that we get from graphql to represent the data so regardless if you think of vf8 as a a nosql database where you have data objects representing the data or maybe even if you look think a little bit more in in a sequel like structure where every i don't know every row or something has a as a factory presentation we have chosen this representation and the easiest way to think about that is that every data object so what you see here in the yellowish circle with a clause on a property gets a vector representation that you can place that in the vector space well this is a very simplistic one because this is an x y and as you will see later these machine learning models output more complex vectors or more hyperspace vectors or if you want to call them so but that's basically the concept so that's what makes um vivid as a database different so it's not focusing necessarily pure on the nosql part not purely focusing on on the graph part is really focusing on working with these with these vectors so let's dive right in from the perspective of the of the documentation so if you go to vvh documentation this is the page where you start and the first thing that you want to look at is the is the installation and one of the things that we created to install with this and the customize your we've yet set up way more information if you want to go more into kubernetes or the cloud service or what have you you can look at those as well but a nice way to get started is to look at the uh the customizer and the customizer is just a menu where you can exactly walk through to basically configure this image so we start from the perspective of the center so what we've had version do you want to use well needless to say that it always starts with the hand but even with the latest version so we selected abbreviated version then you select the media type so the media type is referring to here what you see with the text factorization or the image vectorization so actually if i click the drop down menu we can see text images text and images or none if i select none i'm basically saying i only want to use this center piece so this is the piece that people are using if they just want to store their data objects and have their own vector representations we're not going to do that so we're going to say like we're going to go for a for a text media type and it automatically asks which one do you want to use so we have two modules here you see text modules and those are in line with the modules you see in the left hand side the text effect modules so we have the contextionary that is based on glove and and or fast text and is only utilizing cpu so this one is often used for for example classification tasks or where speed is of the essence or where gpus are unavailable or we have the transformers um so let's choose the transformers we have a few pre-packaged transformer modules as you can see here so the most used for semantic search however if you have your own transformer model you can use it as well so what you can do is that you can if you go into the so let's go in here so if you go into the menu item of the text effect transformers you can even uh load a publicly available hugging face model into into one of these modules as well but for now we're going to go with the prepackaged modules which means as much as as you will see in a bit that the containers are just we prepared the containers for you so you don't have to do anything then we have for example the q a module as you can see here as well so this is representing this module i'm going to disable that for now we have named entity recognition gonna of disabled as well spell check module i'm going to keep that disabled as well gpu support so if you're running a machine that supports gpu you can just simply enable it um i'm not going to do that because i'm not going to run it locally and i don't have a gpu available on this on this laptop um important to mention for these modules is that even if you want to um you can oh let me accept somebody so what you can do is you can use these basic modules but what you can even do is that you can create custom modules and we will dive a little bit further in what that exactly means but the last meetup from two weeks ago that my colleague laura presented she really dives into these custom modules but i'll say a few words about that in a bit as well and so we're going to keep the gpu support disabled then we have this is a not for community users this is for enterprise users so i'm gonna use disable this as well and then you can use select your desired runtime and i'm running it on my local machine so i'm gonna go for docker compose and what you see that happens is just it outputs a curl command that downloads the docker compose file and what i'm going to do is i'm just going to select this docker compose file just to look at it so that we can quickly look at what's actually happening so what you see here is that wev88 is build so if we go back to this image again everything is packaged in separate containers so the more modules you select that's perfectly fine but the more containers you will be running so here you see of course the the the the core container if you will that is we've ate itself there's some configuration attached to it which of course in the documentation you can find more about that as well but here for example you see that we've chosen the text-to-effect transformers module the image that we pre-packaged that's related to that and we set cuda for gpu to zero and here you see that the inference api is actually here the transformers uh text-to-effect transformers at port 8080 which refers to this one so if i now would go back and if i would say well i'm going to that's going to a previous step and let's say that i'm going to uh well let's enable the spell check module if i now go further and i look at another docker compose file so i'm going to select this as well then you see that in the configurator that's automatically added right so you now see your text spell check the image that's related to that and then you see that besides the transformer inference api um there's also the spell check inference api so the more modules you add the more that it automatically adds here um and here you see actually the modules that they are enabled there's not really a restriction to it what you even can do which is not available to the configurator because it would be a very obscure setup but you could even choose to have multiple inference apis for text-to-fact modules why that is is something that we will look at at the when we look at creating the schema but what i did i already downloaded one of these files so if i now uh look at this file here we go so here you see i've created one i've downloaded a file which has a text effect transformer cuda is disabled um and of course vp itself so if you now currently look at my talker setup which is nothing is running as you can see i can do simply do docker compose up and it will take these um this configuration so sometimes people say like hey these these transformers uh containers are big they are they are over a gigabyte because they contain the actual modules now maybe also nice to look at what's happening here because we sometimes get questions about that as well is that the the messages that um with outputs are as descriptive as possible so here you see for example that we've it is started but that it's waiting in this case for the transformer module to start up which takes some time to boot and then in that container you see that it's running it's running on cpu at some point that's just like okay i'm i'm ready and then you see that we've here just like okay um uh here it says like i could not rebuild the graphql schema which is correct because it's a empty weave gate and then it says okay i'm ready i'm serving with it at port 8080 and localhost which you can simply check by going there so let's go to localhost and then you see this is website also here to the api we try to be as descriptive as possible to describe what's what's happening so for example hey you can look at the meta endpoint to get some basic information but also at the schema endpoint which brings me to the next step in we've had because as we see from the menu that if you now have a weave yet running the most important thing is that you want to create while i say schemas that you want to create a schema and the schema has the class property structure apologies the class property structure that you wanna that you wanna represent and there's a bunch of data types available for properties which we will go over as well but if you go to the restful api endpoint you look at the schema you can for example look at create a class and it's explained exactly what's available what options properties are available there's a simple request available in any language that you like or there's a complete example available we are going to look at the curl example and the reason that i'm doing that is because i want to give you a demo that is a programming language agnostic so this is just purely speaking to the to the api important to know is that although some of the client libraries have specific functionality in them for example to regulate batching and those kind of things um in general everything is happening to the api so the the client libraries are just ways to access the uh the restful api now i prepared something here as well so if you want to write something to the schema as you can see here from the um uh ephron we need to post something to v1 schema and the first thing that we might want to do is that we want to create a clause so let's look at that so we want to create a clause and the clause a class name can be anything any noun or any verb we are about to release a less strict way of defining classes but for currently for now these are words the reason that we use words is because sometimes as you will see in a bit uh people want to use the class names for the property names in the factorization process so let's take for this example let's use the word document important to know every a class can have any you can use any word so any noun that you can think of to describe it and if you can even change chain them for example if you would say like document about cars this would be of oh without the typo this would be a valid class name uh what we've heard would do if you decide to factorize the class name it would just use split these words like this and say okay i'm gonna use the word document about and cars to factorize content next we want we need to give a description so let's say example class and then in the the list of information that we need to provide are the other properties so the properties is an array because as you could see here in this example a class can have one or more properties attached to it if you don't set any you need to set a property because if you don't set any property if there's no metadata available to the uh to the class one thing that you always get automatically and that you don't have to set it with it is a unique identifier with it will always assign an id or you can assign your own id these properties are written with a lower case we kind of adopted that from an rdf kind of way of writing so a class starts with a capital and um a property starts with a with a lowercase so we can say name and then we can say for example title so for example the document has a title now what we also need to do what you can see from the scheme where we need to provide it a data type which i will copy here that's easier the data types that we have available are here so dear all the data types that we have available so string string arrays integers integer arrays etc we also have blob data types and what is important to bear in mind that is the vectorizer that you have chosen needs that information so for example a text vectorizer needs a string or a text data type to to vectorize something but if you for example would have chosen image vectorizer you need to blob data type because you the image that you will provide with it with will be used to create that vector representation so let's keep that to string and then we need to always give it a description so let's also just say here test property now what is in this is the least amount of information that you need to give we've yet um it will take all the default uh settings to to to create these um the class in this case however it is interesting to take a look at a few specific things that we can set and most importantly when it comes to indexing it has to do with the module configuration so the module configurations you can set them it's best to look at that here from the example we can be very specific for example about the vectorizers that we want to choose so let's say that we have a case where we have a text objects and image objects we can actually tell vp8 i want you to factorize one class for example with the with the text effect vectorizer or with an image to fact vectorizer and here this is what i meant with factorized class name you can set that to true or to false so let's just take this information and just put it in so this is what it would look like and what we've now done what we've now done is that we've extended here we go we've extended the configuration a little bit because it now says vectorize class name is to true and i'm going to set that to false what that means is that if i would have a document and i would have a title and the title would be for example the the title of i don't know an article what you would get is the following so you would get a the class document there is the property title and then the title is like let's call it fubar what weave here does is that if i would set this to true what we it would do is that it would actually take literally the word document to create a vector representation of that class name so if i now set this to false it will not take the document anymore so it will only now take the property name and the um and the content that we will add later in the as data in the data object so i can do the same thing here as well so and this by the way needs to be transformer because it's like we're not using a the context scenario transformer and we can do the equivalent for the uh here for the properties so i'm going to copy that as well so here i'm saying let's also put this to false also transformer oh and what this would do is that if we say well we're only going to take the information the data that we're going to store in here to create a factory presentation depends on your use case what you want but we see in practice that actually often these are set to sorry these factorize class name and factorize property name are set to false what does skip mean skip says like do you want this to be part of the um of the vectorization process so let's say for example that i create a second property let's just copy this and i'm going to call that subtitle there might be a situation where i that i want to have these this information there but i did that i want to skip the um the factorization of the subtitle and i don't want to vectorize in this case the word subtitle so now it will only take the data that we're giving as a title to vectorize uh let's see so this by the way this needs to be lowercase i was like why is it red here we go so this for example would create a data object that says like um i'm going to create a a class which is a document that's the description example class the module configuration says like it's focusing on transformers that's the module that we selected that we're running right now we do not want to factorize the class name we have a property that is title and we have another property that is subtitle they both take strings as data types and here we're going to skip the indexing and we're going to not um vectorize the property name let me quickly double check that i set that correctly let's think it is transformers plural let me also see if this is correct there you go yeah so i think this should be correct so if i now gonna i don't know why this has a red underline but basically i'm going to post as the json to the endpoint localhost and then schema so here we go let's see if i made a mistake there and i didn't so what we now can do is that if you go back to weave yet so you see this is the previous one we had schema which has no classes but if you now refresh it you see here we have our document right and it you see it also set some basic um or default configuration but here we said for example factorized class name to false etc let's see if i this should have been transformers okay so here you see how it set that information and now it's important that if i now take this information and i go to the to the console if you go to console.semada technology so i'm now going to quickly jump to the graphql interface i'll go back to the schema but just to show you something what you can do is you can always connect to a vp8 that's running on your localhost so that's just running that's just running on your local machine or review connected to it will never send any data to the cloud it's just um it's just a front-end that you can access the graphql interface easily so if i now connect it and i go to the query module so what you can see is that we've created the class document so if i now go in there and i say get let me increase a little bit you will see that the first class that i now can access is document the one that we just created which has title and which has subtitle and if i now run this query you'll see that it's empty because we haven't added any data now one more thing that i want to show to you related to the um to the schema is that if we now create a new class so we have here document and let's say that we have a paragraph for example example uh graph so we can say let's say that we take also let's say that we have content let's say that is of the data type text so now we say like we have content that is text we're gonna not skip it so skip is false we're gonna not factorize the property name and we're gonna say test property for paragraph but what we now can also do is that we can make a reference to document so how that's often you see that we say in document for example the data type is going to be document because we just we have document so we can say like the data types document um we're gonna not factorize anything related to that and that's property for document craft now if i'm not gonna run this sorry i'll just send it to the restful api here we go if i now refresh my um my current module look what i can do now i can a do again now paragraph is also available and i can say well there was a there's content of the paragraph and in document so this is and then we have the data object of the document and we can also see that if we refresh here the schema now you see the document here but you also see the paragraph here so this is in the most sorry this is in the most basic form a way to create the schema and how you can query through it that brings me to the importing data and the clients so what we see is that a lot of people use the where's my documentation yeah so a lot almost nobody uses the the curl uh uh endpoint i'm just using that to be programming language agnostic so people choose one of these [Music] client libraries to import data we see that a lot of people use the the python client so what you can see is that if you add data which we call you objects actually see so let me go down here so you oh where is it create a data object so have we say like we post to the object's endpoint so here you see for example an example of a data object and then we see here we see the curl equivalent and this is the python equivalent what we do not have inside we've gate but outside vp8 is for example ways to automate batching so weave it does have a restful batching endpoint so that you can add multiple data objects at the same time but for example one of the nice things that's in the python client is that you can say oh no sorry that's actually here apologies so that you can say batch data and then here in python for example you see there are all kinds of methods that you can use method one method two et cetera to automatically um uh create these bad sizes this is a very nice feature this was actually suggested by one of the community members where it automatically determines uh based on the setup of your v8 how many um objects can be can be processed so it automatically scales and and insides and it decreases in size when uh the machine needs some more time to process data for example let me go back to objects so let me create one data object so let's do that from the perspective of curl as well so let me just copy this so what we here do is actually to add something is that we really follow the the structure that we have in our schema so let's say for the sake of argument that we're gonna work with the document so we know we have the class document you can choose to specify your own unique identifier of affiliate do it so i'm gonna just go for uh i just wanna review do it i'm gonna set my title and then this is the title of the demo object and i believe we also had sub title this is the sub title little sub title so here we see that in line with where we here have document and the property title and subtitle i can actually define them right here when i add these data objects so let's go back to the graphql overview if i now run document and i say title subtitle there's no data in there right so it's empty so what i now can do is that i can take this information paste it in maybe it's a little bit nicer if i type that to jq now and what you see that's happening right now is that it added the data object you already see the vector representation that it gave the data object and then you see like it created the clause it returned a 200 code it defined a unique identifier and here you see the the information that i that i added so when i rerun this query you see here is our document and the thing is because we told we've yet that we want to not only use the database but also the text factorization part if i now say show me the um sorry additional from the factory representation then it shows both the factory presentation as you can see as well as the uh the data itself where did it get that vector uh from well it got that vector from the transformer module that we selected i'm going to take one more step so i'm going to step now into our demo data set because otherwise i'll i need to keep adding manually keep adding data objects so if i now go back to our documentation what is handy to know that is if you go to the graphql interface examples you see these green bulbs here where every example query is something that you can try out real time so here you see for example this data set has articles and publications so i give this example quite often so i'm just going to keep it short but here you see like we have publication we have a name we have multiple data objects here all these data objects have these vector representations that they've gotten from the transformers module so now what i can do is something like this something like this so i can say near text let me yeah concepts and then for example megazine about fashion limited to the first result and now it will vectorize based on the text to factorize the query and it will match that against all the factors that we have for in this case publications so if i run that query you see it returns folk and we can even say for folk that that has a factor representation as well so this is the factory presentation in this case representing scroll down all the way focus so that is how the schema is used within we've gate to add data so important as a quick recap so we have chosen in this setup to only work with the text vectorization and of course the vva database itself you can choose multiple modules if you like and these modules what they do is that they add here in for every class they add functionality so to give you a practical example in this data set this data set has a text vectorizer but it also has for example the question answering module enabled and so what the question answering module does is so let's say i can say title i can say summary so this data set contains a few thousand articles so if i say ask ask is enabled by setting the question answering module i can say question and then i can say see i can tell we've yet to find the answer in the summary limited to the first result and bear in mind ask only becomes available if you in the configuration if you've enabled the question answering module you don't have to it's only if you need it and then also this additional feature becomes available which is of course answer and then result and certainty so this is an example of using the q a module over this data set so if i run this query you see that it retains the answer based on all these articles so that's how you based on your use case can decide what kind of modules you like and sometimes we even see people that create our own modules again if you want to create your own module look at the previous meetup video by michael diglara where she explains in detail how that works how you can create your own modules etc let's see if there's more nope that is basically i know i'm talking for 35 minutes already that's basically what i wanted to share so i'm very curious to hear if that if you have any questions based on this presentation thanks for listening by the way i have a question i have a data set which it contains uh basically it's it's a json uh and some of the the classes that i have they have subclasses of it so if i want to make properties out of it how do how do i get childs in my uh in my schema yeah so the the best way to do that is with work with these with these crawfrest and cross references so let me quickly share my screen again and you can make as many cross references as you like so i'm going back to this demo data set with these articles so let me write a very simple query nothing fancy happening here so and this query says as much as like okay show me the first article that you have in the the data set right so here we just have a an article that said the title but as you said you have sub classes now this an article actually also has a subclass because it's in a publication so what we can say now is like in publication on publication and then the name and what you will see if i run this query you see that this is this is an article that was published on fox news and as you can see it is a nested data object and you can even go as far as keep these nets going so you can have like a nested cross reference in your data object which can have another nested data object etc so for example i think here we have for example has articles so then i can even go as far as his article oh yes sorry article apologies and it says title so this is not a nice circular thing so we go from articles we take the first article title we look at the publication that it has which has a name which we know is fox and which has articles again so then we can say okay show me then those articles so if you know you see how that's nested so we have a title which is the in publication folks which has articles again and now if i open that you see the articles that are in here and one more way to show this is that for example if you now look at it from that perspective not from the articles but from the publications you could say for example publication name now let me also say like limit one so you say and that's again that's fox so now i can also see here it has articles home article so that is how you can how you can chain them together what's also nice to know is that you can even use these vector searches within them so for example the publication example that i showed with uh folk for example if when i say okay concepts and then seeing about fashion and then i say limited uh limited to the first result so what you will see here that let me close this so it shows folk and then it shows actually the articles that are in vogue so here you see all kinds of fashion related articles so hopefully that answers the question any other question that i can answer silence on the goal we got uh unview myself here so you were saying that laura two weeks ago gave a custom modules meetup and in the future you're going to talk about horizontal scaling is that kind of the access to information uh sorry one more time the last part of the of the of the question so yeah you mentioned uh laura had done the the custom modules before that's already available but the or you would also talk about horizontal scaling and yes that in the future that that doesn't exist right now in oh yeah you can actually so let me share my screen again so the um in the document documentation so if you go to uh custom modules you can actually see there's a video so that's from two weeks ago where lara is presenting how you can create custom modules the if you look at the architecture and the roadmap there's a video from my colleague achen talking about the deep dive and the complete roadmap two weeks from now there will also be a meetup that's only about horizontal scalability and i believe that even the first uh release candidate will be presented in two weeks for for a horizon scalability so we aim to have horizontal scalability available in in just a few weeks from now perfect thank you very welcome any other questions that i can answer in that case if there are no other questions then um the last thing for me to say is like thank you very much for your time um thank you for listening um you can come on our slack channel if you like so there's like a lot of people on the slack channel where you can ask questions where you can interact with with the team you of course also have the uh the documentation that i just showed you everything is available to the website everything is part of the open source package so um we're looking very much forward to here the the things that you're building with wv88 and again that well thank you so much for uh for listening and have a nice rest of the day or nice evening depending on where you are in the world but thank you so much see you next time everybody thank you bye bye thanks ", "type": "Video", "name": "weaviate_meetup__getting_started_setup_vectorizers_schemas_importing_data_and_graphql", "path": "", "link": "https://www.youtube.com/watch?v=L0Y_zZR8FRI", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}