{"text": "Learn about the Weaviate 1.22 release highlights. This 5-minute video provides an overview of nested object storage, ... \nhello and welcome I'm thrilled to dive into W 1.22 which has just been released it includes a number of very exciting features to drive usability and performance even further let's take a look together one 122 add the ability to sort nested objects and introduce asynchronous Spector indexing also the grpc support is Now official and a beta of the brand new V4 python client has been released which is very very exciting there's a lot of great stuff here so let's get into the details starting with the nested object storage this change introduces two new data type to weate for individual objects and arrays of objects and let me explain why that matters without nested objects you get flat structures like this where all properties are on the same level it also means that the data needs to look like this where all keys at the same level as each other a challenge with this is that in reality data often looks like this you see here that the city and street name are both stored at the second level under a key called address data structure like this cannot be stored in a flat structure without some modifications so we introduce these property data types that allow nesting each of them can have their own nested properties which can in turn be whatever data types also you can still use the auto schema feature to infer nested properties which might be great for convenience although as always manual definition would give you the most control now given that this is the first iteration of this feature there are some limitations in 1.22 at the moment data stored in these object data types don't affect the vector and they're not yet indexed either which means they can't be used for filtering we're looking to add this feature so if this is important please uplo the feature on our GitHub issues asynchronous Vector indexing is next so what makes it asynchronous let's start by looking at synchronous Vector indexing under synchronous indexing each requested data looks like this for wave8 it would receive the request create the data objects add them to the vector index and then send the response back to the client the challenges with this process is that we8 has to do a lot so even though we8 is very fast if you're dealing with tens of millions objects this can be a long process or if you send a lot of data in a particular batch the request might even timeout with the new asynchronous indexing weia just creates data objects before sending back a response and the vector indexing process is now in the background it provides these benefits in that the database is now ready faster and individual timeouts less likely now this is an experimental feature so it's not quite ready for prime time of production but if you do want to try it out you can opt in by setting the async indexing to true and if you're wondering what happen happens to search it's handled by searching what has already indexed plus up to 100,000 objects using Brute Force 122 also makes grpc support official which is all about speed more specifically it'll mean faster batch Imports and get queries for users how does it do that well the secret source is the fact that GPC uses http2 under the hood which is a faster protocol than 1.1 and it uses binary payloads which is more efficient than Jing Jon on if you want to use GPC you can check out the protocol buffers in the W repository in GitHub or you can use the new V4 python client which has the grpc support built in we'll of course be adding support to the other clients as well as we go too now that brings us to the V4 python client there are lots of changes here and some of the key ones are improved developer experience and faster speeds reviewing the API was the big motivation for us with a V4 client and I think we've done that with a new more pythonic API this is an example of the old syntax to define a class used a dictionary like this and this is what the equivalent code looks like with a new syntax you'll notice a lot of python classes and functions which provide a lot more help from Modern Ides and you'll notice that there are no more raw dictionaries queries have also become simpler here's a near text query with the all the V3 client and now here's the same query with the new client it looks neater and from experience I can tell you that it's much easier to use keep in mind that it is a Beta release so we want to hear from you about them we've got a feedback thread on our forum and we'd love to hear from you about issues big and small or just for you to tell us how much you loved it and that's it we8 1.22 is available as open source software for you to run yourself or through various Cloud deployment options thank you for watching and see you soon ", "type": "Video", "name": "Weaviate 1.22 Release Highlights", "path": "", "link": "https://www.youtube.com/watch?v=ubfKqkjiBn4", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}