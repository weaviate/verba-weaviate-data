{"text": "Weaviate Vector Database Demo by Bob van Luijt \u2022 Retrieval Augmented Generation \u2022 Vector Search & Hybrid Search ... \nhello everybody we are going to look at the retrieval augmented generation demo based on the weavate factor database a generative model and a vectorization model and we're going to look at a concept called generative feedback loops that are you know closely related to Rack it is described in this blog post we're going to use Airbnb data and that's also in this blog post so everything that I'm about to show you is something you can try out yourself as well this is the Vivid console so this is where you can connect to a V8 instance that's running on the Vivid cloud service I'm going to use graphql to search through the data set but you can also use Python JavaScript Java go whatever you like so let's look at what we have here in this data set so this data set contains Airbnb listings so a UC bunch here so here like the host name the name the neighborhood the price room type and those kind of things but one thing that you might notice is that there's no description and that's on purpose because this data set simply does not contain descriptions so one thing that we can do is that we can apply rack and rack works something like this so we have a module inviator does it for you so here we go so generate and then we say we want to see a single result so that means rather than doing all of the results we go one by one and then we say for the single result we give it a prompt and the prompt is I've prepared this here this is the The Prompt we're going to use so I just copy this in and basically we're saying like here write a short Airbnb description for the listing and this is how we Define the property name so that is related to this name and then we say like include the name of the host etc etc and let's do that for the first three just to get an understanding of what's actually happening so let's run that query and see what happens so what you see here is actually rag in action so now we have the um here we have the listing and now we have a result that is generated based on that listing right so it's a nice listing um a description based on this you know sparse set of information that we've given it but the problem is or well not the problem but the interesting situation is that this is like a one-way Street ride because we basically pipe the results through the generative model and get this back but the cool thing is if you can actually store that back in our database and search over it so um there's a way to do it and we've hit it's very simple and here I have a python example so you see here I have the exact same um uh prompt and this is basically a little you know snippet of python go to update all the listings with generated content so let's run that and see what happens so let's go back here and now the thing is we can remove this complete section because we don't need it and let's run that same query as we did before let's remove the limit so here we go so as you can see here we now have these listings but they are now stored in the description field and this is where the vectorization module of review it kicks in because let's look at the first listing and now we can actually say well did this listing at a vector embedding and then I should see the answer is yes so this first listing if we scroll all the way down this is the vector embedding that we've given to this listing so what we can do with that is that we now can do Vector search so let's do a hybrid search where we combine uh um a the vector index with the beam 25 index and let's search for let me think a cozy place near a park too oh my dog right so what's going to happen when I hit search is basically that the query gets vectorized it's simultaneously simultaneously does effective search in a hybrid search and it will return some result so here we go so now you see it Returns the result where it says welcome to John's clean inquiry Department located by the beautiful Park etc etc so this is probably a good result but the cool thing here is that we've now been able to do Vector search over a description that was not in the original data set but we can actually you know keep you know going so now we can basically take the generated description and we can do another rack search so there we go generate single result let's go here single result and then we go to prompt and then we can say something like um oh here we go we can say something like I don't know why is the following a good uh listing to my dog something like I don't know something like that right and then we're basically going to say we want the description so we're going to get the description and now if you run this we're basically gonna again vectorize the query get this data object back and then use the generated content to try to get this question answered so let's see what happens here we go so now we get back as you can see the same result but it also gives an answer this lesson is good option for working your dog because one the apartment is located near a beautiful Park well etc etc so this is an example of using the vector database doing Vector search and applying retrieval augmented generation or rank plus we've now introduced this concept of generative feedback loops where we basically store the data that's coming out of rack back into the database so that we can search over it um I hope this was helpful and I'm looking forward to see what you will build with vv8 and these models and these modules ", "type": "Video", "name": "Weaviate Demo \u2013 Retrieval Augmented Generation \u2022 Vector Search \u2022 Generative Feedback Loops", "path": "", "link": "https://www.youtube.com/watch?v=VAxrREiugxQ", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": []}