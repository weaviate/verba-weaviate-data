{"text": "Weaviate Academy Unit 2: A Look Inside. \nhey and welcome back \nin this section let's dive deeper into \nVector searches to see how wavy it helps \nto make the magic happen behind the \ncurtains \nwe've covered a lot of ground in this \nunit already \nwe've learned how to use get and \naggregate functions to retrieve objects \nor compile information \nyou've seen different ways of Performing \nVector searches like near Vector a new \nobject and near text and learn how to \nuse filters such as wear limit and \noffset \nnow let's take a moment to explore the \nvector search process in a little bit \nmore detail \nyou might have noticed that even though \nall three of them near Vector new object \nand near text are vector search \nparameters you don't actually provide a \nvector to aviate with near object or \nnear text \nbut regardless of whether you use near \nVector near object or near text the \nactual search is always based on a \nvector \nthe difference with new object or near \ntext is that the input is converted to a \nvector by waviate \nwhen using the near object parameter \nwaviate retrieves the associated Vector \nfor the object which then becomes the \ninput vector \non the other hand when using the near \ntext parameter where the 8 converts the \ninput text to a vector based on the \napplicable vectorizer module \ndepending on your settings it might be \nusing an external API or a local model \nwe'll cover more on vectorizers very \nsoon but for now just know that they are \nwhat we V8 uses to convert objects like \ntext or image to a vector \nyou'll see in this section a \ndemonstration of this by taking near \nobject or near text searches and \nconverting them to equivalent near \nVector searches \nand we also talked about filtering \nbut when does the filtering exactly \nhappen \ndoes wavy feel to the data before the \nvector search or after \nwe V8 implements pre-filtering \nwhat this means is that the specified \nfilters are applied first result in an \nallowed list of objects \nthe vector search then Returns the most \nrelevant objects from this allow list \nthis approach combined with efficient \nfiltering methods enables wevia to \nreturn the right number of results and \nfast \neven when restrictive built is applied \nto large databases \nso a visualization of the vector search \nprocess might look something like this \nan input is provided containing filters \nand Vector search parameters \nwith the filters wavier performs a \npre-filtering step to obtain an allow \nlist of objects on the other hand the \nvector search parameter is used to \ndetermine an input Vector which may \ninvolve an additional step such as \nretrieving the object's Vector with near \nobject or vectorizing the input text \nwith near text \nthe input Vector is then used to perform \na vector search from the objects in the \nallow list \nreturning the most relevant objects or \nan aggregation to the user \nnow this is something of an \nsimplification but hopefully this gives \nyou a good mental model of how a vector \nsearch works in leviate in terms of both \nhow filtering Works in conjunction with \nthe vector search and how those Vector \nsearch parameters work \nthat's it for this video thanks for \nwatching and we'll see you soon \n", "type": "Video", "name": "Queries - A Look Inside", "path": "", "link": "https://www.youtube.com/watch?v=HTCENuuK3FU", "timestamp": "", "reader": "JSON", "meta": {}, "chunks": [{"text": "hey and welcome back", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 0, "tokens": 0, "vector": null, "score": 0}, {"text": "in this section let's dive deeper into", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 1, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector searches to see how wavy it helps", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 2, "tokens": 0, "vector": null, "score": 0}, {"text": "to make the magic happen behind the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 3, "tokens": 0, "vector": null, "score": 0}, {"text": "curtains", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 4, "tokens": 0, "vector": null, "score": 0}, {"text": "we've covered a lot of ground in this", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 5, "tokens": 0, "vector": null, "score": 0}, {"text": "unit already", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 6, "tokens": 0, "vector": null, "score": 0}, {"text": "we've learned how to use get and", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 7, "tokens": 0, "vector": null, "score": 0}, {"text": "aggregate functions to retrieve objects", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 8, "tokens": 0, "vector": null, "score": 0}, {"text": "or compile information", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 9, "tokens": 0, "vector": null, "score": 0}, {"text": "you've seen different ways of Performing", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 10, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector searches like near Vector a new", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 11, "tokens": 0, "vector": null, "score": 0}, {"text": "object and near text and learn how to", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 12, "tokens": 0, "vector": null, "score": 0}, {"text": "use filters such as wear limit and", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 13, "tokens": 0, "vector": null, "score": 0}, {"text": "offset", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 14, "tokens": 0, "vector": null, "score": 0}, {"text": "now let's take a moment to explore the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 15, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search process in a little bit", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 16, "tokens": 0, "vector": null, "score": 0}, {"text": "more detail", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 17, "tokens": 0, "vector": null, "score": 0}, {"text": "you might have noticed that even though", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 18, "tokens": 0, "vector": null, "score": 0}, {"text": "all three of them near Vector new object", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 19, "tokens": 0, "vector": null, "score": 0}, {"text": "and near text are vector search", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 20, "tokens": 0, "vector": null, "score": 0}, {"text": "parameters you don't actually provide a", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 21, "tokens": 0, "vector": null, "score": 0}, {"text": "vector to aviate with near object or", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 22, "tokens": 0, "vector": null, "score": 0}, {"text": "near text", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 23, "tokens": 0, "vector": null, "score": 0}, {"text": "but regardless of whether you use near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 24, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector near object or near text the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 25, "tokens": 0, "vector": null, "score": 0}, {"text": "actual search is always based on a", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 26, "tokens": 0, "vector": null, "score": 0}, {"text": "vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 27, "tokens": 0, "vector": null, "score": 0}, {"text": "the difference with new object or near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 28, "tokens": 0, "vector": null, "score": 0}, {"text": "text is that the input is converted to a", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 29, "tokens": 0, "vector": null, "score": 0}, {"text": "vector by waviate", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 30, "tokens": 0, "vector": null, "score": 0}, {"text": "when using the near object parameter", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 31, "tokens": 0, "vector": null, "score": 0}, {"text": "waviate retrieves the associated Vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 32, "tokens": 0, "vector": null, "score": 0}, {"text": "for the object which then becomes the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 33, "tokens": 0, "vector": null, "score": 0}, {"text": "input vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 34, "tokens": 0, "vector": null, "score": 0}, {"text": "on the other hand when using the near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 35, "tokens": 0, "vector": null, "score": 0}, {"text": "text parameter where the 8 converts the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 36, "tokens": 0, "vector": null, "score": 0}, {"text": "input text to a vector based on the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 37, "tokens": 0, "vector": null, "score": 0}, {"text": "applicable vectorizer module", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 38, "tokens": 0, "vector": null, "score": 0}, {"text": "depending on your settings it might be", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 39, "tokens": 0, "vector": null, "score": 0}, {"text": "using an external API or a local model", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 40, "tokens": 0, "vector": null, "score": 0}, {"text": "we'll cover more on vectorizers very", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 41, "tokens": 0, "vector": null, "score": 0}, {"text": "soon but for now just know that they are", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 42, "tokens": 0, "vector": null, "score": 0}, {"text": "what we V8 uses to convert objects like", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 43, "tokens": 0, "vector": null, "score": 0}, {"text": "text or image to a vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 44, "tokens": 0, "vector": null, "score": 0}, {"text": "you'll see in this section a", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 45, "tokens": 0, "vector": null, "score": 0}, {"text": "demonstration of this by taking near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 46, "tokens": 0, "vector": null, "score": 0}, {"text": "object or near text searches and", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 47, "tokens": 0, "vector": null, "score": 0}, {"text": "converting them to equivalent near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 48, "tokens": 0, "vector": null, "score": 0}, {"text": "Vector searches", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 49, "tokens": 0, "vector": null, "score": 0}, {"text": "and we also talked about filtering", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 50, "tokens": 0, "vector": null, "score": 0}, {"text": "but when does the filtering exactly", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 51, "tokens": 0, "vector": null, "score": 0}, {"text": "happen", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 52, "tokens": 0, "vector": null, "score": 0}, {"text": "does wavy feel to the data before the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 53, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search or after", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 54, "tokens": 0, "vector": null, "score": 0}, {"text": "we V8 implements pre-filtering", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 55, "tokens": 0, "vector": null, "score": 0}, {"text": "what this means is that the specified", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 56, "tokens": 0, "vector": null, "score": 0}, {"text": "filters are applied first result in an", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 57, "tokens": 0, "vector": null, "score": 0}, {"text": "allowed list of objects", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 58, "tokens": 0, "vector": null, "score": 0}, {"text": "the vector search then Returns the most", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 59, "tokens": 0, "vector": null, "score": 0}, {"text": "relevant objects from this allow list", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 60, "tokens": 0, "vector": null, "score": 0}, {"text": "this approach combined with efficient", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 61, "tokens": 0, "vector": null, "score": 0}, {"text": "filtering methods enables wevia to", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 62, "tokens": 0, "vector": null, "score": 0}, {"text": "return the right number of results and", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 63, "tokens": 0, "vector": null, "score": 0}, {"text": "fast", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 64, "tokens": 0, "vector": null, "score": 0}, {"text": "even when restrictive built is applied", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 65, "tokens": 0, "vector": null, "score": 0}, {"text": "to large databases", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 66, "tokens": 0, "vector": null, "score": 0}, {"text": "so a visualization of the vector search", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 67, "tokens": 0, "vector": null, "score": 0}, {"text": "process might look something like this", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 68, "tokens": 0, "vector": null, "score": 0}, {"text": "an input is provided containing filters", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 69, "tokens": 0, "vector": null, "score": 0}, {"text": "and Vector search parameters", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 70, "tokens": 0, "vector": null, "score": 0}, {"text": "with the filters wavier performs a", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 71, "tokens": 0, "vector": null, "score": 0}, {"text": "pre-filtering step to obtain an allow", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 72, "tokens": 0, "vector": null, "score": 0}, {"text": "list of objects on the other hand the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 73, "tokens": 0, "vector": null, "score": 0}, {"text": "vector search parameter is used to", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 74, "tokens": 0, "vector": null, "score": 0}, {"text": "determine an input Vector which may", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 75, "tokens": 0, "vector": null, "score": 0}, {"text": "involve an additional step such as", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 76, "tokens": 0, "vector": null, "score": 0}, {"text": "retrieving the object's Vector with near", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 77, "tokens": 0, "vector": null, "score": 0}, {"text": "object or vectorizing the input text", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 78, "tokens": 0, "vector": null, "score": 0}, {"text": "with near text", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 79, "tokens": 0, "vector": null, "score": 0}, {"text": "the input Vector is then used to perform", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 80, "tokens": 0, "vector": null, "score": 0}, {"text": "a vector search from the objects in the", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 81, "tokens": 0, "vector": null, "score": 0}, {"text": "allow list", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 82, "tokens": 0, "vector": null, "score": 0}, {"text": "returning the most relevant objects or", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 83, "tokens": 0, "vector": null, "score": 0}, {"text": "an aggregation to the user", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 84, "tokens": 0, "vector": null, "score": 0}, {"text": "now this is something of an", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 85, "tokens": 0, "vector": null, "score": 0}, {"text": "simplification but hopefully this gives", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 86, "tokens": 0, "vector": null, "score": 0}, {"text": "you a good mental model of how a vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 87, "tokens": 0, "vector": null, "score": 0}, {"text": "search works in leviate in terms of both", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 88, "tokens": 0, "vector": null, "score": 0}, {"text": "how filtering Works in conjunction with", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 89, "tokens": 0, "vector": null, "score": 0}, {"text": "the vector search and how those Vector", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 90, "tokens": 0, "vector": null, "score": 0}, {"text": "search parameters work", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 91, "tokens": 0, "vector": null, "score": 0}, {"text": "that's it for this video thanks for", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 92, "tokens": 0, "vector": null, "score": 0}, {"text": "watching and we'll see you soon", "doc_name": "Queries - A Look Inside", "doc_type": "Video", "doc_uuid": "", "chunk_id": 93, "tokens": 0, "vector": null, "score": 0}]}